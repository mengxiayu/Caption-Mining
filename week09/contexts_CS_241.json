[
  {
    "text": "mutex lock",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "se so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make it a g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ion here ok how do you feel about this so before doing any work in my data structure i'm going to grab the duck here so how do i do that as a pthread mutex lock and here's the address of my variable here it is ok and right if we go and we'll see what happens now so let's clear this compile run it oh it never ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " finished can you see why ok so our problem was that we acquired the lock but we never let it go so when the second thread starts and calls preferred mutex locked it's going to be waiting for a very long time an infinite amount of time it never gets that duck that duck has been stolen by the first red and nev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " to only acquire my doc for a very short period of time case so now i'm going to rap each call to before i change the counter i'm going to acquire my mutex lock so now right we will k von function three so for a million times we acquire the lock we had wanted to counter and then we unlock the duck ok so let's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hreads two cpus actually trying to read a right to the same piece piece of memory what if that value was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " called memory fence what memory barrier we're not going to write code that does not explicitly instead we're just kind of allowing the factor period mutex lock makes our world saying again makes our programs be equal to all the process is i've actually running at least that's what it appears to be like that ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "mory ok with some of course slight slight loss in performance when we do that ok so that's our first example of of contrived example of using petered mutex lock and i hope you can see it's very simple to use and it immediately makes our programs behave as we'd like them to behave meaning that we actually saw ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "f ways you can do that guess what you can say pthread mutex iniciat and pass in a lock and one of the great things about pizza it's implementation of mutex locks is that we can actually pass in a few attributes like we can set it up to debug we can actually create recursive locks but i'm going to anyway we're",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "matically initialize at that point so you can choose one of these but don't choose both particular mutex right so how can i find out more about these mutex locks well guess what the i've got a lot of information inside my manual for example i could all this stuff about the p threads and what i can do in a det",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many parameters this was really easy we just take the address or mutex object ok so the definition her",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "utex is already locked the calling third will block until the mutex becomes available ok so let's write this out as an example so i've got my pthread mutex lock here and i pass in the address of my little object here called lock right and then i go off and do my critical section stuff so do critical section s",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "of these see objects right so file f open this is not actual father spain stored on disk it's just the variable and it's the same idea with this this mutex lock its represents a mutex but it's not the attribute x itself ok see what else do you want to say right so you call peter mutex lock and we get to conti",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "idea with this this mutex lock its represents a mutex but it's not the attribute x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lf ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to wait it's called preferred mutex lock is blocked so right so we know for sure that this coal here either continues if no one els",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to wait it's called preferred mutex lock is blocked so right so we know for sure that this coal here either continues if no one else has the log right now and if it continues then you have a",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " it guarantees you that there's only one thread at a time that can acquire the lock so only zero threads are one third of the time now the piece that mutex lock doesn't do anything special other than that it doesn't bless your code in the middle it doesn't declare to the compiler that something wonderful is a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ou to continue if no one else has acquired that look and only one thread at a time even if two threads at exactly the same clock cycle call preferred mutex locked even if even in that extreme case only one of them is guaranteed to win of course this arbitrary as to which one wins but ensures that we have now ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "se so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make it a g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ion here ok how do you feel about this so before doing any work in my data structure i'm going to grab the duck here so how do i do that as a pthread mutex lock and here's the address of my variable here it is ok and right if we go and we'll see what happens now so let's clear this compile run it oh it never ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " finished can you see why ok so our problem was that we acquired the lock but we never let it go so when the second thread starts and calls preferred mutex locked it's going to be waiting for a very long time an infinite amount of time it never gets that duck that duck has been stolen by the first red and nev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "y acquire my doc for a very short period of time ok so now i'm going to rap each call navigate to before i change the counter i'm going to acquire my mutex lock so now right we will k von function three so for a million times we acquire the lock we had wanted to counter and then we unlock the duck ok so let's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hreads two cpus actually trying to read a right to the same piece piece of memory what if that value was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " called memory fence what memory barrier we're not going to write code that does not explicitly instead we're just kind of allowing the factor period mutex lock makes our world saying again makes our programs be equal to all the process is i've actually running at least that's what it appears to be like that ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "mory ok with some of course slight slight loss in performance when we do that ok so that's our first example of of contrived example of using petered mutex lock and i hope you can see it's very simple to use and it immediately makes our programs behave as we'd like them to behave meaning that we actually saw ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "f ways you can do that guess what you can say pthread mutex iniciat and pass in a lock and one of the great things about pizza it's implementation of mutex locks is that we can actually pass in a few attributes like we can set it up to debug we can actually create recursive locks but i'm going to anyway we're",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "matically initialize at that point so you can choose one of these but don't choose both particular mutex right so how can i find out more about these mutex locks well guess what the i've got a lot of information inside my manual for example i could all this stuff about the p threads and what i can do in a det",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many parameters this was really easy we just take the address or mutex object ok so the definition her",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "utex is already locked the calling third will block until the mutex becomes available ok so let's write this out as an example so i've got my pthread mutex lock here and i pass in the address of my little object here called lock right and then i go off and do my critical section stuff so do critical section s",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "of these see objects right so file f open this is not actual father spain stored on disk it's just the variable and it's the same idea with this this mutex lock its represents a mutex but it's not the attribute x itself ok see what else do you want to say right so you call peter mutex lock and we get to conti",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "idea with this this mutex lock its represents a mutex but it's not the attribute x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lf ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to wait it's called preferred mutex lock is blocked so right so we know for sure that this coal here either continues if no one els",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to wait it's called preferred mutex lock is blocked so right so we know for sure that this coal here either continues if no one else has the log right now and if it continues then you have a",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " it guarantees you that there's only one thread at a time that can acquire the lock so only zero threads are one third of the time now the piece that mutex lock doesn't do anything special other than that it doesn't bless your code in the middle it doesn't declare to the compiler that something wonderful is a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ou to continue if no one else has acquired that look and only one thread at a time even if two threads at exactly the same clock cycle call preferred mutex locked even if even in that extreme case only one of them is guaranteed to win of course this arbitrary as to which one wins but ensures that we have now ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ecture thirteen. so in this lecture we're going to start talking about thread safety and in particular we're going to start looking at how we can use mutex locks to ensure that only one thread of the time alters our data structure. or if we are modifying a data structure another thread can't read it. ok so le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "nitely give each one its own memory malloc is what's called thread safe and how does it do that with something we're going to talk about today called mutex locks we actually we could do it with other ways but mutex locks would work if you implement malloc for a real programmer is multithreaded you two would n",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " thread safe and how does it do that with something we're going to talk about today called mutex locks we actually we could do it with other ways but mutex locks would work if you implement malloc for a real programmer is multithreaded you two would need mutex logs or somebody equivalent mechanism some other ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " at some race conditions and we will check to see if we can actually make these race conditions occur and then maybe we can figure out how to use our mutex locks to fix them right so here's a story so far i've got my little main method doesn't do much it creates irwan thread here for under one and another thr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " entity point of those points are going to be where we want to lock the dark and unlock the duck literally like a gatekeeper so we want to say peered mutex lock here's my duck ok and ok so and then after that unlock it wait and similarly with the other thread runner we want to lock it and then only allow othe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "seconds we start creating dinosaur messages but you can see they no longer impacts our text messages so great we've written our first program using a mutex lock we use them after we identify the critical sections and when we implemented it correctly we can ensure that there's no more race conditions in our co",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "nother mutex i will call this one a banana ok right and now when i want to my dinah 's little text messages to be created i'm going to use this other mutex lock ok so what do you think about that before we got up to see like two hundred thousand messages so let's run this now and oh we have a problem again so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "blem again so you can see that my dinosaurs corrupting my text messages to angrave right why was that well yes we now have two text messages so two t mutex locks but when no longer preventing two threads from going into the two text message at the same time so it's a bit like you've got a club now bounces let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " at the same time so it's a bit like you've got a club now bounces letting people in from two different doors we didn't want that we we just need one mutex lock in this case in order to ensure that we've implemented r r code inside the critical section correctly ok so let's go remove the banana and go back to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "se so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make it a g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ion here ok how do you feel about this so before doing any work in my data structure i'm going to grab the duck here so how do i do that as a pthread mutex lock and here's the address of my variable here it is ok and right if we go and we'll see what happens now so let's clear this compile run it oh it never ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " finished can you see why ok so our problem was that we acquired the lock but we never let it go so when the second thread starts and calls preferred mutex locked it's going to be waiting for a very long time an infinite amount of time it never gets that duck that duck has been stolen by the first red and nev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "y acquire my doc for a very short period of time ok so now i'm going to rap each call navigate to before i change the counter i'm going to acquire my mutex lock so now right we will k von function three so for a million times we acquire the lock we had wanted to counter and then we unlock the duck ok so let's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hreads two cpus actually trying to read a right to the same piece piece of memory what if that value was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " called memory fence what memory barrier we're not going to write code that does not explicitly instead we're just kind of allowing the factor period mutex lock makes our world saying again makes our programs be equal to all the process is i've actually running at least that's what it appears to be like that ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "mory ok with some of course slight slight loss in performance when we do that ok so that's our first example of of contrived example of using petered mutex lock and i hope you can see it's very simple to use and it immediately makes our programs behave as we'd like them to behave meaning that we actually saw ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ok right so let's see if you can remember something about our mutex locks remember we're using the posix library the patriots and they come with four important course here they are initiate lock unlock and destroy right so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " calls may take a very long time my gauge you know ok if you said look you are correct right so when can add occur when can it be that we call putrid mutex lock and it doesn't return immediately so that will happen when another thread has locked the mutex so i like to joke about our mutex locks being a little",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " we call putrid mutex lock and it doesn't return immediately so that will happen when another thread has locked the mutex so i like to joke about our mutex locks being a little duck when you call look here's what's going to happen you're trying to grab dot trying to take it it's mine right now and you get to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ntly has acquired the duck so it gets to continue straight away key meanwhile on another cpu another thread is running and they call lock on the same mutex lock ok can they carry on and execute their next piece of code no there blocked there stuck in effect that cpu goes to sleep in practice the kernel can sa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "and in doing so it acquires that mutex it's going to grab it and say ha it's mine now and it can continue and eventually someday it will release that mutex lock as well hold on a moment supposed with the thread that also try to lock so say somewhere inside here it called lock so now i've got two threads that ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "b that duck unless you have acquired the mutex right so i think we've answered nearly all of these questions what about this one why is it that peter mutex lock does not block ok this one should be easy for you to answer we've already seen it that was our case when thread one called lock and no one had the du",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " and they can't be interrupted and no other thread can actually run those two lines at the same time. ok so how do we do that? ok easy! let's use our mutex locks. so just before doing that we call pthread_mutex_lock on some mutex lock that we previously initialized... so let me pass in my 'duck' (quack quack)",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "two lines at the same time. ok so how do we do that? ok easy! let's use our mutex locks. so just before doing that we call pthread_mutex_lock on some mutex lock that we previously initialized... so let me pass in my 'duck' (quack quack). right. and then afterwards we will unlock it. ok right.\u00a0 are we done? an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ad. ok so these lines are \u00a0important to define as a linked list. right, so we will say that... ok... this part in here is going to be protected by my mutex lock. so before executing any of that i will call pthread_mutex_lock. ok, \u00a0and afterwards i will let everybody else play again. (using pthread_mutex_unloc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "w do we fix this well one option of course is to use these other versions to underscore art another is to use locking so for example we could use our mutex locks to lock a mutex at the beginning and unlock it at the end so if we wanted to make sure that i know of thread could also effort therefore flush at th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " course ok so that was our first issue in their next part going to introduce you to a new synchronization primitive so we've been talking a lot about mutex locks now it's time to talk about candace airports by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "er but hold on inside this loop let's imagine that our first thread starts first and gets to get a list line first ok so what's it do it acquires the mutex lock is the first mutex is the first thread to do so so great it grabs hold of that duck and doesn't let go right so then it increments the counter right ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "read well let's imagine for a moment that thread two is started up ok so thread two gets his own value of i and very soon we'll get to the same peter mutex lock all right so what does it do it goes to grab the duck but the duck has been taken the mutex lock has already been acquired so it will be blocked righ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "value of i and very soon we'll get to the same peter mutex lock all right so what does it do it goes to grab the duck but the duck has been taken the mutex lock has already been acquired so it will be blocked right so thread too because it's the second thread to try to acquire the lock will be blocked all rig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ecause what destroyed one do well it carries on so it increments the global counter and then goes around the loop again at which point it calls peter mutex lock and blocks forever because that mutex has already been acquired now you and i know that that mutex ashley held by thread one but we haven't set we ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "hat we forgot to initialize our mutex and so there we have variable is just like a file handle it doesn't actually refer to anything and so rp thread mutex lock call does nothing is a no op we could have discovered that if we'd actually check the return value of rp tape mutex lock so if we were waiting really",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "to anything and so rp thread mutex lock call does nothing is a no op we could have discovered that if we'd actually check the return value of rp tape mutex lock so if we were waiting really bulletproof robust code production code we might do that but instead because we forgot it doesn't do anything so let's l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "s time it gets stuck as we hoped it would alright so finally let's fix our code here let's after we finished modifying the data structure there we go mutex lock ok and we want to say unlock ok and compile it where it ok and finally now it does produce the correct value of two million now when we actually ran ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "868deb37-9bd1-4419-a9ac-e164d0b078da",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "exciting things and it's only when they want to come back and read that data structure pull evaluator or push a value in do we need to implement palm mutex locks and i'll see you in next video and we start talking about lock contention ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a73bb722-a006-40e7-ba5b-1402cd135b37",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "d only for a short period of time just one millisecond it's actually doing something inside a critical section that we haven't yet protected with any mutex locks but for the other nine hundred and ninety nine milliseconds is doing something else so this thing runs for one second and then it's some random type",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b681599f-1223-4f55-aca4-e57ac7b4b6cd",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "d only for a short period of time just one millisecond it's actually doing something inside a critical section that we haven't yet protected with any mutex locks but for the other nine hundred and ninety nine milliseconds is doing something else so this thing runs for one second and then it's some random type",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ok let's talk about counting salmon falls so kind semaphores are cool so here's what they can do so let me let me compare them a little bit with mutex locks mutex locks they're designed for very fast locking and unlocking right and the key thing about mutex lock is that the lock and the unlock occur in p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "s talk about counting salmon falls so kind semaphores are cool so here's what they can do so let me let me compare them a little bit with mutex locks mutex locks they're designed for very fast locking and unlocking right and the key thing about mutex lock is that the lock and the unlock occur in pairs and the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "t me let me compare them a little bit with mutex locks mutex locks they're designed for very fast locking and unlocking right and the key thing about mutex lock is that the lock and the unlock occur in pairs and they have to be performed by the same threat right so you cannot create another thread or call tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "w do we fix this well one option of course is to use these other versions to underscore art another is to use locking so for example we could use our mutex locks to lock a mutex at the beginning and unlock it at the end so if we wanted to make sure that i know of thread could also effort therefore flush at th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " course ok so that was our first issue in their next part going to introduce you to a new synchronization primitive so we've been talking a lot about mutex locks now it's time to talk about candace airports by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "da7958fa-52cd-4d05-93a6-42c5aaca70a7",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "d only for a short period of time just one millisecond it's actually doing something inside a critical section that we haven't yet protected with any mutex locks but for the other nine hundred and ninety nine milliseconds is doing something else so this thing runs for one second and then it's some random type",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "t that in a little bit and now if two threads calling current at the same time one of them gets stuck waiting for that mutex so they'll call p thread mutex lock on my mute x variable and the first one to do that continues 'cause that no ones holding the duck great raptor duck releases it when they call unlock",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ge the value of cake how can we do that oh ok easy we will actually not lock there we actually want to lock before we test its value so let's put our mutex lock here p thread mutex lock as the very first thing we're going to do so pthread mutex lock ok grab that duck ok so now sleep sorry not sleep grab the m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "can we do that oh ok easy we will actually not lock there we actually want to lock before we test its value so let's put our mutex lock here p thread mutex lock as the very first thing we're going to do so pthread mutex lock ok grab that duck ok so now sleep sorry not sleep grab the mutex so we can't actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ually want to lock before we test its value so let's put our mutex lock here p thread mutex lock as the very first thing we're going to do so pthread mutex lock ok grab that duck ok so now sleep sorry not sleep grab the mutex so we can't actually continue until the mutex lock has been released and here's a bi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hing we're going to do so pthread mutex lock ok grab that duck ok so now sleep sorry not sleep grab the mutex so we can't actually continue until the mutex lock has been released and here's a big idea with mutex locks is that if we use them correctly you actually only hold on to them for just microseconds at ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "t duck ok so now sleep sorry not sleep grab the mutex so we can't actually continue until the mutex lock has been released and here's a big idea with mutex locks is that if we use them correctly you actually only hold on to them for just microseconds at a time just while we say test data structure and then ma",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ctually not two things is going to do it does three things when you finally wake it up before it returns outta peter condition wait it calls p thread mutex lock ok so that means when it finally continues when it finally goes around in this code it has to meet ex again ok so what does this mean this means all ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "idea alright so will stressed out again in a moment but now we've sketched out how we want our decrement method to work first of all we always have a mutex lock and never we work and we have our condition application condition that the cake value must not be zero and here's the big idea peter condition wait w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "we're going to write code in here where we want to test some condition and then later use that the assumption that condition is now true so we need a mutex lock to ensure that we are the only person get there can be modified data structure so we end up biting p thread mutex lock cave right so there's the log ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ition is now true so we need a mutex lock to ensure that we are the only person get there can be modified data structure so we end up biting p thread mutex lock cave right so there's the log and then later we unlock it right so the point then is to actually a threat can block and two places it might be blocke",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "right so the point then is to actually a threat can block and two places it might be blocked temporarily at the very beginning here just wait get the mutex lock and a good rule of good conceptual idea is that you only holds mutex lock for a few nanoseconds we're modifying something for example ok so reminder ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "t might be blocked temporarily at the very beginning here just wait get the mutex lock and a good rule of good conceptual idea is that you only holds mutex lock for a few nanoseconds we're modifying something for example ok so reminder this code actually does three things first of all it unlocks the mutex and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "th calling so if i truly cared about maximum performance i could actually reason about when i actually need to do this i remember that because of the mutex lock only one third of the time can be operating so at this moment we could say look if i've just changed my value of cake from zero to one then that's th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "lue of end otherwise two threads might call this code at the same time and both right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "at the same time and both right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "oth right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that mig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "d doesn't need to explode thinking about the possible interleavings of all of these expressions from this thread and another third because we own the mutex lock right and anybody else has to wait until we finished so it simplifies reasoning about this back down to just simple single threaded code again alrigh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ht so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annotate it in a different color we're going to obviously ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annotate it in a different color we're going to obviously have a lock here k and unloc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "lue of end otherwise two threads might call this code at the same time and both right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "at the same time and both right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "oth right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that mig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "'s do i make a highlighter well let's do it like like a yellow ok it all this code every single piece of this this here this bit here that we own the mutex lock so we could reason that we are the only thread that continue to run so great i've got all these other threads running at the same time but my head do",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "d doesn't need to explode thinking about the possible interleavings of all of these expressions from this thread and another third because we own the mutex lock right and anybody else has to wait until we finished so it simplifies reasoning about this back down to just simple single threaded code again alrigh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ht so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annotate it in a different color we're going to obviously ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annotate it in a different color we're going to obviously have a lock here k and unloc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "412638bd-03f0-44d0-a48b-5c8f0bee64e9",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hi ok so i got a little bit of a challenge for you here let's go back in time and say well how would you actually implement a valid mutex lock remember these things are critical to implement our critical sections where we can only have one thread manipulating data structure or some resources",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "412638bd-03f0-44d0-a48b-5c8f0bee64e9",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ture or some resources at the time ok so what do you think about the following attempt right so this suppose we were trying to actually implement the mutex lock ourselves here's our idea don't tell anybody but actually are mutex is actually just a simple integer pointer ok and so initializing it is easy will ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "412638bd-03f0-44d0-a48b-5c8f0bee64e9",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ight so think about that while we also think about what should i do for unlock well unlocking is easy i'm the only thread which actually has acquired mutex locks so i'm going to just reset it back to zero there's no need to wait for any other thread right so it's not a good implementation ok so what we have c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "412638bd-03f0-44d0-a48b-5c8f0bee64e9",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ementation that we've written is not adequate how we're going to fix it easy using mutex look wait can't do that we're actually trying to implement a mutex lock ok so how can we fix this alright so here's here's kind of two ways let's let's let's let's write one of them in here so yeah ok so ok yeah i'll do i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hi ok right so let's have another go implementing a mutex lock but this time we've got a useful little x cpu instruction called exchange and here's what it's defined to do it's going to swap two values at two add",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " as usual my initial function is just going to be make sure that the value that we store that location is zero and now what i'm going to do is for my mutex lock i got a little loop here where i have a loop variable called q ok and it's initialized this magic one so i imagine i want to imagine that is like the",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "re going to just treat as an integer and then we're going to keep going around this loop when we read the value of one so when the first thread calls mutex lock here's what's going to happen it's going to swap its value of one here with a value of zero so over here here's my mutex lock it's now got one in but",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " the first thread calls mutex lock here's what's going to happen it's going to swap its value of one here with a value of zero so over here here's my mutex lock it's now got one in but the value that q it now has is zero so it escapes out of this loop and can continue so that first they can go into his critic",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " now has is zero so it escapes out of this loop and can continue so that first they can go into his critical section meanwhile as second thread calls mutex lock ok what happens to it well its own value of q is one and then it calls exchange right but it's just going to exchange a value of one with one because",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " of this hot potato right so it's like i've got a one oh what do i do i'm going to keep calling exchange i'm going to keep trying to push it into the mutex lock ok so we've only get to escape out of that loop when filing is able to get back a value of zero so where does that happen after the first read has fi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " go to sleep for example if we can't do this within ten thousand nanoseconds in fact rather than just directly calling atomic operations today period mutex locks actually does a lot more than this it uses a kernel resource called a spinlock and also we have to ensure that our eddie information inside our cach",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "have to ensure that our eddie information inside our caches are correctly pushed back out to main memory so if the actual implementation of preferred mutex lock is a little bit more complicated than this it includes memory barriers and performance characteristics but i hope you see how ultimately we need hard",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "s it includes memory barriers and performance characteristics but i hope you see how ultimately we need hardware support to ensure that our preferred mutex lock is atomic right and they'll last thing will will mention today for this today's lecture video is the idea that what we're actually talking about is t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "re going to look at in a different lecture is how can we implement or how can we solve this critical section problem which we've today we solve using mutex locks but how can we solve this in a kind of algorithmic fashion and at the steps were going to kind of concentrate on here is actually this very first st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "lue of end otherwise two threads might call this code at the same time and both right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "at the same time and both right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "oth right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that mig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "d doesn't need to explode thinking about the possible interleavings of all of these expressions from this thread and another third because we own the mutex lock right and anybody else has to wait until we finished so it simplifies reasoning about this back down to just simple single threaded code again alrigh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ht so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annotate it in a different color we're going to obviously ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annotate it in a different color we're going to obviously have a lock here k and unloc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "lue of end otherwise two threads might call this code at the same time and both right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "at the same time and both right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "oth right into the same slot the same entry inside the away so less using mutex lock for that so we're definitely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that mig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "d doesn't need to explode thinking about the possible interleavings of all of these expressions from this thread and another third because we own the mutex lock right and anybody else has to wait until we finished so it simplifies reasoning about this back down to just simple single threaded code again alrigh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ht so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annotate it in a different color we're going to obviously ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annotate it in a different color we're going to obviously have a lock here k and unloc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "en we will if we escape that loop we then we know the condition must be true that there is something in my data structure and because i'm holding the mutex lock we're going to make sure that no one else can actually modify it so between testing it and using it we know that's value cannot be changed because i'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "o make sure that no one else can actually modify it so between testing it and using it we know that's value cannot be changed because i'm holding the mutex lock and so what do we do we take something out of the data structure and then will print this thread managed to eat this and in fact this code is going t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ple threats ok we're going to have two threads trying to eat cookies at the same time ok but will protect our data structure by the use of this peter mutex lock ok we need to weigh to add things to a data structure and so here is my little add cookie notice that i've got i protected my change the data structu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "if you type nine or control d then we're going to stop ok how should we stop what do you think about the following so we will first of all call peter mutex lock and we do that to ensure that actually there's something special about peter text lock which is not only does it acquiring musics it ensures that if ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " and then agent smith is also working up so smith it's another cookie and then they can have both go round as fast as possible trying to acquire that mutex lock so in this case they both managed to it eat some cookies but now they notice one at a time that that there's no cookies left so they call pizza hut c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " eat some cookies but now they notice one at a time that that there's no cookies left so they call pizza hut condition condition wait they released a mutex lock and so the other thread acquires mutex lock and also notice is it so let's just add some more cookies here this time looks like angry i've managed to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " a time that that there's no cookies left so they call pizza hut condition condition wait they released a mutex lock and so the other thread acquires mutex lock and also notice is it so let's just add some more cookies here this time looks like angry i've managed to eat quite a few cookies ok this time look a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "r cookies three cookies right ok oh yes right so we put the number of cookies that we remain we just read the value of jaw out outside of any pthread mutex lock so the value of this jaw could be changed between us decrement in it and as printing something out i think in this case that's exactly what happened ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " value of cookie jars already already been documented so we end up printing out a value of zero and this confusing logic is all because we let go the mutex lock early we let go of it before we used to value of jar so if i was to make this less confusing i would actually have to say how temper variable here is",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "w temper variable here is a current jaw and then print that out afterwards and the reason that i did it this way well then put the print f inside the mutex lock is simply so that simply for performance that i don't want to hold the mutex lock whilst i'm printing something out 'cause that's potentially along t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " reason that i did it this way well then put the print f inside the mutex lock is simply so that simply for performance that i don't want to hold the mutex lock whilst i'm printing something out 'cause that's potentially along time and all of my cookies to be eaten as fast as possible ok right so let's now le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " so good question oh yes so now what do we do we broke out of this loop but we never actually release the mutex log ok so now let's well at least the mutex lock soapy thread mutex unlock ok and now will ensure that before finishing we've let god in meters lock and so this is kind of a fun example because we m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "tion came right so we'll add some cookies will see that it's working eat some cookies and now let's finish ok and finally angry wakes up releases the mutex lock so smith can now finish and finally everybody finishes happily in the next video will talk about producer consumer by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ere is actually critical section i don't want two threads to see the same value of in here so first of all declare these right and so i better have a mutex lock inside here so pthread mutex look right and i can unlock that ok now this is actually one example where the encoding in decoding happens at different",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ng in decoding happens at different points in my data structure and so i could actually have two different locks there we go so i could have a second mutex lock there we go for my dequeue event ok so right that's the somewhere you've got lots of concurrency going on here this idea that i protected the critica",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "y dequeue event ok so right that's the somewhere you've got lots of concurrency going on here this idea that i protected the critical section using a mutex lock and i'm using a counting semaphore to make sure that i don't get buffer underflow or buffer overflow alright that's it bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "at if two threads called this is exactly the same time this is not thread safe so i will actually need some kind of lock here so i'll have a p thread mutex lock k right and what else do i want to do well if my counter has not yet reached eight then i want this to bed to go to sleep so let's do that so i'll ha",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "n a moment we should be using condition variables for this so let's have a condition variable here to say ok please block inside here and release the mutex lock ok right so if that will go to sleep we can wake it up occasionally to see if the counter value is got to eight but to initially the first seven thre",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " broadcast on my condition variable there we go right they will now wake up of course they can't immediately continue why not because i'm holding the mutex lock but there are live and ready to go ok so what will the eight thread do it will call broadcaster ringing the fire alarm and then we a scape we call un",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "an out we go ok so now i've got seven threads that are working up inside inside here inside my condition variable ok each one now tries to obtain the mutex lock one of them will win so it escapes and imagery unlocks the mutex lock and so the next red inside here is able to acquire the mutex lock so it's calle",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "de inside here inside my condition variable ok each one now tries to obtain the mutex lock one of them will win so it escapes and imagery unlocks the mutex lock and so the next red inside here is able to acquire the mutex lock so it's called period new text log succeeds and what's it do it immediately comes o",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "to obtain the mutex lock one of them will win so it escapes and imagery unlocks the mutex lock and so the next red inside here is able to acquire the mutex lock so it's called period new text log succeeds and what's it do it immediately comes out and unlock the mutex lock so then one after another all of my t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ed inside here is able to acquire the mutex lock so it's called period new text log succeeds and what's it do it immediately comes out and unlock the mutex lock so then one after another all of my threads can finally escape so that's our barrier so we've implemented this using open mutex lock just to kind of ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "t and unlock the mutex lock so then one after another all of my threads can finally escape so that's our barrier so we've implemented this using open mutex lock just to kind of quick ideas suppose last i had six threads come in so my counters now six and now i have two threads which immediately called barrier",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "come in so my counters now six and now i have two threads which immediately called barrier at the same time what would happen ok so again we have the mutex lock to the rescue that this will ensure that one of the threads will acquire the lock and the other one gets blocked so there can only be one winner like",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ere and so get out here right that would see a value of six which is implemented to seven so it then it would go to sleep so now finally that release mutex lock and finally our last dead but the most important thread of all is able to acquire the metrics lock then call broadcast and off we go and we release a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "omation is is some interesting challenges to think about is can you make a value using only counting semaphores and can you make a barrier using only mutex locks or like more about that in a future lecture but there's a kind of fun puzzles to think about when you're going to sleep perhaps alright i ask the en",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "particular condition variable associated with this particular data structure so that would be cvs plus i here we go right and we'll have a particular mutex lock that we want to release so let's have locks plus i ok right so what will declare then is to anytime you want to read the value inside a data structur",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "e can change it then you better get the lock for the data structure right so up inside here before we do anything we read a kalpi threadlock p thread mutex lock on lock plus i and then when we finished with that we can release it so we might as well release it as soon as possible let's do it right here so wil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ng a different data structure down here so before we do it before we do that we should surround this with our lock and unlock calls for for the other mutex lock associated with that data structure so that is going to be locks plus i plus one ok and i've forgotten ass down here so it's actually locks plus i ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "i modify this ok i actually want to make sure that i will require the right lock so we're going to be for here called please i want to lock the white mutex locks that's going to be locks plus index and then a corresponding unlock call down here right all we done new we've forgotten a few things first of all i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ondition wait inside a little while loop so they will eventually in the next few ns be able to escape out of there and when they escape they have the mutex lock but what do they do they immediately around the while loop again and they will check to see if they can now actually proceed if they can't thread wil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "i actually got another thread that is actually going to be displaying what is going on and we can see whether particular i thread has managed to lock mutex locks so if it gets dark inside this moment here it will be stuck on lock if it is about to go into peter condition wait you will see that it will see nap",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ead is actually is calling peter condition wait so how can we ensure that the race condition is not a problem here let's let's also put this inside a mutex locks so p thread mutex lock an i want to look on my locks plus i plus one ok so now we can say strong statements about where the code must be in if we ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ng peter condition wait so how can we ensure that the race condition is not a problem here let's let's also put this inside a mutex locks so p thread mutex lock an i want to look on my locks plus i plus one ok so now we can say strong statements about where the code must be in if we have if we are able to hol",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "want to look on my locks plus i plus one ok so now we can say strong statements about where the code must be in if we have if we are able to hold the mutex lock ok so we want to change this to plus one ok so right so that's it that's kind of fun little kind of counter game as usual this code is inside github ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " tell me what's missing from this code and when would it matter right hopefully is hopefully you remember that last time we did this code we put some mutex locks in so what was the purpose of the mutex locks yes so there are problems was to make sure that if we called add at the same time we want those two va",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "n would it matter right hopefully is hopefully you remember that last time we did this code we put some mutex locks in so what was the purpose of the mutex locks yes so there are problems was to make sure that if we called add at the same time we want those two values to occur at different points inside my ri",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " ok and similar over here i can't have two threads trying to remove at the same time so if i cared about performance might actually use two different mutex locks here so this is my pthread mutex lock and simply over here i can use a different lock because these actually are going to occur different parts of m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "two threads trying to remove at the same time so if i cared about performance might actually use two different mutex locks here so this is my pthread mutex lock and simply over here i can use a different lock because these actually are going to occur different parts of my data structure so i've actually got t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "orried about here one is the size of my buffer and i'm using the the counting semaphores for that and the other is a critical section and i'm using a mutex locks to protect that ok so we've done that we've done that right ok so we've implemented a version using counting semaphores what about condition variabl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "itely want to reduce our count by one ok so let's let's do that now in order to make sure that it behaves as an atomic operation we will first lock a mutex lock and so some point after that we will be unlocking it as well now we want most of all threads to wait we want most of them to to call sam wait another",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "025c4079-6f2d-496a-bc87-51d078e15f66",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be stopped",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "checking for stopping and actually going to sleep behaves as one interruptible operation so how can we ensure that as true and the answer is to use a mutex lock on both sides of this because if we have a mutex lock set if we required the mutex log then only once bit of code can be running it at a time so ther",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ves as one interruptible operation so how can we ensure that as true and the answer is to use a mutex lock on both sides of this because if we have a mutex lock set if we required the mutex log then only once bit of code can be running it at a time so there's no longer any opportunity to quick to say oh and t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "y oh and then quick imagine these two lines execute between these two so so or fix is on this side is to make sure that we've actually called pthread mutex lock before we start changing these variables so lock on the same mutex lock and then afterwards we unlock it ok right and on the right hand side we can a",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " so or fix is on this side is to make sure that we've actually called pthread mutex lock before we start changing these variables so lock on the same mutex lock and then afterwards we unlock it ok right and on the right hand side we can assume that we've already locked it because we're going to unlock it anyw",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " after the second thread ask has gone to sleep so there's no race condition we prevented the race condition ok so the big learning point here is that mutex locks are your friends they do lots of useful things for us and actually what they do is they bring order to our madness they prevent unwanted interleavin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hi welcome to lecture eighteen so let's start off with a challenge we want to make it barrier just using a single mutex lock and a single unlock core so that seems impossible let's see how we can kind of get unstuck and then talk about why this is actually a terrible barrie",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "tely need to protect that with a p thread lock so only one thread at a time can write this so before calling count we definitely need to call pthread mutex lock on some mutex and afterwards we need to release that locks the other threads can call call count ok call cam plus plus so will need to unlock it some",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " count so ideally we would want to give up the cpu at this point and sleep until the value of count changed but i said we are only allowed to use one mutex lock and one on local ok so at the very least i might put a p thread yielding here to say i'm done with the cpu for now give it back to me in a millisecon",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "that the value we read actually is the value which is shared between multiple processes and the answer is to to actually in close this with a pthread mutex lock call so pthread_mutex_lock not only waits to acquire exclusively acquire a lock it actually operates as a memory fence to ensure that any dirty right",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ndition wait as a better implementation of a barrier alright so in the next video let's talk once more about how we could actually implement p thread mutex lock just by disabling interrupts on the cpu ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "27f7e6d9-2a1f-419b-b0c5-3ad8dc4064d3",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be stopped",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we didn't need a definition for deadlock and this idea that our our threads are frozen up maybe one thread is waiting for a mutex lock that is never going to be unlocked maybe we're waiting for something from a data structure which is never going to be given to us so here's a general",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "his in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do some wor",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " time my threads are perfectly happy doing what they need to do until the following happens until one unfortunate day thread one has called preferred mutex lock on get this choose a new color called prefix lock on the first one case is completed that at the same time my other thread which is curiously called ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "a mutex two down here for thread two then if they both try to acquire mutex in at the same time then we can imagine that thread one would acquire the mutex lock here which would mean thread two will be forced to block so it doesn't get to go to step two which means thread one can continue and then when it's f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "d two can finish so if we'd actually written our code like this in the same order it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "else gets temporarily blocked last we change it ok so let's have our first to go here it is here's our first attempt i'm just going to use a standard mutex lock and then want to analyze this and decide if it's any good so i'm going to have two mutex locks here they are read law can write log and just for fun ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "re's our first attempt i'm just going to use a standard mutex lock and then want to analyze this and decide if it's any good so i'm going to have two mutex locks here they are read law can write log and just for fun today let's actually make these pointers so that i can create some memory on the heap for it o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "re so i've got my two locks now let's see what happens right so as part of the read i'm going to call read lock ok so i'm just going to call p thread mutex lock and then afterwards petered mutex unlock key and then the right i first of all i'm going to get the right lock then i'm going to get the read lock an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "i first of all i'm going to get the right lock then i'm going to get the read lock and i'm going to do some writing so what do we think about this is mutex locks sufficient to implement this right so take a moment to think about that and then i'll tell you in my point of view ok right so a preferred mutex loc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "utex locks sufficient to implement this right so take a moment to think about that and then i'll tell you in my point of view ok right so a preferred mutex lock let's talk about positive things first let's do like positive code review here so the good news with this implementation is that only one writer at a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " a lot of do so now let's start looking at our third contestant ok so now what do we think about this now we've got some locking going on i've got my mutex locks ok i've got condition weights ok so now i'm going to lock a mutex ok before i do anything ok so now my testing here will will remain true so if i sa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ay whilst anybody is writing then block we know that that is going to be true until the data i'll unlock my code because all of my code uses the same mutex lock ok ok so lock mutex and if there's anybody writing go to sleep great so the only way i can get out of that condition is when there's no one actually ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "l talk about that a little bit but we're going to wake up one reader or one writer maybe we want to lose broadcast will see and then will release the mutex lock ok let's see what the writers doing ok so on the writing side let's acquire the mutex ok and then will check to see if anybody else is currently read",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ultiple readers because once the first reader has acquired the lock we only release it after we exit so what we actually should do here is unlock the mutex lock we only need it whilst we're actually making assertions and changing our state with our variables here so the reading where we can open a file and se",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "the reading where we can open a file and searching that file go to a big dictionary that can be that can be done without any without holding onto the mutex lock so let's all lock the mutex here ok then we perform the relatively slow read and then we'll just need the mutex lock again for quick moment whilst we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "out any without holding onto the mutex lock so let's all lock the mutex here ok then we perform the relatively slow read and then we'll just need the mutex lock again for quick moment whilst we update our reading counts ok so we just need it for a few nanoseconds ok right so and what about the writing side ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "i'd actually like them to get stuck inside condition wait ok that we're actually going to send their thread to sleep so making threads block on peter mutex lock for extended periods of time will work but it's not best practices ok partly because it might spin the cpu for a little while which is in our case un",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ee433b-e79d-4957-9dbc-0d62b0785dbd",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be stopped",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "533db1aa-ad5e-40dd-b819-8b989c89b1f6",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be stopped",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5c6032d9-cc7d-468f-82d9-4054bf6258ab",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "six specification includes not only p threads not only condition variables but reader writer locks as well ok so here they are that i make not just a mutex lock but a reader writer lock here it is and i initialize it and then before i do any writing i can call the right lock version before i do any reading i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mplemented that now actually let's have to think about how we can implement the firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and then we say well while fireworks is zero corporate recognition weight in other ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ther words if my firework thread starts up here and it starts up early then we're just going to block it for but we're going to ask it to release the mutex lock and lock inside here so go back to the kind of first code remember we created all of the threads initially back when are fireworks variable with zero",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ut this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock mea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "e seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any other threads that want to run have to also require it so all of these lines of code can only be run by one thread at a time if the th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread was yet blocked inside condition wait ok so was to fix for that and the answer is to actually log on the same mutex here so if i call pete said mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread is acquired mutex or after the all the threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mplemented that now actually let's have to think about how we can implement the firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and then we say well while fireworks is zero corporate recognition weight in other ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ther words if my firework thread starts up here and it starts up early then we're just going to block it for but we're going to ask it to release the mutex lock and lock inside here so go back to the kind of first code remember we created all of the threads initially back when are fireworks variable with zero",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ut this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock mea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "e seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any other threads that want to run have to also require it so all of these lines of code can only be run by one thread at a time if the th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread was yet blocked inside condition wait ok so was to fix for that and the answer is to actually log on the same mutex here so if i call pete said mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread is acquired mutex or after the all the threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we didn't need a definition for deadlock and this idea that our our threads are frozen up maybe one thread is waiting for a mutex lock that is never going to be unlocked maybe we're waiting for something from a data structure which is never going to be given to us so here's a general",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "his in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do some wor",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " time my threads are perfectly happy doing what they need to do until the following happens until one unfortunate day thread one has called preferred mutex lock on get this choose a new color called prefix lock on the first one case is completed that at the same time my other thread which is curiously called ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "a mutex two down here for thread two then if they both try to acquire mutex in at the same time then we can imagine that thread one would acquire the mutex lock here which would mean thread two will be forced to block so it doesn't get to go to step two which means thread one can continue and then when it's f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "d two can finish so if we'd actually written our code like this in the same order it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mplemented that now actually let's have to think about how we can implement the firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and then we say well while fireworks is zero corporate recognition weight in other ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ther words if my firework thread starts up here and it starts up early then we're just going to block it for but we're going to ask it to release the mutex lock and lock inside here so go back to the kind of first code remember we created all of the threads initially back when are fireworks variable with zero",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ut this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock mea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "e seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any other threads that want to run have to also require it so all of these lines of code can only be run by one thread at a time if the th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread was yet blocked inside condition wait ok so was to fix for that and the answer is to actually log on the same mutex here so if i call pete said mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread is acquired mutex or after the all the threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we didn't need a definition for deadlock and this idea that our our threads are frozen up maybe one thread is waiting for a mutex lock that is never going to be unlocked maybe we're waiting for something from a data structure which is never going to be given to us so here's a general",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "his in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do some wor",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " time my threads are perfectly happy doing what they need to do until the following happens until one unfortunate day thread one has called preferred mutex lock on get this choose a new color called prefix lock on the first one case is completed that at the same time my other thread which is curiously called ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "a mutex two down here for thread two then if they both try to acquire mutex in at the same time then we can imagine that thread one would acquire the mutex lock here which would mean thread two will be forced to block so it doesn't get to go to step two which means thread one can continue and then when it's f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "d two can finish so if we'd actually written our code like this in the same order it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mplemented that now actually let's have to think about how we can implement the firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and then we say well while fireworks is zero corporate recognition weight in other ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ther words if my firework thread starts up here and it starts up early then we're just going to block it for but we're going to ask it to release the mutex lock and lock inside here so go back to the kind of first code remember we created all of the threads initially back when are fireworks variable with zero",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ut this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock mea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "e seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any other threads that want to run have to also require it so all of these lines of code can only be run by one thread at a time if the th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread was yet blocked inside condition wait ok so was to fix for that and the answer is to actually log on the same mutex here so if i call pete said mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread is acquired mutex or after the all the threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mplemented that now actually let's have to think about how we can implement the firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and then we say well while fireworks is zero corporate recognition weight in other ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ther words if my firework thread starts up here and it starts up early then we're just going to block it for but we're going to ask it to release the mutex lock and lock inside here so go back to the kind of first code remember we created all of the threads initially back when are fireworks variable with zero",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ut this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock mea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "e seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any other threads that want to run have to also require it so all of these lines of code can only be run by one thread at a time if the th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread was yet blocked inside condition wait ok so was to fix for that and the answer is to actually log on the same mutex here so if i call pete said mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread is acquired mutex or after the all the threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4eaea6f-874c-4acc-a000-07cdfb9fa35b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be stopped",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we didn't need a definition for deadlock and this idea that our our threads are frozen up maybe one thread is waiting for a mutex lock that is never going to be unlocked maybe we're waiting for something from a data structure which is never going to be given to us so here's a general",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "his in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do some wor",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " time my threads are perfectly happy doing what they need to do until the following happens until one unfortunate day thread one has called preferred mutex lock on get this choose a new color called prefix lock on the first one case is completed that at the same time my other thread which is curiously called ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "a mutex two down here for thread two then if they both try to acquire mutex in at the same time then we can imagine that thread one would acquire the mutex lock here which would mean thread two will be forced to block so it doesn't get to go to step two which means thread one can continue and then when it's f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "d two can finish so if we'd actually written our code like this in the same order it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we didn't need a definition for deadlock and this idea that our our threads are frozen up maybe one thread is waiting for a mutex lock that is never going to be unlocked maybe we're waiting for something from a data structure which is never going to be given to us so here's a general",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "his in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do some wor",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " time my threads are perfectly happy doing what they need to do until the following happens until one unfortunate day thread one has called preferred mutex lock on get this choose a new color called prefix lock on the first one case is completed that at the same time my other thread which is curiously called ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "a mutex two down here for thread two then if they both try to acquire mutex in at the same time then we can imagine that thread one would acquire the mutex lock here which would mean thread two will be forced to block so it doesn't get to go to step two which means thread one can continue and then when it's f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "d two can finish so if we'd actually written our code like this in the same order it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we need a definition for deadlock and this idea that our our threads are frozen up maybe one thread is waiting for a mutex lock that is never going to be unlocked maybe we're waiting for something from a data structure which is never going to be given to us so here's a general",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok i'm going to actually do this in a text editor ok let's go right do i have so if i've got thread",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "his in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do some wor",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " time my threads are perfectly happy doing what they need to do until the following happens until one unfortunate day thread one has called preferred mutex lock on get this choose a new color called prefix lock on the first one case is completed that at the same time my other thread which is curiously called ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "a mutex two down here for thread two then if they both try to acquire mutex in at the same time then we can imagine that thread one would acquire the mutex lock here which would mean thread two will be forced to block so it doesn't get to go to step two which means thread one can continue and then when it's f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "d two can finish so if we'd actually written our code like this in the same order it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fa389ce6-5fa6-4288-b2a2-949e66af677a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be stopped",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mplemented that now actually let's have to think about how we can implement the firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "firework right so what does r firework do k right well we acquire the mutex lock i might impede here just for for sure had so we've got we've got the mutex lock and all threads that run this code again to acquire the same lock and then we say well while fireworks is zero corporate recognition weight in other ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ther words if my firework thread starts up here and it starts up early then we're just going to block it for but we're going to ask it to release the mutex lock and lock inside here so go back to the kind of first code remember we created all of the threads initially back when are fireworks variable with zero",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ut this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock mea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "e seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s a mutex lock our mutex lock allows us to reason strongly about the number of threads which are actually running in this code because we've acquired mutex lock means that any other threads that want to run have to also require it so all of these lines of code can only be run by one thread at a time if the th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread was yet blocked inside condition wait ok so was to fix for that and the answer is to actually log on the same mutex here so if i call pete said mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread is acquired mutex or after the all the threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "lock called resource as soon as no other processes have text message block ok and will assume the locks affair so in the general case with the period mutex locks we could set oarlocks up to a give processes with the highest priority access to exclusive lock but in general the sequence of which the locks are a",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " obtains that resource but it's not done yet is also going to get exclusive access to be as well ok so how might this be implemented well for example mutex lock ok so we've now got acquired two mythics locks ok so right we done no so the next thing and in our timeline here is process two requests see ok so le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "'s looking at it and say ok great now process to has everything it needs it can continue so if we were writing code you can imagine our call to peter mutex lock has finally completed or access to the reader writer data structures finally given 's ability to read that so great we can continue right so eventual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "esents a little walk through this state of spaces where the actual walk depends upon the sequence in which my process one or processed to acquire the mutex locks or some other exclusive access to some other resource ok so look at this my process one is acquired its first mutex lock and then switch to support ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "or processed to acquire the mutex locks or some other exclusive access to some other resource ok so look at this my process one is acquired its first mutex lock and then switch to support the state two and so on and so on and so for example we might have a path like this ok so some paths in this conceptual sp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " lock but then process two acquires a second lock and now both of them are are stuck verse versus if process one did all of its work so required both mutex locks and then releasable and then process two acquired both locks and then released at all you could see that oh we kind of skirted around the outskirts ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ources in the same order so will have a meeting with all of our programmers and say look here's the things which you are saying a quiet calling peter mutex lock on abc and d we just need you to always acquire them in agreed apon order so for example if you're going to acquire a lock in order to access a then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " would implement that suppose for example you had a set of integers say they might be under a one of a link list and each one of those integers has a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let's say two or three mutex locks in order to modify those integ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ach one of those integers has a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let's say two or three mutex locks in order to modify those integers how can i ensure that all of my code always locks the necessary integers in the same order case how would you do t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "r than the number of readers actually reading ok so with that in mind it's actually kind of see how we've sketched this out ok obviously we have some mutex locks to ensure that we update these variables atomically but the very first thing we're going to do then for each of these sections is to is to either ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "hat we update these variables atomically but the very first thing we're going to do then for each of these sections is to is to either call preferred mutex lock or unlock so for a few microseconds we hold onto a log but that's only for us to do some accounting either we will immediately a scape can have throu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "x just once we're updating our variables so again that means that work i don't want to narrow but never mind will take an hour so let's reacquire the mutex lock so that we know for sure that we're currently only one thread running when we are changing our variables we're going to think about who we want to wa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " technically i could just wait right then my knew reader will will go to sleep little call peter condition wait right and of course there were listed mutex lock and when we do eventually wake them up what happens well the first thing they will do is will go round this while loop and we will see if the right a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " so let's imagine that i've got however some older readers that have already come through this so when they arrived in this method here they lock the mutex lock but there was no writers yet so they just happily went through an we updated the count now of the active readers by one and now they're currently ins",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "e here performing their reading ok so now with that in mind let's turn our attention to the writer here's the writer so we've notice we've unlock the mutex lock we were only holding onto it whilst we were modifying our variables ok so the writer and you write has arrived can they continue can they actually pe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "d we're only going to wait for the ones which actually inside the data structure and like i said many many times before remember that because of this mutex lock actually only one thread time can be running the code that we're writing here so we could make strong reasoning strong inferences about the state of ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "waiting to enter this code because of the mutex log and i currently have to slog or that it's inside a condition wait either way it does not have the mutex locks so so that's our first condition can you guess what the other one is so either reading is non zero so let's just be explicit there today ok there's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " one of them is going to be able to continue to see why remember that each time a thread is working up outside condition wait remember is holding the mutex locks only one thread is running and so the very first writer that that has evaluation of false here gets to continue so what do they do they update writi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "r for us to continue ok so eventually that right oh will finish changing the data structure and then we get down here again so we wait to acquire the mutex lock hopefully as a very just a few nanoseconds maybe a microsecond and then we can say great we're out of here right so let's decrement the number of thr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "you can see is that we've now we've actually got along way from when we first talked about a kind of a simple synchronization ideas of using p thread mutex lock and unlock ok so my advice to you is see if you can write this implementation from scratch starting with a blank piece of paper if you can congratula",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "lock called resource as soon as no other processes have text message block ok and will assume the locks affair so in the general case with the period mutex locks we could set oarlocks up to a give processes with the highest priority access to exclusive log but in general the sequence of which the locks are as",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " obtains that resource but it's not done yet is also going to get exclusive access to be as well ok so how might this be implemented well for example mutex lock ok so we've now got acquired two mythics locks ok so right we done no so the next thing and in our timeline here is process two requests see ok so le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "'s looking at it and say ok great now process to has everything it needs it can continue so if we were writing code you can imagine our call to peter mutex lock has finally completed or access to the reader writer data structures finally given 's ability to read that so great we can continue right so eventual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "esents a little walk through this state of spaces where the actual walk depends upon the sequence in which my process one or processed to acquire the mutex locks or some other exclusive access to some other resource ok so look at this my process one is acquired its first mutex lock and then switch to support ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "or processed to acquire the mutex locks or some other exclusive access to some other resource ok so look at this my process one is acquired its first mutex lock and then switch to support the state two and so on and so on and so for example we might have a path like this ok so some paths in this conceptual sp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " lock but then process two acquires a second lock and now both of them are are stuck verse versus if process one did all of its work so required both mutex locks and then releasable and then process two acquired both locks and then released at all you could see that oh we kind of skirted around the outskirts ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ources in the same order so will have a meeting with all of our programmers and say look here's the things which you are saying a quiet calling peter mutex lock on abc and d we just need you to always acquire them in agreed apon order so for example if you're going to acquire a lock in order to access a then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " would implement that suppose for example you had a set of integers say they might be under a one of a link list and each one of those integers has a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let's say two or three mutex locks in order to modify those integ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ach one of those integers has a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let's say two or three mutex locks in order to modify those integers how can i ensure that all of my code always locks the necessary integers in the same order case how would you do t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1440787d-bb97-4558-b85b-8aa384d86ede",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "s ok so it is holding and waiting so that's a hold and wait condition ok if my process is all threads only needed to actually hold on to say just one mutex lock at a time that deadlock would be impossible ok so that's how hold and wait right there is a set of waiting process is such that p one is waiting for ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "41b0a81d-3653-466e-87dd-0eda65d6af2e",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ow philosophers don't eat all the time in fact eating represents a critical section where before it can do that it's going to need to acquire these t mutex locks but for the rest of the time it's sleeping ok so there philosophising right dozing in the chair ok but occasionally they wake up realize that they a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": " we continue right so what do we think about this code right so what do we notice first of all that my code over here on the right really does need a mutex lock before we change value of x and we signal ok let's see why the problem occurs is when we call change at the same time that our second thread is actua",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "get initialized ok so we've got a new way of character pointers and that's just a name of five philosophers would like today we're going to have five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks her",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here we go and so we just got five meters locks initialized great and then further down great let's actually initialize my philosophers so that's ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t let's get myself a philosopher will get the i th one will initialize its name will initialize it left hand and right hand fork to be one of my five mutex locks look i'm using modulo arithmetic so that the fifth philosopher wraps around and gets to zero for kids game right after setting that all up let's sta",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "just been swapped over by crosses arms and we decrement tries by one k so we repeat this on the third try however we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ever we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a bit ok by some random number say want nine seconds want to eight point eight seconds and then we release both ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "get initialized ok so we've got a new way of character pointers and that's just a name of five philosophers would like today we're going to have five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks her",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here we go and so we just got five meters locks initialized great and then further down great let's actually initialize my philosophers so that's ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t let's get myself a philosopher will get the i th one will initialize its name will initialize it left hand and right hand fork to be one of my five mutex locks look i'm using modulo arithmetic so that the fifth philosopher wraps around and gets to zero for kids game right after setting that all up let's sta",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "just been swapped over by crosses arms and we decrement tries by one k so we repeat this on the third try however we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ever we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a bit ok by some random number say want nine seconds want to eight point eight seconds and then we release both ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": " we continue right so what do we think about this code right so what do we notice first of all that my code over here on the right really does need a mutex lock before we change value of x and we signal ok let's see why the problem occurs is when we call change at the same time that our second thread is actua",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "84be7473-dcd6-496d-9ec9-c463acb081d2",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "s ok so it is holding and waiting so that's a hold and wait condition ok if my process is all threads only needed to actually hold on to say just one mutex lock at a time that deadlock would be impossible ok so that's how hold and wait right there is a set of waiting process is such that p one is waiting for ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8f1b71ff-82be-442b-835a-49c8714f9776",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "s ok so it is holding and waiting so that's a hold and wait condition ok if my process is all threads only needed to actually hold on to say just one mutex lock at a time that deadlock would be impossible ok so that's how hold and wait right there is a set of waiting process is such that p one is waiting for ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": " we continue right so what do we think about this code right so what do we notice first of all that my code over here on the right really does need a mutex lock before we change value of x and we signal ok let's see why the problem occurs is when we call change at the same time that our second thread is actua",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c62f6568-fa2b-4be3-9e27-5e119359489e",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "s ok so it is holding and waiting so that's a hold and wait condition ok if my process is all threads only needed to actually hold on to say just one mutex lock at a time that deadlock would be impossible ok so that's how hold and wait right there is a set of waiting process is such that p one is waiting for ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "get initialized ok so we've got a new way of character pointers and that's just a name of five philosophers would like today we're going to have five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks her",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here we go and so we just got five meters locks initialized great and then further down great let's actually initialize my philosophers so that's ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t let's get myself a philosopher will get the i th one will initialize its name will initialize it left hand and right hand fork to be one of my five mutex locks look i'm using modulo arithmetic so that the fifth philosopher wraps around and gets to zero for kids game right after setting that all up let's sta",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "just been swapped over by crosses arms and we decrement tries by one k so we repeat this on the third try however we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ever we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a bit ok by some random number say want nine seconds want to eight point eight seconds and then we release both ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": " we continue right so what do we think about this code right so what do we notice first of all that my code over here on the right really does need a mutex lock before we change value of x and we signal ok let's see why the problem occurs is when we call change at the same time that our second thread is actua",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "get initialized ok so we've got a new way of character pointers and that's just a name of five philosophers would like today we're going to have five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks her",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here we go and so we just got five meters locks initialized great and then further down great let's actually initialize my philosophers so that's ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t let's get myself a philosopher will get the i th one will initialize its name will initialize it left hand and right hand fork to be one of my five mutex locks look i'm using modulo arithmetic so that the fifth philosopher wraps around and gets to zero for kids game right after setting that all up let's sta",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "just been swapped over by crosses arms and we decrement tries by one k so we repeat this on the third try however we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ever we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a bit ok by some random number say want nine seconds want to eight point eight seconds and then we release both ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " we always lock the mutex which has the smallest address first why why is that important if this purpose of this code is simply to end up locking too mutex locks why change you order depending on their address ok so hopefully some neurons are firing at this point and you remember what we talked about deadlock",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ce allocation graph then log is possible so this code is a stepping stone to making sure that we can't get cycles why because we are going to acquire mutex locks always in the same order in other words we've given them a rank ordering and their ordering is based on the memory location of the actual object in ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "k mutex is always follows the same convention or cause this method then we can agree that deadlock is impossible right so providing always we get our mutex locks with the smallest first we here with impossible to get a cycle in the resource allocation graph alright so that's the purpose of this code you can i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " the magic constant p thread mutex initializer ok so let's check that ok what else can we see in our little code review ok so we are using a pizza at mutex lock but we also have this infinite loop here that while the count is less than sixteen loop forever oh ok so that is not going to be great because will b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ount is less than sixteen loop forever oh ok so that is not going to be great because will be going inside this loop forever we've never unlocked the mutex locks so that is means that anytime this loop goes forever we've got we've got an infinite loop here so this is going to lead to deadlock because one thre",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ing to change variables like count again the plus plus it's not thread safe so again that needs to be protected by a lock ok so let's move this peter mutex lock down ok will do that they're very end also we actually need to block we actually need to pause if my buffer is completely full so that seems to be th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t work to do on the d q as well so let's get that sorted so what do we got so far right so looking back over nq yeah it's good that we use a p thread mutex lock we like that so that only one thread at a time can be working in this code but we actually want to stop when we discovered that the queue is fault wh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "n items at which point we call p three condition wait but we don't just go to sleep on the condition variable remember we've also got a pass in their mutex lock as well so that will become unlocked while we sleep in there when we return from peace recondition weight will have to re lock that new talks then re",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "za kitchen broadcaster we've woken up some threads we're incrementing the count by one and we put the data in and only at the very end we release the mutex lock after we finish modifying all about data so great and q event let's have a look to see what we can do about the d q k so on the d q side good we want",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2d49256b-843d-4c27-969c-5a4a8ef761ed",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "'s good so that only one thread at the time can be actually inside this code and in fact for this particular implementation is chosen to use the same mutex lock for both the nq in the dequeue ok but i do notice inside this implementation is that normally what do we do normally send post so the same way it hap",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2d49256b-843d-4c27-969c-5a4a8ef761ed",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "do notice inside this implementation is that normally what do we do normally send post so the same way it happens first and we normally only have the mutex lock that wraps the buffer call as well so yeah",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4bb4d9de-3031-4ca5-9b24-28a62fa33ed8",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "'s good so that only one thread at the time can be actually inside this code and in fact for this particular implementation is chosen to use the same mutex lock for both the nq in the dequeue ok but i do notice inside this implementation is that normally what do we do normally send post so the same way it hap",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4bb4d9de-3031-4ca5-9b24-28a62fa33ed8",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "do notice inside this implementation is that normally what do we do normally send post so the same way it happens first and we normally only have the mutex lock that wraps the buffer call as well so yeah",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "50ebb1c4-4d86-4abe-bcf6-d6d0948214d6",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ng to be counting the number of items in ok let's actually have a look at the code then for my enqueue and dequeue or nq and deck so i see i've got a mutex lock ok so that's good so that only one thread at the time can be actually inside this code and in fact for this particular implementation it has chosen t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "50ebb1c4-4d86-4abe-bcf6-d6d0948214d6",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ood so that only one thread at the time can be actually inside this code and in fact for this particular implementation it has chosen to use the same mutex lock for both the nq and the dequeue ok but what i do notice inside this implementation is that normally what do we do normally sem post happ- sorry the s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "50ebb1c4-4d86-4abe-bcf6-d6d0948214d6",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "tice inside this implementation is that normally what do we do normally sem post happ- sorry the sem wait happens first and we normally only have the mutex lock that wraps the buffer call as well so yeah",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "the buffer ok so let's actually take a look at the code now and see what we can find right so the first thing i notice is that we're actually calling mutex lock really early on inside enqueue normally i'd only expect the lock and the unlock to be around the actual call of where we change the change the array ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ize is two fifty six and in fact we're going to wrap around after we get to two hundred fifty five so what we've got then is kind of long hold of the mutex lock inside my enqueue here so my concern is with this sem_wait what if i have a thread calling enqueue another those is produced an item wants to queue i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " if s one is zero we might have a problem here because now it's gone to sleep it's blocked inside the same wait call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "eue side so on the dequeue side we are going to wait until at least one item ok that's true and then we call sem post and we do this without required mutex lock so here we were lucky there if we also had onto the mutex lock earlier if our mutex lock had been one of the first things we've done then yes we woul",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "east one item ok that's true and then we call sem post and we do this without required mutex lock so here we were lucky there if we also had onto the mutex lock earlier if our mutex lock had been one of the first things we've done then yes we would have encountered deadlock because the d q could not have cont",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ue and then we call sem post and we do this without required mutex lock so here we were lucky there if we also had onto the mutex lock earlier if our mutex lock had been one of the first things we've done then yes we would have encountered deadlock because the d q could not have continued it would have waited",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f the first things we've done then yes we would have encountered deadlock because the d q could not have continued it would have waited for that that mutex lock that would have never been never been released definition of deadlock waiting for an event that never happens so we didn't find deadlock just there t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "nto the buffer yet right so is underflow possible will actually in this particular implementation no because my dequeue you cannot complete until the mutex lock is released because it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ounting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and the same weight as well we should do earlier ok let's just see what i can happen on the d q site so because any threats are called eq will cal",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ero ok so yes we are able to continue through both these lines and we can start taking things out of this but imagine just this moment before we call mutex lock anew nq event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two hundred",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " out of this but imagine just this moment before we call mutex lock anew nq event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two hundred and fifty six items inside the inside the buffer ok then my same weight can can decrement th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "eed all that entries inside my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call same way on s one but we've already incremented it's once they get to continue and then post on some po",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call same way on s one but we've already incremented it's once they get to continue and then post on some post which will never block a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ffer now the chances of that happening are pretty small is this very small number of microseconds between us calling sam post and then asking for the mutex lock but that is a non zero value also notice it's actually only really going to be a problem when my buffer is actually completely full so perhaps under ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "derflow and the overflow and what happens if you have say two threads appearing at the same time and what would happen if just before you acquire the mutex lock another thread was able to acquire it instead alright so with that i will see you next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " the buffer ok so this actually take a look at the code now and see what we can find right so the first thing i notice is that we're actually calling mutex lock really early on inside nq normally i'd only expect the lock and unlock to be around the actual call of where we change the change the array here and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ize is two fifty six and in fact we're going to wrap around after we get to two hundred fifty five so what we've got then is kind of long hold of the mutex lock inside my enqueue here so my concern is with this same wait what if i have a thread calling nq another those is produced an item wants to queue it up",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f s one is zero we might have a problem here because now it's gone to sleep it's blocked inside the same weight call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " the d q side so on the dq side we are going to wait until at least one item ok that's true and then we call sam post and we do this without required mutex lock so here we were lucky there if we also had onto the mutex lock earlier if our musics lock had been one of the first things we've done then yes we wou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "east one item ok that's true and then we call sam post and we do this without required mutex lock so here we were lucky there if we also had onto the mutex lock earlier if our musics lock had been one of the first things we've done then yes we would have encountered deadlock because the d q could not have con",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f the first things we've done then yes we would have encountered deadlock because the d q could not have continued it would have waited for that that mutex lock that would have never been never been released definition of deadlock waiting for an event that never happens so we didn't find deadlock just there t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "g into the buffer yet right so is underflow possible will actually in this particular implementation no because my dick you cannot complete until the mutex lock is released because it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ounting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and the same weight as well we should do earlier ok let's just see what i can happen on the d q site so because any threats are called eq will cal",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ero ok so yes we are able to continue through both these lines and we can start taking things out of this but imagine just this moment before we call mutex lock anew nq event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two hundred",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " out of this but imagine just this moment before we call mutex lock anew nq event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two hundred and fifty six items inside the inside the buffer ok then my same weight can can decorate tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "eed all that entries inside my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call same way on s one but we've already incremented it's once they get to continue and then post on some po",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call same way on s one but we've already incremented it's once they get to continue and then post on some post which will never block a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ffer now the chances of that happening are pretty small is this very small number of microseconds between us calling sam post and then asking for the mutex lock but that is a non zero value also notice it's actually only really going to be a problem when my buffer is actually completely full so perhaps under ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "derflow and the overflow and what happens if you have say two threads appearing at the same time and what would happen if just before you acquire the mutex lock another thread was able to acquire it instead alright so with that i will see you next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca90fc46-67a5-4381-9bae-274ec85fffbb",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "'s good so that only one thread at the time can be actually inside this code and in fact for this particular implementation is chosen to use the same mutex lock for both the nq in the dequeue ok but i do notice inside this implementation is that normally what do we do normally send post so the same way it hap",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca90fc46-67a5-4381-9bae-274ec85fffbb",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "do notice inside this implementation is that normally what do we do normally send post so the same way it happens first and we normally only have the mutex lock that wraps the buffer call as well so yeah",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "the buffer ok so let's actually take a look at the code now and see what we can find right so the first thing i notice is that we're actually calling mutex lock really early on inside nq normally i'd only expect the lock and unlock to be around the actual call of where we change the change the array here and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ize is two fifty six and in fact we're going to wrap around after we get to two hundred fifty five so what we've got then is kind of long hold of the mutex lock inside my enqueue here so my concern is with this sem_wait what if i have a thread calling nq another those is produced an item wants to queue it up ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t if s one is zero we might have a problem here because now it's gone to sleep it's blocked inside the sem_wait call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "d q side so on the dq side we are going to wait until at least one item ok that's true and then we call sem_post and we do this without requiring the mutex lock so here we were lucky there if we also held onto the mutex lock earlier if our mutex lock had been one of the first things we've done then yes we wou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ne item ok that's true and then we call sem_post and we do this without requiring the mutex lock so here we were lucky there if we also held onto the mutex lock earlier if our mutex lock had been one of the first things we've done then yes we would have encountered deadlock because the d q could not have cont",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " then we call sem_post and we do this without requiring the mutex lock so here we were lucky there if we also held onto the mutex lock earlier if our mutex lock had been one of the first things we've done then yes we would have encountered deadlock because the d q could not have continued it would have waited",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f the first things we've done then yes we would have encountered deadlock because the d q could not have continued it would have waited for that that mutex lock that would have never been never been released definition of deadlock waiting for an event that never happens so we didn't find deadlock just there t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ng into the buffer yet right so is underflow possible well actually in this particular implementation no because my dequeue cannot complete until the mutex lock is released because it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ounting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and the same weight as well we should do earlier ok let's just see what can happen on the d q side so because any threads that called dequeue will",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ero ok so yes we are able to continue through both these lines and we can start taking things out of this but imagine just this moment before we call mutex lock a new enqueue event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f this but imagine just this moment before we call mutex lock a new enqueue event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two hundred and fifty six items inside the inside the buffer ok then my sem_wait can can decrement that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "eed all that entries inside my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call sem_wait on s one but we've already incremented s one so they get to continue and then post on sem_post",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call sem_wait on s one but we've already incremented s one so they get to continue and then post on sem_post which will never block and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ffer now the chances of that happening are pretty small is this very small number of microseconds between us calling sem_post and then asking for the mutex lock but that is a non zero value also notice it's actually only really going to be a problem when my buffer is actually completely full so perhaps under ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "derflow and the overflow and what happens if you have say two threads appearing at the same time and what would happen if just before you acquire the mutex lock another thread was able to acquire it instead alright so with that i will see you next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " the buffer ok so this actually take a look at the code now and see what we can find right so the first thing i notice is that we're actually calling mutex lock really early on inside nq normally i'd only expect the lock and unlock to be around the actual call of where we change the change the array here and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ize is two fifty six and in fact we're going to wrap around after we get to two hundred fifty five so what we've got then is kind of long hold of the mutex lock inside my enqueue here so my concern is with this same wait what if i have a thread calling nq another those is produced an item wants to queue it up",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f s one is zero we might have a problem here because now it's gone to sleep it's blocked inside the same weight call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " the d q side so on the dq side we are going to wait until at least one item ok that's true and then we call sam post and we do this without required mutex lock so here we were lucky there if we also had onto the mutex lock earlier if our musics lock had been one of the first things we've done then yes we wou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "east one item ok that's true and then we call sam post and we do this without required mutex lock so here we were lucky there if we also had onto the mutex lock earlier if our musics lock had been one of the first things we've done then yes we would have encountered deadlock because the d q could not have con",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f the first things we've done then yes we would have encountered deadlock because the d q could not have continued it would have waited for that that mutex lock that would have never been never been released definition of deadlock waiting for an event that never happens so we didn't find deadlock just there t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "g into the buffer yet right so is underflow possible will actually in this particular implementation no because my dick you cannot complete until the mutex lock is released because it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ounting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and the same weight as well we should do earlier ok let's just see what i can happen on the d q site so because any threats are called eq will cal",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ero ok so yes we are able to continue through both these lines and we can start taking things out of this but imagine just this moment before we call mutex lock anew nq event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two hundred",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " out of this but imagine just this moment before we call mutex lock anew nq event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two hundred and fifty six items inside the inside the buffer ok then my same weight can can decorate tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "eed all that entries inside my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call same way on s one but we've already incremented it's once they get to continue and then post on some po",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call same way on s one but we've already incremented it's once they get to continue and then post on some post which will never block a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ffer now the chances of that happening are pretty small is this very small number of microseconds between us calling sam post and then asking for the mutex lock but that is a non zero value also notice it's actually only really going to be a problem when my buffer is actually completely full so perhaps under ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "derflow and the overflow and what happens if you have say two threads appearing at the same time and what would happen if just before you acquire the mutex lock another thread was able to acquire it instead alright so with that i will see you next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " the buffer ok so this actually take a look at the code now and see what we can find right so the first thing i notice is that we're actually calling mutex lock really early on inside nq normally i'd only expect the lock and unlock to be around the actual call of where we change the change the array here and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ize is two fifty six and in fact we're going to wrap around after we get to two hundred fifty five so what we've got then is kind of long hold of the mutex lock inside my enqueue here so my concern is with this same wait what if i have a thread calling nq another those is produced an item wants to queue it up",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f s one is zero we might have a problem here because now it's gone to sleep it's blocked inside the same weight call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " the d q side so on the dq side we are going to wait until at least one item ok that's true and then we call sam post and we do this without required mutex lock so here we were lucky there if we also had onto the mutex lock earlier if our musics lock had been one of the first things we've done then yes we wou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "east one item ok that's true and then we call sam post and we do this without required mutex lock so here we were lucky there if we also had onto the mutex lock earlier if our musics lock had been one of the first things we've done then yes we would have encountered deadlock because the d q could not have con",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f the first things we've done then yes we would have encountered deadlock because the d q could not have continued it would have waited for that that mutex lock that would have never been never been released definition of deadlock waiting for an event that never happens so we didn't find deadlock just there t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "g into the buffer yet right so is underflow possible will actually in this particular implementation no because my dick you cannot complete until the mutex lock is released because it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ounting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and the same weight as well we should do earlier ok let's just see what i can happen on the d q site so because any threats are called eq will cal",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ero ok so yes we are able to continue through both these lines and we can start taking things out of this but imagine just this moment before we call mutex lock anew nq event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two hundred",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " out of this but imagine just this moment before we call mutex lock anew nq event comes in so just before your big red arrow here just before calling mutex lock if i've got the case where i've actually got two hundred and fifty six items inside the inside the buffer ok then my same weight can can decorate tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "eed all that entries inside my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call same way on s one but we've already incremented it's once they get to continue and then post on some po",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " my buffer but now because i've posted on s one then if an nq thread appears then they can continue we haven't yet got the mutex lock so they get the mutex lock and then they call same way on s one but we've already incremented it's once they get to continue and then post on some post which will never block a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ffer now the chances of that happening are pretty small is this very small number of microseconds between us calling sam post and then asking for the mutex lock but that is a non zero value also notice it's actually only really going to be a problem when my buffer is actually completely full so perhaps under ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "derflow and the overflow and what happens if you have say two threads appearing at the same time and what would happen if just before you acquire the mutex lock another thread was able to acquire it instead alright so with that i will see you next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ed85781a-a46c-454f-99d6-e290835a6979",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "'s good so that only one thread at the time can be actually inside this code and in fact for this particular implementation is chosen to use the same mutex lock for both the nq in the dequeue ok but i do notice inside this implementation is that normally what do we do normally send post so the same way it hap",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ed85781a-a46c-454f-99d6-e290835a6979",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "do notice inside this implementation is that normally what do we do normally send post so the same way it happens first and we normally only have the mutex lock that wraps the buffer call as well so yeah",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "about our synchronization primitives so some synchronization event has happened that we allows us to continue so what do we got we've got things like mutex locks you are able to acquire the lock we've got counting semaphores somebody's returned that piece of pizza into the counting semaphore so now we get to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " a long time say ten minutes most processes won't even use up that full ten minutes maybe they'll get stuck in an io events or they'll call preferred mutex lock or something and now they voluntarily give up the cpu so in this case are round robin has become like one of these others which one ok if you said fi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "24389f97-732f-4c49-9ec5-d5ea195e83da",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "e that we can't use of any code that calls malloc for example there's a very limited number of system calls that were allowed to use there's even the mutex locks the whole order stuff we just can't use inside our signal handlers why because we've temporarily interrupting our other code and that might be deep ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0fe42c84-6a79-4581-94d8-ef1fae922e78",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "ok so i want to review the critical section problem here is the idea that we don't just say oh i've got a piece that mutex lock that actually is the very problem i'm trying to solve is that i've got a critical section and i want to make sure that if i have say two threads or t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0fe42c84-6a79-4581-94d8-ef1fae922e78",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "e performance characteristics of a modern system from the compiler to the cpu were working against you which is why the implementation of saint peter mutex lock not only has to kind of implement code like this or similar code like this it actually will have a special cpu primitives are instructions to say thi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecc913a8-cf8a-4205-b23c-530df9ebc4eb",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "eads calling add at the same time i want to make sure that that that this ad roar is a critical section so how do i protect that answer is where they mutex locks so just before calling add war we're going to call our mutex lock and then just afterwards we can call our mutex unlock and as usual don't forget to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecc913a8-cf8a-4205-b23c-530df9ebc4eb",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "t this ad roar is a critical section so how do i protect that answer is where they mutex locks so just before calling add war we're going to call our mutex lock and then just afterwards we can call our mutex unlock and as usual don't forget to initialize your mutex and you can do that with two ways you could ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "file system",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "603b0b01-6f4b-4c59-b606-c075dd30516e",
        "lecture": "CS",
        "lecture_num": 5,
        "context": " ones sharing with a p here you're going to give it a simple file name for example you might say i would have run cat and you didn't say where in the file system catch that we found it will use your path environment variable to look for it also this version you just keep specifying parameters so you might say ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8459ee6a-30aa-499c-9226-74f97c8f7ce4",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "call exec so i'm going to call exec and i want to use your version i want to use a path please so you don't have to specify the exact location on the file system ok so in here i need to program dayton let's have a variable that does that and then what about my array well i don't want to start at the beginning ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "bit so the dirty bit means that my page has been modified; and what do we mean by modified the idea that the copy that we have on secondary storage i file system is no longer accurate so if we need to page this physical frame out we actually need to do a copy process we don't have a current copy outside of the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4601a707-5dd9-44c5-b66d-261ac8ae080b",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "to know how big it is now one way you may have seen already is simply to use stat stat tells me all sorts of great things about a file its size which file system is on the number of hard links we haven't talked about yet modification times and all that good stuff but let's just stay within the c library today ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55699194-1692-490a-a863-a26370265ef7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "gramming that you'll see in this course so the will do what's a named pipe ok how do i make a named pipe for this you can actually make pipes on your file system you can just say make vivo because they behave as a little first in first out queue so let's call it say my queue kate and now if you look on the cur",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "we can talk about them is just using file descriptors, but later on will have a quick look at creating 'named pipes' where they actually exist in the file system. right, so let's get started. okay, do i have a... great. so you know that we can do things like call write() and in fact when we call printf(), fpri",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "781c2c19-58df-4f6e-9dcf-99e51f685f66",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "to know how big it is now one way you may have seen already is simply to use stat stat tells me all sorts of great things about a file its size which file system is on the number of hard links we haven't talked about yet modification times and all that good stuff but let's just stay within the c library today ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dcde2695-ae8c-4032-aceb-2d001a2ec718",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "k, so uh.. what else? oh yep! we will do.. what's \"a named pipe?\"\" ok, how do i make a named pipe? ok, for this you\" can actually make pipes \"on your file system. you can just say \"\"mkfifo\"\" because\" they behave as a little 'first in first out' queue. so let's call it say 'myq.' ok, and now if you look on the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "now i really do want to make files greater than four terabytes plus four gigabytes plus four megabytes plus forty kb so in practice today on a modern file system we're not going to use e x t two ok right so i think that's the end of this this video yes great ok thanks a lot and i'll see you in the next lecture",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ea because we don't want one process using up all of the kernel resources will sign off here because now we're going to start talking about files and file systems and how to represent files on a disk right bye for now",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hi, so a big idea is that most file system devices are what note is known as block based devices meaning that at the hardware level we don't ask for a single bite from a disk instead we have a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "oesn't have eddie access the tool so that's the simplest kind of access control that we might have there are more complicated versions today in other file systems what else could we have well in addition to the actual contents we've probably care about its eyes are some interesting meta information cape we mig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "g a whole load of things that we might want to store about the file but i want to kind of simplify it back down to linux does and what we see in most file systems ok right so let's choose a new colour let's let's go for this yellow here right so first of all the we can we can keep some of this meta information",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "n each name is going to map two and i'd known number so the i node number becomes the authorative way to talk about a particular file on a particular file system name is just a kind of secondary add on our name is just a cute way for us to be able to have could have many human meaningful ways to be able to get",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "lk start talking about how we can store items on a disk and in particular how we might actually represent the data what features we might want in our file system so we're going to start by just a bit of a brainstorming exercise by saying if money was no object if i can get you the best software engineers what ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "of a brainstorming exercise by saying if money was no object if i can get you the best software engineers what features would you like to add to your file system so let's not try to be too constrained by the limitations of the file system on your laptop or what you've seen in virtual machine so far this act yo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " the best software engineers what features would you like to add to your file system so let's not try to be too constrained by the limitations of the file system on your laptop or what you've seen in virtual machine so far this act you think about what we need ok so this is kind of real let's start with the wh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "out what we need ok so this is kind of real let's start with the white board and will start to write down some features ok so what would make a great file system right so let's come up with a few ideas and then all kind of see how well we did and compare it to some other kind of brainstorm exercises i've done ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "right so what would you like first well maybe you want some access control right so we want the idea that look many people are going to be using this file system and perhaps i want to make sure that some people can't read all of my files or perhaps i want to make sure that some files are only read only or perh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "und and say ok bash run this or ok cpu load this as a program so i want to define some sort of security about our mike files maybe we want to write a file system created file system that even tracks who is accessing the files so maybe the sort of auditing and logging auditing and logging perhaps if i'm going t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "run this or ok cpu load this as a program so i want to define some sort of security about our mike files maybe we want to write a file system created file system that even tracks who is accessing the files so maybe the sort of auditing and logging auditing and logging perhaps if i'm going to get my file system",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "file system that even tracks who is accessing the files so maybe the sort of auditing and logging auditing and logging perhaps if i'm going to get my file system to the nsa i want to know which analysts have opened which files so perhaps i've got some kind of logging i want to keep track of the number of files",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "m 's been compromised and it's trying to lock up all of your files in order for you to pay some bit going to get them unlocked it would be nice if my file system rather than just delete the old version actually kept a prior versions around so i could go back in time and pull out the previous version all versio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "und so i could go back in time and pull out the previous version all version before that so maybe we want some versioning as well ok now on a typical file system it's not unusual for the same piece of data to be found in multiple places there's certainly going to be true of course with versioning but you and i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "toring it on the same disk it seems a bit of a waste of space to actually store those bites multiple times on the disk surface so perhaps we want our file system to support deduplication right do i find deduplication right to find multiple copies of the same information may be the same file and only represent ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "resent that once on the disk ok wait what else would you like ok so far we've been thinking about features what about performance case so we like our file systems to be nice and fast we wanted to have a good performance when it's empty and asbestos performance as possible when it's getting near fall as well so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " cpu for other things so what else might we need here right k so if i'm storing say text information that text could easily be compressed so maybe my file system should support compression as well so for some files for example suppose i'm storing all of the linux kernel that's just a lot of c code and i could ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i can decompress it quickly i might even be able to load these files in and use on the fly decompression and actually get better performance from my file system so we want compression potential potentially for performance if i can decompose quickly but also of course i want to maximize the amount of things i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ression potential potentially for performance if i can decompose quickly but also of course i want to maximize the amount of things i can store on my file system right what else ok so we could go through and keep talking about kind of more features like this but i want to remind you that so far we've been thin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "we've forgotten that real filesystems live on real devices and so a big thing that we've missed out here i have not thought about is that we want our file system to be robust so perhaps there's going to be an error on the disk surface because the bit was never written correctly perhaps stray cosmic ray 's modi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "the disk surface because the bit was never written correctly perhaps stray cosmic ray 's modified one bit inside my ssd it would be unfortunate if my file system suddenly made all of my files unreadable just because one bit was flipped simile if i dropped my hard disk my physical spinning hard disk i'd like to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "s a long period of time if i want to scan through all of my files to see which ones have changed which ones have been created it would be great if my file system could actually tell me which files have been created or modified since the last backup so we need some features to support that how are we going to d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "files by a particular artist or if i want to be able to kind of find the moment in a video file that though the word camel was spoken then perhaps my file system should support that in interesting ways k so everything else we kind of came pretty close we didn't talk about encryption which is an important secur",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " even the metal information becomes sensitive information ok right so that was a pretty good listen i hope you get to see why actually implementing a file system is hard and many file systems today are surprisingly old it's actually some of the oldest code you'll find inside the kernel why because writing code",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ecomes sensitive information ok right so that was a pretty good listen i hope you get to see why actually implementing a file system is hard and many file systems today are surprisingly old it's actually some of the oldest code you'll find inside the kernel why because writing code without bugs to satisfy all ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "se kind of design ideas and design goals is really really really hard and this is one area of the system where we do not want bugs we do not want our file system to suddenly start misbehaving when their disk becomes full for example we want all file system to work with all sorts of edge cases for example when ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "he system where we do not want bugs we do not want our file system to suddenly start misbehaving when their disk becomes full for example we want all file system to work with all sorts of edge cases for example when a particular sector on a disk goes bad or if we want to start a shufflings information around i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "k so that's kind of a fun little game perhaps you'd like to think about your own features if tomorrow you decided to have a new startup to make a new file system will return to this little game in the future when we look at some newer file systems like zfs and also btrfs and what else we got ok so another nonl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ures if tomorrow you decided to have a new startup to make a new file system will return to this little game in the future when we look at some newer file systems like zfs and also btrfs and what else we got ok so another nonlinear systems you'll find xfs as well where where these newer fire systems actually s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ll find xfs as well where where these newer fire systems actually support whole load of features of much more than a much more complex than our model file system that we're going to study insights this site this course 'cause we are going to turn our attention to model of e x t two which is sufficient for us t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "se we are going to turn our attention to model of e x t two which is sufficient for us to think about how we can represent different sized files on a file system and what constraints and limitations and performance impacts our choices have that's it for this video i'll see you in the next bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ok so we've got a concept of i nodes let's actually design our own file system so we're going to base our little design on the x two file system which has been around for a long time but it was the parent of the third generation",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ok so we've got a concept of i nodes let's actually design our own file system so we're going to base our little design on the x two file system which has been around for a long time but it was the parent of the third generation x t three which came out in two thousand and one which added jour",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "t of the third generation x t three which came out in two thousand and one which added journaling so journaling is very useful if you want to support file system crashes when the file when the power goes out so ok so we can we can we can sort of say support power failures so this idea that i can resurrect my f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "m crashes when the file when the power goes out so ok so we can we can we can sort of say support power failures so this idea that i can resurrect my file system back to a good well known state where all of the data and the links inside my file system is correct and all the blocks that i refer to as being curr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "support power failures so this idea that i can resurrect my file system back to a good well known state where all of the data and the links inside my file system is correct and all the blocks that i refer to as being currently unused is correct that they're not kind of dual purpose for anything and i do that b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "r kb chunk ok so they're actually very very small here right so we'll set aside some space for all of these i notes in my very very simple model of a file system here will say that you get one opportunity to decide how many i know you would like to be able to store on this disk so you make that choice when you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "emainder will be used for all of the data that i want to store so that's my initial very simple model it's not very accurate in the sense that modern file systems allow me to have more than one area of memory set aside for on it but it's a good representation of how we started with early file systems ok so mak",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hat modern file systems allow me to have more than one area of memory set aside for on it but it's a good representation of how we started with early file systems ok so make that choice when you when you first formatted an will store that your choice inside the super block let's hope you don't under estimate a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "now i really do want to make files greater than four terabytes plus four gigabytes plus four megabytes plus forty kb so in practice today on a modern file system we're not going to use ext2 ok right so i think that's the end of this this video yes great ok thanks a lot and i'll see you in the next lecture by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ea because we don't want one process using up all of the carnal resources will sign off here because now we're going to start talking about files and file systems and how to represent files on a disk right bye for now",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hi so a big idea is that most file system devices are what is known as block based devices meaning that at the hardware level we don't ask for a single byte from a disk instead we have a conv",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "se doesn't have any access at all so that's the simplest kind of access control that we might have there are more complicated versions today in other file systems what else could we have well in addition to the actual contents we've probably care about its size or some interesting meta information cape we migh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hole load of things that we might want to store about the file but i want to kind of simplify it back down to what linux does and what we see in most file systems ok right so let's choose a new colour let's let's go for this yellow here right so first of all the we can we can keep some of this meta information",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "sting an each name is going to map to an inode number so the inode number becomes the authorative way to talk about a particular file on a particular file system. a name is just a kind of secondary add-on. a name is just a cute way for us to be able to have kind of, human meaningful ways to be able to get a li",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ok so we've got a concept of i nodes let's actually design our own file system so we're going to base our little design on the \u00a0ext2 file system which has been around for a long time but it was the parent of the third generation",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ok so we've got a concept of i nodes let's actually design our own file system so we're going to base our little design on the \u00a0ext2 file system which has been around for a long time but it was the parent of the third generation \u00a0ext3 which came out in two thousand and one which added journali",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "arent of the third generation \u00a0ext3 which came out in two thousand and one which added journaling so journaling is very useful if you want to support file system crashes when the file when the power goes out so ok so we can sort of say support power failures so this idea that i can resurrect my file system bac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ort file system crashes when the file when the power goes out so ok so we can sort of say support power failures so this idea that i can resurrect my file system back to a good well known state where all of the data and the links inside my file system is correct and all the blocks that i refer to as being curr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "support power failures so this idea that i can resurrect my file system back to a good well known state where all of the data and the links inside my file system is correct and all the blocks that i refer to as being currently unused is correct that they're not kind of dual purpose for anything and i do that b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ur kb chunk ok so they're actually very very small here right so we'll set aside some space for all of these inodes in my very very simple model of a file system here will say that you get one opportunity to decide how many inodes you would like to be able to store on this disk so you make that choice when you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "emainder will be used for all of the data that i want to store so that's my initial very simple model it's not very accurate in the sense that modern file systems allow me to have more than one area of memory set aside for on it but it's a good representation of how we started with early file systems ok so mak",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hat modern file systems allow me to have more than one area of memory set aside for on it but it's a good representation of how we started with early file systems ok so make that choice when you when you first formatted an we'll store that your choice inside the super block let's hope you don't under estimate ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " assignment kind of based on this where you actually kind of can implement this scheme in order to read or write some exist some files onto an actual file system with us it i'll see in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " assignment kind of based on this where you actually kind of can implement this scheme in order to read or write some exist some files onto an actual file system with us it i'll see in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "lk start talking about how we can store items on a disk and in particular how we might actually represent the data what features we might want in our file system so we're going to start by just a bit of a brainstorming exercise by saying if money was no object if i can get you the best software engineers what ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "of a brainstorming exercise by saying if money was no object if i can get you the best software engineers what features would you like to add to your file system so let's not try to be too constrained by the limitations of the file system on your laptop or what you've seen in a linux virtual machine so far let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " the best software engineers what features would you like to add to your file system so let's not try to be too constrained by the limitations of the file system on your laptop or what you've seen in a linux virtual machine so far let's actually think about what we need ok so this is kind of real let's start w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "out what we need ok so this is kind of real let's start with the white board and will start to write down some features ok so what would make a great file system right so let's come up with a few ideas and then all kind of see how well we did and compare it to some other kind of brainstorm exercises i've done ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "right so what would you like first well maybe you want some access control right so we want the idea that look many people are going to be using this file system and perhaps i want to make sure that some people can't read all of my files or perhaps i want to make sure that some files are only read only or perh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "round and say ok bash run this or ok cpu load this as a program so i want to define some sort of security about our my files maybe we want to write a file system create a file system that even tracks who is accessing the files so maybe the sort of auditing and logging auditing and logging perhaps if i'm going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " run this or ok cpu load this as a program so i want to define some sort of security about our my files maybe we want to write a file system create a file system that even tracks who is accessing the files so maybe the sort of auditing and logging auditing and logging perhaps if i'm going to get my file system",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "file system that even tracks who is accessing the files so maybe the sort of auditing and logging auditing and logging perhaps if i'm going to get my file system to the nsa i want to know which analysts have opened which files so perhaps i've got some kind of logging i want to keep track of the number of files",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "system's been compromised and it's trying to lock up all of your files in order for you to pay some bitcoin to get them unlock it would be nice if my file system rather than just delete the old version actually kept a prior versions around so i could go back in time and pull out the previous version all versio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "und so i could go back in time and pull out the previous version all version before that so maybe we want some versioning as well ok now on a typical file system it's not unusual for the same piece of data to be found in multiple places there's certainly going to be true of course with versioning but you and i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "toring it on the same disk it seems a bit of a waste of space to actually store those bytes multiple times on the disk surface so perhaps we want our file system to support deduplication right do i find deduplication right to find multiple copies of the same information may be the same file and only represent ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hat represent that once on the disk ok what else would you like ok so far we've been thinking about features what about performance ok so we like our file systems to be nice and fast we wanted to have a good performance when it's empty and as best performance as possible when it's getting near full as well so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " cpu for other things so what else might we need here right k so if i'm storing say text information that text could easily be compressed so maybe my file system should support compression as well so for some files for example suppose i'm storing all of the linux kernel that's just a lot of c code and i could ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i can decompress it quickly i might even be able to load these files in and use on the fly decompression and actually get better performance from my file system so we want compression potential potentially for performance if i can decompose quickly but also of course i want to maximize the amount of things i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ression potential potentially for performance if i can decompose quickly but also of course i want to maximize the amount of things i can store on my file system right what else ok so we could go through and keep talking about kind of more features like this but i want to remind you that so far we've been thin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "we've forgotten that real filesystems live on real devices and so a big thing that we've missed out here i have not thought about is that we want our file system to be robust so perhaps there's going to be an error on the disk surface because the bit was never written correctly perhaps stray cosmic rays modifi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "n the disk surface because the bit was never written correctly perhaps stray cosmic rays modified one bit inside my ssd it would be unfortunate if my file system suddenly made all of my files unreadable just because one bit was flipped similarly if i dropped my hard disk my physical spinning hard disk i'd like",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "s a long period of time if i want to scan through all of my files to see which ones have changed which ones have been created it would be great if my file system could actually tell me which files have been created or modified since the last backup so we need some features to support that how are we going to d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nd all files by a particular artist or if i want to be able to kind of find the moment in a video file that the word camel was spoken then perhaps my file system should support that in interesting ways k so everything else we kind of came pretty close we didn't talk about encryption which is an important secur",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "d even the meta information becomes sensitive information ok right so that was a pretty good listen i hope you get to see why actually implementing a file system is hard and many file systems today are surprisingly old it's actually some of the oldest code you'll find inside the kernel why because writing code",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ecomes sensitive information ok right so that was a pretty good listen i hope you get to see why actually implementing a file system is hard and many file systems today are surprisingly old it's actually some of the oldest code you'll find inside the kernel why because writing code without bugs to satisfy all ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "se kind of design ideas and design goals is really really really hard and this is one area of the system where we do not want bugs we do not want our file system to suddenly start misbehaving when their disk becomes full for example we want all file system to work with all sorts of edge cases for example when ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "he system where we do not want bugs we do not want our file system to suddenly start misbehaving when their disk becomes full for example we want all file system to work with all sorts of edge cases for example when a particular sector on a disk goes bad or if we want to start shuffling information around in o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "k so that's kind of a fun little game perhaps you'd like to think about your own features if tomorrow you decided to have a new startup to make a new file system we'll return to this little game in the future when we look at some newer file systems like zfs and also btrfs and what else we got ok so another non",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "res if tomorrow you decided to have a new startup to make a new file system we'll return to this little game in the future when we look at some newer file systems like zfs and also btrfs and what else we got ok so another nonlinux systems you'll find xfs as well where where these newer filesystems actually sup",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "'ll find xfs as well where where these newer filesystems actually support whole load of features of much more than a much more complex than our model file system that we're going to study inside this course 'cause we are going to turn our attention to model of ext2 which is sufficient for us to think about how",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " 'cause we are going to turn our attention to model of ext2 which is sufficient for us to think about how we can represent different sized files on a file system and what constraints and limitations and performance impacts our choices have that's it for this video i'll see you in the next bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ok great i welcome to like twenty eight so let's get started we're going to look a little bit more at our file system representation and then dive into stats and how we're going to have hard links and symbolic to our files so just as a kind of quick warmup remember w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " and how we're going to have hard links and symbolic to our files so just as a kind of quick warmup remember we're playing with the model of the ext2 file system and my i node is the file i can't create a file in this i've actually gotten inode entry and i'm going to have will say ten entries inside my inode d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ittle gotchas there and don't be surprised in the marketing materials if they really if we get to be accurate right so let's kind of go back onto our file systems now here's a useful little command get cwd noticed that's right it tells us the process is current working directory which is going to be useful if ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ax and we add one just to ensure that there's enough space for the c string zero bite at the end ok so if you want to know how where you currently on file system here is one way to do it right so that is a limitation of function here so in fact if i type c w p w for present working directory that internally is",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "500f2f37-cb53-4088-952f-c866acfded89",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "rms of her directory listing and that's it ok that's the kind of big idea right so can we have the same file appear in two different places inside of file system yes absolutely ok let's do that alright so right now the story so far is we have a little program called program dot c let me link to it using l n on",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "500f2f37-cb53-4088-952f-c866acfded89",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ow when we do forensic analysis on disks we can look for i knowed entries which have been deleted but which still don't appear inside anyways like my file system but we still might contain all of the meta information so for example it might be i did deleted i knowed entry can still point to the disk blocks tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6bda4161-ec8d-403f-b5c5-d510d46fe230",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "rms of her directory listing and that's it ok that's the kind of big idea right so can we have the same file appear in two different places inside of file system yes absolutely ok let's do that alright so right now the story so far is we have a little program called program dot c let me link to it using l n on",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "6bda4161-ec8d-403f-b5c5-d510d46fe230",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ow when we do forensic analysis on disks we can look for i knowed entries which have been deleted but which still don't appear inside anyways like my file system but we still might contain all of the meta information so for example it might be i did deleted i knowed entry can still point to the disk blocks tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ioned one thing which is that they were expanded to allow much larger files but ext3 gavers are journaling which is the ability to make sure that our file system is always in a good state so a file system of course has to keep track of unused disk blocks so we want to make sure that even if there's a power fai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "anded to allow much larger files but ext3 gavers are journaling which is the ability to make sure that our file system is always in a good state so a file system of course has to keep track of unused disk blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " ourselves data loss in these kind of difficult corner cases so kind of hope you like that little kind of little confirmed case study of why creating file systems that are performed and secure is difficult the last thing i will mention is here's another when we started this section when we just brainstormed a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "would like ok let's have a look at a real list of features of a real modern filesystems and this is just kind of a high level feature list of two two file systems that you'll probably hear about one is zfs and this support things like raid what's raid ok will talk about raid in the future we actually want to b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "able to work with different pools of files so we want to be able to have kind of enterprising features to make it easy to manage all of our different file systems so we had this idea of different storage pools so we've introduced abstraction layers between the physical disks and the actual kind of virtual disk",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "s like deduplication encryption right so that's going to take awhile to write all the code to support about that and here's another one which another file system that then exports today yeah we want space efficient indices and packing of very small files while being able to support very large files we don't wa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " and so on and so on so that i just want to go blow your mind or expand your mind in terms of ok this is all that cool stuff that are real modern day file system can kind of give to us ok and unfortunately however beta office is still only beginning to be used for real enterprise systems because realize that t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "eal enterprise systems because realize that these features can start to bite you in the corner cases that we've just seen even with relatively simple file systems like e x two three n x t four if the corner cases that case for example where your disk is now full or suddenly you've got one disk going down and a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ur business is built on so it for file changes if you really want to make make strong difficult c code your life then i said yes do you make your own file system that's it for now and the end of this lecture by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " thing which is that they were expanded to allow much larger files but e x t through gavers are journaling which is the ability to make sure that our file system is always in a good state so a file system of course has to keep track of unused disk blocks so we want to make sure that even if there's a power fai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "allow much larger files but e x t through gavers are journaling which is the ability to make sure that our file system is always in a good state so a file system of course has to keep track of unused disk blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " to two today to los in these kind of difficult corner cases so kind of hope you like that little kind of little confirmed case study of why creating file systems that are performed and secure is difficult the last thing i will mention is here's another when we started this section when we just brainstormed a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "would like ok let's have a look at a real list of features of a real modern filesystems and this is just kind of a high level feature list of two two file systems that you'll probably hear about one is zfs and this support things like raid what's raid ok will talk about raid in the future we actually want to b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "able to work with different pools of files so we want to be able to have kind of enterprising features to make it easy to manage all of our different file systems so we had this idea of different storage pools so we've introduced abstraction layers between the physical disks and the actual kind of virtual disk",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "s like deduplication encryption right so that's going to take awhile to write all the code to support about that and here's another one which another file system that then exports today yeah we want space efficient indices and packing of very small files while being able to support very large files we don't wa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " and so on and so on so that i just want to go blow your mind or expand your mind in terms of ok this is all that cool stuff that are real modern day file system can kind of give to us ok and unfortunately however beta office is still only beginning to be used for real enterprise systems because realize that t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "eal enterprise systems because realize that these features can start to bite you in the corner cases that we've just seen even with relatively simple file systems like e x two three n x t four if the corner cases that case for example where your disk is now full or suddenly you've got one disk going down and a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ur business is built on so it for file changes if you really want to make make strong difficult c code your life then i said yes do you make your own file system right that's it for now and the end of this lecture by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "it's a regular directory all whether it's something else like it's symbolic link or named pipe or some other bizzle object that we've got stored in a file system ok we can actually have multiple links to the same i knowed entry so we'll be seeing this number links later when we actually start making hardlinks ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "retty cool ideas ok then we've got things like ok the uid and gid so these are just number yes later and gentlemen you're you're just a number to the file system your user id the user is just a number so we don't actually store the username at all associated with a particular file so that tells us who owns it ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "et a need to multiply that by five hundred twelve ok this other block size up here tells us today about the natural size of blocks for the particular file system so if i'm going to use my read and write calls i probably want to make sure that the number of bytes i'm requesting is some multiple of that or at le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " make sure that the number of bytes i'm requesting is some multiple of that or at least that site in order to make sure that i'm efficiently using my file system so that gives me hint about that natural size of read invites to this current file system right the last thing is hey we could find out some importan",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "at site in order to make sure that i'm efficiently using my file system so that gives me hint about that natural size of read invites to this current file system right the last thing is hey we could find out some important some timing information so the c structure time t here is accurate to the lease gives a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " way that something might be stored on disk isn't necessarily that accurate or it might be more than more accurate than that for example some windows file systems are only accurate to within two seconds ok but now let's see what we've got we've got when it was last accessed when it was last modified and to fin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ok great i welcome to like twenty eight so let's get started we're going to look a little bit more at our file system representation and then dive into stats and how we're going to have hard links and symbolic to our files so just as a kind of quick warmup remember w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "w we're going to have hard links and symbolic to our files so just as a kind of quick warmup remember we're playing with the model of the e x two two file system and my i node is the file i can't create a file in this i've actually gotten i knowed entry and i'm going to have will say ten entries inside my i kn",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ittle gotchas there and don't be surprised in the marketing materials if they really if we get to be accurate right so let's kind of go back onto our file systems now here's a useful little command get cwd noticed that's right it tells us the process is current working directory which is going to be useful if ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ax and we add one just to ensure that there's enough space for the c string zero bite at the end ok so if you want to know how where you currently on file system here is one way to do it right so that is a limitation of function here so in fact if i type c w p w for present working directory that internally is",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "it's a regular directory all whether it's something else like it's symbolic link or named pipe or some other bizzle object that we've got stored in a file system ok we can actually have multiple links to the same i knowed entry so we'll be seeing this number links later when we actually start making hardlinks ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "retty cool ideas ok then we've got things like ok the uid and gid so these are just number yes later and gentlemen you're you're just a number to the file system your user id the user is just a number so we don't actually store the username at all associated with a particular file so that tells us who owns it ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "et a need to multiply that by five hundred twelve ok this other block size up here tells us today about the natural size of blocks for the particular file system so if i'm going to use my read and write calls i probably want to make sure that the number of bytes i'm requesting is some multiple of that or at le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " make sure that the number of bytes i'm requesting is some multiple of that or at least that site in order to make sure that i'm efficiently using my file system so that gives me hint about that natural size of read invites to this current file system right the last thing is hey we could find out some importan",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "at site in order to make sure that i'm efficiently using my file system so that gives me hint about that natural size of read invites to this current file system right the last thing is hey we could find out some important some timing information so the c structure time t here is accurate to the lease gives a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " way that something might be stored on disk isn't necessarily that accurate or it might be more than more accurate than that for example some windows file systems are only accurate to within two seconds ok but now let's see what we've got we've got when it was last accessed when it was last modified and to fin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6469a892-5a29-4895-b922-8ef54fabb1a8",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "le name that starts with a dot so if you look in your home directory you'll discover there's lots of examples of this the windows files the windowing file system tends to make a lot of files and all the apps that you might run inside it also for example you might find a subdirectory cause dot ssh for the secur",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a04b015e-498e-4c02-9326-bd1715c8f047",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "nish this with a little demo i've logged into a linux machine here it's actually the shared engineering work station here and let's go into a virtual file system i'm going to go into one called proc to tell us all about various processes so realize that none of these files exist right they're all coming from t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a04b015e-498e-4c02-9326-bd1715c8f047",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "reat information so now we can build little tools for example we could build a little tool called ps which looks at proc and maybe some other virtual file systems in order to tell us more about what the system is doing or for example we could look at the current set of users which and what are they doing where",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a04b015e-498e-4c02-9326-bd1715c8f047",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "example we could look at the current set of users which and what are they doing where they're going where they come from all again from these virtual file systems ok so all great stuff and we'll talk more about that in a future lecture but before that for now that's it for this letter bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a36c9a4b-0ff7-4b83-9157-f856ccfd8b26",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "haracter device or block device if you've made a named pipe perhaps by calling make fifo for example then these kinds of pipes actually exist on your file system they have file names so this would be a way to actually check to see whether that filename corresponds to one of these pipes and lastly here's a usef",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b94d1f92-8ee2-461c-ae2e-934cfdcfd6cb",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ody write into this disk because we need lots of space but people only need this big space for a temporary amount of time so we'll have a part of our file systems say called slash temp where both you and i and others can unpack things maybe compile things etc so this directory itself needs to be world writable",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ok so in the beginning the root file system is just a single slash here and beneath that that's where we're going to find just everything so we need a way to be able to say you know i want some",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "is just a single slash here and beneath that that's where we're going to find just everything so we need a way to be able to say you know i want some file systems for my local machine perhaps i got some remote filesystems and i've got some file systems which don't even physically exist as well so how can we do",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ing so we need a way to be able to say you know i want some file systems for my local machine perhaps i got some remote filesystems and i've got some file systems which don't even physically exist as well so how can we do this well the idea is that we can actually set up what are called mount points so for exa",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "slash home slash let's call it coffee mugs for example coffee and then i can say on this directory coffee here this i want to connect to a particular file system so maybe i'm going to get that particular file system from this mug by asking this piece of hardware to give me a list of files so it won't be empty ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " coffee and then i can say on this directory coffee here this i want to connect to a particular file system so maybe i'm going to get that particular file system from this mug by asking this piece of hardware to give me a list of files so it won't be empty it will actually i'll have a special piece of hardware",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ecial piece of hardware that supports the right api to say right stop telling me about the root directories inside my coffee mug ok or maybe i want a file system which is going to be serving all the files that i need for when the machine starts to boot up so i might put them say slash root or maybe i want a fi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "em which is going to be serving all the files that i need for when the machine starts to boot up so i might put them say slash root or maybe i want a file system for just a single forward slash which is the default file system if none of these other filesystems apply or maybe i want a file system just for say ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "n the machine starts to boot up so i might put them say slash root or maybe i want a file system for just a single forward slash which is the default file system if none of these other filesystems apply or maybe i want a file system just for say home just for my user's directories maybe i want a file system sa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "aybe i want a file system for just a single forward slash which is the default file system if none of these other filesystems apply or maybe i want a file system just for say home just for my user's directories maybe i want a file system say just for temp for example if i've got lots of ram i might choose to u",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "lt file system if none of these other filesystems apply or maybe i want a file system just for say home just for my user's directories maybe i want a file system say just for temp for example if i've got lots of ram i might choose to unpack files and actually have a file system where the files themselves are n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ser's directories maybe i want a file system say just for temp for example if i've got lots of ram i might choose to unpack files and actually have a file system where the files themselves are not stored on disk but they're actually just stored in memory so when my machine reboots anything inside slash temp ob",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "r actually made a real copy of those files we were just pretending that pretended we did whereas in fact they are stored in memory but how about some file systems which actually don't exist how about some virtual file systems ok so this is really fun stuff any moment of course we've got the kernel running and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ing that pretended we did whereas in fact they are stored in memory but how about some file systems which actually don't exist how about some virtual file systems ok so this is really fun stuff any moment of course we've got the kernel running and i wonder how it's doing i wonder what it's doing how can i find",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "'s doing with each process and wouldn't it be great if i could somehow talk to it and that is how we use virtual filesystems so think about all these file systems we've just defined for example when you say something like ok list all the files inside a certain directory for example tell me all the files inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ing like ok list all the files inside a certain directory for example tell me all the files inside slash home slash angrave then we need to talk to a file system to say ok i want to read some inodes i want to get a list of files of certain directory basically i have an api so that actual api does not need to b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "n the fly whenever you ask and if you try to open a particular one of these files we can make up an answer and so that's the idea of having a virtual file system is that now we can actually populate imaginary files and imaginary directories create them describe them on the fly so that you can find out what you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " link to existing regular files you can't make a hard link to a directory ok so to an existing file there we go right the reason for that is that the file system has a strong assumption that the file directory structure is a tree and has no cycles if you as a mere mortal user could make hard links from the dee",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " to something which doesn't even exist yet so that's ok and also directories are ok the other thing which is not that surprising is that it can cross file system boundaries so remember that because a symbolic link is basically just some text we could talk about files which exist on a completely different file ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ystem boundaries so remember that because a symbolic link is basically just some text we could talk about files which exist on a completely different file system for example maybe your files exist on a usb stick and so your symbolic link would just contain the text say for example slash wherever their stores l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " mat or mount usb stick here ok and so i can talk about a symbolic link i can talk about so creating a symbolic link to a file on a totally different file system and i could store this inside my say my user directory right which one do you think has better performance ok so there is a cost of symbolic links yo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a6948c0b-717d-4a5a-afbc-f2641ef17bc1",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ot exist you won't find it on any any disk drives it's because sachdev is a something to my device here ok there we go because slash dev is a virtual file system and slash dev slash null has an amazing amount of compression you can put as many files you can copy as much output you want to this file and it does",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a6948c0b-717d-4a5a-afbc-f2641ef17bc1",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "pression you can put as many files you can copy as much output you want to this file and it doesn't take any space it is the wastepaper basket of our file system so what we're saying is look you might generate a message because a loadout doesn't exist that error message i don't care i don't want to see that er",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ok so time stop talking about how we can mount and unmount an entire file system so the reason it's called mounting and unmounting is for harks back to a time when file systems were big and heavy they might be contained on their v",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "p talking about how we can mount and unmount an entire file system so the reason it's called mounting and unmounting is for harks back to a time when file systems were big and heavy they might be contained on their very large drum there might be a large piece of magnetic tape that we actually had to put onto a",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " large drum there might be a large piece of magnetic tape that we actually had to put onto a machine so it required some physical effort to mount the file system so that you could read or write to it so today of course are full systems can be very light very tiny physically but we still use these words to talk",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "d or write to it so today of course are full systems can be very light very tiny physically but we still use these words to talk about when we have a file system that we can now access and when we want to no longer access it we can unmount it ok right so in the beginning when your machine starts up it's actual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "rts up it's actually gonna look for filesystems does described in this side is special file etc/fstab so that can describe a whole load of additional file systems like there might be a file system just for the users there might be a remote file system that is mounted on a network drive somewhere we can describ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " filesystems does described in this side is special file etc/fstab so that can describe a whole load of additional file systems like there might be a file system just for the users there might be a remote file system that is mounted on a network drive somewhere we can describe all of these inside this little t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "e etc/fstab so that can describe a whole load of additional file systems like there might be a file system just for the users there might be a remote file system that is mounted on a network drive somewhere we can describe all of these inside this little text file and it just stands for file system table s tab",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "be a remote file system that is mounted on a network drive somewhere we can describe all of these inside this little text file and it just stands for file system table s tab and that can include additional options like whether we want to load the file system that's just read only or what to do if an error occu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " inside this little text file and it just stands for file system table s tab and that can include additional options like whether we want to load the file system that's just read only or what to do if an error occurs so let's let's start kind of play with especially today we're going to mount a file system tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "the file system that's just read only or what to do if an error occurs so let's let's start kind of play with especially today we're going to mount a file system that i downloaded from the internet it's a complete working version of linux and will just explore will just to see what's inside it right one thing ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "mplete working version of linux and will just explore will just to see what's inside it right one thing we're going to see is the idea of a loop back file system so the items i've downloaded from the internet of course is just a regular file and a regular file is not what we need for a file system regular file",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " a loop back file system so the items i've downloaded from the internet of course is just a regular file and a regular file is not what we need for a file system regular file has bytes we can navigate to it we can seek backwards and forwards etc that's not quite what we need for a file system i want to be able",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "hat we need for a file system regular file has bytes we can navigate to it we can seek backwards and forwards etc that's not quite what we need for a file system i want to be able to read and write blocks so i need to have a way to say given that i've got a file that i can navigate around and read or write ind",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "s a virtual device that the kernel supports a lot of physical device no but they pretend device there's actually inside the kernel called a loop back file system which we presented a regular file and it presents to the kernel then this ability to read or write blocks in order for us to then actually mount a fi",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "em which we presented a regular file and it presents to the kernel then this ability to read or write blocks in order for us to then actually mount a file system and explore inside it ok so we're going to use that today as part of looking at this file system we're going to use a command called mount now i need",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "rite blocks in order for us to then actually mount a file system and explore inside it ok so we're going to use that today as part of looking at this file system we're going to use a command called mount now i need to be root for this so you could do is say on your own virtual machines on your laptop and mount",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " actually i need you give me an intermediate loop back device as well and then we need to give two things first of all where can we actually find the file system so in our case we're going to do today is we're going to look at the file that i downloaded from the internet called is a dot iso file so there will ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "loaded from the internet called is a dot iso file so there will be some file somewhere and second we need to say where will it appear inside our main file system so for example we might want to say you know what i want it to appear inside a anytime i look inside a directory called slash home or in our case we'",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ing to make a special directory called say something like explore and then when we look inside this directory rather than just looking at our regular file system we will go and look inside this file so the idea then is that your file system then becomes a large hierarchy of other file systems ok so the root of",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " we look inside this directory rather than just looking at our regular file system we will go and look inside this file so the idea then is that your file system then becomes a large hierarchy of other file systems ok so the root of it all we've got a single slash and then on lenox we've got things like e t c ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ing at our regular file system we will go and look inside this file so the idea then is that your file system then becomes a large hierarchy of other file systems ok so the root of it all we've got a single slash and then on lenox we've got things like e t c home user been var all of these places they themselv",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " all we've got a single slash and then on lenox we've got things like e t c home user been var all of these places they themselves could be different file systems or you could choose subdirectory within that so for example you might have home extras like that could be his own file system or you might have say ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ves could be different file systems or you could choose subdirectory within that so for example you might have home extras like that could be his own file system or you might have say slash mount and your usb device so inside that you could have a file system so the point is that we choose a path where we want",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "u might have home extras like that could be his own file system or you might have say slash mount and your usb device so inside that you could have a file system so the point is that we choose a path where we want to load where we want to mount the file system so enough talking let's go and see some action let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "nd your usb device so inside that you could have a file system so the point is that we choose a path where we want to load where we want to mount the file system so enough talking let's go and see some action let's go see this right so i was getting kind of annoyed with this long prompt so i changed it i said ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "l make a directory called say explore iso right and of course there's nothing inside explore iso right now ok so that is where we'd like to mount our file system now unfortunately i've forgotten the exact name of the iso file but let me find it pretty quickly and for that i'm going to use find so hey find star",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "found this ok that's what we're going to use so now i can say right hello melt if i just say mount without any options it let's me all of the current file systems which have been mounted but let's not worry about that right now let's instead say right i want to use the folder option i need to loop back device ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "r option i need to loop back device here's the iso file that we downloaded and let's mount that say explore ice oh ok now it gives me a hint that the file system we're using is read only and in fact we expect that with iso files because the iso format or more precisely the iso nine six six echo format worth de",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "which is a read only medium ok so this fast system type is great if you don't intend to change anything right so rights are not supported inside this file system so anyway let's go and have a look inside explore iso ansi what we found ok holder stuff actually not that much stuff so let's do find this and just ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "s is an empty file but it exists when i mount then now it's not it's it's over it we can't see it right explore iso now immediately is is the mounted file system so any files we have inside that from my old file system now invisible to us we cannot see them anymore right so time to unmount it so it does give t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "'s not it's it's over it we can't see it right explore iso now immediately is is the mounted file system so any files we have inside that from my old file system now invisible to us we cannot see them anymore right so time to unmount it so it does give the mountpoints there we go and now it's back so now we ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "aff so far system table here it is you can see for this machine there's not much stuff we've got the uid of a disk it would like to mount as our root file system here and we're giving a hint that on this we expect to find an e x t four file system but should any errors occur while were mounting it then we want",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " we've got the uid of a disk it would like to mount as our root file system here and we're giving a hint that on this we expect to find an e x t four file system but should any errors occur while were mounting it then we want to remount it just using read only we also have a swap device but we're not going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bc05bdb0-371d-4cd3-97a6-753a576a32f2",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "alright so let's talk about rate right so the big idea is we want to make our file systems resilient gay right sir why don't i have there we go ok so let's have a bit of a back story here which is that raid was born in the time where moore",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bc05bdb0-371d-4cd3-97a6-753a576a32f2",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "k so let's think about this let's imagine that you want to start a little startup which is going to grow to the size of google how would you design a file system to service all of googles app stand out all of these applications everything from gmail to docs to its website etc to its web serving we need a file ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bc05bdb0-371d-4cd3-97a6-753a576a32f2",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "ystem to service all of googles app stand out all of these applications everything from gmail to docs to its website etc to its web serving we need a file system to represent all this how do we make it resilient ok so any other sides of google then failure is not an option it's the common case so disks fail al",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bc05bdb0-371d-4cd3-97a6-753a576a32f2",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "n a single data warehouse you might have say sixty thousand one hundred thousand physical disks so replacing those is a full time job but we want our file system to be up it would be embarrassing to say excuse me moment google has to be down for a day or two we need an extremely reliable file system without th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bc05bdb0-371d-4cd3-97a6-753a576a32f2",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "e want our file system to be up it would be embarrassing to say excuse me moment google has to be down for a day or two we need an extremely reliable file system without that file system you cannot do anything else so we need to realize of failure modes go beyond just reduce go beyond just losing one or two di",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bc05bdb0-371d-4cd3-97a6-753a576a32f2",
        "lecture": "CS",
        "lecture_num": 31,
        "context": " be up it would be embarrassing to say excuse me moment google has to be down for a day or two we need an extremely reliable file system without that file system you cannot do anything else so we need to realize of failure modes go beyond just reduce go beyond just losing one or two discs inside a single rate ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bc05bdb0-371d-4cd3-97a6-753a576a32f2",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "gle approached it back in two thousand and one they used simple redundancy so around the world had kind of two or three copies of each file today the file system is similar to kind of raid design except that we use there we go reed solomon codes so reed solomon codes they crop up actually in different interest",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfe8f684-5acd-41bf-8ba0-276a3fc52ffb",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "o today of course we barely see any cd roms around but we still use that format because it's sufficiently efficient to be able to distribute complete file systems for example to install some new game or earning complete new operating system right so we used mount in order to mount an ics file using a loop back",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfe8f684-5acd-41bf-8ba0-276a3fc52ffb",
        "lecture": "CS",
        "lecture_num": 31,
        "context": " for example to install some new game or earning complete new operating system right so we used mount in order to mount an ics file using a loop back file system we did that before how can you download things from the command line might have mentioned this before curl is pretty useful cold behaves like cat exc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "'s called pipe writer and it might send down a pipe i the message ella island or noise ok so for this we're going to use some named pipes so it in my file system i'm going to make pipe one and pipe two here it is and let me actually kind of make these pipes in now i actually want to actually start sending data",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "ur ok so should all my code however run as administrator vernors route maybe not maybe some of it should for example if you're going to work with the file system run in a much more constrained way perhaps i for example should run it under a certain user that only has access to a certain set of directories simp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "d for example perhaps i need some part that's going to interact with the graphics and the font system i got other parts which might interact with the file system in order for me to cash information and i've got other parts which for example my implement my javascript interpreter or hot spot compiler or somethi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cd13b51-dc41-427e-91b3-c63a9d8334fe",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "oose a page that either i have a copy on disk for example its current code or i have to copy that dirty page to disk maybe to page store or a file or file system dedicated to supporting my virtual memory so now what's happened now every nanosecond every little memory right is going to result in a disk access a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "580ae97f-7447-4844-927b-098638c01c95",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "e different i nodes in order to kind of traverse through different directories in sub directories ok so it was the first thing that happens we have a file system mounted at route so we'll assume there isn't a file system mounted inside dtc instead were mounting the file system at this root directory so that's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "580ae97f-7447-4844-927b-098638c01c95",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "fferent directories in sub directories ok so it was the first thing that happens we have a file system mounted at route so we'll assume there isn't a file system mounted inside dtc instead were mounting the file system at this root directory so that's going to when we read that directory listing we are going t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "580ae97f-7447-4844-927b-098638c01c95",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "irst thing that happens we have a file system mounted at route so we'll assume there isn't a file system mounted inside dtc instead were mounting the file system at this root directory so that's going to when we read that directory listing we are going to get back a listing of directory names like et see and i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "kind of dockerfile script that says ok start from a bun to run these unbuntu things to install a hollow door stuff and copy some basic stuff into the file system of that image and then finally this will be the default command if no one if you know one specifies what that process name should be if you just run ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec6fca4d-5cae-48dd-b541-e7bae7852408",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "hub where i can create image and then post it from other people posted for people to use secondly what doctor does is it has a special kind of set of file systems where i can use what's called an overlay technique meaning that i might start say with unbuntu image complete image of a working copy of emblem two ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ec6fca4d-5cae-48dd-b541-e7bae7852408",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "ectory with these files and darker maintains a delta the difference between these so as you can see it's car is currently downloading various kind of file system images one of these will be a version of a bunch of that is built upon an in a moment when it's finished we go we've got the complete set of images t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec6fca4d-5cae-48dd-b541-e7bae7852408",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "ivileges so if i can find a vulnerability inside that docker code or if i can find a vulnerability inside a standard kind of kernel module like say a file system driver then all bets are off now i can have complete access all of the memory of the real machine so it's not perfect it's not perfect security right",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecc913a8-cf8a-4205-b23c-530df9ebc4eb",
        "lecture": "CS",
        "lecture_num": 39,
        "context": " is the producer consumer problem and the idea that i've got one or more process is producing things so for example that might be i'm reading off the file system it might be a server socket that's receiving things might be a pipe it doesn't matter the point is i've got a stream of stuff being sent to me and ra",
        "label": "Use"
      }
    ]
  },
  {
    "text": "file descriptor",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "oesn't matter whether it's to a pipe or network socket or file, i'm going to use the low level system calls called read and write. and they work with file descriptors. and initially, you get actually three file descriptors for free: one for input, one for output, and one for an output error stream as well. and we ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "r file, i'm going to use the low level system calls called read and write. and they work with file descriptors. and initially, you get actually three file descriptors for free: one for input, one for output, and one for an output error stream as well. and we can make more by opening files [using?] other objects, b",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "t's actually \"really cool about these, this gets \"\"lowest level,\"\" there\" is the fact that they can be used with different kinds of objects. so these file descriptors that we have, they're just little integers, little non negative integers, i've mentioned three of them already, zero, one, and two, for the input, o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "of our internet is how we can get two machines to kind of talk to each other. so behind that all is just a simple idea of my process has these little file descriptors. that is when i want to talk about a particular kernel object that want to read or write to. so anytime you see read or write, you know that you're ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " to talk about a particular kernel object that want to read or write to. so anytime you see read or write, you know that you're working with a little file descriptor. but above that, we can now talk about what does the c library give us? and the c library is going to make our world a little bit easier when we want",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "type maybe assuming network and underneath all of those ideas is very simple and useful little having cold here could read and notice look it takes a file descriptor just like right did and this is the mechanism by which all of the things you've seen in c in c plus plus and python java etc read from files and othe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "t do that but we can use it in a pointer context so let's do that let's call size t and will say result and say ok read now at this point i need that file descriptor are going to want to standard input which is zero there is a constant i'd have to look it up but i now need to say we actually go and we want to put ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "hat i've seen ok alright so first thing is close one what is going on here right so you know and i know that by default your little process has three file descriptors little integers start with zero the allow us to read and write and we get by default three stdin stdout stderr<br> and we've just close standard out",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "nd write and we get by default three stdin stdout stderr<br> and we've just close standard out and immediately we call open so we're asking for a new file descriptor and we are giving it a filename log dot text now we're giving some hints about how we want you want to use this we want to open this we'd invite if i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "d on a moment didn't we just close down it out yes you're correct but we didn't tell the c library the c libraries still thinks it can send things to file descriptor one so does that mean that none of this is going to appear well almost here's a little cunning trick we're going to call open and if that succeeds th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "ll almost here's a little cunning trick we're going to call open and if that succeeds the fast the colonel will use the smallest non negative integer file descriptor that is currently unused and i think we can guess what it's going to be this that's right it's far descriptive one number one we closed out so we kno",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "right it's far descriptive one number one we closed out so we know that's available so we can reason that this particular open call will be giving us file descriptor one right so what do we put inside there with the sea life is going to get captains log with a new line and then call chdir what does chdir do do as ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d20bd8cb-7714-4093-a0bd-850b11d62c39",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "n see it doesn't actually do any calculation it simply takes what's in my heap memory and displays it and send it out to spell it out his stand up my file descriptor one ok right and then what about my my rain effect while here's here's my loop i'm going to run remember this little piece of code ten times ten diff",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ke a file handle so when we've done things like f open to open a file handle or passive called open the kind of posix the low level version to open a file descriptor the thing you got back words maybe just a little integer or one of these see objects right so file f open this is not actual father spain stored on d",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ke a file handle so when we've done things like f open to open a file handle or passive called open the kind of posix the low level version to open a file descriptor the thing you got back words maybe just a little integer or one of these see objects right so file f open this is not actual father spain stored on d",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "o here we go let's make a pipe so we've done that so far. and now i will i'll make a couple of variables second myself that the read end is the first file descriptor so let's fds[0] and the write_end is fds[1] so we know we can always kind of read things from a pipe \"we do things like \"\"ok tell me the number of by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ngs from a pipe \"we do things like \"\"ok tell me the number of bytes you\" \"read\"\"\" ok and will call read(). so read()... here's the read end the first file descriptor of my pipe and here's a buffer and here you can use all of the buffer this time ok i don't care about turning that into a null terminated string. let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "d simply block on read(), so what i'm going to do actually is close the write end. so let's say there's no more bytes that we want to write into this file descriptor into this pipe right so that means we're done what do you think will happen when we get to this read call ok let's let's try it. let's compile it and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "losing into the child why is it now that we never get that magic value zero ok so well problem it is that the kernel is keeping track of all of these file descriptors and the read and write end both exist inside the parent and the child processes so both parent and child could be writing into the right end in both",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ent down this pipe so we can't yet tell the reader that we're done it's still possible that the parents can send bytes because it still has an active file descriptor so if we want to use this mechanism it's important that we close the file descriptor in all processes and so if for example we are using this to send",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "e that the parents can send bytes because it still has an active file descriptor so if we want to use this mechanism it's important that we close the file descriptor in all processes and so if for example we are using this to send if you want to use the pipe to send bites from the child to the parent then immediat",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "sing this to send if you want to use the pipe to send bites from the child to the parent then immediately after forking we should close the close the file descriptor we're not using so this means that in the parent i wanted to close the invite end 'cause i'm not using that ok ok so let's close that right and now h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "thing from the pipe so if you've exhausted the pipe meaning that you we've read everything out and there's normal writers because so order the active file descriptors had been closed that's going to discover that that you finished and the other one we've seen is when you try to write the first time on a pipe that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "mmediately unless you call f flush in order to force the c library to say hey i stopped worrying about performance just send everything you've got to file descriptor ok so remember to use fflushf() and just simply put in a new line is not sufficient because these are not terminals so ok but that simply using pipe ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55699194-1692-490a-a863-a26370265ef7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "tion for you why do you think p right exists and when would you use it ok so what is p right k so here it is it behaves a lot like right we give it a file descriptor as usual we give it a buffer as usual and the number of bytes we want to write but we also give it an offset in other words we don't care about the c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ommunicate between two processes. now we're going to start with what's called 'unnamed pipes' where the only way we can talk about them is just using file descriptors, but later on will have a quick look at creating 'named pipes' where they actually exist in the file system. right, so let's get started. okay, do i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "all printf(), fprintf(), and fread(), fwrite(), etc... underneath it all we're \"talking to the kernel to say \"\"hey, i want to write to a\" \"particular file descriptor.\"\" ok so here's my file descriptor\" and that is typically a small number say 0, 1, or 2 for standard in, standard out, and standard error and then if",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "), fwrite(), etc... underneath it all we're \"talking to the kernel to say \"\"hey, i want to write to a\" \"particular file descriptor.\"\" ok so here's my file descriptor\" and that is typically a small number say 0, 1, or 2 for standard in, standard out, and standard error and then if i start making files with fopen(),",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ing files with fopen(), i'm going to have some more... 3, 4, 5, etc. there is a limit to these still. your processor can't have an infinite number of file descriptors and we also will see these again when we actually wanted to make network code as well. so this will be the way that we send a bytes over the network",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " going to use this with the pipe. so, i need a way to create a pipe and each my anonymous pipes have an input and output. so that means they have two file descriptors, ok. so let me make a little array with just enough space for two file descriptors. ok, so there we go. and right now these aren't initialized to an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "nymous pipes have an input and output. so that means they have two file descriptors, ok. so let me make a little array with just enough space for two file descriptors. ok, so there we go. and right now these aren't initialized to anything. but if i called pipe() then you can pass in the starting address at my two ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " i called pipe() then you can pass in the starting address at my two integers. ok that's easy. it's just 'fds'. let's call it 'fds'. right for my two file descriptors. and if that succeeds then now i've created myself a pipe! so a pipe has a read and a write end. so if you just remember rw because we say read and ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "s then now i've created myself a pipe! so a pipe has a read and a write end. so if you just remember rw because we say read and write. then the first file descriptor will be the one that we want to read from and the second one will be the one that we want to write to ok so let's actually do that let's actually kin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "to write to ok so let's actually do that let's actually kind of have a play with this. right there so i will start writing some code. so i'll have my file descriptors. \"ok and then we will say \"\"i need to pipe, please\"\" and here are\" my integers better code would check this succeeds to do check ok right and now th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "e's clang for fun an over there call it pipe demo one ok so yeah great we've got something which is working now we've got as you can see it's made to file descriptors so great let me actually use these i can try to read from the first one and write to the second one ok so let's do that let's have a buffer here rig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " anything to those bites yet ok so let's write some bites so what do you think about the following let's write an remembering the right is the second file descriptor case so one and will say hello right and how many bytes do we want to send let's send one two three four five one two three k let's do it let's do si",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ting it out let's instead yeah that's not right it out to standard outlets actually just send it down the other pipe ok so i want to use the second defile descriptor so that is another one right and meanwhile my my child let's read from that so i'll need a some space for the result ok so character that's called bu",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "llo so briefly talk about how we can do that right so there's two easy ways to send more interesting data like some numbers. one way is to now wrap a file descriptor with a file handle so for example we can do things like fdopen() so if you call fdopen() you pass in a file descriptor so for example if you want a f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "bers. one way is to now wrap a file descriptor with a file handle so for example we can do things like fdopen() so if you call fdopen() you pass in a file descriptor so for example if you want a file handle to wrap standard out you could do that but let's wrap one of our new file descriptors like the write end. he",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " fdopen() you pass in a file descriptor so for example if you want a file handle to wrap standard out you could do that but let's wrap one of our new file descriptors like the write end. here it is. and i want to use this for writing ok so now what i call fdopen() rather than opening a file all i've done is ask to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "onds yeah great we get thirty characters back and then we send them back to the child ok so remember this trick that you can convert from a low level file descriptor to sea level four handle using fdopen() right that's enough for one video in the next video let's talk about when pipes go bad or rather what can we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "e is true for open file open files as well ok so when you call say f open underneath you know that actually is going to call open to give us a little file descriptor and that file descriptor is shared if we call fork so let's just draw a little model here that if i've got my parent process just here with file desc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "pen files as well ok so when you call say f open underneath you know that actually is going to call open to give us a little file descriptor and that file descriptor is shared if we call fork so let's just draw a little model here that if i've got my parent process just here with file descriptor here it is say fil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "escriptor and that file descriptor is shared if we call fork so let's just draw a little model here that if i've got my parent process just here with file descriptor here it is say file descriptor number three that is actually of course referring to an actual object inside the kernel that we indirectly talk to by ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "tor is shared if we call fork so let's just draw a little model here that if i've got my parent process just here with file descriptor here it is say file descriptor number three that is actually of course referring to an actual object inside the kernel that we indirectly talk to by either calling read or write se",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " before forking or after forking so that you don't unnecessarily share these objects so big big takeaway here is we saw that closing a file handle or file descriptor inside the child doesn't affect the parent these things are reference counted and secondly that the kernel objects themselves maintain state about th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " up the standard input output and standard error ok so how do i do that well there's one of the thing called duck to sewed up two allows me to rename file descriptors so right now i've got my pipe file descriptors which i'm going to use to actually be able to send data to my process or all captured this output but",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "r ok so how do i do that well there's one of the thing called duck to sewed up two allows me to rename file descriptors so right now i've got my pipe file descriptors which i'm going to use to actually be able to send data to my process or all captured this output but i want to rename those to be zero one or two o",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "e is true for open file open files as well ok so when you call say f open underneath you know that actually is going to call open to give us a little file descriptor and that far to script is shared if we call fork so let's just draw a little model here that if i've got my parent process just here with file descri",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " descriptor and that far to script is shared if we call fork so let's just draw a little model here that if i've got my parent process just here with file descriptor here it is safe i'll skip to number three that is actually of course referring to an actual object inside the kernel that we indirectly talk to the b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "before forking or after forking so that you don't unnecessarily share these objects. ok, so big takeaway here is we saw that closing a file handle or file descriptor inside the child doesn't affect the parent (these things are reference counted) and secondly that the kernel objects themselves maintain state about ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dcde2695-ae8c-4032-aceb-2d001a2ec718",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " you: why do you think pwrite exists and when would you use it? ok, so what is pwrite? ok, so here it is. it behaves a lot like write(). we give it a file descriptor as usual, we give it a buffer as usual, and the number of bytes we want to write, but we also give it an offset. in other words, we don't care about ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "together and the nice thing about this one is that it's easy to write and easy to test as well ok so but it shows it demonstrates that you understand file descriptors and exact all this good stuff right so here's what we want to do we want to use forks so we have a child and a parent process and we want to use a b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "otta figure out how to do that how would you like to send send those those bytes it so you're going to need to use kind of say open to get yourself a file descriptor but then that father script won't be the correct file descriptor so the good news is that you can use dup2 two to re label it to file descriptor zero",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ose those bytes it so you're going to need to use kind of say open to get yourself a file descriptor but then that father script won't be the correct file descriptor so the good news is that you can use dup2 two to re label it to file descriptor zero in order to be standard in of the child process ok so how you ge",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "lf a file descriptor but then that father script won't be the correct file descriptor so the good news is that you can use dup2 two to re label it to file descriptor zero in order to be standard in of the child process ok so how you get to make this work right so i'll let you figure this one out have a great writi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "be unhappy ok so the thing that i don't like is that we open the file but we never closed it so if we keep calling this eventually we will run out of file descriptors and the kernel will say i'm not giving giving you another file descriptor right now ok so then f open would fail so what we forgot to do was to clos",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "e never closed it so if we keep calling this eventually we will run out of file descriptors and the kernel will say i'm not giving giving you another file descriptor right now ok so then f open would fail so what we forgot to do was to close our file right so we're finished with the file as soon as fread is finish",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "now you know about fopen where i can pass in a filename k blah blah blah but there's also function called fdopen where i can just pass in an existing file descriptor so if we write f d open it would be pretty easy to then also implement f open which just calls open and then we can delegate the rest of the work to ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": " just calls open and then we can delegate the rest of the work to this ft open call right so here's what we need to do then we're going to be given a file descriptor and we want to create one of these file objects now normally these are opaque structures normally as programmers we don't need to peek inside to see ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ok so this is what i want to put inside my file struct i need to store several things first of all yeah i definitely need to know about the low level file descriptor that i'm going to need when actually call read and write secondly i want to have some kind of buffer and the purpose of my buffer is to actually redu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "etely fallen other words we've reached the capacity ok so let's some sketch out some code then of how we can use this right then so you've given me a file descriptor the first time going to do then is just create enough space for this struct ok so you can see we're already using typedef so i don't need to keep on ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "then size of this struct ok so size of file not file pointer ok and then i can start to set things up in here so i can do things like ok right as the file descriptor could be equal to something was sending in the buffering we can set to some kind of default right maybe we want to try to test the current file descr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "descriptor could be equal to something was sending in the buffering we can set to some kind of default right maybe we want to try to test the current file descriptor and figure out if it's corresponds to a terminal or not but for today let's just make our implementation as simple as possible and for example let's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ary in practice we might want to do more than this so for example right now we're not we're currently not making use of the mode hints about how this file descriptors going to be used whether we want to use it for reading or writing or both secondly more performant version of my implementation here might actually ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "bout how we can implement fdopen() now we've implemented this i can now if i wish implement fopen() that would just need to call open that gives me a file descriptor and now i can use that far descriptor an then call my fdopen in order to be in order to be complete ok so great we've got that working in the next vi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "k so great we've got that working in the next video let's think about how i could then implement say fputs() which is going to write a c file into my file descriptor ok right i'll see you then bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d134a7b4-0001-41ff-bfa4-8f4f15a30f69",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ll this moment it's time for us to actually say to the system ok here's some bites so we would want to say ok hey write and inside my file i know the file descriptor so let's grab that the buffer was that i think we called it just buffer and the number of bytes that's not going to be the buffer capacity instead we",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hey are right so all of these are actually actually just constants defined integers refer to the value of earner ok so your fault you gave an invalid file descriptor negative number we've got things like ok you give about a file descriptor which doesn't actually refer to any active fires scripture we can use for w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " integers refer to the value of earner ok so your fault you gave an invalid file descriptor negative number we've got things like ok you give about a file descriptor which doesn't actually refer to any active fires scripture we can use for writing and his one that we're going to talk about in a little bit more so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " kind of taking the server world by storm but we can make javascript on the server that uses asynchronous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bites so as you can see there's p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "onous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bites so as you can see there's plenty and plenty of errors that we might want to deal with at some point or gate right but we are ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7c19bcb8-2e74-423d-94b8-77b2b5ccb983",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "n pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7c19bcb8-2e74-423d-94b8-77b2b5ccb983",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ad a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actually tell you whether where the error curd maybe it happened early on inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "they are right so all of these are actually actually just constants defined integers refer to the value of errno ok so your fault you gave an invalid file descriptor negative number we've got things like ok you give about a file descriptor which doesn't actually refer to any active file descriptor we can use for w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "d integers refer to the value of errno ok so your fault you gave an invalid file descriptor negative number we've got things like ok you give about a file descriptor which doesn't actually refer to any active file descriptor we can use for writing and his one that we're going to talk about in a little bit more so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " gave an invalid file descriptor negative number we've got things like ok you give about a file descriptor which doesn't actually refer to any active file descriptor we can use for writing and his one that we're going to talk about in a little bit more so here's the interrupt one to say alright that you attempt to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " kind of taking the server world by storm but we can make javascript on the server that uses asynchronous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bites so as you can see there's p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "onous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bites so as you can see there's plenty and plenty of errors that we might want to deal with at some point ok right but we are just go",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "923b48d1-82c9-4c57-9d23-3c0a31dd37d0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "an pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from one particular file descriptor and then try to write those bytes somewhere else to another file descriptor fd two over here if i then check if errno zero or not then i can't actual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "923b48d1-82c9-4c57-9d23-3c0a31dd37d0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "had a whole lot of calls let's say that i try to read from one particular file descriptor and then try to write those bytes somewhere else to another file descriptor fd two over here if i then check if errno zero or not then i can't actually tell you whether where the error curd maybe it happened early on inside m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "95f1881e-d728-4112-81d1-6c7060a34beb",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "mainder of bytes have not yet been sent and we can do that multiple times or we've got the case that we've now send all of the bytes correctly to the file descriptor so great quick comments on this is if you implement something with read well with reed you've got one other possibility which is that there's no more",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1020a6c-61f2-4b16-b8a8-b2f4b04242c5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "n pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1020a6c-61f2-4b16-b8a8-b2f4b04242c5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ad a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actually tell you whether where the error curd maybe it happened early on inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b96e8ea2-f596-4b5a-807e-4646d78cc7a0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "n pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b96e8ea2-f596-4b5a-807e-4646d78cc7a0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ad a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actually tell you whether where the error curd maybe it happened early on inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bbb895a1-cba7-4548-8727-a436ca271b72",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "n pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bbb895a1-cba7-4548-8727-a436ca271b72",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ad a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actually tell you whether where the error curd maybe it happened early on inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hey are right so all of these are actually actually just constants defined integers refer to the value of earner ok so your fault you gave an invalid file descriptor negative number we've got things like ok you give about a file descriptor which doesn't actually refer to any active fires scripture we can use for w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " integers refer to the value of earner ok so your fault you gave an invalid file descriptor negative number we've got things like ok you give about a file descriptor which doesn't actually refer to any active fires scripture we can use for writing and his one that we're going to talk about in a little bit more so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " kind of taking the server world by storm but we can make javascript on the server that uses asynchronous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bytes so as you can see there's p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "onous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bytes so as you can see there's plenty and plenty of errors that we might want to deal with at some point or gate right but we are ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ere there we go result and then ok so then result goes to ai vertical so great we've got that but we better check to see if it fails so if the socket file descriptor is negative one we know it didn't work so at this point we can print something out using error no so will say socket failed ok and let's just exit ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "o escape out of my c code and actually start talking to the network card and for that i need a socket so this is the thing that is going to give me a file descriptor and we can pass some information into this is to say what kind of socket we want do you want a tcp or udp kind of socket in other words do you want t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "it here so we'll talk about how to fill these pieces of information in a moment but i want you to realize that the result of calling socket is just a file descriptor so this if you like is very similar to calling open or very similar to calling pipe now i've actually got something that i can use great but no bites",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "st use this socket ok so notice that in both these cases i careful to check the error values ok so this will be a non negative value if it is a valid file descriptor if it returns negative one then we know that my attempt to create a socket failed perhaps i don't have privileges perhaps i've created too many socke",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "see if this failed if it returned negative one let's find out our value of erno and print out a useful message and quit ok so what do we do with this file descriptor well if we made a tcp won't guess what we can call read and write on it so in this sense it's a little different from a pipe in a sense that it suppo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "l read and write on it so in this sense it's a little different from a pipe in a sense that it supports two way communication that if i write to this file descriptor then the server will see the bites if i read from this file descriptor then i'm reading bites from the server has sent me some things to watch out fo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "pipe in a sense that it supports two way communication that if i write to this file descriptor then the server will see the bites if i read from this file descriptor then i'm reading bites from the server has sent me some things to watch out for of course is that we're done right can return negative one and due to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " things to know about this first of all there's shutdown which we can use to say ok i don't want to send or receive any more bites on this particular file descriptor so i'm going to say ok here's my socket fd and then i can shut down that socket for either reading or writing or both so i got a choice there and wha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ding then the other side is going to discover that it can't send me anymore bites but are we done? no! we should also call close just like you have a file descriptor of the file is time to have free up these resources ok so remember to close it as well ok so the these have two different effects the shutdown is a w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "different effects the shutdown is a way to tell the other end that we're done either receiving or sending or both and close actually says right, this file descriptor can now be used for other things remember that you only have a limited number of fire descriptors you can actually use for each process right so with",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ly make our connection ok so i want to make myself a socket so let me have a why you ok that's fix the indenting here right ok so let's have a socket file descriptor this is how we're going to talk to the server so we'll make a socket right so the first thing is the kind of socket well ok where do i get that from ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ere there we go result and then ok so then result goes to ai protocol so great we've got that but we better check to see if it fails so if the socket file descriptor is negative one we know it didn't work so at this point we can print something out using errno so we'll say socket failed ok and let's just exit ok r",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "er ok so let's call connect right so i'll call it connect result let's call connect right so the parameters for connect is first of all is the socket file descriptor ok so we've got that but then we need to pass in a pointer to a struct now all styles coding for networks would have is actually assembled and create",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " escape out of my c code and actually start talking to the network card and for that i need a socket. so this is the thing that is going to give me a file descriptor and we can pass some information into this is to say what kind of socket we want. do you want a tcp or udp kind of socket in other words do you want ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ere. so we'll talk about how to fill these pieces of information in in a moment but i want you to realize that the result of calling socket is just a file descriptor so this if you like is very similar to calling open or very similar to calling pipe. now i've actually got something that i can use -- great, but no ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " use this socket ok so notice that in both these cases i'm careful to check the error values ok so this will be a non negative value if it is a valid file descriptor if it returns negative one then we know that my attempt to create a socket failed perhaps i don't have privileges perhaps i've created too many socke",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ee if this failed if it returned negative one let's find out our value of errno and print out a useful message and quit ok so what do we do with this file descriptor well if we made a tcp one guess what, we can call read and write on it so in this sense it's a little different from a pipe in a sense that it suppor",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "l read and write on it so in this sense it's a little different from a pipe in a sense that it supports two way communication that if i write to this file descriptor then the server will see the bytes if i read from this file descriptor then i'm reading bytes the server has sent me some things to watch out for of ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "pipe in a sense that it supports two way communication that if i write to this file descriptor then the server will see the bytes if i read from this file descriptor then i'm reading bytes the server has sent me some things to watch out for of course is that read and write can return negative one and due to a sign",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " things to know about this first of all there's shutdown which we can use to say ok i don't want to send or receive any more bytes on this particular file descriptor so i'm going to say ok here's my socket fd and then i can shut down that socket for either reading or writing or both so i got a choice there and wha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ing then the other side is going to discover that it can't send me any more bytes but are we done? no, we should also call close just like you have a file descriptor of the file, it's time to free up these resources ok so remember to close it as well ok so these have two different effects the shutdown is a way to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " different effects the shutdown is a way to tell the other end that we're done either receiving or sending or both and close actually says write this file descriptor can now be used for other things remember that you only have a limited number of file descriptors you can actually use for each process right so with",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "r sending or both and close actually says write this file descriptor can now be used for other things remember that you only have a limited number of file descriptors you can actually use for each process right so with this in mind i think it's time to fill in some code here but there's one thing we haven't talked",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "o escape out of my c code and actually start talking to the network card and for that i need a socket so this is the thing that is going to give me a file descriptor and we can pass some information into this is to say what kind of socket we want do you want a tcp or udp kind of socket in other words do you want t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ket here so we'll talk about how to fill these pieces of information in airmont but i want you to realize that the result of calling socket is just a file descriptor so this if you like is very similar to calling open or very similar to calling pipe now i've actually got something that i can use great but no bites",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "st use this socket ok so notice that in both these cases i careful to check the error values ok so this will be a non negative value if it is a valid file descriptor if it returns negative one then we know that my attempt to create a socket failed perhaps i don't have privileges perhaps i've created too many socke",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "see if this failed if it returned negative one let's find out our value of erno and print out a useful message and quit ok so what do we do with this file descriptor well if we made a tcp won't guess what we can call read and write on it so in this sense it's a little different from a pipe in a sense that it suppo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "l read and write on it so in this sense it's a little different from a pipe in a sense that it supports two way communication that if i write to this file descriptor then the server will see the bites if i read from this file descriptor then i'm reading bites from the server has sent me some things to watch out fo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "pipe in a sense that it supports two way communication that if i write to this file descriptor then the server will see the bites if i read from this file descriptor then i'm reading bites from the server has sent me some things to watch out for of course is that we're done right can return negative one and due to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " things to know about this first of all there's shutdown which we can use to say ok i don't want to send or receive any more bites on this particular file descriptor so i'm going to say ok here's my socket fd and then i can shut down that socket for either reading or writing or both so i got a choice there and wha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ing then the other side is going to discover that it can't send me anymore bites but are we don't know we should also call close just like you have a file descriptor of the file is time to have free up these resources ok so remember to close it as well ok so the these have two different effects the shutdown is a w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " different effects the shutdown is a way to tell the other end that we're done either receiving or sending or both and close actually says write this file descriptor can now be used for other things remember that you only have a limited number of fire descriptors you can actually use for each process right so with",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "cket is the front door to your shop but it's not actually going to be the way that you talk to your clients instead when accept returns you get a new file descriptor one for each customer which is the private communication channel between you and that client so with this new file descriptor that's how we're going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "t returns you get a new file descriptor one for each customer which is the private communication channel between you and that client so with this new file descriptor that's how we're going to be calling read and write so accept will return immediately if there's customers which have completed their handshake and w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "st a process that particular customer so let's see what we can do then right with this client we'll hear what they've got to say so using this client file descriptor i'm going to listen to what they're going to send me ok so let me read up to nine hundred and ninety nine bytes and if they give me something valid t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "oth so in this case let's use we don't want to do anymore reading or writing so let's edit my code to say we're all done with this connection but the file descriptors still exists so that's taking up unnecessary resources so now actually let me kind of reset that ok alright so now i've got my little server finishe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " tcp server right now well right ok so great is listening woo right i think it's time that we try to connect to it ok so you'll see it's listening on file descriptor three so that's our passive passive port k and let me try to connect to it ok right and it prints out hello ok so you'll see that we actually had sev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "e actually send it into sixty plates just just to request that that home page you also might notice that we keep reusing the file descriptive four so file descriptor three was the one we first made for passive socket all of our connections are we using this file descriptive number four why because we remember to c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ctions are we using this file descriptive number four why because we remember to close it down each time so the kernels able to reuse that particular file descriptor number if we forgot to close it down then eventually we would fail and accept would would not be able to give us a valid file script anymore so our w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "irst entry so i make a socket with the wright family and the right socket type and then i'm going to connect and connect all that needs is the socket file descriptor key and the address and the length of of that struct ok so let's compile this then we talk about the remainder of the code key right so ok will stop ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "nd the server failed event that we finished sending information and finished receiving and also we should polite code should also call clothes on the file descriptor so we should also call socket close on the file descriptor socket to say hey let's free up this socket but as this is very simple and short demo code",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "tion and finished receiving and also we should polite code should also call clothes on the file descriptor so we should also call socket close on the file descriptor socket to say hey let's free up this socket but as this is very simple and short demo code that's going to happen automatically when the process shut",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "irst entry so i make a socket with the wright family and the right socket type and then i'm going to connect and connect all that needs is the socket file descriptor key and the address and the length of of that struct ok so let's compile this then we talk about the remainder of the code key right so ok will stop ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "nd the server failed event that we finished sending information and finished receiving and also we should polite code should also call clothes on the file descriptor so we should also call socket close on the file descriptor socket to say hey let's free up this socket but as this is very simple and short demo code",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "tion and finished receiving and also we should polite code should also call clothes on the file descriptor so we should also call socket close on the file descriptor socket to say hey let's free up this socket but as this is very simple and short demo code that's going to happen automatically when the process shut",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "cket is the front door to your shop but it's not actually going to be the way that you talk to your clients instead when accept returns you get a new file descriptor one for each customer which is the private communication channel between you and that client so with this new file descriptor that's how we're going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "t returns you get a new file descriptor one for each customer which is the private communication channel between you and that client so with this new file descriptor that's how we're going to be calling read and write so accept will return immediately if there's customers which have completed their handshake and w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "t to process that particular customer so let's see what we can do then right with this client we'll hear what they've got to say so using this client file descriptor i'm going to listen to what they're going to send me ok so let me read up to nine hundred and ninety nine bytes and if they give me something valid t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "oth so in this case let's use we don't want to do anymore reading or writing so let's edit my code to say we're all done with this connection but the file descriptors still exists so that's taking up unnecessary resources so now actually let me kind of reset that ok alright so now i've got my little server finishe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "cp server right now well write ok so great it's listening woo right i think it's time that we try to connect to it ok so you'll see it's listening on file descriptor three so that's our passive passive port k and let me try to connect to it ok right and it prints out hello ok so you'll see that we actually had sev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ient and you said we actually send it two hundred sixty bytes just just to request that that home page you also might notice that we keep reusing the file descriptor four so file descriptor three was the one we first made for passive socket all of our connections are reusing this file descriptive number four why b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ually send it two hundred sixty bytes just just to request that that home page you also might notice that we keep reusing the file descriptor four so file descriptor three was the one we first made for passive socket all of our connections are reusing this file descriptive number four why because we remember to cl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ections are reusing this file descriptive number four why because we remember to close it down each time so the kernels able to reuse that particular file descriptor number if we forgot to close it down then eventually we would fail and accept would would not be able to give us a valid file descriptor anymore so o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "t particular file descriptor number if we forgot to close it down then eventually we would fail and accept would would not be able to give us a valid file descriptor anymore so our web server would stop working when i said there's not much of a web server right now because it's not truly actually returning web web",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "first entry so i make a socket with the right family and the right socket type and then i'm going to connect and connect all that needs is the socket file descriptor key and the address and the length of of that struct ok so let's compile this then we talk about the remainder of the code okay alright so ok we'll s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "not truly part of the posix standard but it makes our life a lot easier what it does is it is equivalent to write in the sense that it takes a socket file descriptor but it also gives me formatted information as well so i can do things like %s, %d and and start passing in additional parameters ok so if you've got ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "he server at the other end that we finished sending information and finished receiving and also we should polite code should also call close() on the file descriptor so we should also call socket close on the file descriptor socket to say hey let's free up this socket but as this is very simple and short demo code",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "tion and finished receiving and also we should polite code should also call close() on the file descriptor so we should also call socket close on the file descriptor socket to say hey let's free up this socket but as this is very simple and short demo code that's going to happen automatically when the process shut",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ually just the value o for our regular tcp ip type sockets right ok so we've made ourselves a socket will check to see if it worked if we got a valid file descriptor now let's bind that to an actual network port ok so this is when we actually start saying right i want to use a particular port ok so we've done that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ed and first person gets turned away ok so here's my little service loop here we're going to do is when someone connects great will have now a client file descriptor we'll print it out and we could immediately tell this socket hey by the way we refuse to read anymore i'm just not listening anymore to any bytes tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "say hi we'll write three bytes which is h and i and a new line to the client and because we don't want to say anymore let's shut down now that client file descriptor for writing as well and then finally because we have done we can actually close it we can release the file descriptor so we can reuse it ok and then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "let's shut down now that client file descriptor for writing as well and then finally because we have done we can actually close it we can release the file descriptor so we can reuse it ok and then we'll go round again so let's compile this and run it ok so off we go like will run it and we'll see that it says oh b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "t actually it's connected to port thousand is a listing on port thousand and twenty four so there we go we see that finally accept returned gave me a file descriptor and it went down the loop and decided to block again ok if i use instead of netcat if i use telnet the same thing right so we great we connect it pri",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "the other way you might go from host to network right so i think that's all i want to say we talked about shutdown() we talked about why we close the file descriptors and let's just for fun let's before we close out this video let's not close it ok so off we go right and the other thing i'll do is before running t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "people arrived to our restaurant before we call it call accept and now if i keep connecting you'll notice on the other side i'm starting to use up my file descriptors here let's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited nu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "er side i'm starting to use up my file descriptors here let's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited number of file descriptors that it's able to use ok right and that's the security idea because we don't want one proce",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "et's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited number of file descriptors that it's able to use ok right and that's the security idea because we don't want one process using up all of the kernel resources will sign off her",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "lly just the value o of for our regular tcp ip type sockets right ok so we've made ourselves suck it will check to see if it worked if we got a valid file descriptor now let's bind that to an actual network port ok so this is when we actually start saying right i want to use a particular port ok so we've done that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "and first person it gets turned away ok so here's my little service loop here we're going to do is when someone connects great will have now a client file descriptor will print it out and we could immediately tell this socket hey by the way we refuse to read anymore i'm just not listening anymore to any bytes are ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "say hi will write three bites which is nature nine in new line to the client and because we don't want to say anymore let's shut down now that client file descriptor for writing as well and then finally because we have done we can actually close it we can release the file descriptor so we can reuse it ok and then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "let's shut down now that client file descriptor for writing as well and then finally because we have done we can actually close it we can release the file descriptor so we can reuse it ok and then we'll go round again so let's compile this and run it a case so off we go like will run it and we'll see that it says ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " the other way you might go from host to network right so i think that's all i want to say we talked about shut down we talked about why we close the file descriptors and let's just for file let's before we close out this video let's not close it or case so off we go right and the other thing i'll do is before run",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "a hundred people arrived or reston before we call it call accept and now if i keep connecting your notice on the other side i'm starting to use up my file descriptors here let's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited nu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "er side i'm starting to use up my file descriptors here let's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited number of file descriptors that it's able to use ok right and that's the security idea because we don't want one proce",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "et's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited number of file descriptors that it's able to use ok right and that's the security idea because we don't want one process using up all of the carnal resources will sign off her",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "s us allies typical of level of abstraction here and it's very easy to use we call opendir and that internally is going to open a file with a using a file descriptor so for example let's open the current directory and then we can keep calling reader to read the next entry ok so when we do that we get a pointer bac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "that's a problem that we haven't closed resources so this actually security problem that it might work once or twice or ten times but we're leaving a file descriptor open and eventually will run out of spare far descriptors for process and then opening files or calling opened are won't work in the future we don't ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ually will run out of spare far descriptors for process and then opening files or calling opened are won't work in the future we don't have any spare file descriptors left ok the other thing that we might comment on if we were doing a code review instead opened a could fail so if this returns null for example ther",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "sure that in all code paths particularly error code paths you've released resources as soon as you finished using them ok and this will correspond to file descriptors to memory to any other resources to tcp sockets etc etc etc right ok so let's have a look at this actually i've got a demo somewhere here it is righ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ption to say we want to truncate it of course there's going to be some other options in here as well but this is just a sketch and then i write to my file descriptor my new data and then i close it so if we looked in times kind of ghost and stuff so there's a problem with this which is that if the power went out b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ption to say we want to truncate it of course there's going to be some other options in here as well but this is just a sketch and then i write to my file descriptor my new data and then i close it so if we looked in times kind of ghost and stuff so there's a problem with this which is that if the power went out b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "this strike for me and there's also an equivalent version to say hey i guess what i've already opened a file or maybe a directory and please use that file descriptor again to fill out this truck for me ok so these two do the same thing it's just a witcher matter of convenience as to whether you know the path or al",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "l out this truck for me ok so these two do the same thing it's just a witcher matter of convenience as to whether you know the path or already have a file descriptor to an open file there's one other version is as well here which is going to leave a little bit but we're going to find that useful when we start talk",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "see libra gives a list of level of abstraction here and it's very easy to use we call opened are that internally is going to open file with a using a file descriptor so for example let's open the current directory and then we can keep calling reader to read the next entry ok so when we do that we get a pointer bac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "that's a problem that we haven't closed resources so this actually security problem that it might work once or twice or ten times but we're leaving a file descriptor open and eventually will run out of spare far descriptors for process and then opening files or calling opened are won't work in the future we don't ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ually will run out of spare far descriptors for process and then opening files or calling opened are won't work in the future we don't have any spare file descriptors left ok the other thing that we might comment on if we were doing a code review instead opened a could fail so if this returns null for example ther",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "sure that in all code paths particularly error code paths you've released resources as soon as you finished using them ok and this will correspond to file descriptors to memory to any other resources to tcp sockets etc etc etc right ok so let's have a look at this actually i've got a demo somewhere here it is righ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "this strike for me and there's also an equivalent version to say hey i guess what i've already opened a file or maybe a directory and please use that file descriptor again to fill out this truck for me ok so these two do the same thing it's just a witcher matter of convenience as to whether you know the path or al",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "l out this truck for me ok so these two do the same thing it's just a witcher matter of convenience as to whether you know the path or already have a file descriptor to an open file there's one other version is as well here which is going to leave a little bit but we're going to find that useful when we start talk",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a6948c0b-717d-4a5a-afbc-f2641ef17bc1",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "les so for example i want to remove a lot out if it exists i don't care if it doesn't exist so i'm going to redirect standard error which you know is file descriptor two so this is what this is doing to a special place a very special file this particular file does not exist you won't find it on any any disk drives",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ze there's a hierarchy of processes so each process has its own id and apparent as well and now we know now know that every process has a set of open file descriptors but these don't need to correspond to just files they can refer to pipes and sockets like network sockets process has a limited number of these that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " the amount of processes we can create for particular user or the amount of memory that our process can have that kind of thing or even the number of file descriptors we also have meta information about whether we care a lot about a particular process or thread we can give them different priorities so if you have ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "re going to play with today that we say i want to map some memory and i want to map it to a file now we don't give a file name instead we just give a file descriptor so for example we have we've already opened that by saying open somewhere now some things you can do with this you could specify a particular dress y",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "l of the clients which are connecting to us so this is what we call accept and except will block if there's no new clients otherwise it returns a new file descriptor force an unused file descriptor number which is which is connected to one particular client one particular connection right so that's what we need to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "cting to us so this is what we call accept and except will block if there's no new clients otherwise it returns a new file descriptor force an unused file descriptor number which is which is connected to one particular client one particular connection right so that's what we need to kind of set up our server and a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ar client one particular connection right so that's what we need to kind of set up our server and at that point great now we can start getting client file descriptors and using them some of the things that we might use as well of course is things like shut down to declare that we don't want to receive or send any ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " as well of course is things like shut down to declare that we don't want to receive or send any more additional information down a particular client file descriptor then we actually completely finished for descriptor we can release it by calling close which means that particular file number file script a number c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "make a server all i need to do is call accept inside a loop and ok i'll handle the air conditioner returning negative one but otherwise it gives me a file descriptor for a client so once i've got that far descriptor i could write a very simple web web server or file server or database which services one request an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "hing to do right now they don't need the attention of the waiter so this the ideology works in terms of our far descriptors that if i've got a set of file descriptors right now so let's see accept 's return to many time and many times and i've actually got say here we go far descriptors four five six and seven cor",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "what's happened to each of your tables and decide what you're waiting wants to do the problem with select is this checking this polling of all of the file descriptors is an order n operation so it's not order n squared is not n log n so it's only order n but if we're talking about say wanting to have thousands con",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ere poll comes in paul was really designed system interface to say maybe we need instead away to say look i'm going to tell the system about a set of file descriptors i care about and come back to me when something is happened but don't make me keep asking each table whether it's ready instead tell me which specif",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ch table whether it's ready instead tell me which specific tables need more food so poll was a new way to kind of interrogate the system to see which file descriptors were ready to either receive or send more data the poll was developed on there going to bsd system so not linux but the another free operating syste",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ich brings us finally to epoll so whilst poll was an improvement over select and satisfied a few corner cases like being able to easily discover when file descriptors had closed epoll tried to kind of fix all the corner cases of poll ok so today if your challenge is to write the world 's fastest web server linux t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "linux then you need to pull out epoll out of your back pocket so equal solves the order n problem epoll allows us to in order one time find out which file descriptors are ready to receive or send information and epoll has some different ways to use that it can be used the downside of epoll is that it is linux spec",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "re it is and let me actually kind of make these pipes in now i actually want to actually start sending data to them so for this i'm going to have two file descriptors here we go ok so using this this is going to be my test little test program where i can send data to one pipe or the other pipe and then the other s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " as well and i'm going to have two file scripters where i'm listening now on these pipe objects but i'm today to make it more interesting not only my file descriptor is going to be read only i'm going to say please don't block ok so that means that my calls to read and write won't stop instead they'll just simply ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " convention stick something positive it ok now we've got our ipoh we need to tell this particular people instance that we wanted to listen to certain file descriptors so y pool itself has a file descriptor but it's not something that we are going to use like a file it's just going to be a way for us to identify pa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ok now we've got our ipoh we need to tell this particular people instance that we wanted to listen to certain file descriptors so y pool itself has a file descriptor but it's not something that we are going to use like a file it's just going to be a way for us to identify particular set of file descriptors that we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "lf has a file descriptor but it's not something that we are going to use like a file it's just going to be a way for us to identify particular set of file descriptors that we care about now i can care about different events i can care about the fact that some data has arrived i can care about the fact that there's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " can care about the fact that some data has arrived i can care about the fact that there's some space available to send data i can care about say the file descriptor is no longer valid ok so i better give some hints to equals to the kind of events that i care about ok so here's what we do we can set up an equal ev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "here data has arrived by the way this data over here that is for user data for us to be able to easily associate a particular event with a particular file descriptor but we could also please set of pointers as well so we set this up for both file script awarded five script two and now we can start listing right so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " now remember when we set up equal initially we hit some stuff inside the event data to say you know when this event happens i want to know about the file descriptor so let me extract now the fire scripture from the event answer more event information still exactly what kind of equal event it is and so we can use ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "xactly why ok so i could send some more align eyes here we go it's going to keep reading two characters of time now let's send some data on the other file descriptor as well ok so we should see some events coming soon though got n o and e s right so my server is as you can see a high performance server ok not real",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "a high performance server ok not really we just put the one second delay it but i hope you can now see how great i can actually service more than one file descriptor at a time just by using epoll ok so that's enough of a demo you can see this demo i committed itself lecture code you'll be writing similar kind of c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " the longest and is the simplest to use so if you just want to write some very simple code where a single thread a single process can work with a few file descriptors then you select and the amount of code you need to write will be smaller and it's much simpler to use ok but if your goal on linux is to write a hig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "id linux specific it's also event based meaning that we can find out in an array ok event based it returns or fills out a way for us to tell us which file descriptors are we need to process ipoh also uses a set of far descriptors so we set up an object which is simply a simple set of integers which is the file des",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "scriptors are we need to process ipoh also uses a set of far descriptors so we set up an object which is simply a simple set of integers which is the file descriptors say here go equal here's all the file descriptors that we care about now please block until there's at least one event happening on these and then w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "set of far descriptors so we set up an object which is simply a simple set of integers which is the file descriptors say here go equal here's all the file descriptors that we care about now please block until there's at least one event happening on these and then when you return don't return just one event give us",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ggered another ones called level triggered so they both they're both designed to be used so that we can say hey this is something interesting on this file descriptor so in this case yeah my bad level has been filled up it's time to me to say crates and bites avoid for me let me pull them out so presumably when i d",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "been filled up it's time to me to say crates and bites avoid for me let me pull them out so presumably when i do that the ability for that particular file descriptor to give me more bites it's going to drop down to zero again meaning i'm sorry there's no more bikes available right now ok but the way to epoll can w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "rop down to zero again meaning i'm sorry there's no more bikes available right now ok but the way to epoll can work then is to say either return that file descriptor provided the some activity that you can perform on this so this is now a level detected to say hey there's here's my level to say that yes this invit",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "l the other one is edge triggered ok let's choose a new color here where we just got notified one time that we should actually do something with this file descriptor so the day that it changes from uninteresting to it to interesting then we'll call epoll and will get that notification just once it's up to us to ac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ust ignored it if we didn't actually do anything about that far descriptor and then call epoll again it's not going to complain about that particular file descriptor is not going to include that in the result until the day that the bath is empty for some reason right it goes below goes back down to the uninteresti",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "nt only once then you can ensure that a single thread that called epoll is assigned that duty is assigned the problem of working with that particular file descriptor because if other threads now call epoll they're not going to be told about it they're not going to be not decide this file descriptor a task because ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "that particular file descriptor because if other threads now call epoll they're not going to be told about it they're not going to be not decide this file descriptor a task because he's kinda being used it's common it's been assigned to a different file descriptor sort different thread ok so that's epoll for you w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "d about it they're not going to be not decide this file descriptor a task because he's kinda being used it's common it's been assigned to a different file descriptor sort different thread ok so that's epoll for you we will look at this but realized like will see a demo this but realize like i said that there's act",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8b87906-763d-4c78-8224-d88dd43fdd87",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "ing to wait till signal happens you can call signal and specify a particular signal but he's a more interesting way to do it you could actually get a file descriptor whose only job is to tell you about signals which have been delivered so you can set up your own special thread just service delivered signals and th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "12682bb1-804f-4939-a519-445af7451475",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "d typically this process might be in a different server but the idea is that we have to do this of course i'm going to actually send something down a file descriptor public send something down a socket possibly likely a tcp socket right so to do that we actually have to construct a message that requests this and t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "pted to write something like the following let's just write all the bytes inside my struct so for example suppose i wrote ok i'm going to write to my file descriptor descriptor my stat based struct so i've got all the information about a file and the size of my stat data structure ok so one downside of that is tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ff918b22-18b3-4e5f-96f5-e6eb462fbefd",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "a file to write into so it's kind of see this here it is right so here's my kind of main method today instead of using with mmap to say hey here's my file descriptor please map this into memory we're going to say actually i want anonymous mapping meaning that it doesn't actually map to any file at all so why might",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b37a29fd-55de-4893-bb2e-ef162944f9fd",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " delete ok so when would you want to do that game so let's have a think about this we know that ippo control is how we actually manipulate the set of file descriptors that we want people to care about so we're saying hey i'm going to give you a file descriptor that i don't want you to care about anymore so don't w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b37a29fd-55de-4893-bb2e-ef162944f9fd",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " ippo control is how we actually manipulate the set of file descriptors that we want people to care about so we're saying hey i'm going to give you a file descriptor that i don't want you to care about anymore so don't wake up don't tell me events about something on that particular file descriptor right so why mig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b37a29fd-55de-4893-bb2e-ef162944f9fd",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ng to give you a file descriptor that i don't want you to care about anymore so don't wake up don't tell me events about something on that particular file descriptor right so why might that be ok here's some his some examples one it could simply be you finished talking to that client perhaps you have uploaded enou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b37a29fd-55de-4893-bb2e-ef162944f9fd",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "there's no point keeping our server around anymore so now what will do is to say we could either shut down the entire server or we could say hey this file descriptor that was servicing this particular client we don't want to generate any events right now so let's delete that from our control group came the second ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b37a29fd-55de-4893-bb2e-ef162944f9fd",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "nsferred all the bytes or you've received all the bytes that you could ever possibly care about ok in which point there's no point ipoh tracking that file descriptor anymore we might as well remove it from the active set of fire scripters so again here's another kind of example of saying ok if i know how to write ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b37a29fd-55de-4893-bb2e-ef162944f9fd",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "s so again here's another kind of example of saying ok if i know how to write this code i can say stop listening for event changes on this particular file descriptor where you don't need to listen so intently in order to make sure we get everything done right so in the next video let's talk about traffic filtering",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " same host and port number as as the destination so it just makes the future part of your code just a little bit cleaner because now you just need to file descriptor and the buffer that you want to use to send those bites so that's big important idea that compared to tcp which is connection based udp is and always",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "d then you go home three o'clock in the morning it suddenly starts to fail what's our problem here our problem is that eventually you will run out of file descriptors so feildes right are file descriptors that your process has a limited number of them which is actually by designed to ensure that one process can't ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "e morning it suddenly starts to fail what's our problem here our problem is that eventually you will run out of file descriptors so feildes right are file descriptors that your process has a limited number of them which is actually by designed to ensure that one process can't take down the whole system let's only ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "o many so eventually if we do this then future calls to open door open will fail because there are no spare file scripters and nowhere in the process file descriptor table to store any new information about new open files ok so this is a standard problem in real programs that we don't release resources and in code",
        "label": "Use"
      }
    ]
  },
  {
    "text": "linked list",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "c8a95218-1f53-4559-b5f5-32b9385d7f90",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " crash. why? because when we implement free, as you will in the future portion of this course, the thing that we have to do in free, is to change our linked list structure. the heap allocator is going to keep a record of all the available pieces of memory that is currently being used and all available pieces o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "94ea6cdc-aa81-48b6-84f3-323a89a40075",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " so that is definitely valid code and always true so we will print yes ok i'll present d here is going to be forty two ok now what do we do make some linked lists in see ok this can be trickier than it first appears ok so i've got my first link list i've got some struck somewhere now when you see the word stru",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "117f0f11-cc38-4a40-b359-8f1ba81655e1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ow we've got blocks of memory which we could reuse in the future right so for that how should we store that well one approach is to have some kind of linked list of memories are peace areas of memory that we could be allocated in the future will think more about that in later lecture ok right so in the next le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "e got pieces of memory that i can't use very well because they will sparsely separated the second is that now i've got a lot of entries inside say my linked list or whatever date other data structure i want to use which are useless to me or i have to keep iterating over them in order to find a useful piece of ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "st of all it it's pretty good pretty has pretty good performance that as soon as we find a reasonable fit we're not going to keep looking through our linked list jumping through a link list is actually kind of slow we're not doing memory any favors because quite often now we were busting their caches we keep g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "'m going to kind of mark this that i put a bit of space there a bitter taste bitter space there ok if i have regular sized request early on inside my linked list then i'm going to immediately use it so what we tend to see with first fit is that the smallest fragments are at the beginning and they get kind of i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "gments here they would be immediately going to be going to be used up of course for it and so the larger spaces happen tend to happen later on in the linked list ok this so link our first with first fit are limitless does team seem to have some kind of some pseudo structure that we didn't necessarily expect wh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " of reasoning we can kind of say oh ok i can kind of see that i can kind of see how the size of the spaces tends to increase over iterate through the linked list but maybe it wasn't obvious will predict it just when we looked at this little algorithm ok so those are just three simple examples you can see how t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ut if you would implement a fast memory allocator i personally think nextfit is kind of fun where rather than always starting at the beginning of our linked list we have some other pointer that allows us to start from a different spot inside are linked list that would also have a different fragmentation patter",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "e rather than always starting at the beginning of our linked list we have some other pointer that allows us to start from a different spot inside are linked list that would also have a different fragmentation pattern i'm going to put this in parentheses though because writing a memory allocator is tricky and s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1f76e788-6515-470d-8411-5a70fc7d7edb",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "t fit allocation so his default of the game that we're going to maintain our idea of heap just using a simple link list and each link each node in my linked list data structure just represents a segment of memory that is either currently in use meaning it's been allocated or is available is free so we'll keep ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1f76e788-6515-470d-8411-5a70fc7d7edb",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "a structure just represents a segment of memory that is either currently in use meaning it's been allocated or is available is free so we'll keep our linked list in sorted order and everytime malloc is called we're going to actually walk through that link list looking for place that we can use to satisfy that ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1f76e788-6515-470d-8411-5a70fc7d7edb",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ee is called we're going to do two things we want to mark that entry in our link list is now available for future allocations but it could be that my linked list actually has two neighboring entries which are both free so at this point let's clean up our linked list so that rather than having two separate entr",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1f76e788-6515-470d-8411-5a70fc7d7edb",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "r future allocations but it could be that my linked list actually has two neighboring entries which are both free so at this point let's clean up our linked list so that rather than having two separate entries we can represent that as just a single entry of a much larger space and similarly we could i actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " for three kilobytes ok now we're doing first fit and the first fit is the scrappy doo approach here which is that let's just find an entry inside of linked list that is which works and as soon as we can find a viable one let's stop so will go through linked list the first entry that's no good because i actual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "hich is that let's just find an entry inside of linked list that is which works and as soon as we can find a viable one let's stop so will go through linked list the first entry that's no good because i actually corresponds to a piece of memory that is in use but our second entry ok we're bouncing along tile l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "so will split it into a three kilobyte which is going to be available for the caller and rpd will point to their beginning of that right and into our linked list we will have a new entry here with the one kilobyte which is remaining here ok and then what happens next right so then we free up pa ok so let's upd",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " have a new entry here with the one kilobyte which is remaining here ok and then what happens next right so then we free up pa ok so let's update are linked list ok there we go so that but this entry here is now available turn off my scissors ok and that's the one kilobyte request comes in ok i think you can g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " list oh look the very first entry that we've looking at is great it's big enough so will split up into the one kilobyte that you wanted an update my linked list to say that there is now two kilobytes of space immediately afterwards so this is now taken this is going to be our value of p ok so how do we do wit",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "e the link list which corresponds to zero kb all they do is they just slow performance because now it's just yet another piece of link of link of the linked list and we have to iterate over every time as we iterate with the link there through the list so let's not do that there's not add entries which correspo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "305a1d6f-7dfb-4fe9-8271-64421be8f294",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "t fit allocation so his default of the game that we're going to maintain our idea of heap just using a simple link list and each link each node in my linked list data structure just represents a segment of memory that is either currently in use meaning it's been allocated or is available is free so we'll keep ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "305a1d6f-7dfb-4fe9-8271-64421be8f294",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "a structure just represents a segment of memory that is either currently in use meaning it's been allocated or is available is free so we'll keep our linked list in sorted order and everytime malloc is called we're going to actually walk through that link list looking for place that we can use to satisfy that ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "305a1d6f-7dfb-4fe9-8271-64421be8f294",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ee is called we're going to do two things we want to mark that entry in our link list is now available for future allocations but it could be that my linked list actually has two neighboring entries which are both free so at this point let's clean up our linked list so that rather than having two separate entr",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "305a1d6f-7dfb-4fe9-8271-64421be8f294",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "r future allocations but it could be that my linked list actually has two neighboring entries which are both free so at this point let's clean up our linked list so that rather than having two separate entries we can represent that as just a single entry of a much larger space and similarly we could i actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c761dcf5-f751-4ac2-acb7-906f30ff83be",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "e up pb right so he was pb and we are now going to mark this space as available so that was easy will just to update that particular entry inside the linked list to say this is no longer some allocated space but it's actually available now what right so now we want to allocate another three kilobytes ok this i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c761dcf5-f751-4ac2-acb7-906f30ff83be",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " want to allocate another three kilobytes ok this is where worst fit now has a choice so were straight now has two options two two entries inside are linked list where we could allocate it and with worst fit we do the opposite of best fit we try to find the largest possible entry that of course is at least a m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c761dcf5-f751-4ac2-acb7-906f30ff83be",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " and eventually we're going to turn that for p d k and then we've now got kind of whole here right and then we free pa so so now the beginning of our linked list is available ok so let's annotate this in a moment so what do we got we got some loops we've got to get there we go right there we get the beginning ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " first one is uh i need to find three kilobytes please three couple lights are contiguous space ok so where do we start right well right now i have a linked list entry a single entry into time i linked list which corresponds to all of this free space so of course we're going to use that so what do we do let's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "es please three couple lights are contiguous space ok so where do we start right well right now i have a linked list entry a single entry into time i linked list which corresponds to all of this free space so of course we're going to use that so what do we do let's split it up into two entries we're going to n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "entry now for all of the remaining free bites in our heap then is called again with the three kilobyte to request case so again we walked through our linked list structure and we can ignore the ones which correspond to allocate it entries but here's one which is a non allocated an sufficiently large so let's t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ght the next thing happens is the memory at pb is no longer required so free is going to be called on that point are right so it's time to update our linked list case now is just wipe that away right this now this entry now actually correspond to some memory that we can reuse in the future ok and then next we ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " pa ok so we can update our link this structure to now say this memory is free but remember there's something else we should do is that right now are linked list structure doesn't realize that these two pieces of memory that are next door to each other actually could be coalesced into one so let's do that let'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "esn't realize that these two pieces of memory that are next door to each other actually could be coalesced into one so let's do that let's update all linked list structure so that rather than having two separate items it's cut out these pieces there we go ok we just have one giant entry for all of this between",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "kilobytes of available memory now if we didn't do that then if we request say came in for seven kb we could actually assign that but according to our linked list we don't have enough space so it's important to do block coalesce sing so that are linked list structure accurately represents the fragments that we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " kb we could actually assign that but according to our linked list we don't have enough space so it's important to do block coalesce sing so that are linked list structure accurately represents the fragments that we have available ok so right so we freed up pa and the last thing to do is satisfied this request",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "s for you first of all why does this implementation suffer from false fragmentation when should we split blocks and are we using explicit or implicit linked list implementation here so let's go for the first one what do we mean by false fragmentation ok so this backtrack for moment and realize that we're talki",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " and realize that we're talking about our heat which is just one large piece of memory but on top of that we've layered a accounting system are using linked lists to say where you can have this chunk or this chunk or this chunk this block is free that blogosphere that blocks not free etc so we've put that as a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "s a perspective review on top of this really just a single large piece of memory so here's our problem is that we can end up with situations where my linked list says yes does amuse memory here that's available and some using memory right next door that is available but what we don't do is consider these conce",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "this piece of data in the middle here then that's fine and no one else cares so we have to all we have to do is make sure that we removed it from all linked list in order to kind of coalesce these so we're going to end up with our original metadata block still pointing at the beginning of this one but conceptu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "current ones so we in the future will need a way to be able to kind of investigate what's behind his and afterwards and before you think about doubly linked lists is actually going to be another trick i'm going to show you later on in this set of lecture videos ok so we want to coalesce backwards when you're i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "so do the opposite which is cur lessing blocks so let's go back in for a moment and have a look at our code here where we worked remember through are linked list finding a viable entry here and if we did we decided to mark that particular entry as unavailable and we return a pointer to that entry ok so i want ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "kb and then we freed and then you call malloc again with say one kilobyte so what's happened right so in that very first call to malloc there was are linked list was empty so we went to the system we called ass break and we got ourselves plenty of space enough space to hold the metadata and then immediately af",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ning space remaining ninety nine kb here going to be unused and we could have done a better job here we could have actually put a link entry into our linked list to say actually not only how do i have this piece is in use i've got a new entry of available apartment blocks here and there's another metadata entr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " is an explicit address it's got a memory location all the other ways to do this and the answer is yes so the alternative is to work with an implicit linked list and with an implicit linked list we start talking about the sizes of things and we can then use those using pointer arithmetic to calculate a new add",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "a memory location all the other ways to do this and the answer is yes so the alternative is to work with an implicit linked list and with an implicit linked list we start talking about the sizes of things and we can then use those using pointer arithmetic to calculate a new address so for example if i had an i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "be using where i should be reading my next integer value where my next enter the link list is ok so we're going to be seeing this idea of an implicit linked list when we get to nurse boundary tags which is part of this video set so in the next video i'm going to ask you a little challenge which is we saw how w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "20a17ad5-03fa-40e1-bb61-739bcec6e2e2",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "lue with zero in other words if it's null then don't do anything just immediately return ok for what about all other values well remember we have are linked list and are linked list is of these metadata entry objects each one of those has a size next pointer and whether it correspond to some maybe that's commo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "20a17ad5-03fa-40e1-bb61-739bcec6e2e2",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "er words if it's null then don't do anything just immediately return ok for what about all other values well remember we have are linked list and are linked list is of these metadata entry objects each one of those has a size next pointer and whether it correspond to some maybe that's commonly in use or not ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "20a17ad5-03fa-40e1-bb61-739bcec6e2e2",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ponds to this piece of memory that we're trying to free ok so how do we do that right so i'll initialize our little it available to the beginning the linked list and we've got that static global variable there called head right so let's get started at the beginning and keep going around whilst p is not null an",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "20a17ad5-03fa-40e1-bb61-739bcec6e2e2",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "his block and consider it providing it's light enough of course ok so that was easy for a little bit of a performance boost no point going around are linked list anymore let's break out of this loop ok and we don't ok so one advantage of this implementation is that i can pass in completely erroneous point valu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "20a17ad5-03fa-40e1-bb61-739bcec6e2e2",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ds to a block that is currently in use in other words we could probably detect double freeze ok but the downside of course is that we had to walk the linked list and if my linked list is very large say millions of items then it's going to take a significant amount of time we don't have any cash coherency were ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "20a17ad5-03fa-40e1-bb61-739bcec6e2e2",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "currently in use in other words we could probably detect double freeze ok but the downside of course is that we had to walk the linked list and if my linked list is very large say millions of items then it's going to take a significant amount of time we don't have any cash coherency were pulling in from all di",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "entry each time every time i want to talk about this piece of this piece of this structure i have to when i'm talking about a link list so here is my linked list so that i can chain these together but for other times i don't want to have to keep writing the word stripe let's be lazy and for that we're going to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "at the user sees an that will have another piece of memory that the user is using or not etc etc so great using little next point is going to build a linked list and then when the user program calls malloc i can walk through this link list looking for available entries and hopefully we've got one which is of s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "xt pointer work pointer nothing will just set it equal to null which is kind of a standard system program way to indicate that we got to the end of a linked list ok alright what else to talk about this i think that's going to be it we can make some conventions about how to insert and remove from this obviously",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ok so we've got our struct now let's think about how we can use it when we're running the program we need to keep track of our little linked list so for that let's have a variable here called head here i can sort it right so we're going to see a reference to that and what is it it's a pointer t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ier that is now free ok so let's have a look at that right so scroll up here right so we're going to need, first of all, a way to iterate through our linked list and this keep track of two things things where we are in the linked list that's my little point appear and the best apartment we found so far so reme",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ere right so we're going to need, first of all, a way to iterate through our linked list and this keep track of two things things where we are in the linked list that's my little point appear and the best apartment we found so far so remember those are placement strategies that's what we want to implement ok s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "at struct is going to start ok so right let's go have a look at this in so we need a little loop that says well so i'm looking at a valid entry in my linked list so keep going until i get to the end i need to consider the current apartment that i'm looking at is a good one so our first criteria and this is imp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "entry represents remember that's the actual number of bytes the user can use and it's important for us as well to set the fact that this entry in our linked list is going to be unavailable it represents some memory there's actually been taken ok and used right so what's this other piece of code doing back onli",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " point my lock implementation is going to return null right what's the last part that we haven't talked about oh yeah we haven't actually updated are linked list so let's do that first thing we're going to do is for our new metadata entry chosen one we're going to change this next pointer to look at the old he",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " for our new metadata entry chosen one we're going to change this next pointer to look at the old head in other words the original first entry of our linked list then let's change that global variable head that we looked at about looked at the very beginning with that static variable so it now looks at our kne",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "g a real lock which is faster but what can we do about free how can we make free faster right now we had an implication of free that walk through the linked list looking for that user pointer but had to be unallocated can we do better yes so here's how we can do it using an order one approach what we need to r",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "block coalesce sing we've talked about making a fast allocator maybe if we're actually looking for just three blocks maybe we should have yet another linked list which contains only the blocks which are actually available so i imagine you walk into the apartment manager and you say i like like in an apartment ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "nd and hunting through my lists and doing block coalesce thing i can just simply declare that the whole memory pool has been wiped clean and reset my linked list back to nothing so so memory pools can be very very useful when you know the lifetime of all of the objects is finite and you want to clear them all ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "available flag as the lowest bit inside the same number we just have to remember to be careful that when we come to using this number as our implicit linked list that we don't use that that value to as part of our part about jumping mechanism ok and what is the jumping mechanism oh that's easy that is just poi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b24c9c84-49ae-4c9d-a9b0-914ea82356cb",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ight and then what we do well if that's true first fixes let's stop less party on let's let's let's not actually waste anymore time going through the linked list so this code becomes a lot simpler we don't need to do any of these sophisticated checks anymore we're just going to say ok we found what we wanted r",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b24c9c84-49ae-4c9d-a9b0-914ea82356cb",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ticated checks anymore we're just going to say ok we found what we wanted right and in fact because we found it we can now stop iterating through the linked list so how do we do that we can either add an additional clause or while expression to say and chosen is null or we could just write break here to say ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b24c9c84-49ae-4c9d-a9b0-914ea82356cb",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "at we can either add an additional clause or while expression to say and chosen is null or we could just write break here to say ok stop going to the linked list right so that's how we've implemented first fit the placement algorithm i mentioned was worst fit and in fact there's some others so for example you ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b24c9c84-49ae-4c9d-a9b0-914ea82356cb",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " variable that you need to maintain and if you start implementing block code lessing block splitting keeping track of the starting at the end of your linked list etc then you want to make sure that your pointers are always valid and this is just yet another one to to get get correct so have a play with it but ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1853bd34-e9ca-43fa-91f5-250a9abc155b",
        "lecture": "CS",
        "lecture_num": 10,
        "context": " going to start by thinking about how we can build a better version of realloc ok so here's the story so far i have got ok there we go wait my little linked list which is going to represent all of the allocations that i have and for each entry i'm going to make a note of whether that it corresponds to piece of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1f0947f0-7d90-4971-8f36-20b870937782",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "ched out and see what that would look like ok so this story so far we've got our little metadata entry and we're going to represent that using with a linked list of all of our entries and let's imagine the kinds of things that we might want to print out or know about in other words how do we want to instrument",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1f0947f0-7d90-4971-8f36-20b870937782",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "ally given out right now our case so i could have a little counter here right so will have say a number of allocated bytes right now remember that my linked list represents allocated and unallocated regions so i want to do things like if this corresponds to a piece is actually been allocated then i will use th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "ory ok so we do something like the following here's a simple idea let's get malloc to do all the work flows will get we've already written are malloc linked list code that seems to be working so let's just rely on that ok so i'm going to say right my log get me some new space and i'm just going to copy everyth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "nd of the old size ok at this point we run into a snag i don't have the old size how are we going to get that right so somehow i need a way to get my linked list entry for that given so somehow i need to go from the old tube the linked list now i've shown you one way to do this before with three where we just ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "e how are we going to get that right so somehow i need a way to get my linked list entry for that given so somehow i need to go from the old tube the linked list now i've shown you one way to do this before with three where we just walk through the linked list looking for their entry until we found one with un",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "iven so somehow i need to go from the old tube the linked list now i've shown you one way to do this before with three where we just walk through the linked list looking for their entry until we found one with until the pointer of the linked list the point of entry of that linked list data actually was equal t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": " way to do this before with three where we just walk through the linked list looking for their entry until we found one with until the pointer of the linked list the point of entry of that linked list data actually was equal to the user area but maybe we've actually made a decision to have a better performing ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": " we just walk through the linked list looking for their entry until we found one with until the pointer of the linked list the point of entry of that linked list data actually was equal to the user area but maybe we've actually made a decision to have a better performing malloc and free so that the metadata en",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "ooking so you can look at me and my entry will look at you so let's update my entry next pointer to b new entry so great now i've inserted it into my linked list chain ok there are other ways to calculate the size you can do differences are two pointers if you do that as usual remember to always be working wit",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2ab9689-c933-4b35-bc36-acc823aa42c8",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "ilobyte chunks now you could keep track of your allocation just using one bit of information for each chunk ok which is a lot more efficient than are linked list implementation maybe you could actually beat malloc by your speed of allocation perhaps you can do better say than the linked list that we've seen so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2ab9689-c933-4b35-bc36-acc823aa42c8",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "efficient than are linked list implementation maybe you could actually beat malloc by your speed of allocation perhaps you can do better say than the linked list that we've seen so far the linked list we've seen so far in our implementation included all of the all of the entries inside are linked list included",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2ab9689-c933-4b35-bc36-acc823aa42c8",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "tation maybe you could actually beat malloc by your speed of allocation perhaps you can do better say than the linked list that we've seen so far the linked list we've seen so far in our implementation included all of the all of the entries inside are linked list included the allocated and unallocated entries ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2ab9689-c933-4b35-bc36-acc823aa42c8",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "than the linked list that we've seen so far the linked list we've seen so far in our implementation included all of the all of the entries inside are linked list included the allocated and unallocated entries perhaps you can write a faster version over heap allocator if you had a second link list of only the o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0f70d1df-7a51-4bea-9a39-589fd7c57802",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "suppose you had some code from cs two twenty five that is going to say insert a link right on a data structure and this price is going to work in the linked list price is going to work on a vector and inside that code you realize that there's a moment in time where you're going to say of mess with the pointers",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0f70d1df-7a51-4bea-9a39-589fd7c57802",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "uting in this code gets too gets to modify this data structure anybody else that wants to insert something into my data structure or iterate over the linked list or get a value that just going to have to wait until i finished operating on my data structure ok so only one surgeon at a time is the mantra here an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "849095e8-a9e5-4467-8af4-be36e4991af6",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "suppose you had some code from cs two twenty five that is going to say insert a link right on a data structure and this price is going to work in the linked list price is going to work on a vector and inside that code you realize that there's a moment in time where you're going to say of mess with the pointers",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "849095e8-a9e5-4467-8af4-be36e4991af6",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "uting in this code gets too gets to modify this data structure anybody else that wants to insert something into my data structure or iterate over the linked list or get a value that just going to have to wait until i finished operating on my data structure ok so only one surgeon at a time is the mantra here an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b60fb3d4-0600-4074-8432-449ea0067907",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "suppose you had some code from cs two twenty five that is going to say insert a link right on a data structure and this price is going to work in the linked list price is going to work on a vector and inside that code you realize that there's a moment in time where you're going to say of mess with the pointers",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b60fb3d4-0600-4074-8432-449ea0067907",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "uting in this code gets too gets to modify this data structure anybody else that wants to insert something into my data structure or iterate over the linked list or get a value that just going to have to wait until i finished operating on my data structure ok so only one surgeon at a time is the mantra here an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " want to make it so that actually multiple threads can use this code at the same time. okay, so let's start by just looking at simple typical kind of linked list code. perhaps you're going to write it in c++ perhaps you're going to write it in c, perhaps you're going to write it in some other language. it does",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ltiple threads so along the way we're going to fix some errors as well. ok so what do we got. we've got a pointer that corresponds to the start of my linked list. in more complicated examples this might be in a separate data structure but this is good enough for our little example here. ok, and then i've got t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "change head. so we're now going to point to the same thing. right, so in doing so we skipped over our friend here and they are no longer apart of the linked list, but they still are taking up some memory, \"so we better remember to tell the heap, \"\"oh! by the way\" \"you're done.\"\" ok, we don't want you.\" \"right ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "t you.\" \"right so the observant among you might say \"\"ok, will\" \"this always work?\"\" one concern, of course, is that what\" if there was nothing in my linked list. what if 'head', for example, pointed to nothing, to null. ok, so then our code would crash and here's where it would crash. it would crash when we t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " is that we don't free that entry here, until we've finished using it. so we've pulled out, for example, its value. i've seen plenty of badly written linked list code where you free it \"first and then you say \"\"ok old link that doesn't exist,\" \"tell me about your next pointer.\"\" that might work if\" you're luck",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": ", we read the value of head and at that moment, we'd like to make sure that nothing else changes, that this still corresponds to the beginning of the linked list. and we want to freeze everybody else until the moment that we have finished changing the value of head. ok so these lines are \u00a0important to define a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "d we want to freeze everybody else until the moment that we have finished changing the value of head. ok so these lines are \u00a0important to define as a linked list. right, so we will say that... ok... this part in here is going to be protected by my mutex lock. so before executing any of that i will call pthread",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "hat made sense it's a lot of new ideas here feel free to discuss this on the course form because now we've got another one to do we've just worked on linked lists now i've got a push and pop functions so i've now got more like a stack type operation to look at so take a look at this code and decide what is wro",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "variable to implement a cookie eater and here's the idea so i've got a data structure is actually just an integer but you could imagine it could be a linked list it could be some other more interesting data structure and we're going to add things to this and remove things from this and i want to make sure that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4be923cb-0fb1-4a38-b904-ceb8ff09755a",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "so that's really weird this toy digger red color ok so writers get your hands off my data structure right now i'm making changes to it i'm updating a linked list i'm copying over my hash dictionary to a larger piece of memory that kind of thing so i'm running to allow one writer to actually modify it and a wri",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4be923cb-0fb1-4a38-b904-ceb8ff09755a",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " active readers so if there's a really currently working through a link list let's wait until they finish before the writer say starts modifying that linked list and in fact if i've got an active writer modifying this data structure then if another way to appears then they have to wait as well so that is a cla",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "not interacting with the data structure yet but if we let them ok they can jump inside the data structure so maybe it'll open some files go through a linked list that kind of thing and so right now they are in there going through that data structure eventually they'll find what they want and they can leave and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "w microseconds for example and most of the time in this is actually going to be when we actually reading the data structure so for example consider a linked list or map or maybe something on disk actual reading and writing is going to be a lot heavier than take more time than the actual code that we've written",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "up one of these structs as a as like as a hint to say this is the kind of stuff we need and then it creates another one force in fact a potentially a linked list of ways that we can actually connect to that server so what we need in here ok let's scroll down is we're going to cool get address info we're going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "p one of these structs as a as like as a hint to say this is the kind of stuff we need and then it creates another one for us in fact a potentially a linked list of ways that we can actually connect to that server so what we need in here ok let's scroll down is we're going to call getaddressinfo we're going to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "oad of ipv4 and ipv6 addresses instead we can use these fully qualified host names and getaddressinfo will convert those for us in fact it gives us a linked list of potential ways to connect to this particular host alright so more about those details in the next video where we will start actually building our ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "try inside here let's just move this out the way let's do it let's do it this way let's move scroll this over here we go the last entry is actually a linked list entry have my next pointer and that will be null so if you're writing kind of code very lazily or just wanted short simple demo code we can ignore th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " entry i would call that i want a socket and then i'm going to try to connect and i would use the results inside each of these result objects to that linked list to try to connect and see if it worked or not right there is one other thing you can occasionally do with a client but it isn't normally necessary yo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ee the last entry inside here let's just move this out the way let's do it this way let's move scroll this over here we go the last entry is actually linked list and trees have my next pointer and that will be no so if you're writing kind of code very lazily or just wanted short simple demo code we can ignore ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "truct won't have been changed at all but in fact this result thing is not just destructive practice appointed to a strict and in fact remember it's a linked list so you could write the code to go through that link list following the next point two and calling free etc or guess what there already is a function ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "gs on the stats that we didn't actually mean to kind of send with that would be a concern if we were writing kind of security aware code what about a linked list how would you send a link list ok so you might say well i've got a whole load of stats structures each one represents the next point but of course we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "i've got a whole load of stats structures each one represents the next point but of course we don't need to do that if we just sending a marshaling a linked list we can just send the actual values so for example we might send we don't need to send the pointers we just need to send the traverse the link list on",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "nd the pointers we just need to send the traverse the link list one at a time and will let the other side une marshall that and turn that back into a linked list when it receives it now the fun here is we could send possibly a note of how big are linked list is but then that means we have to either keep track ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "her side une marshall that and turn that back into a linked list when it receives it now the fun here is we could send possibly a note of how big are linked list is but then that means we have to either keep track of that or to reverse it one time or we send a special value to indicate that this is the very la",
        "label": "Use"
      }
    ]
  },
  {
    "text": "web server",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "28a2bdb5-a357-4b00-bb00-b9d1e478498b",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " long running process an importantly it never waits on its children so we just keep on creating children you can imagine for example the long running web server or a long running database or even shell that perhaps does this so what happens now well those children will eventually going to finish but we never ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ften the case that we actually want to run real simulations on real examples so for example you might actually run your memory allocator as part of a web server or database or a chat client or chat server or some other large piece of software that needs to run very quickly or even a game so something which ne",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "nts because we always chew off a piece from our largest available space so that means if you run this over a significant amount of time say on a real web server or something which creates a lot of objects and then freeze them will delete stubs then very quickly we eat into our largest space and so you know if",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "056e04b9-e004-4e05-af4b-dee1b2888806",
        "lecture": "CS",
        "lecture_num": 10,
        "context": " just want to create objects and they're only going to disappear when the user dies or which is the end of the level you see this in high performance web servers where say or your string manipulation whereas you tried to take the request and extract the head of information and exactly what they want or that s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "packet i mean for example passes packet is for your web browser perhaps it's for my service etc so i want to have a database perhaps i want to have a web server or running on the same machine so how do we differentiate where this particular packet should go for that let's think about if you take a steam shipp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "g on port twenty three will be the ssh service so i can log in using ssd or if i'm listening on port eighty for http then i expect to be talking to a web server there's another kind of protocol that i briefly mentioned which is this udp protocol and udp is very rarely used because it doesn't make any guarante",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "031c882d-0a19-4489-b1ef-d9328844d378",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " we are requesting ok so let's get a client dot c o k and recompile so we've got now knew http request and so compile run it again and now we see our web server is actually giving back there very code that was used to request it which i think is kind of cool alright that's enough for this lecture i will see y",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0cebe85c-2283-48d7-bb48-045052e80cae",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "t we are requesting ok so let's get a client dot c o k and recompile so we've got now new http request and so compile run it again and now we see our web server is actually giving back there very code that was used to request it which i think is kind of cool alright that's enough for this lecture i will see y",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "igate to a different page you're going to have to recompile it but never lied is for technical audience anyway so here we go we want to build build a web server and we want to specify names like illinois dot edu and we need to convert that there into a tcp address right for that here's a really really useful ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " out a little message and exit ok so first of all this to see if this actually can connect to illinois dot edu alright let's see if there really is a web server listening on port eighty on this address i think it's time to compile this so let's clear this i want to make my text a bit larger ok ok so will do w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "eived is greater than zero will print that out ok else let's print something out like have read failed ok right so we've got ourselves beginning of a web server and we're just going to win which we connect said it some garbage here and we'll see how it responds ok now i'm being a bit short here a bit lazy bec",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "et's fix our code there we go so now i'm connecting to port eight thousand right ok i run this i get connection refused because right now there is no web server listing on port eight thousand so in trying to connect this moment where's our connect call this is what this is where we are web browser failed conn",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "suppose i could set up node and run the server on it but i cannot do that in just two seconds for electric videos so i'll pause this and get myself a web server running locally then i'll take another video ok i'll see you then",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "navigate to a different page you're going to have to recompile it but nevermind it's for a technical audience anyway so here we go we want to build a web server and we want to specify names like illinois dot edu and we need to convert that there into a tcp address right for that here's a really really useful ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "t a little message and exit ok so first of all let's just see if this actually can connect to illinois dot edu alright let's see if there really is a web server listening on port eighty on this address i think it's time to compile this so let's clear this i want to make my text a bit larger ok ok so will do w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "d is greater than zero we'll print that out ok else let's print something out like kind of read failed ok right so we've got ourselves beginning of a web server and we're just going to when we connect send it some garbage here and we'll see how it responds ok now i'm being a bit short here a bit lazy because ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "et's fix our code there we go so now i'm connecting to port eight thousand right ok i run this i get connection refused because right now there is no web server listing on port eight thousand so in trying to connect this moment where's our connect call this is what this is where our web browser failed connect",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "suppose i could set up node and run the server on it but i cannot do that in just two seconds for electric videos so i'll pause this and get myself a web server running locally then i'll take another video ok i'll see you then",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7c96669f-3968-4af3-b08d-c28d80ecf477",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "o access a web page not over tcp but over udp of course if i do that then my web client better be able to actually handle udp connections and also my web server needs to be able to handle udp connections does it happen today yes surprising it does so if you happen to be a rather large company called google fo",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "92db69f3-9bba-45d8-8f6d-84d8ae3c2b2e",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "are requesting ok so let's get a client dot c okay and recompile so we've got now our new http request and so compile run it again and now we see our web server is actually giving back the very code that was used to request it which i think is kind of cool alright that's enough for this lecture i will see you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ervers and first of all let's just have some fun with some inbuilt things ok so if you've got python three installed then you already have an inbuilt web server ok so let me to navigate to a certain directory and then i'm just going to start it right so python off we go let's do python3 and we'll say ok i wan",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " to load the module http dot server ok now right so off it goes it's listening as you can see on port eight thousand so let me connect to this little web server ok so right so i will now go to firefox and connect there and do we have a connection ok yes it's alright it's happily responding and finally back in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ave the prompt anymore let me just send some garbage blah blah blah to the server that's listening on that port alright and you'll see that my little web server over here in pythons did not like my message here it says hey bad request and in response to my request it sent the following it said ok you i didn't",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "e's the list of files in the directory so now we could actually kind of click on those links and load them for example so great we've got ourselves a web server using python and we've got this swiss army knife called netcat you can even use netcat to kind of transfer files as well right so right so what i mea",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "nning on the service on a non standard port perhaps you're just developing some examples on your laptop and you're running an encrypted https service web server on some unusual port like for example eight four four three ok and you chose that number because it's greater than one thousand twenty four it's not ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ok so let's make ourselves a server socket now ok so there's an exciting moment right so this is what underpins databases cdns web servers etc etc this is what allows other people to connect to you so here we go right the what i'll do today then is a little bit different from what we sa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "r number if we forgot to close it down then eventually we would fail and accept would would not be able to give us a valid file script anymore so our web server would stop working when i said there's not much of a web server right now because it's not truly actually returning web web content not something tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "fail and accept would would not be able to give us a valid file script anymore so our web server would stop working when i said there's not much of a web server right now because it's not truly actually returning web web content not something that's a real web page ok and it's not actually truly talking http ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "it connected a k and what it gave us it told us to go to a different page ok so please refresh this and go to this other web page fine so i'd write a web server web client now which actually kind of understands this text and follow that link right but we'll see that fundamentally our request was ok and it gav",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "is other address this other host name illinois to edu here's why today we can have multiple hostnames which resolve to the same ip address and so our web server doesn't know which actual host that you would like it to pretend to be unless you tell it so perhaps if i told it that we wanted to connect to behave",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " it connected ok and what it gave us it told us to go to a different page ok so please refresh this and go to this other web page fine so i'd write a web server web client now which actually kind of understands this text and follow that link right but we'll see that fundamentally our request was ok and it gav",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "is other address this other host name illinois to edu here's why today we can have multiple hostnames which resolve to the same ip address and so our web server doesn't know which actual host that you would like it to pretend to be unless you tell it so perhaps if i told it that we wanted to connect to behave",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ok so let's make ourselves a server socket now ok so there's an exciting moment right so this is what underpins databases cdns web servers etc etc this is what allows other people to connect to you so here we go right the what i'll do today then is a little bit different from what we sa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "mber if we forgot to close it down then eventually we would fail and accept would would not be able to give us a valid file descriptor anymore so our web server would stop working when i said there's not much of a web server right now because it's not truly actually returning web web content not something tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " and accept would would not be able to give us a valid file descriptor anymore so our web server would stop working when i said there's not much of a web server right now because it's not truly actually returning web web content not something that's a real web page ok and it's not actually truly talking http ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " it connected ok and what it gave us it told us to go to a different page ok so please refresh this and go to this other web page fine so i'd write a web server web client now which actually kind of understands this text and follows that link right but we'll see that fundamentally our request was ok and it ga",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "is other address this other host name,\u00a0 illinois.edu. here's why today we can have multiple hostnames which resolve to the same ip address and so our web server doesn't know which actual host that you would like it to pretend to be unless you tell it so perhaps if i told it that we wanted \"to connect to behav",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ervers and first of all let's just have some fun with some inbuilt things ok so if you've got python three installed then you already have an inbuilt web server ok so let me to navigate to a certain directory and then i'm just going to start it right so python off we go let's do python three and we'll say ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " the module http dot server ok now right so office go off it goes it's listing as you can see on port eight thousand so let me connect to this little web server case so right so i will now go to firefox and connect there and do we have a connection ok yes it's alright it's happily responding and finally back ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ave the prompt anymore let me just send some garbage blah blah blah to the server that's listening on that port alright and you'll see that my little web server over here in pythons did not like my message here is is hey bad request and response to my request it sent the following it said ok you i did like yo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "e's the list of files in the directory so now we could actually kind of click on those links and load them for example so great we've got ourselves a web server using python and we've got this swiss army knife called net cap you can even use netcat to kind of transfer files as well right so right so what i me",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ning on the service on a non standard port perhaps you're just developing some examples and your laptop and you're running an encrypted https service web server on some unusual port late for example eight four four three ok and you chose that number because it's greater than one thousand twenty four is not a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d51e1b38-6c01-4584-9e0b-69d42464cfa6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "u find that so great is given me canonical paths let's start talking about how we can use this for something like a file server so which is part of a web server how can i make sure that i only serve content from my web directory i don't want to start this happily sending the contents of arbitrary files ok so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d51e1b38-6c01-4584-9e0b-69d42464cfa6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "t dot slash dot dot slash dot dot slash dot dot slash etc let's say message of the day or the password file or something more nefarious to do with my web server now you might claim oh i don't know how many parent directions to go up well it doesn't take very long to try for and it doesn't work try five then s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d51e1b38-6c01-4584-9e0b-69d42464cfa6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "f that is the absolute directory so if we were to check this result we would quickly discover that it doesn't look like a valid subdirectory of of my web server so what i should do then is check that the first say thirty characters also truly is looks like the base directory of my web content so what i would ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d51e1b38-6c01-4584-9e0b-69d42464cfa6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ooks like the base directory of my web content so what i would like to do then is ok let's do this is that will say that the base path can be for the web server that is going to be all the content inside sub one in case and now i've got two paths and now i just want to see if they are valid so for this i want",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d51e1b38-6c01-4584-9e0b-69d42464cfa6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e reasonable like two and the cat picture kay kay so off you go run it again and great so now the request the file that we're going to serve over our web server looks like a valid resource ok sure you can i think we've talked about most things well talk about 'cause i've got this is another little demo over h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f6f268-02f8-4d31-a805-f951523e92a1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "path which is relative to the current directory of a process so whether that process is bash your shell or a process that is currently running like a web server that process has idea of the current working directory or the current directory and so if we want to talk about that contradictory we can just write ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f6f268-02f8-4d31-a805-f951523e92a1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "t canonical ok so let me start with the four slash so ok i'm going to go into say e t c and i might find things like the host name of settings for my web server and other things inside there ok but then i want to go to parent directory and go somewhere else so for example i might want to go into var where you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f6f268-02f8-4d31-a805-f951523e92a1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "path where we can actually ask for the absolute canonical path and this is going to be very useful when we want to build things like file servers and web servers for security to make sure that we are only serving files out of the correct directory we don't want requests to come in with a malicious user is req",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f6f268-02f8-4d31-a805-f951523e92a1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "sh e t c and then inside that i'd like the password file please ok or maybe i want to go into e t c and extract the authentication information for my web server or the secret information i used for https ok so i want to be able to kind of discover any kind of attempts to do do do these attacks and for that wi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "de67c1db-85ec-40ee-affa-68ebcf984028",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "h which is relative to the current directory of a process so whether that process is bash or your shell or a process that is currently running like a web server that process has idea of the current working directory or the current directory and so if we want to talk about that kind of directory\u00a0 we can just w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "de67c1db-85ec-40ee-affa-68ebcf984028",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nonical ok so let me start with the a forward slash so ok i'm going to go into say /etc and i might find things like the host name of settings for my web server and other things inside there ok but then i want to go to parent directory and go somewhere else so for example i might want to go into var where you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "de67c1db-85ec-40ee-affa-68ebcf984028",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "path where we can actually ask for the absolute canonical path and this is going to be very useful when we want to build things like file servers and web servers for security to make sure that we are only serving files out of the correct directory we don't want requests to come in with a malicious user is req",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "de67c1db-85ec-40ee-affa-68ebcf984028",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " into /etc and then inside that i'd like the password file please ok or maybe i want to go into etc and extract the authentication information for my web server or the secret information i used for https ok so i want to be able to kind of discover any kind of attempts to do do do these attacks and for that wi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "u find that so great is given me canonical paths let's start talking about how we can use this for something like a file server so which is part of a web server how can i make sure that i only serve content from my web directory i don't want to start this happily sending the contents of arbitrary files ok so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "t dot slash dot dot slash dot dot slash dot dot slash etc let's say message of the day or the password file or something more nefarious to do with my web server now you might claim oh i don't know how many parent directories to go up well it doesn't take very long to try four and if that doesn't work try five",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "s that is the absolute directory so if we were to check this result we would quickly discover that it doesn't look like a valid subdirectory of of my web server so what i should do then is check that the first say thirty characters also truly is looks like the base directory of my web content so what i would ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ooks like the base directory of my web content so what i would like to do then is ok let's do this is that will say that the base path can be for the web server that is going to be all the content inside sub one ok and now i've got two paths and now i just want to see if they are valid so for this i want to s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "re reasonable like sub two and the cat picture ok so off you go run it again and great so now the request the file that we're going to serve over our web server looks like a valid resource ok sure you can i think we've talked about most things well talk about 'cause i've got this is another little demo over h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5ab7cd3e-b52e-4bfc-aa50-687888c3c92d",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " but let's not worry about that today and one example of that is when we want to do so you too could use this for example perhaps you want to write a web server that school it's a web server and you know that you want to run it on a privileged port for example port eighty or port four four three if you want t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5ab7cd3e-b52e-4bfc-aa50-687888c3c92d",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "t today and one example of that is when we want to do so you too could use this for example perhaps you want to write a web server that school it's a web server and you know that you want to run it on a privileged port for example port eighty or port four four three if you want to make a web server which is l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5ab7cd3e-b52e-4bfc-aa50-687888c3c92d",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ool it's a web server and you know that you want to run it on a privileged port for example port eighty or port four four three if you want to make a web server which is listing for http requests or https requests and you'd like your little program your little web server to actually be able to be run and run ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5ab7cd3e-b52e-4bfc-aa50-687888c3c92d",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " four four three if you want to make a web server which is listing for http requests or https requests and you'd like your little program your little web server to actually be able to be run and run by mere mortals not just root so what you have to do is you'd make your executable and then you would say ok i'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5ab7cd3e-b52e-4bfc-aa50-687888c3c92d",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "s you'd make your executable and then you would say ok i'm going to use chmod to set the set uid bit ok so now anybody can run it but when they do my web server won't be running a stand they'll be running say as root or some other user that has administrative privileges ok so the last last second penultimate ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5c06ea70-4c6c-40b5-828d-a3492fe9fa96",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " but let's not worry about that today and one example of that is when we want to do so you two could use this for example perhaps you want to write a web server that school it's a web server and you know that you want to run it on a privileged port for example port eighty or port four four three if you want t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5c06ea70-4c6c-40b5-828d-a3492fe9fa96",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "t today and one example of that is when we want to do so you two could use this for example perhaps you want to write a web server that school it's a web server and you know that you want to run it on a privileged port for example port eighty or port four four three if you want to make a web server which is l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5c06ea70-4c6c-40b5-828d-a3492fe9fa96",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ool it's a web server and you know that you want to run it on a privileged port for example port eighty or port four four three if you want to make a web server which is listing for http requests or https requests and you'd like your little program your little web server to actually be able to be run and run ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5c06ea70-4c6c-40b5-828d-a3492fe9fa96",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " four four three if you want to make a web server which is listing for http requests or https requests and you'd like your little program your little web server to actually be able to be run and run by mere mortals not just route so what you have to do is you'd make your executable and then you would say ok i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5c06ea70-4c6c-40b5-828d-a3492fe9fa96",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ou'd make your executable and then you would say ok i'm going to use chip mod to set the set uid bit ok so now anybody can run it but when they do my web server won't be running a stand they'll be running say as root or some other user that has administrative privileges ok so the last last second penultimate ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "398ab8f1-44ca-4550-8662-16d9a98af68a",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "'t start altering system files it won't be able to open ports less than one thousand twenty four for example case so it's not going to be a very good web server if it doesn't have those privileges right then so that's not stop playing with this let's run this as say root ok so i'm going to run hello again rig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "398ab8f1-44ca-4550-8662-16d9a98af68a",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ch can do generally useful things the alternative is that maybe you've got a bona fide reason to do this for example maybe hello is now going to be a web server so great now angrave for anybody else that can run this program can start a web server so maybe i want to change the permissions on this so that only",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "398ab8f1-44ca-4550-8662-16d9a98af68a",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "reason to do this for example maybe hello is now going to be a web server so great now angrave for anybody else that can run this program can start a web server so maybe i want to change the permissions on this so that only people within a certain group for example can run this program so we saw how ok how th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ort the turn around time yet is the time between when we first request to report and when we finally get it all completed so for example if there's a web server this would be the time between you making the request and then getting the complete web page ok so this is going to be with in terms of our little fo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "hi welcome to lecture thirty three so we're going to return to networking and we're going to see a little bit further but how to make a web server and also start talking about epoll as well so all kind of great stuff cs two forty one so here we go first of all let's just refresh some basic ideas",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4032b6db-39d8-4d61-bef9-218a42c0a7e4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "h time for every resource so we'll talk about how we can improve that in a future lecture but for now who are we've made ourselves a very very simple web server and it only took like a hundred lines of code if that actually going to serve the internet and server picture ok so let's get outta here let's just s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4032b6db-39d8-4d61-bef9-218a42c0a7e4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "icture ok so let's get outta here let's just see how long it was right we can say give me a word count on the web where is it ok word count on simple web server and one hundred seventy lines so bit longer the hundred but not that much more that's it bye for now",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "this kind of fake inheritance model here right so let's go actually have a look at some real code now where we're going to implement an actual actual web server and yeah let's just go jump straight into code ok so will still the top ok right ok jump down a bit ok right so some code you're very welcome to use ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ually kind of print out your own ip address but i don't care about that today what do you want to show you is some things we have to do inside a good web server even a simple one here so for starters we need to handle sigpipe because maybe we want to send some bites down a socket but the other end is already ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "f we do that we'll get a sigpipe and the default behavior is seek pipe is to close up process so we better do something about that ok secondly a good web server will have to implement a better version of right because remember right can return just the negative wall and say oh i'm sorry i got interrupted by s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ot nothing further to write an i don't want to read your connection anymore after we've done that we can close it down so that's how extremely simple web server that actually have a play with it and see how it goes i'll see you in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " returning negative one but otherwise it gives me a file descriptor for a client so once i've got that far descriptor i could write a very simple web web server or file server or database which services one request and then closes that file script down and service the next request ok so that's not going to sc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "at let's make a new thread for every client that connects every time except returns let me kick off a new thread just to handle that request and some web servers do that so for example there's python web servers do that ok so this scales fairly well but of course if we attempted to have say a thousand active ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "onnects every time except returns let me kick off a new thread just to handle that request and some web servers do that so for example there's python web servers do that ok so this scales fairly well but of course if we attempted to have say a thousand active threads all trying to run at the same time then my",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "en file descriptors had closed epoll tried to kind of fix all the corner cases of poll ok so today if your challenge is to write the world 's fastest web server linux then you need to pull out epoll out of your back pocket so equal solves the order n problem epoll allows us to in order one time find out which",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e09a816e-d4d4-46c2-9a55-faaa21d5a1d4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ous attacks against tcp first of all port hijacking so whatever now other malicious user could take over a port so you think you're connecting to our web server but in fact you're connecting to a malicious process listing on the other end pretending to be a web server but in fact just stealing your password e",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e09a816e-d4d4-46c2-9a55-faaa21d5a1d4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ort so you think you're connecting to our web server but in fact you're connecting to a malicious process listing on the other end pretending to be a web server but in fact just stealing your password etc right so how can we try to prevent this so there's two kind of common mechanisms first of all the idea of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f815b599-ae2e-4d57-9c3e-b1834f484942",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "ok so let's get out of the weeds for a moment and talk about signals kind of in real life first of all pathsss you want to write a web server so very famous one is apache and apache like many other programs have configuration files and like many other programs we want our server to keep run",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f815b599-ae2e-4d57-9c3e-b1834f484942",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "er to keep running so just because we've changed part of the configuration file is kind of annoying to have to disconnect users so instead the apache web server features a little cute little feature which is if you send this particular signal called sick sick hub it will automatically re read the configuratio",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f815b599-ae2e-4d57-9c3e-b1834f484942",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "y re read the configuration file it's not going to do anything to existing users it will continue to satisfy their requests but all new requests that web server will be used the new configuration that you've just described so that's kind of pretty cool also java next time you've got java processes maybe kind ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "t there's more we can do today which is today we put intelligent intelligent firewalls and network devices in front of our our precious databases and web servers and we can try to identify in real time these fake connections versus real connections and so we only provide a limited amount of resources for thes",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "de a limited amount of resources for these kind of fake connection attempts and protect our valuable but slightly slower resources like a web 's real web server or real database from these from all these kind of smaller packets which don't necessarily it could've do much but don't ask her bona fide requests f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "er to discern beg you ate the malicious traffic or the fake traffic versus the actual real traffic and so here's the plan is let's say that you put a web server what i can do is if my bot net if if i'm a malicious attacker and i own millions of machines i can make those requests from those millions of machine",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "re vulnerable to simple attacks for example maybe the admin interface still has a password like admin or maybe they are running extremely out of date web server which is got known vulnerabilities or maybe they have some other well known a backdoor into them which allows an attacker to take over these devices ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "38a81991-43dc-442e-b214-b0fdcb528caf",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "mon secure library implementation if simplified it a little bit just so it actually fits on screen here but the ssl as there we go and i supported by web servers at the time supports different protocol messages and one of them is is very simple idea is just a little heartbeat sometimes you want to keep that c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "38a81991-43dc-442e-b214-b0fdcb528caf",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "etters in other words we are sending back five hundred arbitrary bytes in for more process which is actually running part of the security protocol of web server oh dear we have a problem here because what's going to be in there were things like messages which is supposed to be for other clients the private ke",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578b472b-d7f9-455d-b241-95da7faa4f77",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "e candy bars i could have another website that says sells go carts so i guess i'm listening all kind of my favorite things at this point and the same web server on the same ip address can pretend to be these different servers so as part of the http request you could now send a header the says please respond a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9951a684-a841-47e6-8d48-035d4127b468",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ch are actually going to occur so we'll do it let's see this time will do it this way so will have their client over here k this server over here the web server and time goes to the right so initially our server says hey here's my sin and the service says great let's get connected i acknowledge your synchroni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "y that a particular process runs as an effective user id and has access all not to certain system resources so we know for example if i was writing a web server that the web server has to run as root in order to access support that is privileged like a port less than a thousand and twenty four ok so should al",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "process runs as an effective user id and has access all not to certain system resources so we know for example if i was writing a web server that the web server has to run as root in order to access support that is privileged like a port less than a thousand and twenty four ok so should all my code however ru",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "e some defenses against is in that for for web pages which of for https connection then it is possible to actually detect whether the certificate for web server is valid so we hopefully that that is a second alternative way of detecting when we have been deliberately sent to a malicious server there's also a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": " ok tammy cat about a file curl will connect to a website it understand several protocols including http and https and it will make a connection to a web server so great and then we can see we've connected to this and we've got back the kind of basic html document ok the actual body of the response we can pro",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "ddress great so now we can try to make some different sockets like its ip six sockets so ip four sockets and then start making tcp connections to our web server we know that http runs on port eighty so we haven't specified reports we're going to use a default poor poor eighty so let's connect to the illinois ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "c library",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "0e5047cd-7d46-49d0-a2ab-8ee74d7a774b",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "hi so the c library actually has quite a few functions to work with strings when is going to look at a few of them and realize that they're actually really really simple",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0e5047cd-7d46-49d0-a2ab-8ee74d7a774b",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "g to look at a few of them and realize that they're actually really really simple and is actually really really easy to write but the ones inside the c library are probably much better debug and more performant and run faster and quicker than anything we might write for example perhaps they use specialized a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "527934a0-530d-4125-a5a8-2a5cf05dcd5d",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "my c file and the angle brackets here are just a hint to say this is not part of my project instead you look inside the standard include paths of the c library and my system ok so that's the first thing is just a weekend it easy music for includes the second thing we will see is we can define macros so for e",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "happened why did my lines come out in a different order ok so to answer this question we need to understand a little bit about the buffering that the c library gives us the c library supports buffering in order to ensure good performance making a system call is a lot more expensive than just a regular functi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "es come out in a different order ok so to answer this question we need to understand a little bit about the buffering that the c library gives us the c library supports buffering in order to ensure good performance making a system call is a lot more expensive than just a regular function call so rather than ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "call so rather than just sending a few bytes at a time let's only make that system call when when we want to ok so what's the default behavior of the c library here ok right so the default behavior is actually kind of reasonable when we kind of think about it first of all if you're sending stuff to standard ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " these two things we sent pretty early on and we saw them pretty early on but we also saw their kind of hello early as well while i was that well the c library when the output appears to be going to the terminal will flush that the moment that it sees a new line the thinking here and if you think about it it",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "xample we've called f close on it or wear exiting gracefully our program then will send out everything that we've currently got inside the memory the c library flushed out if you crash your program then this policy likely never has a chance to actually send those bites so will never actually see that output ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "hi, so let's address a point of confusion and start talking about how we can write and read things inside the c library, but also how it works underneath. so let me change to laptop mode. ok, great. so here's the big idea that, at the heart of it all, if i want to stre",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "ace. and inside cs 241 then, we're actually going to use both of these. we're going to work with this low level interface. but we'll also see how the c library wraps this up into something more useful. for example and perhaps i want to read some formatted information, like i've got scientific numbers, or may",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "ertain words and tokenize them. so in this course, actually, we're going to be playing with both, but it's important to realize whether you're at the c library level, or whether you're playing with the lowest forms, these read and write calls. and what's actually \"really cool about these, this gets \"\"lowest ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "to. so anytime you see read or write, you know that you're working with a little file descriptor. but above that, we can now talk about what does the c library give us? and the c library is going to make our world a little bit easier when we want to work with formatted information and when we want to ensure ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " or write, you know that you're working with a little file descriptor. but above that, we can now talk about what does the c library give us? and the c library is going to make our world a little bit easier when we want to work with formatted information and when we want to ensure good performance as well. b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "o make our world a little bit easier when we want to work with formatted information and when we want to ensure good performance as well. because the c library, when we actually say, \"\"\"hey, print out the following numbers for me,\"\" or,\" \"\"\"send the following strings,\"\" isn't necessarily\" going to immediatel",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "t inside the memory until the day that we decide to flush it out, until the day we decide to send it. so let's turn our attention then to the kind of c library version of the world where, ok, scroll down here, where the c library has a file objects and, by default, we get three of these for free. there we go",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "l the day we decide to send it. so let's turn our attention then to the kind of c library version of the world where, ok, scroll down here, where the c library has a file objects and, by default, we get three of these for free. there we go. we have standard in (stdin), standard out (stdout), and standard err",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "to be thinking about reading or writing at the lowest level. they're not going to be using those system calls. instead, they're going to be using the c library. right so with that, our next little video will be on: what do you think the following code will produce? what do you think we will see when we run t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f84e2260-9145-46a3-bdce-409d6138324a",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "\" i don't need\" to invoke the whole operating system for that. i can do that directly inside my process's memory. so for things which are part of the c library, i just need to go to section three. and so that's where we'll find strlen and other things like strcmp to compare two strings, or say strcat. so [in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f84e2260-9145-46a3-bdce-409d6138324a",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "te better with this little tablet thing. ok so what have we got? a section two that is for the system calls. we're going to see section three for our c library, there we go. and section seven for longer articles. we'll see those in the future when you get to threads and signals. ok, alright. so, i'll see you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "got to the end of the line is either we've got to the last line of a file or we see a new line character so the great news is that there's actually a c library function to do this for us it's going to wrap those low level calls and make sure that it gives us back one line set a time let's see this action ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "nter to one of these variables causes a size under course t my goodness and the last thing is where should it read from so we're going to give it a c c library file handle which we've either got from calling f open or which could use standard in if we want to read just from the standard input and it returns ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "e so compile off we go right so we've run it and notice waiting get line is blocked because their deep inside the implement vegetation at some point rc library is calling read and read itself is blocked or process isn't doing anything right now it's stuck and it only gets to continue when read returns so let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "y good let's write this and commit it and you can play with it too ok right so i'll see you in the next video when we go up a level let's go into the c library and talk about how we can use scanf to do more interesting things and read structured data more easily by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6fa7868f-bbe1-47f6-bee8-22507dfcc8c8",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "ut it's also potentially going to buffer my input as well for better performance ok so even though i might only be reading say one line at a time the c library will read many more bites in an attempt to have better throughput so we can load our files in quicker right so i've got myself a file for good error ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "eb1a08a4-8b77-4361-a5d8-4e3b26439f27",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " text or data not having to write my own routines to convert one two three into the number one hundred and twenty three and the answer to that is the c library comes to rescue and we have really useful little thing here we have scanf which is a lot like printf so if you've learned printf you can now do the o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "42ebcdb6-a366-49f4-b95a-a0614c5ac1ce",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "the number of bytes red form the c string from the stream so as you can see that's quite a gnarly little function to write so isn't it great that the c library be provides it for us okay so that was get line so let's have a look at the following and see if you can immediately see what is wrong with the follo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "hat's right actually underneath&nbsp; fgetc&nbsp; ends up calling read for performance may not ask for just one bite it might say yeah guess what the c library has lots of space that's a full thousand six bytes or something for for a buffer area itself in order to make the code performance alright are we don",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7a7590a3-2294-4d27-89ff-d625512f82e5",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "ause my exit then wouldn't be enclosed within the condition there we go so we also want some braces in there ok now we call f open so we're using the c library to pass in an argument and we already are confident that that is a non null pointer because we know now that is going to be at least two items inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "tion two of the man page so you would write man s two ok right so we're doing low levels things with file scripters but we've jumped back up into the c library where we say put string in other words print out the following to standard error and and also print out a new line ok hold on a moment didn't we just",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "ng to standard error and and also print out a new line ok hold on a moment didn't we just close down it out yes you're correct but we didn't tell the c library the c libraries still thinks it can send things to file descriptor one so does that mean that none of this is going to appear well almost here's a li",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "before it had a chance to do so we killed all that memory hold on a moment put us i told you write a new line and doesn't new line actually cause the c library to flush all that out well you'd be correct normally if we were writing just to the terminal but the c library attempts to see what is it sending its",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "nd doesn't new line actually cause the c library to flush all that out well you'd be correct normally if we were writing just to the terminal but the c library attempts to see what is it sending its output too and in this case we change to standard output before it had written anything so that it would be se",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "sending its output too and in this case we change to standard output before it had written anything so that it would be sent to a file and so now the c library changes to better performance mode that says we won't try to buffer this for every time we see in newline instead we will only write things out when ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "lly shutting down the program and in this case neither of those two things happened instead exec came blustering in and discarded everything that the c library had got ready to print out to stand out so it never had a chance so that's how this program works let's just run it one more time and will see now th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0173c9a1-6ea6-40ab-b5d1-ccc145c2f251",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " ok i'm giving you an address another address i want you to take one bike to please and because we're using the low level posit calls rather than the c library that that bite is immediately going to be written out to standard out so we'll see it straight away it won't be any buffering and then we say ok plea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "nd we use argv of one ok not bad i might have put that inside of variable if i wanted my code with a bit more readable and then we give a hint to the c library that we only want to open this file for reading right ok good some error checking so if not far in other words if i point two is pointing at nothing ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " we better actually call f flush on our input here as well if you had printed some things out and he wanted to make sure that they truly had left the c library you could also use eh flush on any of your output as well but this particular annoying fact right now for two thousand nineteen at least seems to be ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14984eb1-a900-473a-816e-4e304fedc041",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " ok this is the whole story now there's a few little lies inside this story ok so what are the lies first of all that when we load libraries like the c library or if we were doing open gl sound library we need to put those in memory as well so in practice they will actually live between these where we dynami",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2c80a67a-6e39-4b62-812c-69eb49905471",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "n ok so between you and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but we will use it for cs two forty one to implement a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57f1edee-d98f-4b8b-9ca9-c3c66e7774d1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "n ok so between you and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but we will use it for cs two forty one to implement a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7aab9397-22c3-4ad5-beca-764e7308dfdf",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "n ok so between you and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but we will use it for cs two forty one to implement a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e3b111b7-8038-4f0e-a112-7fb6b2538548",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "n ok so between you and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but we will use it for cs two forty one to implement a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cadee54-ee1a-49c8-b696-1968feee37b3",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "d then what will do is when we write our malloc we're actually going to round up all of our allocations to sixteen bytes and in fact this is what the c library does on a sixty four bit system so if we do this if all of our allocations are always conceptually in sixteen byte blocks then will ensure that will ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "802abd70-0cc9-49a1-8916-5ff1c0a98738",
        "lecture": "CS",
        "lecture_num": 12,
        "context": " what's happens ok right segmentation fault asked no good oh this time we got oh dear what are awful program clearly there's something wrong with the c library clearly the where where we write clearly printf is broken so why is it that this line whether we include print out or not seems to be changing our pr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ay is a hint don't forget when we compile we gotta give a hint to the compiler to say alright we need p thread support please load the version of the c library which includes malloc that supports multiple threads right so why is it that my lock can do this safely then and the key phrase is what i'll tell you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ve got access to more random we actually have because they're sharing things and there's an example with clang but it's very true for things like the c library and other dynamic libraries that are shared across multiple processes right so sharing is caring and kind of allows us to use our memory efficiently ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4601a707-5dd9-44c5-b66d-261ac8ae080b",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "hi ok so let's jump to a different level let's jump back into the c library perhaps you wanna write some very portable code it doesn't require on requires to think about these low level posix interface is we just want to writ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4601a707-5dd9-44c5-b66d-261ac8ae080b",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " low level posix interface is we just want to write code that works say in windows as well maybe you kind of other operating systems that support the c library and which is kind of everything so let's have a look at how we can kind of jump around in file now i big word of caution here is that the function is",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4601a707-5dd9-44c5-b66d-261ac8ae080b",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "hich file system is on the number of hard links we haven't talked about yet modification times and all that good stuff but let's just stay within the c library today for the most portable code and figure out how big the file is so our trick would be to go to the end of the files so go to the very end right s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "if you're sending data that if you if you put a slash end at the end of it that sufficient no you need to flush the stream if you're going to use the c library fprintf type calls. right so we've done reading from a pipe what about if we try to write to a closed pipe ok so how can the writer discover that thi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "d f remember that these things are then buffered so things are going to be sent to the pipe immediately unless you call f flush in order to force the c library to say hey i stopped worrying about performance just send everything you've got to file descriptor ok so remember to use fflushf() and just simply pu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " like the write end. here it is. and i want to use this for writing ok so now what i call fdopen() rather than opening a file all i've done is ask to c library to wrap one of these low level things to give me one of these c library file handles one of these file pointers ok so this makes the life little bit ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "o now what i call fdopen() rather than opening a file all i've done is ask to c library to wrap one of these low level things to give me one of these c library file handles one of these file pointers ok so this makes the life little bit easier. we'll call it 'easy' right, because now i can use fprintf() so n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "781c2c19-58df-4f6e-9dcf-99e51f685f66",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "hi ok so let's jump to a different level let's jump back into the c library perhaps you wanna write some very portable code it doesn't require on requires to think about these low level posix interface is we just want to writ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "781c2c19-58df-4f6e-9dcf-99e51f685f66",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " low level posix interface is we just want to write code that works say in windows as well maybe you kind of other operating systems that support the c library and which is kind of everything so let's have a look at how we can kind of jump around in file now i big word of caution here is that the function is",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "781c2c19-58df-4f6e-9dcf-99e51f685f66",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "hich file system is on the number of hard links we haven't talked about yet modification times and all that good stuff but let's just stay within the c library today for the most portable code and figure out how big the file is so our trick would be to go to the end of the files so go to the very end right s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " so let's use that correctly ok right so please put out the following long variable ok so let's compile this and run it great and you'll see that the c library as far as it's concerned any read and writes to that file now will be occuring at position ninety offset nineteen from the beginning so if i wished i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ould like that almost going on ok now you'll see that we've changed position so ask look at this carefully so the flush command here is a hint to the c library to say hey we know you like to buffer everything we know that you don't want to make system calls unnecessarily but no really now it's time to actual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " kernel that we want to change the position so we change conceptually the position of where future read and writes will occur here but by default the c library will kind of cache that internally now if we were to start writing things in here again the selye be might tell the kernel but it's going to delay th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ine overtime when you would want to be deliberately writing changing positions both in the child and the parent and having to worry about whether the c library is actually called the kernel object or not so in practice what is usually better behavior is too close unwanted file handles before forking or after",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " so let's use that correctly ok right so please put out the following long variable ok so let's compile this and run it great and you'll see that the c library as far as it's concerned any read and writes to that file now will be occuring at position ninety offset nineteen from the beginning so if i wished i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "\"\"what's going on?\"\" ok, now you'll see that we've changed\" the position so let's look at this carefully. so the flush command here \"is a hint to the c library to say, \"\"hey, we know you like\" to buffer everything. we know that you don't want to make system calls unnecessarily. but, no really, now it's time ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "el that we want to change the position. so we change, conceptually, the position of where future read and writes will occur here, but by default, the c library will kind of cache that internally. now if we were to start writing things in here, again the c library might tell the kernel but it's going to delay",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "d writes will occur here, but by default, the c library will kind of cache that internally. now if we were to start writing things in here, again the c library might tell the kernel but it's going to delay that for as long as possible. so by calling flush here we have ensured that the position is updated at ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "time when you would want to be deliberately writing and changing positions both in the child and in the parent, and having to worry about whether the c library has actually called the kernel object or not. so in practice, what is usually better behavior is to close unwanted file handles before forking or aft",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7d923e20-7168-4cea-b7dd-1ffabc4e892c",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "re actually writing this and we've defined ourselves what this file structure looks like this is a reason we're doing this is to try to model how the c library works and to think about the kind of buffering that it might do ok so we can look at what effort is supposed to do is supposed to be put s which mean",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7d923e20-7168-4cea-b7dd-1ffabc4e892c",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ngs into memory so there's an additional cost there alright so that's kind of quick sketch of the things we need to think about when implementing the c library are see you in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ok right so how do we read half a file? right, so let's go. well first of all let's open the file handle so will do this all at the c library level ok and next time you write a piece of python code or c++ code realize that many of those functions actually ultimately written using the c libr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ibrary level ok and next time you write a piece of python code or c++ code realize that many of those functions actually ultimately written using the c library as kind of intermediary between the python code that we write and the actual kind of kernel level calls like open etc ok so we want to fopen this fil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": " the length now it could you start but if we're not using or if we don't want to use that kind of posix level and we just want to stick with what the c library gives us why don't we actually go to the end of the end of the file i find out where that is ok so let's call f seek and i want to get to the offset ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a339955c-d52d-4f69-9c8a-c4e9d4cf038f",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ok so let's stop thinking about implementing the c library and instead get the stack and instead think about actually working with real data now you could store a whole lot of data using scan f and printf etc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a339955c-d52d-4f69-9c8a-c4e9d4cf038f",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "point cloud data so how can we do this right how can we load reading my point cloud data well the most cross platform way of doing this is to use the c library and i've got something here called fread and fwrite and they behave a little bit like calloc in the sense that you can specify the size of each item ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "testing, testing... right, ok. welcome to the next lecture. i want us to think about how we might actually write the c library. ok so maybe you don't like the license of glibc maybe you want to write a library that is a lot smaller or simpler so how can we actually wrap the l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "normally as programmers we don't need to peek inside to see how they're working but that's not true today because we are actually trying to write the c library so let's have a go at writing the kind of simplest version that we might want and that's what i've done up here ok so this is what i want to put insi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "o let's fix our program and actually make sure that we set this size equal to zero ok so this might be sufficient for a minimal implementation of the c library in practice we might want to do more than this so for example right now we're not we're currently not making use of the mode hints about how this fil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d134a7b4-0001-41ff-bfa4-8f4f15a30f69",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "oh i got a challenge for you let's go back and write flush for the case that we actually implementing the c library oh how can we do this well this moment it's time for us to actually say to the system ok here's some bites so we would want to say ok hey write and i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d134a7b4-0001-41ff-bfa4-8f4f15a30f69",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "in the times where nothing has actually been been been written ok but hopefully you can see that there's not necessarily kind of any magic inside the c library ultimately what it's doing is doing the very stuff that we study inside cs two forty one ok it's wrapping these low level system calls so that we can",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "e heap in general then if you want to work with kind of paths then you can use this constant which is actually part of the kernel but provided by the c library to assure that your c strings are always of sufficient size right so now let's actually start working with directories it would be great if for examp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "time we don't actually print the i node numbers but you could if you really wanted to so let's have a look to see how we can do this in c in fact the c library gives us allies typical of level of abstraction here and it's very easy to use we call opendir and that internally is going to open a file with a usi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "e heap in general then if you want to work with kind of paths then you can use this constant which is actually part of the kernel but provided by the c library to assure that your c strings are always of sufficient size right so now let's actually start working with directories it would be great if for examp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cd13b51-dc41-427e-91b3-c63a9d8334fe",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "rocess there's going to be parts of the program that we only needed during startup possibly we only need during shutdown there's going to part with a c library that we just don't care about those parts of the stack for example that we don't need until our deep nested recursive function finally returns etc et",
        "label": "Use"
      }
    ]
  },
  {
    "text": "mutex locks",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "se so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make it a gl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "f ways you can do that guess what you can say pthread mutex iniciat and pass in a lock and one of the great things about pizza it's implementation of mutex locks is that we can actually pass in a few attributes like we can set it up to debug we can actually create recursive locks but i'm going to anyway we're ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "matically initialize at that point so you can choose one of these but don't choose both particular mutex right so how can i find out more about these mutex locks well guess what the i've got a lot of information inside my manual for example i could all this stuff about the p threads and what i can do in a deta",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "se so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make it a gl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "f ways you can do that guess what you can say pthread mutex iniciat and pass in a lock and one of the great things about pizza it's implementation of mutex locks is that we can actually pass in a few attributes like we can set it up to debug we can actually create recursive locks but i'm going to anyway we're ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "matically initialize at that point so you can choose one of these but don't choose both particular mutex right so how can i find out more about these mutex locks well guess what the i've got a lot of information inside my manual for example i could all this stuff about the p threads and what i can do in a deta",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ecture thirteen. so in this lecture we're going to start talking about thread safety and in particular we're going to start looking at how we can use mutex locks to ensure that only one thread of the time alters our data structure. or if we are modifying a data structure another thread can't read it. ok so let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "nitely give each one its own memory malloc is what's called thread safe and how does it do that with something we're going to talk about today called mutex locks we actually we could do it with other ways but mutex locks would work if you implement malloc for a real programmer is multithreaded you two would ne",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " thread safe and how does it do that with something we're going to talk about today called mutex locks we actually we could do it with other ways but mutex locks would work if you implement malloc for a real programmer is multithreaded you two would need mutex logs or somebody equivalent mechanism some other e",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " at some race conditions and we will check to see if we can actually make these race conditions occur and then maybe we can figure out how to use our mutex locks to fix them right so here's a story so far i've got my little main method doesn't do much it creates irwan thread here for under one and another thre",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "blem again so you can see that my dinosaurs corrupting my text messages to angrave right why was that well yes we now have two text messages so two t mutex locks but when no longer preventing two threads from going into the two text message at the same time so it's a bit like you've got a club now bounces lett",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "se so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make it a gl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ok right so let's see if you can remember something about our mutex locks remember we're using the posix library the patriots and they come with four important course here they are initiate lock unlock and destroy right so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " we call putrid mutex lock and it doesn't return immediately so that will happen when another thread has locked the mutex so i like to joke about our mutex locks being a little duck when you call look here's what's going to happen you're trying to grab dot trying to take it it's mine right now and you get to h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " and they can't be interrupted and no other thread can actually run those two lines at the same time. ok so how do we do that? ok easy! let's use our mutex locks. so just before doing that we call pthread_mutex_lock on some mutex lock that we previously initialized... so let me pass in my 'duck' (quack quack).",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "w do we fix this well one option of course is to use these other versions to underscore art another is to use locking so for example we could use our mutex locks to lock a mutex at the beginning and unlock it at the end so if we wanted to make sure that i know of thread could also effort therefore flush at the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " course ok so that was our first issue in their next part going to introduce you to a new synchronization primitive so we've been talking a lot about mutex locks now it's time to talk about candace airports by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "868deb37-9bd1-4419-a9ac-e164d0b078da",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "exciting things and it's only when they want to come back and read that data structure pull evaluator or push a value in do we need to implement palm mutex locks and i'll see you in next video and we start talking about lock contention ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a73bb722-a006-40e7-ba5b-1402cd135b37",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "d only for a short period of time just one millisecond it's actually doing something inside a critical section that we haven't yet protected with any mutex locks but for the other nine hundred and ninety nine milliseconds is doing something else so this thing runs for one second and then it's some random type ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b681599f-1223-4f55-aca4-e57ac7b4b6cd",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "d only for a short period of time just one millisecond it's actually doing something inside a critical section that we haven't yet protected with any mutex locks but for the other nine hundred and ninety nine milliseconds is doing something else so this thing runs for one second and then it's some random type ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ok let's talk about counting salmon falls so kind semaphores are cool so here's what they can do so let me let me compare them a little bit with mutex locks mutex locks they're designed for very fast locking and unlocking right and the key thing about mutex lock is that the lock and the unlock occur in pa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "s talk about counting salmon falls so kind semaphores are cool so here's what they can do so let me let me compare them a little bit with mutex locks mutex locks they're designed for very fast locking and unlocking right and the key thing about mutex lock is that the lock and the unlock occur in pairs and they",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "w do we fix this well one option of course is to use these other versions to underscore art another is to use locking so for example we could use our mutex locks to lock a mutex at the beginning and unlock it at the end so if we wanted to make sure that i know of thread could also effort therefore flush at the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " course ok so that was our first issue in their next part going to introduce you to a new synchronization primitive so we've been talking a lot about mutex locks now it's time to talk about candace airports by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "da7958fa-52cd-4d05-93a6-42c5aaca70a7",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "d only for a short period of time just one millisecond it's actually doing something inside a critical section that we haven't yet protected with any mutex locks but for the other nine hundred and ninety nine milliseconds is doing something else so this thing runs for one second and then it's some random type ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "t duck ok so now sleep sorry not sleep grab the mutex so we can't actually continue until the mutex lock has been released and here's a big idea with mutex locks is that if we use them correctly you actually only hold on to them for just microseconds at a time just while we say test data structure and then may",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "412638bd-03f0-44d0-a48b-5c8f0bee64e9",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ight so think about that while we also think about what should i do for unlock well unlocking is easy i'm the only thread which actually has acquired mutex locks so i'm going to just reset it back to zero there's no need to wait for any other thread right so it's not a good implementation ok so what we have co",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " go to sleep for example if we can't do this within ten thousand nanoseconds in fact rather than just directly calling atomic operations today period mutex locks actually does a lot more than this it uses a kernel resource called a spinlock and also we have to ensure that our eddie information inside our cache",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "re going to look at in a different lecture is how can we implement or how can we solve this critical section problem which we've today we solve using mutex locks but how can we solve this in a kind of algorithmic fashion and at the steps were going to kind of concentrate on here is actually this very first ste",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "omation is is some interesting challenges to think about is can you make a value using only counting semaphores and can you make a barrier using only mutex locks or like more about that in a future lecture but there's a kind of fun puzzles to think about when you're going to sleep perhaps alright i ask the end",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "i modify this ok i actually want to make sure that i will require the right lock so we're going to be for here called please i want to lock the white mutex locks that's going to be locks plus index and then a corresponding unlock call down here right all we done new we've forgotten a few things first of all if",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "i actually got another thread that is actually going to be displaying what is going on and we can see whether particular i thread has managed to lock mutex locks so if it gets dark inside this moment here it will be stuck on lock if it is about to go into peter condition wait you will see that it will see nap ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ead is actually is calling peter condition wait so how can we ensure that the race condition is not a problem here let's let's also put this inside a mutex locks so p thread mutex lock an i want to look on my locks plus i plus one ok so now we can say strong statements about where the code must be in if we hav",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " tell me what's missing from this code and when would it matter right hopefully is hopefully you remember that last time we did this code we put some mutex locks in so what was the purpose of the mutex locks yes so there are problems was to make sure that if we called add at the same time we want those two val",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "n would it matter right hopefully is hopefully you remember that last time we did this code we put some mutex locks in so what was the purpose of the mutex locks yes so there are problems was to make sure that if we called add at the same time we want those two values to occur at different points inside my rin",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " ok and similar over here i can't have two threads trying to remove at the same time so if i cared about performance might actually use two different mutex locks here so this is my pthread mutex lock and simply over here i can use a different lock because these actually are going to occur different parts of my",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "orried about here one is the size of my buffer and i'm using the the counting semaphores for that and the other is a critical section and i'm using a mutex locks to protect that ok so we've done that we've done that right ok so we've implemented a version using counting semaphores what about condition variable",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " after the second thread ask has gone to sleep so there's no race condition we prevented the race condition ok so the big learning point here is that mutex locks are your friends they do lots of useful things for us and actually what they do is they bring order to our madness they prevent unwanted interleaving",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got thr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "re's our first attempt i'm just going to use a standard mutex lock and then want to analyze this and decide if it's any good so i'm going to have two mutex locks here they are read law can write log and just for fun today let's actually make these pointers so that i can create some memory on the heap for it ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "i first of all i'm going to get the right lock then i'm going to get the read lock and i'm going to do some writing so what do we think about this is mutex locks sufficient to implement this right so take a moment to think about that and then i'll tell you in my point of view ok right so a preferred mutex lock",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " a lot of do so now let's start looking at our third contestant ok so now what do we think about this now we've got some locking going on i've got my mutex locks ok i've got condition weights ok so now i'm going to lock a mutex ok before i do anything ok so now my testing here will will remain true so if i say",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got thr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got thr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got thr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok bye i'm going to actually do this in a text editor ok let's go right do i have so if i've got thr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "got this general definition of deadlock now actually let's see if we can kind of construct some examples where we actually cause it so let's use team mutex locks and two threads to create an example of deadlock ok i'm going to actually do this in a text editor ok let's go right do i have so if i've got thread ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "lock called resource as soon as no other processes have text message block ok and will assume the locks affair so in the general case with the period mutex locks we could set oarlocks up to a give processes with the highest priority access to exclusive lock but in general the sequence of which the locks are as",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "esents a little walk through this state of spaces where the actual walk depends upon the sequence in which my process one or processed to acquire the mutex locks or some other exclusive access to some other resource ok so look at this my process one is acquired its first mutex lock and then switch to support t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " lock but then process two acquires a second lock and now both of them are are stuck verse versus if process one did all of its work so required both mutex locks and then releasable and then process two acquired both locks and then released at all you could see that oh we kind of skirted around the outskirts o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ach one of those integers has a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let's say two or three mutex locks in order to modify those integers how can i ensure that all of my code always locks the necessary integers in the same order case how would you do th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "r than the number of readers actually reading ok so with that in mind it's actually kind of see how we've sketched this out ok obviously we have some mutex locks to ensure that we update these variables atomically but the very first thing we're going to do then for each of these sections is to is to either cal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "waiting to enter this code because of the mutex log and i currently have to slog or that it's inside a condition wait either way it does not have the mutex locks so so that's our first condition can you guess what the other one is so either reading is non zero so let's just be explicit there today ok there's a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " one of them is going to be able to continue to see why remember that each time a thread is working up outside condition wait remember is holding the mutex locks only one thread is running and so the very first writer that that has evaluation of false here gets to continue so what do they do they update writin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "lock called resource as soon as no other processes have text message block ok and will assume the locks affair so in the general case with the period mutex locks we could set oarlocks up to a give processes with the highest priority access to exclusive log but in general the sequence of which the locks are ass",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "esents a little walk through this state of spaces where the actual walk depends upon the sequence in which my process one or processed to acquire the mutex locks or some other exclusive access to some other resource ok so look at this my process one is acquired its first mutex lock and then switch to support t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " lock but then process two acquires a second lock and now both of them are are stuck verse versus if process one did all of its work so required both mutex locks and then releasable and then process two acquired both locks and then released at all you could see that oh we kind of skirted around the outskirts o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ach one of those integers has a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let's say two or three mutex locks in order to modify those integers how can i ensure that all of my code always locks the necessary integers in the same order case how would you do th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "41b0a81d-3653-466e-87dd-0eda65d6af2e",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ow philosophers don't eat all the time in fact eating represents a critical section where before it can do that it's going to need to acquire these t mutex locks but for the rest of the time it's sleeping ok so there philosophising right dozing in the chair ok but occasionally they wake up realize that they ar",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "get initialized ok so we've got a new way of character pointers and that's just a name of five philosophers would like today we're going to have five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here we go and so we just got five meters locks initialized great and then further down great let's actually initialize my philosophers so that's jus",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t let's get myself a philosopher will get the i th one will initialize its name will initialize it left hand and right hand fork to be one of my five mutex locks look i'm using modulo arithmetic so that the fifth philosopher wraps around and gets to zero for kids game right after setting that all up let's star",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ever we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a bit ok by some random number say want nine seconds want to eight point eight seconds and then we release both l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "get initialized ok so we've got a new way of character pointers and that's just a name of five philosophers would like today we're going to have five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here we go and so we just got five meters locks initialized great and then further down great let's actually initialize my philosophers so that's jus",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t let's get myself a philosopher will get the i th one will initialize its name will initialize it left hand and right hand fork to be one of my five mutex locks look i'm using modulo arithmetic so that the fifth philosopher wraps around and gets to zero for kids game right after setting that all up let's star",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ever we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a bit ok by some random number say want nine seconds want to eight point eight seconds and then we release both l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "get initialized ok so we've got a new way of character pointers and that's just a name of five philosophers would like today we're going to have five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here we go and so we just got five meters locks initialized great and then further down great let's actually initialize my philosophers so that's jus",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t let's get myself a philosopher will get the i th one will initialize its name will initialize it left hand and right hand fork to be one of my five mutex locks look i'm using modulo arithmetic so that the fifth philosopher wraps around and gets to zero for kids game right after setting that all up let's star",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ever we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a bit ok by some random number say want nine seconds want to eight point eight seconds and then we release both l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "get initialized ok so we've got a new way of character pointers and that's just a name of five philosophers would like today we're going to have five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "five mutex locks they're going to be our forks and five philosophers ok so the first thing we'll do is just cool pizza at mutex initiate or four five mutex locks here we go and so we just got five meters locks initialized great and then further down great let's actually initialize my philosophers so that's jus",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t let's get myself a philosopher will get the i th one will initialize its name will initialize it left hand and right hand fork to be one of my five mutex locks look i'm using modulo arithmetic so that the fifth philosopher wraps around and gets to zero for kids game right after setting that all up let's star",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ever we don't use trilok instead we call mutex lock so the only way to get out of this loop is when we've truly managed to acquire the left and right mutex locks what do we do after that we eat for a bit ok by some random number say want nine seconds want to eight point eight seconds and then we release both l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " we always lock the mutex which has the smallest address first why why is that important if this purpose of this code is simply to end up locking too mutex locks why change you order depending on their address ok so hopefully some neurons are firing at this point and you remember what we talked about deadlock ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ce allocation graph then log is possible so this code is a stepping stone to making sure that we can't get cycles why because we are going to acquire mutex locks always in the same order in other words we've given them a rank ordering and their ordering is based on the memory location of the actual object in m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "k mutex is always follows the same convention or cause this method then we can agree that deadlock is impossible right so providing always we get our mutex locks with the smallest first we here with impossible to get a cycle in the resource allocation graph alright so that's the purpose of this code you can in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ount is less than sixteen loop forever oh ok so that is not going to be great because will be going inside this loop forever we've never unlocked the mutex locks so that is means that anytime this loop goes forever we've got we've got an infinite loop here so this is going to lead to deadlock because one threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e it is required before actually touching the buffer if this code tried to be a little bit more performance by giving the nq in the dequeue different mutex locks then we would have run into a problem because then we would have allowed a dq thread to try to read a value from the buffer before we've even put the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "about our synchronization primitives so some synchronization event has happened that we allows us to continue so what do we got we've got things like mutex locks you are able to acquire the lock we've got counting semaphores somebody's returned that piece of pizza into the counting semaphore so now we get to p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "24389f97-732f-4c49-9ec5-d5ea195e83da",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "e that we can't use of any code that calls malloc for example there's a very limited number of system calls that were allowed to use there's even the mutex locks the whole order stuff we just can't use inside our signal handlers why because we've temporarily interrupting our other code and that might be deep i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecc913a8-cf8a-4205-b23c-530df9ebc4eb",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "eads calling add at the same time i want to make sure that that that this ad roar is a critical section so how do i protect that answer is where they mutex locks so just before calling add war we're going to call our mutex lock and then just afterwards we can call our mutex unlock and as usual don't forget to ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "condition variable",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "nformation inside my manual for example i could all this stuff about the p threads and what i can do in a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "nformation inside my manual for example i could all this stuff about the p threads and what i can do in a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "right ok so great we've put thread to sleep by calling p thread condition wait and now is happily dozing inside that condition variable right at some point in the future on a different thread we now know that it's time to wake up that thread so for example perhaps you finished downloa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "u can say either p threat conditions signal kate and that will wake up a thread inside one of our our rooms that it sleeping in so we better pass the condition variable that our thread is sleeping in ok and there's one other option which is p thread conditioned broadcast so the difference is that sometimes i actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "e other option which is p thread conditioned broadcast so the difference is that sometimes i actually send a whole load of threads to sleep inside my condition variable and if i call condition broadcast i'm going to wake them all up if i just call signal then i'm asking the system to wake up just one of them and i do",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "y asking to say find me one and wake wake it up for me ok right so quick comment on these if it turns out that right now no one is sleeping inside my condition variable then these two calls have no effect so just as an analogy you could imagine p three conditions signal is running up to i hotel and randomly knocking ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " what do i have in order to implement this well you can see just like i could have p thread threads i can have a mutex thing here it is and here is a condition variable and just like a p thread mutex initializer lips will fix that actually must be an underscore i can initialize things using these magic constants ok s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " thread safe and i want to make sure that my cake never goes negative ok so if you call my decrement function i wanted to block and that is where our condition variable is going to be useful in other words you can only remove cake if if there's at least and a positive value amount of cake again so right so adding thi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "de we don't understand synchronization primitives so just do under loop and every second we were polled the result ok so as a stepping stone to using condition variables this is actually really useful way to think because what we've done is we've defined a condition for when we cannot continue and that's actually the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "y really useful way to think because what we've done is we've defined a condition for when we cannot continue and that's actually the secret of using condition variables and that's why they're called condition variables so yes in practice we've seen the behavior alot like hypnotising someone to sleep for a moment and",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ne is we've defined a condition for when we cannot continue and that's actually the secret of using condition variables and that's why they're called condition variables so yes in practice we've seen the behavior alot like hypnotising someone to sleep for a moment and then wake up later but the trick or the key part ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "r a moment and then wake up later but the trick or the key part is to say what's going to be my condition that i should sleep and i'm going to use my condition variable inside that kind of loop ok so let's actually kind of now sketch out how we can use this so rather than actually just saying sleep for a second let's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hat kind of loop ok so let's actually kind of now sketch out how we can use this so rather than actually just saying sleep for a second let's use our condition variables so instead let's call p thread condition wait there we go and we know that does the same thing but others posted just sleeping for a second my threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "e go and we know that does the same thing but others posted just sleeping for a second my thread is gonna sleep like sleeping beauty here ok so right condition variable or few goes please sleep inside my condition variable ok right and later inside our increment method will call that pta condition broadcaster wake an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "osted just sleeping for a second my thread is gonna sleep like sleeping beauty here ok so right condition variable or few goes please sleep inside my condition variable ok right and later inside our increment method will call that pta condition broadcaster wake anybody up that is called the decrement method and is sl",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " that i i ok i want my scissors that i put a parentheses there let's drop you off there we go so it actually that is not the whole story for pizza at condition variables when you go to sleep you actually pass in the address or a mutex so he is my mutex i called it ok i've been writing mutex i should've been dis writi",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "e work and we have our condition application condition that the cake value must not be zero and here's the big idea peter condition wait we call it a condition variable but there's no condition part that the kernel or the system actually cares about it's up to us to write this while loop and the correct way to use co",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le but there's no condition part that the kernel or the system actually cares about it's up to us to write this while loop and the correct way to use condition variables is always to write them inside a while loop do not using this statement always use a while loop and i'll tell you more about that in a future video ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "star than making cake and negative will just blocked until more cake arrives ok so he was our plan we said as a stepping stone to understanding using condition variables let's pretend we haven't taken cs two forty ward and will just kind of keep polling will just keep keep beating luke blooping so look well say cake ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "so maybe it's like in sleep for a hundred years or something ok so hundred seconds but you get the idea right so that's all stepping stone to using a condition variable we do need a loop i'll tell you one big reason why in a moment and what do we need to do we replaced the sleep where their pee thread condition weigh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "op i'll tell you one big reason why in a moment and what do we need to do we replaced the sleep where their pee thread condition weights and here's a condition variable we're going to ask a threat to sleep in and we also going to release a mutex so it's we discovered it is always necessary to use a mutex because we'r",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " them and which one gets working up this arbitrary ok right what else can i say about this well it could be that there's no thread waiting inside the condition variable so in which case our signal or broadcast called here is a no op is not worth calling so if i truly cared about maximum performance i could actually r",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unlock that mutex and then before returning lock it again so the big idea here is that in all th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "to call p threat condition broadcast ok and say hey everybody wake up all right and there we go so if there happens to be someone sleeping in on this condition variable because that waiting to pop then now they can wake up so we could for performance reasons a little bit more about this and say the only time we need ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ing like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annota",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "threads so let's put that code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ght so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks if there's any threads sleeping on this waiting to push t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unlock that mutex and then before returning lock it again so the big idea here is that in all th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "to call p threat condition broadcast ok and say hey everybody wake up all right and there we go so if there happens to be someone sleeping in on this condition variable because that waiting to pop then now they can wake up so we could for performance reasons a little bit more about this and say the only time we need ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ing like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annota",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "threads so let's put that code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ght so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks if there's any threads sleeping on this waiting to push t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ement other things as well so in the future when you want to say implement a barrier or complicated condition of when a thread is allowed to continue condition variables will come to the rescue so let's get started you can imagine lots of examples in life where you need to temporarily stop, like you cannot leave the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " keys and something else, or you cannot say get a ticket from the train until you know which train and where you're going. so let's let's look at how condition variables can emulate this process, emulate this idea, and in particular what condition variables allow us to do is to pause a thread, to say stop, right, do ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hich train and where you're going. so let's let's look at how condition variables can emulate this process, emulate this idea, and in particular what condition variables allow us to do is to pause a thread, to say stop, right, do not continue and then later we can wake up that specific thread all we can wake up a who",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "eping threads right so excuse me let's talk about the basic idea than about threads so first thing is how do i send a threat to sleep easy you needed condition variable so it will create one of those a little bit but after you've got one or or you need to do is your thread should call p thread p for short p thread co",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "to skip on some details that make it a little bit more complicated but i'm going to write it just like this for now there's pass in the address of my condition variable and so again this is a bit like file handles that yes i have a variable in my code but actually refers to something else the actual object is not the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ite it like that and i'm going to skip over the fact that i'm going to act you need a little bit more than that but for now we can think of it as our condition variable represents a place where our thread goes for a little nap ok so please go into this little hotel room here for it in an hour long will nap and will w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unlock that mutex and then before returning lock it again so the big idea here is that in all th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "to call p threat condition broadcast ok and say hey everybody wake up all right and there we go so if there happens to be someone sleeping in on this condition variable because that waiting to pop then now they can wake up so we could for performance reasons a little bit more about this and say the only time we need ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ing like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annota",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "threads so let's put that code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ght so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks if there's any threads sleeping on this waiting to push t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unlock that mutex and then before returning lock it again so the big idea here is that in all th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "to call p threat condition broadcast ok and say hey everybody wake up all right and there we go so if there happens to be someone sleeping in on this condition variable because that waiting to pop then now they can wake up so we could for performance reasons a little bit more about this and say the only time we need ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ing like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code look like are right so we've seen this before that's just annota",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "threads so let's put that code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ght so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks if there's any threads sleeping on this waiting to push t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "hi ok so let's use a condition variable to implement a cookie eater and here's the idea so i've got a data structure is actually just an integer but you could imagine it could be a linked l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "that so i'll have use a little while loop here right so if the counter is less than eight then try again and will hold on a moment we should be using condition variables for this so let's have a condition variable here to say ok please block inside here and release the mutex lock ok right so if that will go to sleep ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "e right so if the counter is less than eight then try again and will hold on a moment we should be using condition variables for this so let's have a condition variable here to say ok please block inside here and release the mutex lock ok right so if that will go to sleep we can wake it up occasionally to see if the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "l no that's only going to wake up one of them i want to wake up all of the threads which are inside this wait call here so let's call broadcast on my condition variable there we go right they will now wake up of course they can't immediately continue why not because i'm holding the mutex lock but there are live and r",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ging the fire alarm and then we a scape we call unlock an out we go ok so now i've got seven threads that are working up inside inside here inside my condition variable ok each one now tries to obtain the mutex lock one of them will win so it escapes and imagery unlocks the mutex lock and so the next red inside here ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ctures ok so in this case i'm actually going to have eight different data structures here we go right and so for each one of these i'm going to use a condition variable to block when things are not ready and i'm going to need eight different locks now i probably could implement this code with just a single lock but t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "this problem get by with a fewer number of locks sorry a few more locks in order to reduce lock contention so so in this case we have we've got eight condition variables and eight locks plus here's my data structure is actually is going to be of eight integers but i want you to imagine that this actually could be a l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "t integers but i want you to imagine that this actually could be a lot more complicated ok right so i've got some initialization to initialize all my condition variables and locks as you can see all i'm doing is using the array name so that will decay to a simple pointer type and then i can use pointer arithmetic to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "to sleep for a bit this is where we should call p thread conditioned weight case so let's put that in there kay right and let's sleep on a particular condition variable associated with this particular data structure so that would be cvs plus i here we go right and we'll have a particular mutex lock that we want to re",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "l and let them go round there loop so the latest code i can write with bp thread condition broadcast and then if there's anybody sleeping inside this condition variable if they're blocked let's wake them up and send them around there while loop again so we would wake anybody up inside cvs plus index ok right so remem",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "s that it all quits let's understand why because we only called p thread where's where's my quit we only called this broadcast here on the very first condition variable ok so what are we doing here right so when it quits then that first red quits it is going to call peter condition signal on the next thread ok so if ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "are going to look at using their producer consumer and how we can use county semaphores to implement this correctly and then we're going to jump into condition variables just so that we can start thinking about how to write good multithreaded code now of course the ideas here can actually be generalized to multiple p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "sing a mutex locks to protect that ok so we've done that we've done that right ok so we've implemented a version using counting semaphores what about condition variables suppose you wanted to make this work on a mac as well could we do it with condition variables and the answer is yes so of course we can so condition",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "lemented a version using counting semaphores what about condition variables suppose you wanted to make this work on a mac as well could we do it with condition variables and the answer is yes so of course we can so condition variables are more general purpose than counting semaphores and we would replace this same we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " variables suppose you wanted to make this work on a mac as well could we do it with condition variables and the answer is yes so of course we can so condition variables are more general purpose than counting semaphores and we would replace this same weight with the kind of code that we saw with our cookie eat a code",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "dition wait so are some weight becomes peter condition wait and i'll send post well we'd be using things like broadcast in order to wake up the right condition variable ok right so that's it for question one let's have a look at question two, bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "of q example of implementing a single single use thread using accounting said before but if today i wanted to implement a value i of course would use condition variables ok right so in the next video we want to think about the following is the following does not have any kind of potential race conditions ok so i'm go",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "tiple readers so his conditions signal is sufficient here no we probably want to use broadcast secondly did you notice that we actually held onto the condition variable for an awfully long time and in fact you can stop that right let's go for red key right and in fact we don't actually allow multiple readers because ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ing countdown to zero so ok this is kind of overkill were constantly calling kick signal whereas in fact they may not actually be anybody inside that condition variable ok so but eventually the last reader 's exit exit out of here which point after leave unlock the mutex then on this side the writer will wake up reac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5c6032d9-cc7d-468f-82d9-4054bf6258ab",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "l of our modern applications so if you were to implement this today here's the good news are posix specification includes not only p threads not only condition variables but reader writer locks as well ok so here they are that i make not just a mutex lock but a reader writer lock here it is and i initialize it and th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "very first thing we do is call p three condition broadcast in other words ring that fire bell wake everybody up in this might be sleeping inside this condition variable ok so now all five of my threads definitely working up ok so i implement increment the value of fireworks i print out oh and that value and then i de",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "very first thing we do is call p three condition broadcast in other words ring that fire bell wake everybody up in this might be sleeping inside this condition variable ok so now all five of my threads definitely working up ok so i implement increment the value of fireworks i print out oh and that value and then i de",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "very first thing we do is call p three condition broadcast in other words ring that fire bell wake everybody up in this might be sleeping inside this condition variable ok so now all five of my threads definitely working up ok so i implement increment the value of fireworks i print out oh and that value and then i de",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "very first thing we do is call p three condition broadcast in other words ring that fire bell wake everybody up in this might be sleeping inside this condition variable ok so now all five of my threads definitely working up ok so i implement increment the value of fireworks i print out oh and that value and then i de",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "very first thing we do is call p three condition broadcast in other words ring that fire bell wake everybody up in this might be sleeping inside this condition variable ok so now all five of my threads definitely working up ok so i implement increment the value of fireworks i print out oh and that value and then i de",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "very first thing we do is call p three condition broadcast in other words ring that fire bell wake everybody up in this might be sleeping inside this condition variable ok so now all five of my threads definitely working up ok so i implement increment the value of fireworks i print out oh and that value and then i de",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "n exit but before we exit maybe it's time to wake some people up ok so the most loud code would be to call peter condition broadcast on both the both condition variables so notice i've got a condition variable here for writers so we're going to send all the writers to some coffee shop and condition over variable here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " to wake some people up ok so the most loud code would be to call peter condition broadcast on both the both condition variables so notice i've got a condition variable here for writers so we're going to send all the writers to some coffee shop and condition over variable here for all the readers so all my sheep can ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just got two threads one thread some point is going to modify this value of x and then",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "example because i really do have multiple cpus running on different pieces of silicon then what will happen is rather than blocking forever rp threat condition variable instead will suffer a spurious wake up to say i'm sorry maybe i missed a single maybe it just happened so that is why we always need to write this us",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just got two threads one thread some point is going to modify this value of x and then",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "example because i really do have multiple cpus running on different pieces of silicon then what will happen is rather than blocking forever rp threat condition variable instead will suffer a spurious wake up to say i'm sorry maybe i missed a single maybe it just happened so that is why we always need to write this us",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just got two threads one thread some point is going to modify this value of x and then",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "example because i really do have multiple cpus running on different pieces of silicon then what will happen is rather than blocking forever rp threat condition variable instead will suffer a spurious wake up to say i'm sorry maybe i missed a single maybe it just happened so that is why we always need to write this us",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just got two threads one thread some point is going to modify this value of x and then",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "example because i really do have multiple cpus running on different pieces of silicon then what will happen is rather than blocking forever rp threat condition variable instead will suffer a spurious wake up to say i'm sorry maybe i missed a signal maybe it just happened so that is why we always need to write this us",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " looks like sixty void pointers so we can use it for any kind of pointer we're going to keep track of an in and out a number of items and we're using condition variables so my first concern here is these things every initialized ok let's choose a darkish red ok so i better check that these things are initialized if t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t to be unsigned as well so we could say unsigned int for example ok if we didn't want to mess with negative numbers ok so this code is trying to use condition variables to implement an q but it right now it's not even thread safe we could have multiple threads calling nq and both of them could see the same value of ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t now then let me send this thread to sleep through our call my p thread condition there we go caper condition wait all right so we're only using one condition variable if i was to make this code more performance i would consider using two one for the end q threads and one for the d q threats but anyway so will sleep",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ething that's kind of overkill maybe we only want you want to call broadcast when we see if we know that there might be a thread sleeping inside this condition variable but we'll leave that for now because we've still got work to do on the d q as well so let's get that sorted so what do we got so far right so looking",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "d that the queue is fault when my buffer already has sixteen items at which point we call p three condition wait but we don't just go to sleep on the condition variable remember we've also got a pass in their mutex lock as well so that will become unlocked while we sleep in there when we return from peace recondition",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ing this count variable so yes in this case we do want to wait while count is equal to zero but let's not busy wait instead we want to block on cider condition variable so there's rp three condition wait ok so thread please go to sleep inside this condition variable and please let go of the mutex whilst you are block",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t's not busy wait instead we want to block on cider condition variable so there's rp three condition wait ok so thread please go to sleep inside this condition variable and please let go of the mutex whilst you are blocked ok ok otherwise if we continued we know that the count is non zero so we can at least get somet",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " mutex let's make sure we decorated count so if we do that make all these changes congratulations we've now got a working fix sized ring buffer using condition variables and we could do a bit better performance if we limited the pizza addition broadcaster only calling this if we if there might be a thread either dq t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "there might be a thread either dq thread or an nq thread that is sleeping but let's so we could put some ifs inside here and also we could invent two condition variables but i'm not going to worry about this condition those performance improvements right now instead i want to finish this lecture with a look at how to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t have a problem here because now it's gone to sleep it's blocked inside the same wait call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the dequeue side so on the dequeue si",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "have a problem here because now it's gone to sleep it's blocked inside the same weight call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the d q side so on the dq side we are",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ht have a problem here because now it's gone to sleep it's blocked inside the sem_wait call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the d q side so on the dq side we are",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "have a problem here because now it's gone to sleep it's blocked inside the same weight call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the d q side so on the dq side we are",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "have a problem here because now it's gone to sleep it's blocked inside the same weight call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the d q side so on the dq side we are",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ing semaphores somebody's returned that piece of pizza into the counting semaphore so now we get to pull it out and continue and of course we've seen condition variables so now say broadcasters occured and now my thread is made continue we've also got other things like barriers so for example finally all the feds hav",
        "label": "Use"
      }
    ]
  },
  {
    "text": "port number",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "piece of information which is actually what to do when a packet actually arrives on particular machine and will differentiate where it should go by a port number and a port number is pretty small is actually only two octets in other words sixteen bits ok so you've only got numbers between zero and two to the s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "on which is actually what to do when a packet actually arrives on particular machine and will differentiate where it should go by a port number and a port number is pretty small is actually only two octets in other words sixteen bits ok so you've only got numbers between zero and two to the sixteen minus one p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ty small is actually only two octets in other words sixteen bits ok so you've only got numbers between zero and two to the sixteen minus one possible port numbers and so port numbers will be a way to specify which application should be receiving this network packet so every time we set a network packet typical",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " only two octets in other words sixteen bits ok so you've only got numbers between zero and two to the sixteen minus one possible port numbers and so port numbers will be a way to specify which application should be receiving this network packet so every time we set a network packet typically will have a sourc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ere ok so i've got the ip four address which is going to be made of eight octets for both the source and the destination and then i'm going to need a port number as well for the source and the destination ok so when we want to send these packets in practice we need to specify how we want to wrap up our data so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t has at least root access so if we trust the machine we at least to trust the process that's running on this low number port if you're connecting to port numbers greater than a thousand and twenty three then they these processes are can be run by any mere mortal on that machine so basically we now trusting th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "tal on that machine so basically we now trusting that any user on that machine is not going to do anything nefarious without with our data ok so i'll port numbers themselves are specific to the protocol so if i'm talking about a tcp protocol then listening on port twenty three will be the ssh service so i can ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " see today on the internet we talked about this special ip four address and we talked about the fact that when a packet arrives we're going to need a port number to say where it should go we talked about privileged ports and we talked about udp and tcp ok more about these in the future video that's it bye for ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "031c882d-0a19-4489-b1ef-d9328844d378",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "g for http requests on port eight thousand great let's give it one k so here we go home fire fox i'm going to connect to localhost colon and then the port number so if we get and what what do we see we actually see that this little module by by python gives me a directory listing and then i can click on a link",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0cebe85c-2283-48d7-bb48-045052e80cae",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ing for http requests on port eight thousand great let's give it one k so here we go in fire fox i'm going to connect to localhost colon and then the port number so off we get and whohoo what do we see we actually see that this little module by by python gives me a directory listing and then i can click on a l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "al that i'm using quotes double quotes here to talk about a string but i'm going to make a little mistake here i'm going to say that i forgotten that port numbers need to be quoted as well so now will connect will try to connect to this and see what happens ok so let's run clang and yes we get a warning but if",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "al that i'm using quotes double quotes here to talk about a string but i'm going to make a little mistake here i'm going to say that i forgotten that port numbers need to be quoted as well so now will connect will try to connect to this and see what happens ok so let's run clang and yes we get a warning but if",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "92db69f3-9bba-45d8-8f6d-84d8ae3c2b2e",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "g for http requests on port eight thousand great let's give it one k so here we go home fire fox i'm going to connect to localhost colon and then the port number so off we go and wahoo what do we see we actually see that this little module by by python gives me a directory listing and then i can click on a lin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ed if you've only got python two then i think the similar module is something like sorry simple http server and in both these cases you can specify a port number so if we wanted to comment that one out if we wanted to specify a port then i could specify a different part number here so let's choose for example ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "omment that one out if we wanted to specify a port then i could specify a different part number here so let's choose for example if i try to do a low port number like port eighty it won't be very happy we got permission denied because i'm not root right now on this system and so port numbers less than a thousa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "f i try to do a low port number like port eighty it won't be very happy we got permission denied because i'm not root right now on this system and so port numbers less than a thousand and twenty four are restricted their privileged ports so you have to be an administrator to listen on those ports so let's not ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "aving my machine in the next moment to say hey we need to figure out the ip address of this host name can you help me please right and then we need a port number so the port can actually be specified symbolically so i can say well i care about the default ports connected that's used for this protocol this secu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "y you can use bind and now we're going to see bind when we get to talking about setting up servers but realize that normally you don't care about the port number that is used locally and you don't care about specifying exactly which network card it should use you'd like your machine to figure that out automati",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "o we actually want to represent this using ones complement two's compliment ok so first of all that's a trick question because we never have negative port numbers so our port numbers are represented just using two octets in other words sixteen bits so now we just have the question of do i want to send a high b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "o represent this using ones complement two's compliment ok so first of all that's a trick question because we never have negative port numbers so our port numbers are represented just using two octets in other words sixteen bits so now we just have the question of do i want to send a high bite first the high o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ther your cpu uses a little endian format a big endian format or a completely different way to represent integer numbers that were going to write for port numbers we can be sure that as we actually want to convert these into something to send down the network on the internet that we've correctly converted the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "remote machine when i call get address info i don't need to specify a remote address i'm not passing in illinois dot edu here i am going to specify a port number now it is possible to specify zero here meaning here i'll take any port but today let's start with just explicitly choosing a valid port number so we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ify a port number now it is possible to specify zero here meaning here i'll take any port but today let's start with just explicitly choosing a valid port number so we'll assume that port one two three four is not being used by another process because we can only have one passive socket listing on a particular",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "r at the top of the code here we said i need just an ip for tcp style socket thank you very much now we actually want to make that be on a particular port number on a particular network card on our local machine and that's the purpose of mind right so you can pink handcuffs or whatever to say hey we're going t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "hine and that's the purpose of mind right so you can pink handcuffs or whatever to say hey we're going to actually combined abstract socket to actual port number an actual end point on my machine ok which is clearly what we need to do for our server ok so at this point now we've managed to get that port number",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "port number an actual end point on my machine ok which is clearly what we need to do for our server ok so at this point now we've managed to get that port number one two three four as our passive port number but we haven't opened the shop yet and that's the purpose of listen okso listen says right now would li",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ok which is clearly what we need to do for our server ok so at this point now we've managed to get that port number one two three four as our passive port number but we haven't opened the shop yet and that's the purpose of listen okso listen says right now would like you to start to accept in connection reques",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " the shop yet and that's the purpose of listen okso listen says right now would like you to start to accept in connection requests on that particular port number so we're not going to have about those connections immediately instead of the kernel is going to handled that initial handshake from remote clients a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "e yet to actually hear your order to actually talk start talking to you but i can have ten customers actually walk into my establishment walk into my port number and the greeter which is the kernel will do the initial handshake if we wanted to write a high performance server perhaps i want a backlog of up to a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "vely listing or one two three four there's a timeout there's a grace period of about two minutes where we can't make a new passive socket on the same port number that was actually previously used so if we a little bit longer they go see now it's actually working again i didn't even touch the code ok so that's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "so first of all let's try let's try it annoys see what it says if we do this ok so pick an address right so how about cs ok right i remember that the port number must be in double quotes for passing a string ok and we're taking the address of my hints tractor in the address of the pointer so if it fails let's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "so first of all let's try let's try it annoys see what it says if we do this ok so pick an address right so how about cs ok right i remember that the port number must be in double quotes for passing a string ok and we're taking the address of my hints tractor in the address of the pointer so if it fails let's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " a remote machine when i call get address info i don't need to specify \"a remote address i'm not passing in illinois.edu here i am going to specify a port number now it is possible to specify zero here meaning here i'll take any port but today let's start with just explicitly choosing a valid port number so we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ify a port number now it is possible to specify zero here meaning here i'll take any port but today let's start with just explicitly choosing a valid port number so we'll assume that port one two three four is not being used by another process because we can only have one passive socket listening on a particul",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "lier at the top of the code here we said i need just an ip4 tcp style socket thank you very much now we actually want to make that be on a particular port number on a particular network card on our local machine and that's the purpose of bind right so you can think handcuffs or whatever to say hey we're going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " and that's the purpose of bind right so you can think handcuffs or whatever to say hey we're going to actually bind our abstract socket to an actual port number an actual end point on my machine ok which is clearly what we need to do for our server ok so at this point now we've managed to get that port number",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "port number an actual end point on my machine ok which is clearly what we need to do for our server ok so at this point now we've managed to get that port number one two three four as our passive port number but we haven't opened the shop yet and that's the purpose of a listen so listen says right i now would ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ok which is clearly what we need to do for our server ok so at this point now we've managed to get that port number one two three four as our passive port number but we haven't opened the shop yet and that's the purpose of a listen so listen says right i now would like you to start to accept in connection requ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "he shop yet and that's the purpose of a listen so listen says right i now would like you to start to accept in connection requests on that particular port number so we're not going to hear about those connections immediately instead the kernel is going to handle that initial handshake from remote clients and w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "e yet to actually hear your order to actually talk start talking to you but i can have ten customers actually walk into my establishment walk into my port number and the greeter which is the kernel will do the initial handshake if we wanted to write a high performance server perhaps i want a backlog of up to a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "istening on one two three four there's a timeout there's a grace period of about two minutes where we can't make a new new passive socket on the same port number that was actually previously used so if we wait for a little bit longer they go see now it's actually working again i didn't even touch the code ok s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "do we actually want to represent this using ones complement twos compliment ok so first of all that's a trick question because we never have negative port numbers so our port numbers are represented just using two octets in other words sixteen bits so now we just have the question of do i want to send a high b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "to represent this using ones complement twos compliment ok so first of all that's a trick question because we never have negative port numbers so our port numbers are represented just using two octets in other words sixteen bits so now we just have the question of do i want to send a high byte first, the high ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ther your cpu uses a little endian format a big endian format or a completely different way to represent integer numbers that were going to write for port numbers we can be sure that as we actually want to convert these into something to send down the network on the internet that we've correctly converted the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " ok so first of all let's try let's try it and see what it says if we do this ok so pick an address right so how about cs ok right. remember that the port number must be in double quotes we're passing a string ok and we're taking the address of my hints struct and the address of the pointer so if it fails let'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "hree installed he got python two then i think the similar module is something like sorry simple http server and in both these cases you can specify a port number so if we wanted to comment that one up if we wanted to specify a port then i could specify a different part number here so let's choose for example i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "comment that one up if we wanted to specify a port then i could specify a different part number here so let's choose for example if i try to do a low port number like poor eighty it won't be very happy we got permission denied because i'm not root right now on this system and so port numbers less than a thousa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "f i try to do a low port number like poor eighty it won't be very happy we got permission denied because i'm not root right now on this system and so port numbers less than a thousand and twenty four restricted they're privileged ports so you have to be an administrative built to listen on those ports so let's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "aving my machine in the next moment to say hey we need to figure out the ip address of this host name can you help me please right and then we need a port number so the port can actually be specified symbolically so i can say well i care about the default ports connect that's used for this protocol this secure",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "essary you can use and now we're going to see bind when we get to talking about setting up servers but realize that normally you don't care about the port number that is used locally and you don't care about specifying exactly which network card it should use you'd like your machine to figure that out automati",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " on port one thousand twenty four ok and just for fun i'd like you to think about what is a thousand twenty four look like in hexadecimal so remember port numbers are two bytes two octets so you can have any result from zero or zero zero zero if you wish up to ffff anyway so that's a little teaser because we'l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " you like except of course c doesn't really have inheritance so we have to do explicit cast there right so out of this one let's print out the actual port number ok which should be the same as the port number that we asked for which is a thousand twenty four the rest of the code doesn't do much will say that w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e inheritance so we have to do explicit cast there right so out of this one let's print out the actual port number ok which should be the same as the port number that we asked for which is a thousand twenty four the rest of the code doesn't do much will say that we are prepared to accept a backlog of up to one",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "elnet notices that the remote end actually closed the connection so quits out as well right so how come that everything seems to work except that the port number we got back the port we print it out here is incorrect it printed out four that's uh annoying in the current code where we actually explicitly put in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "oing some development and i don't want to specify the port right now just find me a free one ok so now we have a bigger problem that if i run it this port number is completely wrong so if i try to connect it doesn't work right so what did we forget what did we miss what we missed is that this low level c struc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "issed is that this low level c structure that we are getting information about the socket embeds it's information using the network representation of port numbers and ip addresses and all that good stuff so we can't just simply print out the port number like we're attempting to do here the bits that are inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "beds it's information using the network representation of port numbers and ip addresses and all that good stuff so we can't just simply print out the port number like we're attempting to do here the bits that are inside this field of this c structure are not in the correct order to represent the right integer ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "t's convert that right and now it should give us the correct result so let's try that ok so we will recompile this run it again and ok now i've got a port number let's see if we believe it ok so we'll get back over here and will try to get to it and congratulations now it works now it's giving us the correct p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "r let's see if we believe it ok so we'll get back over here and will try to get to it and congratulations now it works now it's giving us the correct port number ok so that's kind of the big gotcha that realize that that these low level c structures used port numbers etc in the network byte order and using net",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " now it works now it's giving us the correct port number ok so that's kind of the big gotcha that realize that that these low level c structures used port numbers etc in the network byte order and using network representation which may or may not be different from the way that your cpu represents integers ok i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " on port one thousand twenty four ok and just for fun i'd like you to think about what is a thousand twenty four look like in hexadecimal so remember port numbers two bites two octets so you can have any result from zero or zero zero zero if you wish up to ffff anyway so that's a little teaser because we'll se",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ass if you like except corsi doesn't really have inheritance so we have to do explicit cast there right so out of this one let's print out the actual port number ok which should be the same as the port number that we asked for which is a thousand twenty four the rest of the code doesn't do much will say that w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e inheritance so we have to do explicit cast there right so out of this one let's print out the actual port number ok which should be the same as the port number that we asked for which is a thousand twenty four the rest of the code doesn't do much will say that we are prepared to accept a backlog of up to one",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "elnet notices that the remote end actually closed the connection so quits out as well right so how come that everything seems to work except that the port number we got back the point we put it out here is incorrect it printed out four that's uh annoying in the current code where we actually explicitly put in ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "oing some development and i don't want to specify the port right now just find me a free one ok so now we have a bigger problem that if i run it this port number is completely wrong so if i try to connect it doesn't work right so what did we forget what did we miss what we missed is that this low level c struc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " missed is that this low level c structure that we are getting information about the socket beds it's information using the network representation of port numbers and ip addresses and all that good stuff so we can't just simply print out the port number like we're attempting to do here the bits that are inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "beds it's information using the network representation of port numbers and ip addresses and all that good stuff so we can't just simply print out the port number like we're attempting to do here the bits that are inside this field of this structure are not in the correct order to represent the right integer we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "t's convert that right and now it should give us the correct result so let's try that ok so we will recompile this run it again and ok now i've got a port number let's see if we believe it ok so we'll get back over here and will try to get to it and congratulations now it works now it's giving us the correct p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "r let's see if we believe it ok so we'll get back over here and will try to get to it and congratulations now it works now it's giving us the correct port number ok so that's kind of the big gotcha that realized that that these low level c structures are used port numbers etc in the network byte order and usin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "it works now it's giving us the correct port number ok so that's kind of the big gotcha that realized that that these low level c structures are used port numbers etc in the network byte order and using network representation which may or may not be different from the way that your cpu represents integers ok i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6469a892-5a29-4895-b922-8ef54fabb1a8",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " to do ssh and then a long name you can just have a nice short name you can do things like saying ok for this particular host connect on this unusual port number or forward these other ports as well so that i can say directly connect to a database that is listing on a port on my server and make it appear as if",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ly remember that this stands for kind of host to network and the s stands for short ok meaning we're talking about sixteen bits such for example as a port number and this one end to hs around so that would be network to host so we use these to ensure that the bit pattern held by that short variable that sixtee",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "represents numbers and how the network represents numbers that the correct representation is stored or used ok so right so we'll see those a lot with port numbers and there's also the equivalent for four byte numbers as well so each two and for a long were always four bytes and they integers varied between two",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " that's how we make server sockets right what do we want to do next we want to bind it to a local port and in fact we're going to by inviting it to a port number also binding it to a particular network card as well right so great we've now identified a particular passive port that were listing on now we can op",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "all bind so let's go actually have a look at some code that does that another kind of useful trick is if actually don't care about using a particular port number just that you actually want to listen on any port that happens to be free then you can always pass in a port number of zero here remember that it's a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "n't care about using a particular port number just that you actually want to listen on any port that happens to be free then you can always pass in a port number of zero here remember that it's a string not a zero pointer to memory address zero uh and that will later bind will actually find the right free repo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "that where you can use get socket name but if you just simply attempt to read this struct this simple straight here then you're being for surprised a port number that you get there is in network byte ordering so that integer is not very useful to us when we actually want to print out we've gotta remember to us",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ust talking about we need set socket opt to be able to say you know what if i restart my process i want to be able to immediately connect to the same port number so how do we do that we can use this particular circle option called reuse address ok then will bind as usual ok and listen and then let's start look",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e09a816e-d4d4-46c2-9a55-faaa21d5a1d4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "rrectly if something like this privileged ports so you know that you need to have root or administrator privileges in order to be able to listen on a port number less than a thousand twenty four ok so you have to have administrative privileges which means that no mere mortal processes can pretend to listen on ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e09a816e-d4d4-46c2-9a55-faaa21d5a1d4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "lly is tcp packets there's four basic pieces of information plus one more that identifies the two ends of a packet so we've got the source ip and the port number and then we've got the destination ip and the port number well as i mentioned this actually one more yes we have a sequence number as well so the seq",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e09a816e-d4d4-46c2-9a55-faaa21d5a1d4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "n plus one more that identifies the two ends of a packet so we've got the source ip and the port number and then we've got the destination ip and the port number well as i mentioned this actually one more yes we have a sequence number as well so the sequence number hopefully will allow us to first of all ident",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "and i'm going to set the synchronization bit here's my synchronization number here's my ip address up here inside the ip part of the header here's my port number that i'm coming from here's the port number that i want to connect to please to meet you and if that particular destination port is open because some",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " here's my synchronization number here's my ip address up here inside the ip part of the header here's my port number that i'm coming from here's the port number that i want to connect to please to meet you and if that particular destination port is open because someone 's written a server and ask the server t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " your packet and let's start talking right so now at this moment the kernal has to remember the synchronization number that you provided and also the port number and also just get ready to start talking to you or hard so now this is where we can do it the synchronization flood first of all what we're going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ith a kiss and off off both at packet right and hope it hopefully it virus what about the receiver on the receiver we need to bind it to a particular port number on particular ethernet card so we're going to call bind oops i forgot something here of course we call socket first to actually create our abstract s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "necting to the other side you're simply actually just giving a hint to your machine that future calls to using send will always use the same host and port number as as the destination so it just makes the future part of your code just a little bit cleaner because now you just need to file descriptor and the bu",
        "label": "Use"
      }
    ]
  },
  {
    "text": "file descriptors",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "oesn't matter whether it's to a pipe or network socket or file, i'm going to use the low level system calls called read and write. and they work with file descriptors. and initially, you get actually three file descriptors for free: one for input, one for output, and one for an output error stream as well. and we c",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "r file, i'm going to use the low level system calls called read and write. and they work with file descriptors. and initially, you get actually three file descriptors for free: one for input, one for output, and one for an output error stream as well. and we can make more by opening files [using?] other objects, bu",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "t's actually \"really cool about these, this gets \"\"lowest level,\"\" there\" is the fact that they can be used with different kinds of objects. so these file descriptors that we have, they're just little integers, little non negative integers, i've mentioned three of them already, zero, one, and two, for the input, ou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "of our internet is how we can get two machines to kind of talk to each other. so behind that all is just a simple idea of my process has these little file descriptors. that is when i want to talk about a particular kernel object that want to read or write to. so anytime you see read or write, you know that you're w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "hat i've seen ok alright so first thing is close one what is going on here right so you know and i know that by default your little process has three file descriptors little integers start with zero the allow us to read and write and we get by default three stdin stdout stderr<br> and we've just close standard out ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "losing into the child why is it now that we never get that magic value zero ok so well problem it is that the kernel is keeping track of all of these file descriptors and the read and write end both exist inside the parent and the child processes so both parent and child could be writing into the right end in both ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "thing from the pipe so if you've exhausted the pipe meaning that you we've read everything out and there's normal writers because so order the active file descriptors had been closed that's going to discover that that you finished and the other one we've seen is when you try to write the first time on a pipe that i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ommunicate between two processes. now we're going to start with what's called 'unnamed pipes' where the only way we can talk about them is just using file descriptors, but later on will have a quick look at creating 'named pipes' where they actually exist in the file system. right, so let's get started. okay, do i ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ing files with fopen(), i'm going to have some more... 3, 4, 5, etc. there is a limit to these still. your processor can't have an infinite number of file descriptors and we also will see these again when we actually wanted to make network code as well. so this will be the way that we send a bytes over the network ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " going to use this with the pipe. so, i need a way to create a pipe and each my anonymous pipes have an input and output. so that means they have two file descriptors, ok. so let me make a little array with just enough space for two file descriptors. ok, so there we go. and right now these aren't initialized to any",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "nymous pipes have an input and output. so that means they have two file descriptors, ok. so let me make a little array with just enough space for two file descriptors. ok, so there we go. and right now these aren't initialized to anything. but if i called pipe() then you can pass in the starting address at my two i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " i called pipe() then you can pass in the starting address at my two integers. ok that's easy. it's just 'fds'. let's call it 'fds'. right for my two file descriptors. and if that succeeds then now i've created myself a pipe! so a pipe has a read and a write end. so if you just remember rw because we say read and w",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "to write to ok so let's actually do that let's actually kind of have a play with this. right there so i will start writing some code. so i'll have my file descriptors. \"ok and then we will say \"\"i need to pipe, please\"\" and here are\" my integers better code would check this succeeds to do check ok right and now tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "e's clang for fun an over there call it pipe demo one ok so yeah great we've got something which is working now we've got as you can see it's made to file descriptors so great let me actually use these i can try to read from the first one and write to the second one ok so let's do that let's have a buffer here righ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " fdopen() you pass in a file descriptor so for example if you want a file handle to wrap standard out you could do that but let's wrap one of our new file descriptors like the write end. here it is. and i want to use this for writing ok so now what i call fdopen() rather than opening a file all i've done is ask to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " up the standard input output and standard error ok so how do i do that well there's one of the thing called duck to sewed up two allows me to rename file descriptors so right now i've got my pipe file descriptors which i'm going to use to actually be able to send data to my process or all captured this output but ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "r ok so how do i do that well there's one of the thing called duck to sewed up two allows me to rename file descriptors so right now i've got my pipe file descriptors which i'm going to use to actually be able to send data to my process or all captured this output but i want to rename those to be zero one or two ok",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "together and the nice thing about this one is that it's easy to write and easy to test as well ok so but it shows it demonstrates that you understand file descriptors and exact all this good stuff right so here's what we want to do we want to use forks so we have a child and a parent process and we want to use a bu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "be unhappy ok so the thing that i don't like is that we open the file but we never closed it so if we keep calling this eventually we will run out of file descriptors and the kernel will say i'm not giving giving you another file descriptor right now ok so then f open would fail so what we forgot to do was to close",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb60962-723f-41e9-a34e-3801a6b91bdf",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ary in practice we might want to do more than this so for example right now we're not we're currently not making use of the mode hints about how this file descriptors going to be used whether we want to use it for reading or writing or both secondly more performant version of my implementation here might actually k",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " kind of taking the server world by storm but we can make javascript on the server that uses asynchronous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bites so as you can see there's pl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "onous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bites so as you can see there's plenty and plenty of errors that we might want to deal with at some point or gate right but we are jus",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " kind of taking the server world by storm but we can make javascript on the server that uses asynchronous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bites so as you can see there's pl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "onous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bites so as you can see there's plenty and plenty of errors that we might want to deal with at some point ok right but we are just goi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " kind of taking the server world by storm but we can make javascript on the server that uses asynchronous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bytes so as you can see there's pl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "onous io and so it uses epoll to figure out which file descriptors ready and it uses things like these e again and he would block to figure out which file descriptors ready for more bytes so as you can see there's plenty and plenty of errors that we might want to deal with at some point or gate right but we are jus",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "r sending or both and close actually says write this file descriptor can now be used for other things remember that you only have a limited number of file descriptors you can actually use for each process right so with this in mind i think it's time to fill in some code here but there's one thing we haven't talked ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "oth so in this case let's use we don't want to do anymore reading or writing so let's edit my code to say we're all done with this connection but the file descriptors still exists so that's taking up unnecessary resources so now actually let me kind of reset that ok alright so now i've got my little server finished",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "oth so in this case let's use we don't want to do anymore reading or writing so let's edit my code to say we're all done with this connection but the file descriptors still exists so that's taking up unnecessary resources so now actually let me kind of reset that ok alright so now i've got my little server finished",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "the other way you might go from host to network right so i think that's all i want to say we talked about shutdown() we talked about why we close the file descriptors and let's just for fun let's before we close out this video let's not close it ok so off we go right and the other thing i'll do is before running th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "people arrived to our restaurant before we call it call accept and now if i keep connecting you'll notice on the other side i'm starting to use up my file descriptors here let's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited num",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "er side i'm starting to use up my file descriptors here let's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited number of file descriptors that it's able to use ok right and that's the security idea because we don't want one proces",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "et's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited number of file descriptors that it's able to use ok right and that's the security idea because we don't want one process using up all of the kernel resources will sign off here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " the other way you might go from host to network right so i think that's all i want to say we talked about shut down we talked about why we close the file descriptors and let's just for file let's before we close out this video let's not close it or case so off we go right and the other thing i'll do is before runn",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "a hundred people arrived or reston before we call it call accept and now if i keep connecting your notice on the other side i'm starting to use up my file descriptors here let's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited num",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "er side i'm starting to use up my file descriptors here let's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited number of file descriptors that it's able to use ok right and that's the security idea because we don't want one proces",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "et's connect again right and eventually i'm accept is going to fail because there's no spare file descriptors left my process has a limited number of file descriptors that it's able to use ok right and that's the security idea because we don't want one process using up all of the carnal resources will sign off here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ually will run out of spare far descriptors for process and then opening files or calling opened are won't work in the future we don't have any spare file descriptors left ok the other thing that we might comment on if we were doing a code review instead opened a could fail so if this returns null for example there",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "sure that in all code paths particularly error code paths you've released resources as soon as you finished using them ok and this will correspond to file descriptors to memory to any other resources to tcp sockets etc etc etc right ok so let's have a look at this actually i've got a demo somewhere here it is right",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ually will run out of spare far descriptors for process and then opening files or calling opened are won't work in the future we don't have any spare file descriptors left ok the other thing that we might comment on if we were doing a code review instead opened a could fail so if this returns null for example there",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "sure that in all code paths particularly error code paths you've released resources as soon as you finished using them ok and this will correspond to file descriptors to memory to any other resources to tcp sockets etc etc etc right ok so let's have a look at this actually i've got a demo somewhere here it is right",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ze there's a hierarchy of processes so each process has its own id and apparent as well and now we know now know that every process has a set of open file descriptors but these don't need to correspond to just files they can refer to pipes and sockets like network sockets process has a limited number of these that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " the amount of processes we can create for particular user or the amount of memory that our process can have that kind of thing or even the number of file descriptors we also have meta information about whether we care a lot about a particular process or thread we can give them different priorities so if you have a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ar client one particular connection right so that's what we need to kind of set up our server and at that point great now we can start getting client file descriptors and using them some of the things that we might use as well of course is things like shut down to declare that we don't want to receive or send any m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "hing to do right now they don't need the attention of the waiter so this the ideology works in terms of our far descriptors that if i've got a set of file descriptors right now so let's see accept 's return to many time and many times and i've actually got say here we go far descriptors four five six and seven corr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "what's happened to each of your tables and decide what you're waiting wants to do the problem with select is this checking this polling of all of the file descriptors is an order n operation so it's not order n squared is not n log n so it's only order n but if we're talking about say wanting to have thousands conn",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ere poll comes in paul was really designed system interface to say maybe we need instead away to say look i'm going to tell the system about a set of file descriptors i care about and come back to me when something is happened but don't make me keep asking each table whether it's ready instead tell me which specifi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ch table whether it's ready instead tell me which specific tables need more food so poll was a new way to kind of interrogate the system to see which file descriptors were ready to either receive or send more data the poll was developed on there going to bsd system so not linux but the another free operating system",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ich brings us finally to epoll so whilst poll was an improvement over select and satisfied a few corner cases like being able to easily discover when file descriptors had closed epoll tried to kind of fix all the corner cases of poll ok so today if your challenge is to write the world 's fastest web server linux th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "linux then you need to pull out epoll out of your back pocket so equal solves the order n problem epoll allows us to in order one time find out which file descriptors are ready to receive or send information and epoll has some different ways to use that it can be used the downside of epoll is that it is linux speci",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "re it is and let me actually kind of make these pipes in now i actually want to actually start sending data to them so for this i'm going to have two file descriptors here we go ok so using this this is going to be my test little test program where i can send data to one pipe or the other pipe and then the other si",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " convention stick something positive it ok now we've got our ipoh we need to tell this particular people instance that we wanted to listen to certain file descriptors so y pool itself has a file descriptor but it's not something that we are going to use like a file it's just going to be a way for us to identify par",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "lf has a file descriptor but it's not something that we are going to use like a file it's just going to be a way for us to identify particular set of file descriptors that we care about now i can care about different events i can care about the fact that some data has arrived i can care about the fact that there's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " the longest and is the simplest to use so if you just want to write some very simple code where a single thread a single process can work with a few file descriptors then you select and the amount of code you need to write will be smaller and it's much simpler to use ok but if your goal on linux is to write a high",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "id linux specific it's also event based meaning that we can find out in an array ok event based it returns or fills out a way for us to tell us which file descriptors are we need to process ipoh also uses a set of far descriptors so we set up an object which is simply a simple set of integers which is the file desc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "scriptors are we need to process ipoh also uses a set of far descriptors so we set up an object which is simply a simple set of integers which is the file descriptors say here go equal here's all the file descriptors that we care about now please block until there's at least one event happening on these and then wh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "set of far descriptors so we set up an object which is simply a simple set of integers which is the file descriptors say here go equal here's all the file descriptors that we care about now please block until there's at least one event happening on these and then when you return don't return just one event give us ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b37a29fd-55de-4893-bb2e-ef162944f9fd",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " delete ok so when would you want to do that game so let's have a think about this we know that ippo control is how we actually manipulate the set of file descriptors that we want people to care about so we're saying hey i'm going to give you a file descriptor that i don't want you to care about anymore so don't wa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "d then you go home three o'clock in the morning it suddenly starts to fail what's our problem here our problem is that eventually you will run out of file descriptors so feildes right are file descriptors that your process has a limited number of them which is actually by designed to ensure that one process can't t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "e morning it suddenly starts to fail what's our problem here our problem is that eventually you will run out of file descriptors so feildes right are file descriptors that your process has a limited number of them which is actually by designed to ensure that one process can't take down the whole system let's only g",
        "label": "Use"
      }
    ]
  },
  {
    "text": "address info",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "to specify names like illinois dot edu and we need to convert that there into a tcp address right for that here's a really really useful function get address info and fat it does many things but we're going to use it today to create the information we need to create a socket and also to call connect and so we e",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " address length and and address as well so we'll use these too kind of plug into the socket connect calls ok right so let's get started the way their address info works is that we actually set up one of these structs as a as like as a hint to say this is the kind of stuff we need and then it creates another one",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "potentially a linked list of ways that we can actually connect to that server so what we need in here ok let's scroll down is we're going to cool get address info we're going to pass in host and the port that would like to connect to this can either be number but it has to be a string otherwise we get a segfaul",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "is what is soccer underscore stream ok so we've said about hints that sufficient for what we need for our little client here so now let me say go get address info please and i'd like to connect on port eighty because that is where unencrypted web traffic should be requested for and now here is the address of my",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "or and now here is the address of my hint structure and here is the address of my result pointer which is going to be changed as well ok so we'll get address info change my result pointer who knows to be sure we better actually check to see whether the get address info actually succeeds or not so it's important",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "oing to be changed as well ok so we'll get address info change my result pointer who knows to be sure we better actually check to see whether the get address info actually succeeds or not so it's important with all of these network calls to check their return value so if it did not succeed then my result pointe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ittle bit more of a bus code would have actually explicitly set result equal to zero but certainly we don't want to assume that's been set unless get address info returns zero so if it doesn't return zero then it actually has a useful error function down here ga get address info gi underscore string error and t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ssume that's been set unless get address info returns zero so if it doesn't return zero then it actually has a useful error function down here ga get address info gi underscore string error and that is the way that we can actually print out some useful to make debugging information as to why this occurred so yo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " times that were not using error to find out what happened instead the error is actually encoded by the return value directly ok so we've got all get address info now we can make the calls for a socket and connect so rather than do that here let's actually do that as part of the live code so we can start writin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "in theory that's why you actually only need the socket in the connect calls but we've been lazy today we've been using this swiss army nice chord get address info that actually set this set this up for us so we need to pass in two things one is a pointer to this struct and secondly how big this struct actually ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "o this struct and secondly how big this struct actually is ok so that's down here that's all address and address length let's grab those from the get address info result ok so we've got result address and result address lynn ok as usual let's check that connect actually worked ok so if this is equal to negative",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " needs actually two network calls which is true but in practice there's a third one that comes in very very useful and it's the following is this get address info this is a kind of swiss army knife of a call which can do all sorts of useful things for us and in particular is going to allow us to correctly set t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "d the network connection and also it allows us to not specify ip addresses directly instead we can specify domain names like illinois dot edu and get address info can convert that into an ip for address and even potentially an ip six address as well so we don't need to memorize a whole load of ip four and ip si",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "as well so we don't need to memorize a whole load of ip four and ip six addresses instead we can use these fully qualified host names and get a drink address info will convert those force in fact it gives us a link list of potential ways to connect to this particular host alright so more about those details in ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "d address length and and address as well so we'll use these to kind of plug into the socket connect calls ok right so let's get started the way their address info works is that we actually set up one of these structs as a as like as a hint to say this is the kind of stuff we need and then it creates another one",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "is what is soccer underscore stream ok so we've said about hints that sufficient for what we need for our little client here so now let me say go get address info please and i'd like to connect on port eighty because that is where unencrypted web traffic should be requested for and now here is the address of my",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "me that it's been set unless getaddressinfo returns zero so if it doesn't return zero then it actually has a useful error function down here ga - get address info gai - underscore string error and that is the way that we can actually print out some useful debugging information as to why this occurred so you don",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " needs actually two network calls which is true but in practice there's a third one that comes in very very useful and it's the following is this get address info this is a kind of swiss army knife of a call which can do all sorts of useful things for us and in particular is going to allow us to correctly set t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "d the network connection and also it allows us to not specify ip addresses directly instead we can specify domain names like illinois dot edu and get address info can convert that into an ip for address and even potentially an ip six address as well so we don't need to memorize a whole load of ip four and ip si",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "as well so we don't need to memorize a whole load of ip four and ip six addresses instead we can use these fully qualified host names and get a drink address info will convert those force in fact it gives us a link list of potential ways to connect to this particular host alright so more about those details in ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "eam a data stream ok so how do we set one up right so if we're setting up a client all i need to do is first of all i'm going to be lazy and call get address info this does a lot of heavy lifting for me to actually figure out the correct parameters i'm going to send into my next two calls so technically this is",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " connect so let's call connect here ok and again with the socket and connect calls the parameters i need for here are going to come from whatever get address info returns now we might see a little bit of traffic actual packets leaving machine my machine first of all when you call get address info because it's g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "m whatever get address info returns now we might see a little bit of traffic actual packets leaving machine my machine first of all when you call get address info because it's going to convert say a host name to an ip address and of course we'll see packets leaving when we call connect handshake is required bet",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "a packet to that server to say hi please will you connect me let's do a handshake let's do our tcp handshake right now one surprising thing about get address info is that it can return zero one or more results and if we remember that the results are this struct here with a whole lot of fields and if we have a l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "y and see which one actually kinda connect faster ok so let's let's remind ourselves about what what the entries are ok so our flags is a hint to get address info as to what kind of connection we want do we want ip four ip six or some mixture do we want it to do something else for us we have the address family ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " of a way to verify that we're reading the reading and writing bytes correctly in a valid struct ok so let's get back on track here the excuse me get address info is a complicated beast it's quite long but it itself doesn't because it calls many other calls including doing their dns look up to convert host name",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ually returns a non zero value and then if we want to know about what that nonzero value means as to how it failed ok there's something like gi a get address info str error and that gives us a string ok so we'll be seeing that in the actual code that we write also realize that if it returns a non zero value the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " be your local machine right so let's put this together now let's actually set up a tcp client ok so i'm going to just quickly review how you use get address info right and i want to k just fix this this is actually not going to be a client this is going to be a server right ok and just remind ourselves how we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ou like to set to zero ok so if we use the pointer here that would be incorrect we actually want the size of the whole struct so i could write struct address info like that or i could just say size of hints so great i've set it all to zero now i can start initializing the fields that i actually care about right",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "en there will be a momentary pause whilst the other end requests that packet to be reset anyway so we've set up our request here now i need to go get address info so let's do that right we'll call get address info and just confusing i only have two results here so we will call this one two that's not very large",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " end requests that packet to be reset anyway so we've set up our request here now i need to go get address info so let's do that right we'll call get address info and just confusing i only have two results here so we will call this one two that's not very large let's do that like this get address there we go ri",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " nice and easy excuse me do make use of error messages when you get them and do remember to zero out everything inside the hints object otherwise get address info will be scratching his head going i don't understand what you're asking for ok because you're giving me information which just happened to be on the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ddress structures which we've been happily throwing around and not really worrying too much about what they look like because getting drinks have get address info filled them out for us ok so the big idea here is that the information inside these structs inside these low level c structs is actually stored in a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "two three four would be a useful thing to do if i was actually manually setting up one of these structs myself so if i wasn't actually relying on get address info to do the work for me ok so there's end to hs there's also ok an to network to host long as well so this is long which is thirty two bits back from t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "erver socket right so let's see what else has changed secondly is because i'm not going to try to go out to connect to remote machine when i call get address info i don't need to specify a remote address i'm not passing in illinois dot edu here i am going to specify a port number now it is possible to specify z",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ver socket right so let's see what else has changed secondly is because i'm not going to try to go out to connect to a remote machine when i call get address info i don't need to specify \"a remote address i'm not passing in illinois.edu here i am going to specify a port number now it is possible to specify zero",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "le bit about these address structures which we've been happily throwing around and not really worrying too much about what they look like because get address info filled them out for us ok so the big idea here is that the information inside these structs inside these low level c structs is actually stored in a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "two three four would be a useful thing to do if i was actually manually setting up one of these structs myself so if i wasn't actually relying on get address info to do the work for me ok so there's ntohs there's also ok n to network to host long as well so this is long which is thirty two bits back from the da",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "eam a data stream ok so how do we set one up right so if we're setting up a client all i need to do is first of all i'm going to be lazy and call get address info this does a lot of heavy lifting for me to actually figure out the correct parameters i'm going to send into my next two calls so technically this is",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "o connect so let's cool connect him ok and again with the socket and connect calls the parameters i need for here are going to come from whatever get address info returns now we might see a little bit of traffic actual packets leaving machine my machine first of all when you call get address info because it's g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "m whatever get address info returns now we might see a little bit of traffic actual packets leaving machine my machine first of all when you call get address info because it's going to convert say a host name to an ip address and of course we'll see packets leaving when we call connect handshake is required bet",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "a packet to that server to say hi please will you connect me let's do a handshake let's do our tcp handshake right now one surprising thing about get address info is that it can return zero one or more results and if we remember that the results are this struct here with a whole lot of fields and if we have a l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " see which one actually kinda connect faster ok so let's let's just remind ourselves about what what the entries are ok so our flags is a hint to get address info is to what kind of connection we want do you want ip four ip six or some mixture do we wanted to do something else for us we had there dressed family",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "nd of a way to verify that we're reading the reading and writing bytes correctly in a valid struct ok so let's get back on track hit the skews me get address info is a complicated beast it's quite long but it itself doesn't because it calls many other calls including doing their dns look up to convert host name",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "lly returns a non zero value and then if we want to know about what that nonzero value means as to how it failed ok there's something like gi a great address info store error and that gives us a string ok so we'll be seeing that in the actual code that we write also realize that if it returns a non zero value t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "be your local machine right so let's put this together now let's actually set up a tcp client case so i'm going to just quickly review how do you get address info right and i want to k just fix this this is actually not going to be a client this is going to be a server right ok and just remind ourselves how we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "u like to set to zero gay so if we use the pointer here that would be incorrect we actually want the size of the whole struct so i could write struct address info like that all i could just say size of hints so great i've said all to zero now i can start initializing the fields that you actually care about righ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "t then there will be a momentary pause whilst the other end requests that packet to be reset anyway so we've set up request here now i need to go get address info so let's do that right will call get address info and just confusing i only have two results here so we will call this one two that's not very large ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "other end requests that packet to be reset anyway so we've set up request here now i need to go get address info so let's do that right will call get address info and just confusing i only have two results here so we will call this one two that's not very large still like this get address what so what do we nee",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " nice and easy excuse me do make use of error messages when you get them and do remember to zero out everything inside the hints object otherwise get address info will be scratching his head going i don't understand what you're asking for ok because you're giving me information which just happened to be on the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "rs ok in this case we wanted to go from network to host hence ntohs if you were setting up the c structures explicitly because you didn't want to get address info you might go the other way you might go from host to network right so i think that's all i want to say we talked about shutdown() we talked about why",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " far i've made a server socket let's just check we've got laptop mode there we go right so remember how to do that the trick of course with using get address info is first of all zero it all out throughout all the fields will have a tcp ip four so we want address family inet so in other words that's going to be",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hat's going to tcp and to make sure we have a server socket we want a passive socket here for the flags ok so we've settable or hints we could get it address info and right now i'm going to say please listen on port one thousand twenty four ok and just for fun i'd like you to think about what is a thousand twen",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ok in this case we wanted to go from network to host hence end to hs if you were setting up the c structures explicitly because he didn't want to get address info you might go the other way you might go from host to network right so i think that's all i want to say we talked about shut down we talked about why ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "convert ip four addresses as well ok so right next review is what are the four calls we need to set up a server right so hopefully you didn't say get address info no that's just icing on the cake what we do need however is a socket ok and of course we're going to make a passive socket because that's how we make",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "alling free etc or guess what there already is a function to do that for you so if you want an easy life just use this to free up the memory that get address info has reserved on the heat for you ok right so in the next video we will talk about port hijacking ok what it is and how we can stop it and then we're ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "here why do i have to cast this stuff well is because see does not have inheritance and this socket address in is kind of one extended type of socket address information and so that needs to be cast to the kind of the base type the simplest type which is just a socket address here so that's why we do the cast i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " we actually need to make a socket that the right type and the right protocol and how can we get the parameters correct first a socket answer hey get address info to our friend is our friend again there we go and one of the things that will see that is different from before is that when we set up the hints we a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "here of course we call socket first to actually create our abstract socket and we call bind how do we get what we need for bind again we can just get address info and then how do we actually wait for something to arrive and the answer to that is you can use receive from there we go and when received from return",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": " so now our server is stuck now if you wanted to you could also talk about the network calls that you required to do this so you could talk about get address info to make your life easier you could talk about you created a socket you could talk about you've called connect in order to connect to the other side y",
        "label": "Intro"
      }
    ]
  },
  {
    "text": "return value",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "f8ecc9da-31e3-4c40-bd72-4df6058e9d24",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "en. so go and find the man page of strlen and here we are on my mac system, so it describes exactly what it does, and also will will describe exactly return value. so this is really really useful information once we start to looking at more kind of more complicated and more advanced functions. don't simply assu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " read the man pages so let's do that let's go and see exactly what man says we get line so on my mac system here will go scroll down till we find the return values here so it returns the number of characters written excluding the null character so that's important information to know we can write correct code i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "i use the variable name i can actually find out how big my raise so when it finishes that's what should we do right so we print out the result of the return value of results so how can i do that i can say printf and then result is and we could treat it say as assigned simple integer right and for that i will ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "s return and ah look i recall is returned the kernel did the following for its first of all returned the value of four and also abc so why did we say return value for only typed in three letters well actually what we get is everything in this case it the result includes abc and that new line character which is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "eb1a08a4-8b77-4361-a5d8-4e3b26439f27",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "ue perhaps for example there is a missing comma or press the second value did not exist in the line just finished early so robust code will take that return value from scanf and check that truly matter to change are all the variables we expected because here's the big story yes we're giving the address of our v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "eb1a08a4-8b77-4361-a5d8-4e3b26439f27",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " between here's the address of x here's the address of why ok and will print out the value of x and y and then we'll go back and look to see what the return value of scanner is so will do so x is now d and why is now ok and will say here's a value of x and y so notice wizard lift difference here that uh with sc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7a7590a3-2294-4d27-89ff-d625512f82e5",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "ifferent error code just for fun the last thing we wanted to change was to also set our capacity k two super alright so we get our bikes red we check return value and if it's negative one we stop ok so and we wanted the free in here as well so free the line pointer ok alright so let's compile that my cat my cat",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "67bd4b3a-2f54-49a6-9c31-ff5dd35bf7d9",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "er like other good programs actually sets the exit value depending on whether it's successfully compiled your program or not so we can just check its return value from maine or exit value feel like we know how to do that now with two wait macros so let's do that let's actually on that ok and then the last thing",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "ble to applicable to the child process right so how can i tell if the child if i if this code here is actually being run inside the child crisis well return value from fork is what is o i can also find out who my parent is just by calling get p p i d so we've got all our condition for a child process and in chi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "'m a child right otherwise inside here we have the status variable here if we want we can initialize this but in practice it will be best to to check return value wait pid so wait pid i want you to please wait for this like this particular process id and here's my status variable and i don't have any options i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d310b36e-5c21-4803-b0c6-78d62b73b532",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " immediately return and i can detect whether weight pid successfully waited for childhood finished or there was no child get finished by checking the return value of wait pid and here those macros that we saw last time we explored and we actually saw their implementation now let's think about the more abstractl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "t zero as a result so this is where the pound and the child processes are going to diverge going to do different things if you're the child then your return value or fork is zero so this result is true and so the child does the following maybe if we writing production code would actually document that the other",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "117f0f11-cc38-4a40-b359-8f1ba81655e1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "se previous addresses are now mind right into so and since there's break gives me the old value of data segment then that's exactly what i need as my return value ok so i will just however just check to see if if it failed esperat returns negative one when cast it as a void pointer if it fails if it refused to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14984eb1-a900-473a-816e-4e304fedc041",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "bout stack and how we represent things on the stack in cs two thirty three for now let's just realized that we need a space for the arguments for the return value for our original program counter so the cpu can go back to doing whatever it was doing before and anything else arguments maybe return value as well ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14984eb1-a900-473a-816e-4e304fedc041",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " for the return value for our original program counter so the cpu can go back to doing whatever it was doing before and anything else arguments maybe return value as well ok so ok so immediately above we have nothing in practice the the operating system may include what's called a canary value so if we could de",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "14984eb1-a900-473a-816e-4e304fedc041",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "plot device ok so it thinks it knows where it came from but actually we've cloned a different process ok the only give away the only tell is that the return value from fork is actually zero for the child so have a look to see what the child is doing here is changing some values my question for you is what's goi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1eae9ffe-aa3f-41af-bb4f-a63743eb80a6",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "l copy all of your furniture all of your bytes into the new location and then tell you where everything 's been moved to so it's important to use the return value of real if everything goes wrong then realloc will just return null and hasn't done anything with you at the old old allocation ok oh more less commo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "taneous but at some point in the future they we know that the function takes a void pointer and so this is the value would like to pass in ok and the return value that is going to be the exit value from the function so if the thread never calls p thread exit its return value will be the threads exit value ok so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "lue would like to pass in ok and the return value that is going to be the exit value from the function so if the thread never calls p thread exit its return value will be the threads exit value ok so let's go and actually kind of demos demonstrate this now right so i need a little bit of a program ok so here we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "t's do pizza hut join on right and now i need to say the on the thread that i want to join about so i'm going to wait for third one ok and i need a k return value on and i'm going to have another thread to quit ok so let's have a look at p thread joint and p thread join and you'll see it takes a pointer to a po",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "to a pointer to avoid star ok so the idea here is that we actually give it some memory that is going to write into so here's my voice dial pointer ok return value one here's another one ok and we want the address of these variables because they're going to be changed ok so just to kind of see that they're being",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ing to be changed ok so just to kind of see that they're being changed let's dump actually look at their values so i can say things like printf right return value one is now if i do percent p i can get things printed out i can see what its value is key so let's do that and and so we can now will only print out ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " one is now if i do percent p i can get things printed out i can see what its value is key so let's do that and and so we can now will only print out return value after both these threads have finished ok so let's compile it ok well run it after a second they both run and you'll see oh we got return value of ze",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "t out return value after both these threads have finished ok so let's compile it ok well run it after a second they both run and you'll see oh we got return value of zero zero now do you believe me hold on a moment maybe that's the arbitrary value of these before so let's prove that it's working let's let's ret",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "eat it as a memory address and we don't care what's there so the type is just void ok so let's compile that ok after one second they both finish what return value one is zero what did we do ok so see void pointer why did that fail is a good question wait oh because yes do you see why ok we never got to return s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "'s tomato i wanted to run down here ok wait so let's run this now ok clear ok and ok sure cast it right ok ok so after one second great now we have a return value of dead beef and if i was to look at the other one we would see dead code so that last part of our demo right case so return value two is ok there ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "reat now we have a return value of dead beef and if i was to look at the other one we would see dead code so that last part of our demo right case so return value two is ok there ok right so one thing i hope i persuaded you is that yeah we got deadbeef here and dead code there ok so one thing i hope i persuaded",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " much actually so be careful just how much recursion we do on these threads ok so write anything results we want to say about this we seen how we can return values and then obtain those values while np thread joint there is one common culture and let's make a typo here so some common typos are the only time you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "eter create here then i've lost the the original id and i never set td two ok so let's run that ok and now you'll see that we've got issues here that return value isn't correct because my i'm not waiting now on on a valid thread id and in fact the behaviors can be worse than that it can crash for example right ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "78b152f6-1621-4792-8595-2687dfbc6aa9",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "member that actually when we return from the function all we need to do is just change our stack pointer to go back to the previous area and change a return value so that's why stack variables are so much faster to allocate and deallocate compared to variables on the heap there's so little work to be done with ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "74e03522-c6e8-4e59-84ba-95a62ce5f3fd",
        "lecture": "CS",
        "lecture_num": 12,
        "context": " is quickly cause going to be documented to increment it to eleven and we done no because we make it recursive call so also in this space we have the return value for the process counter for the for the pc but now i've got another stack frame where i've created another value of c k which is initially ten and i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "802abd70-0cc9-49a1-8916-5ff1c0a98738",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "r and the only reason i need to write it like this is just because peter create create requires us to have a void pointer argument and avoid point of return value so great now i've got an integer value at that site interpoint sure i know there's never there so let me read it so that's the purpose of line ninety",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " doesn't actually refer to anything and so rp thread mutex lock call does nothing is a no op we could have discovered that if we'd actually check the return value of rp tape mutex lock so if we were waiting really bulletproof robust code production code we might do that but instead because we forgot it doesn't ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ontinue and will write to the next one so the pop ok so what should my pop method look like ok so first of all let's write the code which is going to return value k so we turned my v where does become from i'm going to have something like double v equals so i go to my way now i want to pre decrement my value of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ontinue and will write to the next one so the pop ok so what should my pop method look like ok so first of all let's write the code which is going to return value k so we turned my v where does become from i'm going to have something like double v equals so i go to my way now i want to pre decrement my value of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ontinue and will write to the next one so the pop ok so what should my pop method look like ok so first of all let's write the code which is going to return value k so we turned my v where does become from i'm going to have something like double v equals so i go to my way now i want to pre decrement my value of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ontinue and will write to the next one so the pop ok so what should my pop method look like ok so first of all let's write the code which is going to return value k so we turned my v where does become from i'm going to have something like double v equals so i go to my way now i want to pre decrement my value of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "82fd59dc-808f-40f4-a0bc-0ccf6eb76e78",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "after returning from p third barrier wait just get a value of o ok so if you want to annotate one particular thread to do some special just take that return value see if it returns this and you can then say ok special thread you can go off and also download this other thing or perhaps save something so for exam",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "199ad3c7-e0c6-414e-8fa1-80276ca9fdcc",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "r gay so let's increment my counter here key bite sent and if i wish i could check the right actually works how could i do that well let's just check return value of right means that this better be actually equal to one ok so let's run this and see what happens on my mac how your linux system may be different b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "d to test some programs and i want to kind of notice that there's some kind of production quality inside here that we do ashley things like check the return value of our system calls so let's check the pipe work now if it fails or we're going to do is just quit this little kind of error function error message b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a339955c-d52d-4f69-9c8a-c4e9d4cf038f",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "sentation of our data on disk is exactly the same as the reputation of my numbers on this particular machine ok third we haven't actually checked the return value for f f reads we've just assumed that they worked ok it is kind of a dangerous assumption so fread does not return the number of bytes read instead i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ill just 's notice a few things so first of all light that we see the right mac great right fewer bytes then requested ok so we've got to look at the return value and also if it fails then if it succeeds then we get the number of bytes written or we get a negative one to say we failed completely so no bites wer",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " idea so we've been oversimplifying things at this point we haven't been writing high quality code instead what we need to do is we need to check the return value of some weight and read and write and even sleep if we actually want to write production worthy code because some weight might be say oh i failed and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ly want section two let's try that section three ten ok there we go right and you'll see that it returns the number of remaining seconds i believe so return value returns because so zero if this slept the required amount otherwise returned the amount of une slept ok so we could keep track of that in fact this i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7c19bcb8-2e74-423d-94b8-77b2b5ccb983",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " confident that something went wrong in that sequence of calls in practice of course bulletproof code robust production code would actually check the return values of all of your system calls and that is kind of really good system programming practice to kind of detect when errors go wrong and actually becomes ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ill just 's notice a few things so first of all light that we see the right mac great right fewer bytes then requested ok so we've got to look at the return value and also if it fails then if it succeeds then we get the number of bytes written or we get a negative one to say we failed completely so no bytes wer",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " dear so we've been oversimplifying things at this point we haven't been writing high quality code instead what we need to do is we need to check the return value of semwait and read and write and even sleep if we actually want to write production worthy code because semwait might be say oh i failed and it migh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ly want section two let's try that section three ten ok there we go right and you'll see that it returns the number of remaining seconds i believe so return value returns because so zero if this slept the required amount otherwise returned the amount of une slept ok so we could keep track of that in fact this i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "923b48d1-82c9-4c57-9d23-3c0a31dd37d0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " confident that something went wrong in that sequence of calls in practice of course bulletproof code robust production code would actually check the return values of all of your system calls and that is kind of really good system programming practice to kind of detect when errors go wrong and actually becomes ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1020a6c-61f2-4b16-b8a8-b2f4b04242c5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " confident that something went wrong in that sequence of calls in practice of course bulletproof code robust production code would actually check the return values of all of your system calls and that is kind of really good system programming practice to kind of detect when errors go wrong and actually becomes ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b96e8ea2-f596-4b5a-807e-4646d78cc7a0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " confident that something went wrong in that sequence of calls in practice of course bulletproof code robust production code would actually check the return values of all of your system calls and that is kind of really good system programming practice to kind of detect when errors go wrong and actually becomes ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bbb895a1-cba7-4548-8727-a436ca271b72",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " confident that something went wrong in that sequence of calls in practice of course bulletproof code robust production code would actually check the return values of all of your system calls and that is kind of really good system programming practice to kind of detect when errors go wrong and actually becomes ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ill just 's notice a few things so first of all light that we see the right mac great right fewer bytes then requested ok so we've got to look at the return value and also if it fails then if it succeeds then we get the number of bytes written or we get a negative one to say we failed completely so no bites wer",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " idea so we've been oversimplifying things at this point we haven't been writing high quality code instead what we need to do is we need to check the return value of some weight and read and write and even sleep if we actually want to write production worthy code because some weight might be say oh i failed and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ly want section two let's try that section three ten ok there we go right and you'll see that it returns the number of remaining seconds i believe so return value returns because so zero if this slept the required amount otherwise returned the amount of une slept ok so we could keep track of that in fact this i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "e better actually check to see whether the get address info actually succeeds or not so it's important with all of these network calls to check their return value so if it did not succeed then my result pointer can you point into anything game because we never set it maybe it's pointing to this smiley over here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "o you don't use air nose is the one of the few times that were not using error to find out what happened instead the error is actually encoded by the return value directly ok so we've got all get address info now we can make the calls for a socket and connect so rather than do that here let's actually do that a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " we better actually check to see whether the getaddressinfo actually succeeds or not so it's important with all of these network calls to check their return value so if it did not succeed then my result pointer can be pointing to anything game because we never set it maybe it's pointing to this smiley over here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " so you don't use errno this is one of the few times that were not using errno to find out what happened instead the error is actually encoded by the return value directly ok so we've got our getaddressinfo now we can make the calls for a socket to connect so rather than do that here let's actually do that as p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "o some error checking remember that if getaddrinfo fails it will use its own little helper function to print an error but i'm also going to check the return values of all of my other network code as well and if something goes wrong with one of these calls returns negative one i'm going to just quit so my quit f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "me error checking remember that it get addressing for fails will use its own little helper function to print an error but i'm also going to check the return values of all of my other network code as well and if something goes wrong with one of these calls we turns negative one i'm going to just quit so my quick",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a36c9a4b-0ff7-4b83-9157-f856ccfd8b26",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "g to look like struct stat and the struct itself will have arbitrary values and let stat actually complete successfully so we better check to see the return value of stat this better be 0 to mean it succeeded ok so if that is zero then great we know that the memory structure actually has some valid values right",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a36c9a4b-0ff7-4b83-9157-f856ccfd8b26",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ng we should try let's give it a fictitious file doesn't exist so no ok you'll see that stat failed and then the error number that was set inside not return value but errno corresponds to i'm sorry that is not a valid filename ok right so ok so we've done that which is going to be useful 'cause this is going to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e61962ea-1b9a-41e3-8779-5e49bf8449a5",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "i'll say use clang today right output meter links ok now let's run it ok so it didn't print out any errors but we won't actually capturing any of the return values of those calls either so it just simply ran through ok what can we see here let's do it like this first of all notice that yeah three files called q",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "rtant to use 'em m set to make sure that the unused fields inside the hint struct are set to zero and the idea that it's important to check their its return value otherwise if it failed then the result struct won't have been changed at all but in fact this result thing is not just destructive practice appointed",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "386e3067-a4c7-42a0-9721-75a58c84ced0",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "for example we haven't checked to see whether pthread create actually succeeds or not. if we were writing production quality code, we would check the return values on the air conditions of all of our system calls, but with that little niggle-- with that little annoyance, we will accept that this code is thread ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "whole load",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "7dd4705a-6995-4f39-a32c-12a1174bd04e",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "rent called when the parent evaluated random number they also generated three so let's i'm saying into this right so we could for example print out a whole load of random numbers right so let's that key and print out kind of two random numbers case so will call this r two ok and the other kind of fun thing wi",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ca407966-df2d-404e-98ad-238fa2551362",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "and if we wanted to implement getenv except of course there's more than one environment variable there's another one so just like argv argc there's a whole load of them and the last point are here is null so that's the way to find out all the variables now big important point here is that if you declare this ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "et me check see how see how long it is now and there we go it's now doubled in length to seventy four lines ok right so that's a lot of fun putting a whole load of different system ideas together in our next video we're going to look at y two processes might actually guess the same random number and in fact w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "hout the process without there's no memory there's no files threads have nowhere to exist ok so we think about it as memory and now we're co opting a whole load of cpus to come and work on our program together if it turns out that we don't actually really have say two cpus on my my machine then the operating ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "78b152f6-1621-4792-8595-2687dfbc6aa9",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "all these parameters so i'm going to need for bites for a four bytes for v one for boats for v two etc right and we can keep going right so we have a whole load of those up to say v twelve ok right so that's the first thing you want to put in our stack now and what else could we put in our stack well when we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "a million times and each time around the loop we're going to implement that counter now the value of eyes a stack variable which means i can create a whole load of threads and each one is going to get his own value of i but they are all picking at this global variable this countered so they're going to share ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "a million times and each time around the loop we're going to implement that counter now the value of eyes a stack variable which means i can create a whole load of threads and each one is going to get his own value of i but they are all picking at this global variable this countered so they're going to share ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "a million times and each time around the loop we're going to implement that counter now the value of eyes a stack variable which means i can create a whole load of threads and each one is going to get his own value of i but they are all picking at this global variable this countered so they're going to share ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "r thread is sleeping in ok and there's one other option which is p thread conditioned broadcast so the difference is that sometimes i actually send a whole load of threads to sleep inside my condition variable and if i call condition broadcast i'm going to wake them all up if i just call signal then i'm askin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4be923cb-0fb1-4a38-b904-ceb8ff09755a",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " i encourage you to think about applications where might this might be useful so the first idea is i want to make a barrier in other words i've got a whole load of thread switch off doing their things independently queso this one might be downloading something this one might be loading some code this one migh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4be923cb-0fb1-4a38-b904-ceb8ff09755a",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "h p three condition wait there's one variant of barrier we can call it a one shot or even a repeatable barrier so you can imagine that i've got say a whole load of threads here they come out to their barrier point we're not going to exit these threads are just going to be temporarily paused then when finally ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "hi ok so let's make it a little bit more complicated now let's have a whole load of data structures ok so in this case i'm actually going to have eight different data structures here we go right and so for each one of these i'm go",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "and so they will get stuck ok right so the the i want to imagine this scenario which often kind of confuses people a little bit is imagine i've got a whole load of readers already reading ok so i've got like a hundred readers say in here and imagine now we introduce a writer is time to update so what happens ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then after we've done that we will set fireworks equal to ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then after we've done that we will set fireworks equal to ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then after we've done that we will set fireworks equal to ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then after we've done that we will set fireworks equal to ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then after we've done that we will set fireworks equal to ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then after we've done that we will set fireworks equal to ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " a writer so now it's time to change our data structure ok so here's the writer on the scene but they're going to have to wait why because i've got a whole load of readers which are currently inside that data structure so it's only when these reader threads actually leave the data structure meaning that we do",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ve got some heap we've got then lots of space and then at the top we've got things like the stack and argv obviously that kind of stuff but there's a whole load of space which is unused so we only actually need to instantiate limited set of these secondary vlookups ok the ones which actually cause one door id",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4601a707-5dd9-44c5-b66d-261ac8ae080b",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ed so i can do things like if i want to have some space on the heap i could say ok malloc give me that number of bytes now for brevity i'm skipping a whole load of error checking but i just want to kind of sketch out the code so great i've now got a some space and now i can read everything into their ok so ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55699194-1692-490a-a863-a26370265ef7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "itly say where to write these bites by the way there's a similar call called pread() as well so where this becomes uh it useful is where i have say a whole load of threads which are generating output suppose for example that you run a competition against students from another university and all you have to do",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "781c2c19-58df-4f6e-9dcf-99e51f685f66",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ed so i can do things like if i want to have some space on the heap i could say ok malloc give me that number of bytes now for brevity i'm skipping a whole load of error checking but i just want to kind of sketch out the code so great i've now got a some space and now i can read everything into their ok so ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dcde2695-ae8c-4032-aceb-2d001a2ec718",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "itly say where to write these bytes. and by the way, there's a similar call called pv() as well. so where this becomes useful is where i have, say, a whole load of threads which are generating output. suppose, for example, that you run a competition against students from another university and all you have to",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "is dot edu and get address info can convert that into an ip for address and even potentially an ip six address as well so we don't need to memorize a whole load of ip four and ip six addresses instead we can use these fully qualified host names and get a drink address info will convert those force in fact it ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "illinois dot edu and getaddressinfo can convert that into an ipv4 address and even potentially an ipv6 address as well so we don't need to memorize a whole load of ipv4 and ipv6 addresses instead we can use these fully qualified host names and getaddressinfo will convert those for us in fact it gives us a lin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "is dot edu and get address info can convert that into an ip for address and even potentially an ip six address as well so we don't need to memorize a whole load of ip four and ip six addresses instead we can use these fully qualified host names and get a drink address info will convert those force in fact it ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "mory for one byte you're going to get say the whole cache line which might be sixty four bytes or thirty two bites or hundred depending on the system whole load of bytes are free they all come across right depending on the width of the actual physical number of lines between main memory in your cpu so you get",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e can have an arbitrary key value pairs to help come searching right so we could kind of keep going on here and we could keep kind of brainstorming a whole load of things that we might want to store about the file but i want to kind of simplify it back down to linux does and what we see in most file systems o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ide particular directory for example you happen to be inside say directory called sub two then inside that particular directory there's going to be a whole load of names that school directory listing an each name is going to map two and i'd known number so the i node number becomes the authorative way to talk",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "zfs and also btrfs and what else we got ok so another nonlinear systems you'll find xfs as well where where these newer fire systems actually support whole load of features of much more than a much more complex than our model file system that we're going to study insights this site this course 'cause we are g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ry for one byte you're going to get say the whole cache line which might be sixty four bytes or thirty two bites or hundred depending on the system a whole load of bytes are free they all come across right depending on the width of the actual physical number of lines between main memory in your cpu so you get",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e can have an arbitrary key value pairs to help come searching right so we could kind of keep going on here and we could keep kind of brainstorming a whole load of things that we might want to store about the file but i want to kind of simplify it back down to what linux does and what we see in most file syst",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e a particular directory for example you happen to be inside say directory called sub two then inside that particular directory there's going to be a whole load of names that's your directory listing an each name is going to map to an inode number so the inode number becomes the authorative way to talk about ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e zfs and also btrfs and what else we got ok so another nonlinux systems you'll find xfs as well where where these newer filesystems actually support whole load of features of much more than a much more complex than our model file system that we're going to study inside this course 'cause we are going to turn",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f6f268-02f8-4d31-a805-f951523e92a1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "y my home directory there might be others so for example configuration for the actual machine i would find expect to find mostly inside etc there's a whole load of executables expected be able to run inside for example slash bin there's also slash user been as well so these directories are all starting you'll",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "de67c1db-85ec-40ee-affa-68ebcf984028",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "home directory there might be others so for example configuration for the actual machine i would find expect to find mostly inside /etc see there's a whole load of executables expected be able to run inside for example /bin there's also /userbin as well so these directories are all starting you'll notice with",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6469a892-5a29-4895-b922-8ef54fabb1a8",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "also for example you might find a subdirectory cause dot ssh for the secure shell and there's useful things inside there for example you can set up a whole load of aliases inside config so that rather than having to do ssh and then a long name you can just have a nice short name you can do things like saying ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "935f6155-a7a0-4504-b818-62e2db066493",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " ok you can see that later we should close it ok ok so ok i should just prove that this works all right and you'll see that it's happily going into a whole load of directories that i made earlier right so for example if i said ok let's make some directories and make all the parent ones which don't exist i cou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " you say ok i want to make a link i want to make a symbolic link and you start off with the target where it should end up so for example if you had a whole load of android sdk 's you might say for example alright so i've got somewhere on my machine say like an install directory and i've got say an android sdk",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " you might say for example alright so i've got somewhere on my machine say like an install directory and i've got say an android sdk and i may have a whole load of them i might have some things on my home directory called say latest sdk so now when i update to a new android sdk i can always create a new symbo",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "31a84e40-90fe-4ea7-9af5-cfc0d0ffebe8",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "omips ok so this actually information is stored by each cpu so it's going to have a look at this ok so if i do ok like cat slash procs cpu info given whole loada stuff like the fact that i thought i'd bought a sixty four bit machine but in fact my actual wires coming out of my cpu there's only actually forty ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "31a84e40-90fe-4ea7-9af5-cfc0d0ffebe8",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ht so much tells me about the actual memory mapping of a process which i think is pretty cool ok so this process currently got you can see it's got a whole load of libraries which are mapped into different parts of the address space let me keep scrolling backwards here there's a lot of mappings kate looks the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bcc2191c-ce75-4441-b029-c038282b1677",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "at by generating say network packets by by sending some io so let's send some network packets ok so here's me on another terminal i'm going to send a whole load of network packets by just kind of randomly typing for a little while so this should be increasing the entropy of my system but would have put up wit",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ing when your machine starts up it's actually gonna look for filesystems does described in this side is special file etc/fstab so that can describe a whole load of additional file systems like there might be a file system just for the users there might be a remote file system that is mounted on a network driv",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b576d61-d378-4ab7-892f-56f113eb5f08",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "say unpack things or playing around with say sometimes being root sometimes being yourself sometimes you need to kind of re fix up the ownership of a whole load of files so turns out that chair mod and charoen can be recursive so we can do things like ok please go into all sub directories and plus are so we c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bc05bdb0-371d-4cd3-97a6-753a576a32f2",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "t the whole story today people used kind of clustering rate so you'll see things like i will have raid one plus zero for example where i might have a whole load of raid disks configured at just as mirrors and then i will build up a raise of those of those disks as if my mirrors themselves are single disks oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4c2cacef-7dbd-4877-97e1-9c6cf834fa33",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "of look at what your find inside there so only kind of abstract side let's zoom in here there we go you might desire your ssd to look a bit like this whole load of flash memory which is not controlled by your machine directly instead the ssd controller itself has a very small processor these processes are can",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0dfe3fc6-d54e-41af-b8c0-14d77999a05c",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "l values one plus two plus four plus eight so that's k this bitwise pattern and then i'm ending it with not sixteen here so in other words i've got a whole load of ones up here and then zero and then a whole load of once adding that together here we go right so these ends obviously don't do anything then ther",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0dfe3fc6-d54e-41af-b8c0-14d77999a05c",
        "lecture": "CS",
        "lecture_num": 35,
        "context": " k this bitwise pattern and then i'm ending it with not sixteen here so in other words i've got a whole load of ones up here and then zero and then a whole load of once adding that together here we go right so these ends obviously don't do anything then there's a whole load of them let's say about twenty five",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0dfe3fc6-d54e-41af-b8c0-14d77999a05c",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "es up here and then zero and then a whole load of once adding that together here we go right so these ends obviously don't do anything then there's a whole load of them let's say about twenty five or salem ok they they of course are just going to see holder to zeros for my left hand expressions so zero under ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f815b599-ae2e-4d57-9c3e-b1834f484942",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "d out they process id of the currently running program so now great i can send a signal let's do sig quit to eighteen seventy and it will print out a whole load of stuff let's see if we can make it a bit smaller and see what it's doing ok right so we've got stuff about the heap how big it is java sleep is a m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578b472b-d7f9-455d-b241-95da7faa4f77",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ing at the content and figuring out the cat jpeg is even required plus with each request we make we're not just say hey i want cat dot jpeg there's a whole load of header information for example you might be setting cookie information because the cookie disambiguates who is making the request so cookie can re",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": " a concern if we were writing kind of security aware code what about a linked list how would you send a link list ok so you might say well i've got a whole load of stats structures each one represents the next point but of course we don't need to do that if we just sending a marshaling a linked list we can ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "ponsibility is to get things in order to get them well organized so that we can send everything off in organized fashion so if for example you have a whole load of parameters to send you might have to decide which order to send those parameters or if you had a whole lot of integers dissent you might decide to",
        "label": "Use"
      }
    ]
  },
  {
    "text": "multiple threads",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "ef681962-29d9-43da-bc9c-fdb2c8005093",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "lar wheel where the next cook runs up and pulls the next thing to cook off this second we'll the next order right and this is actually shared between multiple threads that is eventually where we'd like to get to but for now let's just think about individual tasks and we've got an example here for amanda block probl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef681962-29d9-43da-bc9c-fdb2c8005093",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ot an example here for amanda block problem but i want you to think of this conceptually as applying to kind of other things that we want to use with multiple threads so i wanted to clear a little job a little thing that i want my thread to do so so i care about it starting x and y position and ending x there n d y",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "otta give a hint to the compiler to say alright we need p thread support please load the version of the c library which includes malloc that supports multiple threads right so why is it that my lock can do this safely then and the key phrase is what i'll tell you in the next video ok right bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ay inside cs two twenty five or an internship or we've got our own startup, and now we want to make it faster! so we want to make it so that actually multiple threads can use this code at the same time. okay, so let's start by just looking at simple typical kind of linked list code. perhaps you're going to write it",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "l the same. ok so here's the goal. we're going to try to modify this code to be what's called 'thread safe' in other words i can actually use it with multiple threads so along the way we're going to fix some errors as well. ok so what do we got. we've got a pointer that corresponds to the start of my linked list. i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " critical section: 'where is it that we only need one thread at a time to be running.' and so we know that malloc is threadsafe. it is perfect ok for multiple threads to call malloc. so if list_prepend was called in two threads at the same time that would be ok. each thread has its own stack and inside each stack i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "a character based error message here string called terror former number we're using something called store error i wonder if this is safe to call for multiple threads at the same time and of course one of the reasons that we kind of suspicious about this is because it takes an inch returns a character pointer and i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " the count would be brief you might imagine go up to one but then actually gets back handed down to zero again ok so that's essential idea i can have multiple threads or calling down on my box here ok all unhappy because there's no pizza in there right now if you then call up if you now increment the count by one m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "a character based error message here string called terror former number we're using something called store error i wonder if this is safe to call for multiple threads at the same time and of course one of the reasons that we kind of suspicious about this is because it takes an inch returns a character pointer and i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we work them all up so right i i think we can now cont",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "dcast however this is kind of a optimization it's very easy to get these wrong it's very tricky to start modeling thinking about this when you've got multiple threads which might call pop of multiple threads which might call push gets a little bit easier to think about if you've only got one thread of each kind so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ion it's very easy to get these wrong it's very tricky to start modeling thinking about this when you've got multiple threads which might call pop of multiple threads which might call push gets a little bit easier to think about if you've only got one thread of each kind so my advice is treat these optimizations wi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we work them all up so right i i think we can now cont",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "dcast however this is kind of a optimization it's very easy to get these wrong it's very tricky to start modeling thinking about this when you've got multiple threads which might call pop of multiple threads which might call push gets a little bit easier to think about if you've only got one thread of each kind so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ion it's very easy to get these wrong it's very tricky to start modeling thinking about this when you've got multiple threads which might call pop of multiple threads which might call push gets a little bit easier to think about if you've only got one thread of each kind so my advice is treat these optimizations wi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we work them all up so right i i think we can now cont",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "dcast however this is kind of a optimization it's very easy to get these wrong it's very tricky to start modeling thinking about this when you've got multiple threads which might call pop of multiple threads which might call push gets a little bit easier to think about if you've only got one thread of each kind so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ion it's very easy to get these wrong it's very tricky to start modeling thinking about this when you've got multiple threads which might call pop of multiple threads which might call push gets a little bit easier to think about if you've only got one thread of each kind so my advice is treat these optimizations wi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we work them all up so right i i think we can now cont",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "dcast however this is kind of a optimization it's very easy to get these wrong it's very tricky to start modeling thinking about this when you've got multiple threads which might call pop of multiple threads which might call push gets a little bit easier to think about if you've only got one thread of each kind so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ion it's very easy to get these wrong it's very tricky to start modeling thinking about this when you've got multiple threads which might call pop of multiple threads which might call push gets a little bit easier to think about if you've only got one thread of each kind so my advice is treat these optimizations wi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "oadcast so anybody any thread that happens to be sleeping inside the condition available will be working up wait i promised you that we have multiple multiple threads so here it is i've got two threads which are going to be cookie eaters and one could be all angry even one could be agent smith ok and then we'll jus",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ic problem called producer consumer and in particular we're going to implement this using a fixed sized ring buffer so here's the game you might have multiple threads or even processes that produce a lot of things and then consumers which consume a lot of things and we need a way to couple these together so let's p",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "le maybe think about this as a summer project ok so great we've got something which works providing only one thread at a time is calling nq if i have multiple threads then they could both get past this line but my changing of the buffer here is actually critical section i don't want two threads to see the same valu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "n use a p threat condition wait call to implement my barrier ok so the idea that look i've got this shared variable here is just a global variable an multiple threads are going to call power so let's keep track of the total number of threads that have been there called this so we'll have a little counter in every t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "doing is just modify one of the entries inside that away ok and then i've got this other function which actually i'm going to run multiple times with multiple threads so i'm going to have in fact seven threads running and each of them one is going to be attempting to consume something from each of my little integer",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "e how we can kind of get unstuck and then talk about why this is actually a terrible barrier ok so here's a sketch of what we want to do here we want multiple threads be able to call or barrier function here will have a keep some kind of count for the number of threads that have got stuck inside our barrier and the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "to first acquire these two mutex logs ok so that's good the bad news however is that readers are forced to read the data just one at a time if i have multiple threads calling my read here then only one of them can acquire this this lock and the others get blocked ok so now i can't have a million people on using my ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "erence in the sense that we thought about these things even with four threads exist but you could imagine how we could set up identical situations to multiple threads running inside just one process so it's the concept is the theory which is the most important idea here ok so what do i got in question one i've got ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "erence in the sense that we thought about these things even with four threads exist but you could imagine how we could set up identical situations to multiple threads running inside just one process so it's the concept is the theory which is the most important idea here ok so what do i got in question one i've got ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39f43910-3996-4918-b9ce-21346fb84956",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t's do this as a little worse example but again there my suggestion to you is is think about your cs life and start thinking about well how can i use multiple threads to make this or how can i use multiple processes ok so remember how merge sort works we say if i've got say an array of data here what i'll do is i'l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "513bcd38-3d1f-455e-9de0-3a1cb12f8bf0",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "'s do this as a little worse example but again there my suggestion to you is is think about your css life and start thinking about well how can i use multiple threads to make this or how can i use multiple processes ok so remember how merge sort works we say if i've got say an array of data here what i'll do is i'l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t we'd like to change is this if inside here so in practice this can bite you in two different ways first of all maybe in other applications you have multiple threads calling this and we really just want to ensure their x really is positive before we continue and other things may change value x the second problem w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t we'd like to change is this if inside here so in practice this can bite you in two different ways first of all maybe in other applications you have multiple threads calling this and we really just want to ensure their x really is positive before we continue and other things may change value x the second problem w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "87dfa0a9-a180-45ac-87e0-763c82801382",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "'s do this as a little worse example but again there my suggestion to you is is think about your css life and start thinking about well how can i use multiple threads to make this or how can i use multiple processes ok so remember how merge sort works we say if i've got say an array of data here what i'll do is i'l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t we'd like to change is this if inside here so in practice this can bite you in two different ways first of all maybe in other applications you have multiple threads calling this and we really just want to ensure their x really is positive before we continue and other things may change value x the second problem w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a86a145c-b6f4-40eb-9ae9-1db34396ab40",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "'s do this as a little worse example but again there my suggestion to you is is think about your css life and start thinking about well how can i use multiple threads to make this or how can i use multiple processes ok so remember how merge sort works we say if i've got say an array of data here what i'll do is i'l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t we'd like to change is this if inside here so in practice this can bite you in two different ways first of all maybe in other applications you have multiple threads calling this and we really just want to ensure their x really is positive before we continue and other things may change value x the second problem w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "with negative numbers ok so this code is trying to use condition variables to implement an q but it right now it's not even thread safe we could have multiple threads calling nq and both of them could see the same value of in so this code right here of where we're changing the buffer that's the part that actually n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "01850175-f9bd-4eba-a73b-9dc63940ee41",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o instead internally has some static static memory that it reuses from one call to the next ok so that's our problem that if i'm going to use this in multiple threads i could have one call to store arribe be entered by another call to stuart error on a different thread an oh dear both of them are now trying to use ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "01850175-f9bd-4eba-a73b-9dc63940ee41",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f common with some of the earlier calls inside posix that they weren't built with with threads in mind and so threat support the ability to work with multiple threads has kind of been reverse engineered back into some of these api calls so stroit error itself with this underscore r will discover actually doesn't ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8258d360-0ce7-4e09-93ba-dbde1dba4781",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o instead internally has some static static memory that it reuses from one call to the next ok so that's our problem that if i'm going to use this in multiple threads i could have one call to store arribe be entered by another call to stuart error on a different thread an oh dear both of them are now trying to use ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8258d360-0ce7-4e09-93ba-dbde1dba4781",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f common with some of the earlier calls inside posix that they weren't built with with threads in mind and so threat support the ability to work with multiple threads has kind of been reverse engineered back into some of these api calls so stroit error itself with this underscore r will discover actually doesn't ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "82687def-c053-4955-8eef-1d80e8bf31da",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o instead internally has some static static memory that it reuses from one call to the next ok so that's our problem that if i'm going to use this in multiple threads i could have one call to store arribe be entered by another call to stuart error on a different thread an oh dear both of them are now trying to use ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "82687def-c053-4955-8eef-1d80e8bf31da",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f common with some of the earlier calls inside posix that they weren't built with with threads in mind and so threat support the ability to work with multiple threads has kind of been reverse engineered back into some of these api calls so stroit error itself with this underscore r will discover actually doesn't ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9edf0a56-503a-444a-861d-6bd29f8a2e58",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o instead internally has some static static memory that it reuses from one call to the next ok so that's our problem that if i'm going to use this in multiple threads i could have one call to store arribe be entered by another call to stuart error on a different thread an oh dear both of them are now trying to use ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9edf0a56-503a-444a-861d-6bd29f8a2e58",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f common with some of the earlier calls inside posix that they weren't built with with threads in mind and so threat support the ability to work with multiple threads has kind of been reverse engineered back into some of these api calls so stroit error itself with this underscore r will discover actually doesn't ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dff47837-9853-4be6-9e60-8ab2c54b8272",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o instead internally has some static static memory that it reuses from one call to the next ok so that's our problem that if i'm going to use this in multiple threads i could have one call to store arribe be entered by another call to stuart error on a different thread an oh dear both of them are now trying to use ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dff47837-9853-4be6-9e60-8ab2c54b8272",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "f common with some of the earlier calls inside posix that they weren't built with with threads in mind and so threat support the ability to work with multiple threads has kind of been reverse engineered back into some of these api calls so stroit error itself with this underscore r will discover actually doesn't ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " call epoll i have something to be done epoll is going to tell me about it life with edge to edge detection one advantage here is if you actually got multiple threads then by being told about this event only once then you can ensure that a single thread that called epoll is assigned that duty is assigned the proble",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "9951a684-a841-47e6-8d48-035d4127b468",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "etter than this is taking a long time to display all these adverts we have on a page what will do is will we took cs two forty one will have say some multiple threads and we will make up to four connections at a time to each web browser so that once we've loaded the html i can load four thumbnails in parallel wife ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "link list",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "94ea6cdc-aa81-48b6-84f3-323a89a40075",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "ere is going to be forty two ok now what do we do make some linked lists in see ok this can be trickier than it first appears ok so i've got my first link list i've got some struck somewhere now when you see the word struck don't panic just consider that a bit like a class in c plus plus except there's no co",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "lve bytes ok so now i've got a small piece of just six six bytes that no one is ever going to be able to use effectively and it's very deep inside my link list etc right so it's going to take a long time to find and it's going to slow my performance down so because memory allocations tend to be scattered or ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " is no use to anybody because it's so small so just a simple best fit actually doesn't have the best performance because now we have a very long list link list and we end up with lots of micro holes which will never use we have to keep iterating through them ok so sorry best fit it will good idea but it turn",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "pretty has pretty good performance that as soon as we find a reasonable fit we're not going to keep looking through our linked list jumping through a link list is actually kind of slow we're not doing memory any favors because quite often now we were busting their caches we keep going back to different parts",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1f76e788-6515-470d-8411-5a70fc7d7edb",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "g to look at best fit worse fit and first fit allocation so his default of the game that we're going to maintain our idea of heap just using a simple link list and each link each node in my linked list data structure just represents a segment of memory that is either currently in use meaning it's been alloca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1f76e788-6515-470d-8411-5a70fc7d7edb",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ocated or is available is free so we'll keep our linked list in sorted order and everytime malloc is called we're going to actually walk through that link list looking for place that we can use to satisfy that request for some contiguous memory right when we find a piece of memory that third is large enough ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1f76e788-6515-470d-8411-5a70fc7d7edb",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "e of memory that we found is probably larger than what was requested which means there's going to be some unused space at the end so let's change our link list let's add a new entry for that unused part so that future calls to malloc can potentially make use of that spare space simile when free is called we'",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1f76e788-6515-470d-8411-5a70fc7d7edb",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "alls to malloc can potentially make use of that spare space simile when free is called we're going to do two things we want to mark that entry in our link list is now available for future allocations but it could be that my linked list actually has two neighboring entries which are both free so at this point",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ght so i won't bother to put all the little lines in to indicate this 'cause we've seen it so many times but you could understand that we're going to link lists which is holding this representation right so then we free pb rights and now this becomes a free space for available for future allocations i can gi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "t the first entry that's no good because i actually corresponds to a piece of memory that is in use but our second entry ok we're bouncing along tile link list and we're iterating through it our second entry is of size four which is fine we only need three kilobytes so we're done we don't need to look any fu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ng through it our second entry is of size four which is fine we only need three kilobytes so we're done we don't need to look any further through our link list so we do the usual thing of look we can split this up so will split up the three kilobytes so will split it into a three kilobyte which is going to b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "le turn off my scissors ok and that's the one kilobyte request comes in ok i think you can guess what first fit does by now that start looking at our link list oh look the very first entry that we've looking at is great it's big enough so will split up into the one kilobyte that you wanted an update my linke",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25b095de-25dc-448b-873a-ddcf22752393",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "lit this into a three killer by entry which is in use and a zero kilobyte entry which is now available there's no point having entries inside the the link list which corresponds to zero kb all they do is they just slow performance because now it's just yet another piece of link of link of the linked list and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "305a1d6f-7dfb-4fe9-8271-64421be8f294",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "g to look at best fit worse fit and first fit allocation so his default of the game that we're going to maintain our idea of heap just using a simple link list and each link each node in my linked list data structure just represents a segment of memory that is either currently in use meaning it's been alloca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "305a1d6f-7dfb-4fe9-8271-64421be8f294",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ocated or is available is free so we'll keep our linked list in sorted order and everytime malloc is called we're going to actually walk through that link list looking for place that we can use to satisfy that request for some contiguous memory right when we find a piece of memory that third is large enough ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "305a1d6f-7dfb-4fe9-8271-64421be8f294",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "e of memory that we found is probably larger than what was requested which means there's going to be some unused space at the end so let's change our link list let's add a new entry for that unused part so that future calls to malloc can potentially make use of that spare space similarly when free is called ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "305a1d6f-7dfb-4fe9-8271-64421be8f294",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "s to malloc can potentially make use of that spare space similarly when free is called we're going to do two things we want to mark that entry in our link list is now available for future allocations but it could be that my linked list actually has two neighboring entries which are both free so at this point",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "try will be his all of our free space ironic unallocated space ok right there next malloc courses i need four kb please right so let's go through our link list looking for an entry that is sufficiently large and available ok so not the first one of course but the second one is great let's take that so again ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "rn a pointer to the beginning of this so this eventually was where pb is going to be a side and what about the remaining space well we've got a third link list entry now for all of the remaining free bites in our heap then is called again with the three kilobyte to request case so again we walked through our",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "e have is come back have a different color is some areas of memory that we have decided we're going to use to hold that metadata structure for little link list data so we've got one there an one there and if we got more might have one just here as well etc and inside that yes we had a little pointer that poi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "en you're implementing this there's two ways to get yourself into trouble the first is to walk off the end of the world so we keep going past the end link list and you try to follow a null pointer so remember that your link list does actually stop the other similar way of falling off the end of the world is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "uble the first is to walk off the end of the world so we keep going past the end link list and you try to follow a null pointer so remember that your link list does actually stop the other similar way of falling off the end of the world is you might be actually at the very beginning of your link list and try",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "at your link list does actually stop the other similar way of falling off the end of the world is you might be actually at the very beginning of your link list and trying to walk backwards actually is not a valid operation because there were no more segments behind that so be very careful when you implement ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "d about block splitting and false presentation and the last question for this little video is our is our implementation using an explicit or implicit link list so this implementation uses an explicit link list meaning that we are throwing pointers around were writing a lot of code that uses memory addresses ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " the last question for this little video is our is our implementation using an explicit or implicit link list so this implementation uses an explicit link list meaning that we are throwing pointers around were writing a lot of code that uses memory addresses explicitly we can talk about the memory address of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " we cannot talk about members of chosen we could talk about the memory addressing turn to my lock so we have lots of memory dresses and in particular link list when we want to jump from one entry to another we look at the entry code next and that is an explicit address it's got a memory location all the othe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "was a hundred inches away then uh i can now calculate where i should be using where i should be reading my next integer value where my next enter the link list is ok so we're going to be seeing this idea of an implicit linked list when we get to nurse boundary tags which is part of this video set so in the n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "20a17ad5-03fa-40e1-bb61-739bcec6e2e2",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "objects each one of those has a size next pointer and whether it correspond to some maybe that's commonly in use or not ok so let's walk through that link list looking for the entry that corresponds to this piece of memory that we're trying to free ok so how do we do that right so i'll initialize our little ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3bc5e145-f08c-45f8-af8f-9b7dd35d816f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " isn't otherwise null then don't do anything just do an early return right now is your done oh wait ok so here's how we're going to do this we have a link list remember let's go through that link list and find the entry that corresponds to the users pointer we remember that was the thing that we return from ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3bc5e145-f08c-45f8-af8f-9b7dd35d816f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ing just do an early return right now is your done oh wait ok so here's how we're going to do this we have a link list remember let's go through that link list and find the entry that corresponds to the users pointer we remember that was the thing that we return from malloc ok so here's the plan then right i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "writing struct metadata entry each time every time i want to talk about this piece of this piece of this structure i have to when i'm talking about a link list so here is my linked list so that i can chain these together but for other times i don't want to have to keep writing the word stripe let's be lazy a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "g or not etc etc so great using little next point is going to build a linked list and then when the user program calls malloc i can walk through this link list looking for available entries and hopefully we've got one which is of sufficient in size and available wait so will need to check our flags for size ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ing to be it we can make some conventions about how to insert and remove from this obviously only the head pointer that points to the beginning of my link list so if i want to insert into my link list inserting at the very front it's going to be in order on operation all i need to do is find some memory to h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " about how to insert and remove from this obviously only the head pointer that points to the beginning of my link list so if i want to insert into my link list inserting at the very front it's going to be in order on operation all i need to do is find some memory to hold my new metadata entry update my head ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "d of the list ok so i can do insertions in order one if i'm only inserting at the front i'll let you figure out how we could insert at the end of the link list again using it order one operation alright that's it for now let's talk about how we can use this in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "start talking about how we can improve a free so first of all just a reminder that now you can see that with realloc if we could actually access that link list when real work is called we can start writing a real lock which is faster but what can we do about free how can we make free faster right now we had ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " single entry of every single apartment because most of those are actually in use and will be a waste of time to checking so perhaps we should have a link list to make it faster to find apartment blocks for it's ok and let's see we will mention these and i want to get down to body into value tax yeah so some",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1853bd34-e9ca-43fa-91f5-250a9abc155b",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "ut it doesn't have to be so that's one advantage of having this little point here ok so what do we need we also need a way to make a note of where my link list starts so now i've done this typedef i can just write end you underscore t and it's a pointer and i'm going to call it head and notice i'd made it st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1f0947f0-7d90-4971-8f36-20b870937782",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "t of all let's let's implement come with some of these first ones so how do i implement this well remember we're just going to walk through this this link list so i need my entry point are here right ok it is the pointer and will start by looking use my little global variable here my little static variable h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2ab9689-c933-4b35-bc36-acc823aa42c8",
        "lecture": "CS",
        "lecture_num": 10,
        "context": " inside are linked list included the allocated and unallocated entries perhaps you can write a faster version over heap allocator if you had a second link list of only the ones which were actually free so you basically have what's called a free list maybe you could efficiently find an entry based on the size",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "48c308bd-22a2-405e-9437-75a1df1794fe",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ugh for our little example here. ok, and then i've got two methods to add and remove things so either i want to append or remove from the front of my link list. ok, right, so let's see. what do we do now? can we spot any errors in this code? ok i can see one already. i'm attuned to this one. this looks exact",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4be923cb-0fb1-4a38-b904-ceb8ff09755a",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " allow one writer to actually modify it and a writer also has to wait whilst as any active readers so if there's a really currently working through a link list let's wait until they finish before the writer say starts modifying that linked list and in fact if i've got an active writer modifying this data str",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "same order so i want you to think about how you would implement that suppose for example you had a set of integers say they might be under a one of a link list and each one of those integers has a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let's say two or ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ue can they actually perform some surgery well not quite because right now we know that there's an active reader someone actually walking through our link list and we cannot change that link list right now so one of our conditions here is if there's anybody actually reading ok so notice that i'm using the re",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "rgery well not quite because right now we know that there's an active reader someone actually walking through our link list and we cannot change that link list right now so one of our conditions here is if there's anybody actually reading ok so notice that i'm using the reading not the reader this is critica",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "same order so i want you to think about how you would implement that suppose for example you had a set of integers say they might be under a one of a link list and each one of those integers has a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let's say two or ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " and ip six addresses instead we can use these fully qualified host names and get a drink address info will convert those force in fact it gives us a link list of potential ways to connect to this particular host alright so more about those details in the next video where will start actually building our act",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " and ip six addresses instead we can use these fully qualified host names and get a drink address info will convert those force in fact it gives us a link list of potential ways to connect to this particular host alright so more about those details in the next video where will start actually building our act",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "t thing is not just destructive practice appointed to a strict and in fact remember it's a linked list so you could write the code to go through that link list following the next point two and calling free etc or guess what there already is a function to do that for you so if you want an easy life just use t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "tually mean to kind of send with that would be a concern if we were writing kind of security aware code what about a linked list how would you send a link list ok so you might say well i've got a whole load of stats structures each one represents the next point but of course we don't need to do that if we ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": " linked list we can just send the actual values so for example we might send we don't need to send the pointers we just need to send the traverse the link list one at a time and will let the other side une marshall that and turn that back into a linked list when it receives it now the fun here is we could se",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "keep track of that or to reverse it one time or we send a special value to indicate that this is the very last value that were sending typically with link listed then it's going to be pretty fast to traverse that however the on the other side on the server side when it's une marshaling this data it has to th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "that however the on the other side on the server side when it's une marshaling this data it has to then generate some malloc calls for each and every link listed item that is going to create and then finally what about a graph how would you actually marshall a graph and serialized at to send it down the wire",
        "label": "Use"
      }
    ]
  },
  {
    "text": "thread mutex",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lete case so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "w function here ok how do you feel about this so before doing any work in my data structure i'm going to grab the duck here so how do i do that as a pthread mutex lock and here's the address of my variable here it is ok and right if we go and we'll see what happens now so let's clear this compile run it oh it n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "sh so as a result rp so join in maine will never complete so as a result will never put the counter ok i think we better fix that let's put in their pthread mutex unlock there you go after i finished in my surgery on the data structure i'm going to give the duck back at which point is this anybody else waiting ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " is before we're out allowed to lock and unlock the mutex i have to initialize it so there's a couple of ways you can do that guess what you can say pthread mutex iniciat and pass in a lock and one of the great things about pizza it's implementation of mutex locks is that we can actually pass in a few attribute",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " do in a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many parameters this was really easy we just take the address or mutex object ok so the definitio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "f the mutex is already locked the calling third will block until the mutex becomes available ok so let's write this out as an example so i've got my pthread mutex lock here and i pass in the address of my little object here called lock right and then i go off and do my critical section stuff so do critical sect",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ike eg update the data structure or read from the data structure but i can be sure that if all of my code follows this pattern so after this i call p thread mutex unlock right and then here's the address of my mutex i can be clear that that that only one thread at a time can be accessed in the data structure so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "es we've seen so far would have helped if we had this ability to pause or threats to implement synchronization now is a couple of limitations with rp thread mutex is which we will be able to relax when we look at other synchronization primitives but here's the big one we have to write these things in pairs we h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " write these things in pairs we have to put the lock and unlock together on the same thread and when we finished we should clean up so we will call p thread mutex destroy right and here's the address of my lock so i want you to think of my variable here and it's not the actual mutex itself more is a bit like a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0f70d1df-7a51-4bea-9a39-589fd7c57802",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " that is going to be called a mutex alright so i'll see you in the next video when we start talking about mutex in particular p three music clocks rp thread mutex alright see you then",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lete case so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "w function here ok how do you feel about this so before doing any work in my data structure i'm going to grab the duck here so how do i do that as a pthread mutex lock and here's the address of my variable here it is ok and right if we go and we'll see what happens now so let's clear this compile run it oh it n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "sh so as a result rp so join in maine will never complete so as a result will never put the counter ok i think we better fix that let's put in their pthread mutex unlock there you go after i finished in my surgery on the data structure i'm going to give the duck back at which point is this anybody else waiting ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " is before we're out allowed to lock and unlock the mutex i have to initialize it so there's a couple of ways you can do that guess what you can say pthread mutex iniciat and pass in a lock and one of the great things about pizza it's implementation of mutex locks is that we can actually pass in a few attribute",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " do in a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many parameters this was really easy we just take the address or mutex object ok so the definitio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "f the mutex is already locked the calling third will block until the mutex becomes available ok so let's write this out as an example so i've got my pthread mutex lock here and i pass in the address of my little object here called lock right and then i go off and do my critical section stuff so do critical sect",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ike eg update the data structure or read from the data structure but i can be sure that if all of my code follows this pattern so after this i call p thread mutex unlock right and then here's the address of my mutex i can be clear that that that only one thread at a time can be accessed in the data structure so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "es we've seen so far would have helped if we had this ability to pause or threats to implement synchronization now is a couple of limitations with rp thread mutex is which we will be able to relax when we look at other synchronization primitives but here's the big one we have to write these things in pairs we h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " write these things in pairs we have to put the lock and unlock together on the same thread and when we finished we should clean up so we will call p thread mutex destroy right and here's the address of my lock so i want you to think of my variable here and it's not the actual mutex itself more is a bit like a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "849095e8-a9e5-4467-8af4-be36e4991af6",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "t is going to be called a mutex alright so i'll see you in the next video when we start talking about new taxes in particular p three music clocks rp thread mutex alright see you then",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b60fb3d4-0600-4074-8432-449ea0067907",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "t is going to be called a mutex alright so i'll see you in the next video when we start talking about new taxes in particular p three music clocks rp thread mutex alright see you then",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "k never sees its money ok so here we go right so i need to make myself a mutex case so i can do that i can do that in my main here right so i'll say pthread mutex initiates alright and i need to initialize my mutex so i'll call it a duck quack quack and i don't need anything special with my doctor day ok what i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ne way to do it now other way is if you're my remember is to say wait let me have the type up here ok here's my deck and case point it and i can say pthread mutex initializer so that does the same thing initializer ok so if i do that then i get can actually skip there ok i need it ok let's just delete it right ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lete case so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "w function here ok how do you feel about this so before doing any work in my data structure i'm going to grab the duck here so how do i do that as a pthread mutex lock and here's the address of my variable here it is ok and right if we go and we'll see what happens now so let's clear this compile run it oh it n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "sh so as a result rp so join in maine will never complete so as a result will never put the counter ok i think we better fix that let's put in their pthread mutex unlock there you go after i finished in my surgery on the data structure i'm going to give the duck back at which point is this anybody else waiting ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "atriots and they come with four important course here they are initiate lock unlock and destroy right so remember that actually we can skip writing p thread mutex initiative we initialize are available to magic value first alright so my first question for you is which one of these calls will block in other word",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "re is that we forgot to initialize our mutex and so there we have variable is just like a file handle it doesn't actually refer to anything and so rp thread mutex lock call does nothing is a no op we could have discovered that if we'd actually check the return value of rp tape mutex lock so if we were waiting r",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ey so i'll ok take my lines off key and till i use yeah let's use vim ok so how can do this remember we can do things like by saying ok my mutex is p thread mutex initializer here we go ok so compile it want it again and this time it gets stuck as we hoped it would alright so finally let's fix our code here let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " this well you can see just like i could have p thread threads i can have a mutex thing here it is and here is a condition variable and just like a p thread mutex initializer lips will fix that actually must be an underscore i can initialize things using these magic constants ok so great i can now she start to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "will put that in a little bit and now if two threads calling current at the same time one of them gets stuck waiting for that mutex so they'll call p thread mutex lock on my mute x variable and the first one to do that continues 'cause that no ones holding the duck great raptor duck releases it when they call u",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ke how can we do that oh ok easy we will actually not lock there we actually want to lock before we test its value so let's put our mutex lock here p thread mutex lock as the very first thing we're going to do so pthread mutex lock ok grab that duck ok so now sleep sorry not sleep grab the mutex so we can't act",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " we actually want to lock before we test its value so let's put our mutex lock here p thread mutex lock as the very first thing we're going to do so pthread mutex lock ok grab that duck ok so now sleep sorry not sleep grab the mutex so we can't actually continue until the mutex lock has been released and here's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " hold on to them for just microseconds at a time just while we say test data structure and then maybe using so ok that looks pretty good we've got rp thread mutex and peter mutex on lock on mutex ok and now let's think about our asked what we doing inside a little loop here ok so we're sleeping will not peace i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " it's actually not two things is going to do it does three things when you finally wake it up before it returns outta peter condition wait it calls p thread mutex lock ok so that means when it finally continues when it finally goes around in this code it has to meet ex again ok so what does this mean this means",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "at condition is now true so we need a mutex lock to ensure that we are the only person get there can be modified data structure so we end up biting p thread mutex lock cave right so there's the log and then later we unlock it right so the point then is to actually a threat can block and two places it might be b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "m so for cookies three cookies right ok oh yes right so we put the number of cookies that we remain we just read the value of jaw out outside of any pthread mutex lock so the value of this jaw could be changed between us decrement in it and as printing something out i think in this case that's exactly what happ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " oh yes so now what do we do we broke out of this loop but we never actually release the mutex log ok so now let's well at least the mutex lock soapy thread mutex unlock ok and now will ensure that before finishing we've let god in meters lock and so this is kind of a fun example because we managed to get one t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ction i don't want two threads to see the same value of in here so first of all declare these right and so i better have a mutex lock inside here so pthread mutex look right and i can unlock that ok now this is actually one example where the encoding in decoding happens at different points in my data structure ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "then what if two threads called this is exactly the same time this is not thread safe so i will actually need some kind of lock here so i'll have a p thread mutex lock k right and what else do i want to do well if my counter has not yet reached eight then i want this to bed to go to sleep so let's do that so i'",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "one else can change it then you better get the lock for the data structure right so up inside here before we do anything we read a kalpi threadlock p thread mutex lock on lock plus i and then when we finished with that we can release it so we might as well release it as soon as possible let's do it right here s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "when we finished with that we can release it so we might as well release it as soon as possible let's do it right here so will now we can porp call p thread mutex unlock on that same locks are locked plus i ok right you'll notice that we are modifying a different data structure down here so before we do it befo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "s calling peter condition wait so how can we ensure that the race condition is not a problem here let's let's also put this inside a mutex locks so p thread mutex lock an i want to look on my locks plus i plus one ok so now we can say strong statements about where the code must be in if we have if we are able t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "t have two threads trying to remove at the same time so if i cared about performance might actually use two different mutex locks here so this is my pthread mutex lock and simply over here i can use a different lock because these actually are going to occur different parts of my data structure so i've actually ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "025c4079-6f2d-496a-bc87-51d078e15f66",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "k to say oh and then quick imagine these two lines execute between these two so so or fix is on this side is to make sure that we've actually called pthread mutex lock before we start changing these variables so lock on the same mutex lock and then afterwards we unlock it ok right and on the right hand side we ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " definitely need to protect that with a p thread lock so only one thread at a time can write this so before calling count we definitely need to call pthread mutex lock on some mutex and afterwards we need to release that locks the other threads can call call count ok call cam plus plus so will need to unlock it",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ensure that the value we read actually is the value which is shared between multiple processes and the answer is to to actually in close this with a pthread mutex lock call so pthread_mutex_lock not only waits to acquire exclusively acquire a lock it actually operates as a memory fence to ensure that any dirty ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "erek condition wait as a better implementation of a barrier alright so in the next video let's talk once more about how we could actually implement p thread mutex lock just by disabling interrupts on the cpu ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "27f7e6d9-2a1f-419b-b0c5-3ad8dc4064d3",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ly do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " objects themselves you can think of them like file handles that they actually exist as part of the part of the kernel so that's why i need to call p thread mutex initiate please create an object for me based on store a reference to that inside this memory structure so i've got my two locks now let's see what h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "structure so i've got my two locks now let's see what happens right so as part of the read i'm going to call read lock ok so i'm just going to call p thread mutex lock and then afterwards petered mutex unlock key and then the right i first of all i'm going to get the right lock then i'm going to get the read lo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ee433b-e79d-4957-9dbc-0d62b0785dbd",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "533db1aa-ad5e-40dd-b819-8b989c89b1f6",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ly do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ly do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d4eaea6f-874c-4acc-a000-07cdfb9fa35b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ly do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ly do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ly do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fa389ce6-5fa6-4288-b2a2-949e66af677a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "i hope you can see is that we've now we've actually got along way from when we first talked about a kind of a simple synchronization ideas of using p thread mutex lock and unlock ok so my advice to you is see if you can write this implementation from scratch starting with a blank piece of paper if you can congr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "nk of the following so how can we improve it and what's its purpose so it's called acquire and for gravity to fit onto this slide i've said pmt for p thread mutex if this truly was in the code i might say why we doing why do we have this typedef let's just stick with the regular types but anyway so we get two p",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "d ok so i better check that these things are initialized if they don't call patriot mutex initiate the very least we need to use the magic constant p thread mutex initializer ok so let's check that ok what else can we see in our little code review ok so we are using a pizza at mutex lock but we also have this i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "till got work to do on the d q as well so let's get that sorted so what do we got so far right so looking back over nq yeah it's good that we use a p thread mutex lock we like that so that only one thread at a time can be working in this code but we actually want to stop when we discovered that the queue is fau",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecc913a8-cf8a-4205-b23c-530df9ebc4eb",
        "lecture": "CS",
        "lecture_num": 39,
        "context": " afterwards we can call our mutex unlock and as usual don't forget to initialize your mutex and you can do that with two ways you could either call p thread mutex initial or you can use that magic value the kind of piv it mutex initializer value either one of those will work ok so right so elastic with a produc",
        "label": "Use"
      }
    ]
  },
  {
    "text": "ip address",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "d i'm speaking a certain variant of http so http one point oh and this time i'm going to say that i know that different hosts could be living on this ip address i want you to behave as if you are illinois dot edu ok and then lastly we know that a line has to be followed by a blank line in order for this reque",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " going to allow us to correctly set these kind of four parameters here for the socket and the network connection and also it allows us to not specify ip addresses directly instead we can specify domain names like illinois dot edu and get address info can convert that into an ip for address and even potentiall",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "d i'm speaking a certain variant of http so http one point oh and this time i'm going to say that i know that different hosts could be living on this ip address i want you to behave as if you are illinois dot edu ok and then lastly we know that a line has to be followed by a blank line in order for this reque",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7c96669f-3968-4af3-b08d-c28d80ecf477",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ip version four addresses because our addresses are only limited to those four octets so today we're starting to see a rise in the new version of the ip addressing internet protocol addressing which is ip version six so there are others for example there is still appletalk which you might find possibly in a l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a8161152-527c-4bb1-b65e-2d56e013ab7e",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "d data critical \" the key characteristics of this protocol is that it is connectionless just like a telegram you can say oh i want to send it to this ip address and on this port and you can fire it off and off it goes so let's create our little message and send it and let it fly away right so we're not going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " going to allow us to correctly set these kind of four parameters here for the socket and the network connection and also it allows us to not specify ip addresses directly instead we can \"specify domain names like illinois dot edu and getaddressinfo can convert that into an ipv4 address and even potentially a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " going to allow us to correctly set these kind of four parameters here for the socket and the network connection and also it allows us to not specify ip addresses directly instead we can specify domain names like illinois dot edu and get address info can convert that into an ip for address and even potentiall",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "tall it yourself let me show you one still fine example use of telnet and that's not following that there is a telnet server running on the following ip address so let's try connecting to it ok right and off it goes and rather than giving your password prompt and asking me what i'd like to do instead it serve",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " of traffic actual packets leaving machine my machine first of all when you call get address info because it's going to convert say a host name to an ip address and of course we'll see packets leaving when we call connect handshake is required between tcp client and server and so the moment you could connect ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "omplicated beast it's quite long but it itself doesn't because it calls many other calls including doing their dns look up to convert host name to an ip address it actually has a special way of returning errors rather than returning something we'd never know it actually returns a non zero value and then if we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "is an inet any which means so if any means i'll take ip4 or ip6 i just want to connect to the server i know care about the exact mechanism all of the ip addresses but today in this problem we care about inet four so let's use that and the socket type well i want stream based so let's specify our correct socke",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "all this one two that's not very large let's do that like this get address there we go right so what do we need in here well first of all we need the ip address i can specify that as a string either as an actual string like this or i can specify it as a host name so for example like illinois dot edu ok if i d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "llinois dot edu ok if i do this then there's probably going to be a packet leaving my machine in the next moment to say hey we need to figure out the ip address of this host name can you help me please right and then we need a port number so the port can actually be specified symbolically so i can say well i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ket we not only have the destination address we also have the source address so we know where that socket where that client is coming from i know its ip address and so if i wish i can make use of that so for example i could check your ip address and if you're connecting from a certain machine i might give you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ow where that socket where that client is coming from i know its ip address and so if i wish i can make use of that so for example i could check your ip address and if you're connecting from a certain machine i might give you a version of the website which is out of date or i might deliberately give you a web",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " clicking how trying to troll my website and it will never find a way out ok so i can do a lot with accept and i can i can perhaps if i find out your ip address i i might try to connect back to you to see what kind of servers are running on your machine ok so the summary however is these are the big four call",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "onnect as if it was this other address this other host name illinois to edu here's why today we can have multiple hostnames which resolve to the same ip address and so our web server doesn't know which actual host that you would like it to pretend to be unless you tell it so perhaps if i told it that we wante",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "onnect as if it was this other address this other host name illinois to edu here's why today we can have multiple hostnames which resolve to the same ip address and so our web server doesn't know which actual host that you would like it to pretend to be unless you tell it so perhaps if i told it that we wante",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ket we not only have the destination address we also have the source address so we know where that socket where that client is coming from i know its ip address and so if i wish i can make use of that so for example i could check your ip address and if you're connecting from a certain machine i might give you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ow where that socket where that client is coming from i know its ip address and so if i wish i can make use of that so for example i could check your ip address and if you're connecting from a certain machine i might give you a version of the website which is out of date or i might deliberately give you a web",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "licking hell, trying to troll my website and it will never find a way out ok so i can do a lot with accept and i can i can perhaps if i find out your ip address i might try to connect back to you to see what kind of servers are running on your machine ok so the summary however is these are the big four calls ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "onnect as if it was this other address this other host name,\u00a0 illinois.edu. here's why today we can have multiple hostnames which resolve to the same ip address and so our web server doesn't know which actual host that you would like it to pretend to be unless you tell it so perhaps if i told it that we wante",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "tall it yourself let me show you one still fine example use of telnet and that's not following that there is a telnet server running on the following ip address so let's try connecting to it ok right and off it goes and rather than giving your password prompt and asking me what i'd like to do instead it serve",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " of traffic actual packets leaving machine my machine first of all when you call get address info because it's going to convert say a host name to an ip address and of course we'll see packets leaving when we call connect handshake is required between tcp client and server and so the moment you could connect ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "omplicated beast it's quite long but it itself doesn't because it calls many other calls including doing their dns look up to convert host name to an ip address it actually has a special way of returning errors rather than returning something with errno it actually returns a non zero value and then if we want",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "way there is an inet any which means so if any which means i'll take ip for ip six i just want to serve i don't care about the exact mechanism of the ip addresses but today in this problem we care about dinette four so let's use that and the socket type well i want stream based so let's specify are correct so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "lts here so we will call this one two that's not very large still like this get address what so what do we need to hear well first of all we need the ip address i can specify that a string either as an actual string like this or i can specify it as a host name so for example like illinois dot edu ok if i do t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "llinois dot edu ok if i do this then there's probably going to be a packet leaving my machine in the next moment to say hey we need to figure out the ip address of this host name can you help me please right and then we need a port number so the port can actually be specified symbolically so i can say well i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "s low level c structure that we are getting information about the socket embeds it's information using the network representation of port numbers and ip addresses and all that good stuff so we can't just simply print out the port number like we're attempting to do here the bits that are inside this field of t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "his low level c structure that we are getting information about the socket beds it's information using the network representation of port numbers and ip addresses and all that good stuff so we can't just simply print out the port number like we're attempting to do here the bits that are inside this field of t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4032b6db-39d8-4d61-bef9-218a42c0a7e4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ok sir let's compile it and let me go and then let's just run it so you'll see it it's printed out its ip address and we know it's listening on port one two three four ok so let's try connecting to that ok so i need a web browser here so i need to go to http key ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ode ok so will still the top ok right ok jump down a bit ok right so some code you're very welcome to use this to actually kind of print out your own ip address but i don't care about that today what do you want to show you is some things we have to do inside a good web server even a simple one here so for st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "see the end of the headers of the request ok so here comes my main method where i'm going to set up my signal handler straightaway will print out the ip address and we actually want to serve up this meme image as well so how could i figure out how many bytes well i could use stat but remember there's another ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "d like to make a connection with you and here's my tcp packet and i'm going to set the synchronization bit here's my synchronization number here's my ip address up here inside the ip part of the header here's my port number that i'm coming from here's the port number that i want to connect to please to meet y",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ons of machines i can make those requests from those millions of machines look like bona fide traffic i can make it look like real requests from real ip addresses that actually request your homepage for example or request your login page or attempt to log in for real so now it's much harder for a company soph",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "find a millions of these devices or even billions of these devices soon so now i can create very large attacks from a very large swaths of the entire ip address and then send all those packets to a single enterprise in attempt to kind of take it down and possibly extort some service or extort money forward fr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578b472b-d7f9-455d-b241-95da7faa4f77",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "one point one gave us is the ability to have virtual hosts with https as well so that i could actually now have a web hosting business where the same ip address and the same server listing on the ip address could be pretend to be multiple things so for example maybe i could serve the web pages for chocolate d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578b472b-d7f9-455d-b241-95da7faa4f77",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "irtual hosts with https as well so that i could actually now have a web hosting business where the same ip address and the same server listing on the ip address could be pretend to be multiple things so for example maybe i could serve the web pages for chocolate dot edu or document dot com and start selling f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578b472b-d7f9-455d-b241-95da7faa4f77",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ve another website that says sells go carts so i guess i'm listening all kind of my favorite things at this point and the same web server on the same ip address can pretend to be these different servers so as part of the http request you could now send a header the says please respond as if your host name is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a37986ec-bb69-4841-90b8-6c7f50b431f0",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "er over many decades alright so that's enough for this video except for one little last question we saw the tcp header and here it is but where's the ip address what happened to that we've only got the port information why is the ip address missing here so to answer that realize that we've actually to see rea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a37986ec-bb69-4841-90b8-6c7f50b431f0",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "le last question we saw the tcp header and here it is but where's the ip address what happened to that we've only got the port information why is the ip address missing here so to answer that realize that we've actually to see real packets we've actually got two protocols wrapped up as one that this is the tc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a37986ec-bb69-4841-90b8-6c7f50b431f0",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ually to see real packets we've actually got two protocols wrapped up as one that this is the tcp header but on a real packet we're going to have the ip address in front of it so we actually have protocols wrapped up inside other protocols a real packet would have ip information so for example if it's ip for ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b9161da0-95b9-41ea-9071-0d954a849a97",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " data ok so they asked about charges into the base an on earth side we run the following code right we make a socket we connect on that socket to the ip address of a lunar base and we write the following command and send thirteen bytes right so we could use our understanding the tcp protocol to it to work thi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "hat dns is based on udp so that let's say that i type into my web browser hey i want to load say a page from bbc dot com we need to turn that into an ip address maybe like before ip six address and that's where domain the domain name system comes in we need an authorative way to say ok in order to actually ta",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ess and that's where domain the domain name system comes in we need an authorative way to say ok in order to actually talk to this server there is an ip address somewhere and that mapping is part of the domain name system so when you type that type that in the second thing that your machine does in order to a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "econd exciting part of this is that it might succeed in that sense that it could be that more than one server reacts to this and says yes i've got an ip address for you and the way that dns works is to say whoever gives me the fastest answer wins so if you were malicious coffee shop of if you've had to work f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "rk for government agency you can do some exciting things now you can say oh you want to bbc dot com i'm going to give you an answer to that here's an ip address largely bloody bloody blah there we go and you control then that ip address meaning that the server will now decide to go over to that ip address and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "you want to bbc dot com i'm going to give you an answer to that here's an ip address largely bloody bloody blah there we go and you control then that ip address meaning that the server will now decide to go over to that ip address and display contents from that machine rather than the real bbc dot com right s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " an ip address largely bloody bloody blah there we go and you control then that ip address meaning that the server will now decide to go over to that ip address and display contents from that machine rather than the real bbc dot com right so that sounds pretty scary does this happen yes absolutely it's been u",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "f i attempt to go to my machine wants to divide to get to this machine to this host name in fact it's not going to be get is not going to get a valid ip address so this is kind of fun of perhaps you've got friend exams coming up and you decide you want to be more productive great let me show you how so we can",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "suck it d gram and then rather than calling connect we just immediately going to call send to and say ok here's my message i want to send here is the ip address that i want to send it to right so our client however can also wait for packets to arrive so we could wait for the result before printing something o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "demo so on my local machine here i can call this little send two thing and i'm going to send a message to a remote lennox machine ok so so what is my ip address over here right well i better run it first of all ok so let's let's run i received from ok and when we need a ton used port address let's go for seve",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " great we send a little datagram with six bytes the actual datagram that gets sent of course is a little larger because we've got the overhead of the ip address in the front of it and then we wait for a response and here it is now you and i know that all my little server group the other end is just flipping t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "r or possible socket address then there's this type dissipate type here right now it is possible to if you truly only want to send data to one to one ip address and one port so called end point then it is possible to use connect with datagram connections however it is still the case that udp is what's known a",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "so we're going to try to connect to that how does that work ok great now you have an opportunity to talk about dns we're going to turn that into some ip addresses by doing dns what is dns development done name name system how does that work ok so now you can talk about the fact that maybe you've got an entry ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "t if not we have to make an external request and dns simple dns today just uses udp packets so we send it out saying hey neighbors i'm looking for an ip address associated with this host name and whoever can tell me the answer the fastest wins that's what happens today tomorrow hopefully we're going to have m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "over https so that it's more difficult to forge and not possible for internet providers to sniff all of your dns traffic ok so finally we get back an ip address great so now we can try to make some different sockets like its ip six sockets so ip four sockets and then start making tcp connections to our web se",
        "label": "Use"
      }
    ]
  },
  {
    "text": "heap memory",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "b0c92d50-f05e-4513-bf48-995a2b995850",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "g similar whatever magic is pointing to that's where we're going to make our change so we know we just changed it we know that's actually going to be heap memory so into that heap memory we're going to ask a straight copy to copy the following following so in two three four five six seven do we have any charac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b0c92d50-f05e-4513-bf48-995a2b995850",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "is pointing to that's where we're going to make our change so we know we just changed it we know that's actually going to be heap memory so into that heap memory we're going to ask a straight copy to copy the following following so in two three four five six seven do we have any characters that let's see one t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "689b84d6-86d5-4519-8312-97bd8c8fecd0",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "t the size. and we also need to get some memory that is going to outlive the lifetime of my function. and of that, of course we're going to need some heap memory. ok, so let's have a go at that. the last thing i notice is that this looks a bit suspicious to me. are these the right way around? turns out they're",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c8a95218-1f53-4559-b5f5-32b9385d7f90",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "hi, so if you want to allocate some heap memory, how can we do it in c? hopefully you already know the answer to this one. if i want a certain number of bytes, i'm going to call malloc. and yes, we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f7acd66f-6e2d-4d16-ad5b-83adf8627df9",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "be read only memory. i better actually get myself some memory that i can change. how can i do that? well i got a couple of options. i could have some heap memory. so here we go, let's have a hundred and twenty three bytes here. let me initialize the first bytes to some characters. or maybe i actually want to h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "lly greater range of values than just normal c int type right so how does get light work is actually going to put the data that it reads are into the heap memory and for performance reasons each time you call get line it will pull in a new line of data and store it and overwrite the original area in memory in ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "o the heap and say hey heap i need some more memory for another line instead could be a lot more quicker to run if we can actually just overwrite the heap memory that we already requested in the case however that the line we're going to read is much longer than before then oh we have a problem we don't have en",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "367502e6-86bd-4b7c-8b0f-a6d09829fe75",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " running from disk instead we are saying hey colonel look at my current process give me a complete copy of it that's right the whole stack all of the heap memory all of the process all of the constants that we have inside memory we're going to copy all of that into a completely new independent process the new ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "367502e6-86bd-4b7c-8b0f-a6d09829fe75",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "ny arguments that this function has rights so we have main and we have a little stack variable inside it here's my variable say ten i could make some heap memory as well by calling malloc had some global variables as well etc but that's just enough for today right now it's time to clone my process so i'm going",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "42ebcdb6-a366-49f4-b95a-a0614c5ac1ce",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "e assert to check that each of these values is a non zero ok so our next piece of code was to check to see if we don't actually have a valid piece of heap memory to use so i'm going to follow the pointers were given because remember our point is actually pointing back to the stack variables used by the caller ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "42ebcdb6-a366-49f4-b95a-a0614c5ac1ce",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "s actually ok it was compiled with optical useful what we wanted is a variable here let's just call it line which is going to hold the address of the heap memory and rather than just passing into it that whatever value happened to be inside that variable we actually wanted to know the address of that variable ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "that why is that incorrect ok well hopefully with a little bit of thought you would have realized that are very variable inside here doesn't point to heap memory is actually pointing to that little variable that is on the outside that that is actually going to hold the result so that's not what we need we actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "'s not what we need we actually need to use that pointer there we go and actually follow it so if that is like looking at all then we know we have no heap memory to actually hold the result so we might wait that if we do actually end up calling malloc then i actually want to change that variable so again same ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "ase of men heap queso dereference that little variable ok we're going to do that first after dereferencing it now great we've actually looking at the heap memory and that is where i can now start writing things in so let me now treat that as a way of bites and i can use my bites rate k lights red to make sure ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "enemy code you can get way there we go we've got one last thing to do which is we need to take my i line pointer dereferences with now looking at the heap memory and then put a null byte at the end to ensure that what we return is a proper terminated c string so let me go bites weird and you would say sure ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7a7590a3-2294-4d27-89ff-d625512f82e5",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "y that line is pointing to so we never explicitly called malloc but you know that get line does called malac internally so great we're filling up the heap memory and were being good citizens and releasing the open file stream that we created earlier alright good so what's missing i'll give you a hint there's t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7dd4705a-6995-4f39-a32c-12a1174bd04e",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "ld process and these two processes look very similar to one another they have the same variable setup they have they have some stack memory they have heap memory they have all of the program code but there is one little difference one easy way to tell whether you are in the parent on the child and the answer t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " want to read or write to later right now i'm not going to declare a type ok so let's return something there and will return say this is the piece of heap memory that may be allocated or the memory that you gave us that is there so the code is written assumes that if we are given valid piece of memory that is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d310b36e-5c21-4803-b0c6-78d62b73b532",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "de a program on disk to load and that's the moment we give our poor little process ahead temp head transplant we've completely thrown away all of the heap memory order the stack no need to do free or all that memory has disappeared to be replaced by a brand new program it's the same process and will have the s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1eae9ffe-aa3f-41af-bb4f-a63743eb80a6",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "le program now we'd have to store the data on the number items in in a data structure we've now got away to read in values and to efficiently use our heap memory ok the last thing we didn't do is too if you want to write production quality code let's see if we add up failed so i would have another pointer in h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ich would point to my next entry so we won't decide where to put these yet so let's just kind of keep this conceptually as a separate from the actual heap memory that the user sees an that will have another piece of memory that the user is using or not etc etc so great using little next point is going to build",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "vailable to satisfy the request for the so many bytes that we need if that fails then we'll go back to the system and say timetable be some some more heap memory please and for that will use sbrk so will only happen in our plan b we going to go there if we cannot find useful piece of space to be allocated earl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "t instead inside our struct we've got a pointer so let's use that let's return the value of pointers that will tell the caller exactly which piece of heap memory they can use so that's all of accounting that we're going to need for first part of malloc alright so let's go back to this line of code here and let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ill actually evaluate this to be say that twenty four bytes or thirty bytes however big are little structures and then we're changing the size of our heap memory here by calling s brick and that is going to increment a high watermark serve this is the amount of heat member we've got so far in our hip we've jus",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "oach what we need to realize is that if we put in the metadata directly inside the heap as well then the following is always true that if this is the heap memory that the user is going to see then geass before to the different colour there we go just just before the address that the user sees there is always g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "43f3b072-76f4-44af-91de-41fdc64695b5",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "hi ok so a couple of quick questions for you so can threads access heap memory i think the answer right now you should know is yes they can so we're actually passing in some heap memory in our our previous code right so we said ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "43f3b072-76f4-44af-91de-41fdc64695b5",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ck questions for you so can threads access heap memory i think the answer right now you should know is yes they can so we're actually passing in some heap memory in our our previous code right so we said ok let's start or run method and you can see it's got the right signature to be given to p thread<br> creat",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "43f3b072-76f4-44af-91de-41fdc64695b5",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ll we malloc'd<br> that memory and then later when we called our runners we were passing in a pointer to that memory so yes of course they can access heap memory and you could even create that heap memory on a different thread there's nothing special about the main thread other than the fact that if it returns",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "43f3b072-76f4-44af-91de-41fdc64695b5",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "er when we called our runners we were passing in a pointer to that memory so yes of course they can access heap memory and you could even create that heap memory on a different thread there's nothing special about the main thread other than the fact that if it returns then we exit the whole process so keep it ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d20bd8cb-7714-4093-a0bd-850b11d62c39",
        "lecture": "CS",
        "lecture_num": 12,
        "context": " that's going to sign my thread that's going to run the display and that's going to run the function called display and as an argument will pass that heap memory and then i've got all of my runners which actually cause the rain on my display so they're going to run a little function called run and again i pass",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d20bd8cb-7714-4093-a0bd-850b11d62c39",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "le will remember we're not actually going to that particular variable we actually passing its value what is this value is a pointer is looking at the heap memory that we we allocated here ok so yes we are using a heap stack variable here but that's fine because actually what gets passed is the address of of he",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d20bd8cb-7714-4093-a0bd-850b11d62c39",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ry that we we allocated here ok so yes we are using a heap stack variable here but that's fine because actually what gets passed is the address of of heap memory of the mileage memory ok so anyway back to this we're going to create all of those threads we remember the thread i ds then we're going to call p fed",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d20bd8cb-7714-4093-a0bd-850b11d62c39",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "second delay and then around we go again so that's my display loop as you can see it doesn't actually do any calculation it simply takes what's in my heap memory and displays it and send it out to spell it out his stand up my file descriptor one ok right and then what about my my rain effect while here's here'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "this malloc and the fact that i've got i've got a stack variable here i mean isn't it possible that both threads might end up using the same piece of heap memory so can you see why that's not true why is it that both threads will always end up with their own heat memory why isn't it say that they don't end up ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "here which we never free so i that is appointed to some global memory or like a static variable or this is generating billions of millions of bits of heap memory that we never free so let's go see look at it implementation ok so we go right so here is our implementation of two text message and you'll notice th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ok so none of those work what else could we try well we could change your text message to actually return some memory so i could say get me some some heap memory so i could say ok my love me some memory here that would work we now have to update the rest of our program to make sure we free that memory the down",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a339955c-d52d-4f69-9c8a-c4e9d4cf038f",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "g for brevity him so once that completes i now know how many files are going to load from this file so great put aside some memory so let me get some heap memory hey calloc give me and then how much memory do i need well i'm going to read number of points and the size of each point is the size of my struct her",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "e we going to pass a pointer to an existing struct and then here's where we pass in a variable a - pointer to a pointer and it's going to create some heap memory for us with the results so that's what we need to get to let's think about how we can set up this hints object what does that look like okay so here'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d51e1b38-6c01-4584-9e0b-69d42464cfa6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "uest from the user of to what particular resource they want that's great but i better make sure that this string that construct is no bigger than the heap memory that i required perhaps i just want to be lazy and say hey predict can't you just get some heap memory automatically for me and that is the purpose o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d51e1b38-6c01-4584-9e0b-69d42464cfa6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "is string that construct is no bigger than the heap memory that i required perhaps i just want to be lazy and say hey predict can't you just get some heap memory automatically for me and that is the purpose of a s printf which will automatically reserve some memory on the heap and return a pointer that ok so w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ess and we are not going to give it any memory to write the result into so real path internally is actually going to call malloc is going to get some heap memory for the result which is why at the very end we are going to free it so you'll notice i put a little bit of logic in here to see whether it actually w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "st from the user of to what particular resource they want that's great but i better make sure that this string that i construct is no bigger than the heap memory that i required perhaps i just want to be lazy and say hey sprintf can't you just get some heap memory automatically for me and that is the purpose o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " string that i construct is no bigger than the heap memory that i required perhaps i just want to be lazy and say hey sprintf can't you just get some heap memory automatically for me and that is the purpose of asprintf which will automatically reserve some memory on the heap and return a pointer that ok so we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "t where we are by calling f tell and then go back to the beginning so by doing that great i'm now going to read all the bytes but also i can get some heap memory as well so if taylors told me how big my picture is and i can read all of those bytes in one go just by calling fread hey if read this is the number ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "exclusive access",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "0f70d1df-7a51-4bea-9a39-589fd7c57802",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "cal section what we need to do then is to block any other threads that want to do a similar operation we want to somehow say right i want to give you exclusive access to this right now so the only you this comment thread is executing in this code gets too gets to modify this data structure anybody else that wants t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "849095e8-a9e5-4467-8af4-be36e4991af6",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "cal section what we need to do then is to block any other threads that want to do a similar operation we want to somehow say right i want to give you exclusive access to this right now so the only you this comment thread is executing in this code gets too gets to modify this data structure anybody else that wants t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b60fb3d4-0600-4074-8432-449ea0067907",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "cal section what we need to do then is to block any other threads that want to do a similar operation we want to somehow say right i want to give you exclusive access to this right now so the only you this comment thread is executing in this code gets too gets to modify this data structure anybody else that wants t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "the order in which processes or obtain these locks and there's a possible order maybe that will lead to deadlock ok so ok and will of course when the exclusive access so our process once it gets exclusive access to a resource then and then it will then it will continue ok so i went to process wait for resources wil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "locks and there's a possible order maybe that will lead to deadlock ok so ok and will of course when the exclusive access so our process once it gets exclusive access to a resource then and then it will then it will continue ok so i went to process wait for resources will quite an exclusive lock called resource as ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ve got different resources down here here's my resource of type a b and c ok so you might imagine for example these are pieces of hardware maybe it's exclusive access to the screen i want to go and put my computer into a kind of full screen mode so only i can actually kind of right to the screen or maybe it's a pie",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "and put my computer into a kind of full screen mode so only i can actually kind of right to the screen or maybe it's a piece of hardware maybe i want exclusive access to the firmware or to storage device or maybe it's a database table and i now need to make sure that only i can access it or maybe it's some data str",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ess one and that also shows is that this resource is being held by process one so it obtains that resource but it's not done yet is also going to get exclusive access to be as well ok so how might this be implemented well for example mutex lock ok so we've now got acquired two mythics locks ok so right we done no s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " wanting to touch be but no it's stuck on the outside looking at this box can i really want this but i'm being forced to wait because process one has exclusive access ok so that's the beginnings of a resource allocation graph or rag right and you can see the process to cannot continue right now it doesn't have ever",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "know in advance the maximum number of requests for each resource type then i can ensure that the sequence of that we allow our process is to be given exclusive access to our resource types we can ensure that will never going to have an overdraft and we can never therefore go into a deadlock alright so this is an ex",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "gh this state of spaces where the actual walk depends upon the sequence in which my process one or processed to acquire the mutex locks or some other exclusive access to some other resource ok so look at this my process one is acquired its first mutex lock and then switch to support the state two and so on and so o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " or resources so another was given some kind of simple mapping to integers here so on and so on and so on and so on and if you acquire something when exclusive access if we always agree to acquire them in small integer to large integer order then deadlock is impossible right to see why i'm going to sketch this out ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1eb0f7e3-89d3-453d-bfbc-accad12de44e",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "set of resources inside here so why then just one i might have to say two or three resources type type b or c maybe see can be say rahman i want some exclusive access to my random access memory and so this might be say eight megabytes in here so instead of just like access or no access i would start to then it woul",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "214ce85d-efea-4e30-9831-390614fc2683",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "r in which you're acquiring resources and it doesn't even need to be on a single machine if you've got the storyline of the resources that you needed exclusive access to actually understand and debug and why your system kind of ground to a halt so synchronization wonderful thing we need it in order to make our data",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b7f1de1e-a1ea-4bb5-9459-de401bd7f1ab",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "st of all we need some kind of mutual execution mutual exclusion requirements so mutual or exclusion or often this is written as we need some kind of exclusive access to some kind of resource so if we can just completely share resources then there won't be any delay there won't be any need to wait for anything so t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b7f1de1e-a1ea-4bb5-9459-de401bd7f1ab",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ly share resources then there won't be any delay there won't be any need to wait for anything so the some need to have somebody to wait for something exclusive access ok so mutual solution is our first one the second is i need a circular wait condition ok so we're going to look at this one in more detail in a littl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b7f1de1e-a1ea-4bb5-9459-de401bd7f1ab",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ueens and because we're holding onto our resources were not going to share them now we've got that look so the holden weight is the idea that you get exclusive access to the resource and daniel prepare to wait for other things you're not going to put it the app once you grabbed it you've got it ok so this is our th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b7f1de1e-a1ea-4bb5-9459-de401bd7f1ab",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "r ones going to let go and so both of them are unhappy both of them have reached a stalemate they've got deadlock and they want to share so they have exclusive access to these two resources resources so if they were prepared to share that wouldn't be a problem right so that's our conditions you can read the course ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "the order in which processes or obtain these locks and there's a possible order maybe that will lead to deadlock ok so ok and will of course when the exclusive access so our process once it gets exclusive access to a resource then and then it will then it will continue ok so i went to process wait for resources wil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "locks and there's a possible order maybe that will lead to deadlock ok so ok and will of course when the exclusive access so our process once it gets exclusive access to a resource then and then it will then it will continue ok so i went to process wait for resources will quite an exclusive lock called resource as ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ve got different resources down here here's my resource of type a b and c ok so you might imagine for example these are pieces of hardware maybe it's exclusive access to the screen i want to go and put my computer into a kind of full screen mode so only i can actually kind of right to the screen or maybe it's a pie",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "and put my computer into a kind of full screen mode so only i can actually kind of right to the screen or maybe it's a piece of hardware maybe i want exclusive access to the firmware or to storage device or maybe it's a database table and i now need to make sure that only i can access it or maybe it's some data str",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ess one and that also shows is that this resource is being held by process one so it obtains that resource but it's not done yet is also going to get exclusive access to be as well ok so how might this be implemented well for example mutex lock ok so we've now got acquired two mythics locks ok so right we done no s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " wanting to touch be but no it's stuck on the outside looking at this box can i really want this but i'm being forced to wait because process one has exclusive access ok so that's the beginnings of a resource allocation graph or rag right and you can see the process to cannot continue right now it doesn't have ever",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "know in advance the maximum number of requests for each resource type then i can ensure that the sequence of that we allow our process is to be given exclusive access to our resource types we can ensure that will never going to have an overdraft and we can never therefore go into a deadlock alright so this is an ex",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "gh this state of spaces where the actual walk depends upon the sequence in which my process one or processed to acquire the mutex locks or some other exclusive access to some other resource ok so look at this my process one is acquired its first mutex lock and then switch to support the state two and so on and so o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " resources so another was given some kind of simple mapping to integers here ok so on and so on and so on and so on and if you acquire something when exclusive access if we always agree to acquire them in small integer to large integer order then deadlock is impossible right to see why i'm going to sketch this out ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1440787d-bb97-4558-b85b-8aa384d86ede",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "e that to know preemption right and the last one at least one resource must be held in a non shareable mode ok so do you know what this is so this is exclusive access to the resource if we could all just share those pieces of papers and crayons weird get along fine but it's the exclusive access requirement that ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1440787d-bb97-4558-b85b-8aa384d86ede",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t this is so this is exclusive access to the resource if we could all just share those pieces of papers and crayons weird get along fine but it's the exclusive access requirement that ok leads into a deadlock right so those are four or four conditions hopefully all four of them makes sense because in the next video",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34a28852-0928-4275-9d51-ae6393b84ed4",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "gs we put down the piece of paper and the pens etc and try to play again so this is an example of livelock and notices not deadlock we don't maintain exclusive access we don't have hold and wait but there is no progress we just burning up cpu time but we're not actually doing anything useful ok so sometimes we'll s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "60132500-ca65-443c-a48b-78c3732e652a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ect let's have a look see what it does first of all philosopher waist to pick up the fork on the left ok so that's only going to proceed once you get exclusive access to that particular fork alright and then it's going to change this local variable failed to based on on what happens when it tries to pick up the the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ect let's have a look see what it does first of all philosopher waist to pick up the fork on the left ok so that's only going to proceed once you get exclusive access to that particular fork alright and then it's going to change this local variable failed to based on on what happens when it tries to pick up the the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "714fd6aa-ef81-4bbb-bc38-fac32ba091c6",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t's see if we can think of some amusing ways that we could achieve this right so let's go through these so for example suppose they agree to not have exclusive access so they don't need mutual exclusion right so so exclusive access we don't need that right so what would our gardening look like if we don't have excl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "714fd6aa-ef81-4bbb-bc38-fac32ba091c6",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "e this right so let's go through these so for example suppose they agree to not have exclusive access so they don't need mutual exclusion right so so exclusive access we don't need that right so what would our gardening look like if we don't have exclusive access well now my gardeners are going to be happy to both ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "714fd6aa-ef81-4bbb-bc38-fac32ba091c6",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "cess so they don't need mutual exclusion right so so exclusive access we don't need that right so what would our gardening look like if we don't have exclusive access well now my gardeners are going to be happy to both hold onto a shovel no you take a shower that i'll take that now they're not going to be stuck in ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "84be7473-dcd6-496d-9ec9-c463acb081d2",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "e that to know preemption right and the last one at least one resource must be held in a non shareable mode ok so do you know what this is so this is exclusive access to the resource if we could all just share those pieces of papers and crayons weird get along fine but it's the exclusive access requirement that ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "84be7473-dcd6-496d-9ec9-c463acb081d2",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t this is so this is exclusive access to the resource if we could all just share those pieces of papers and crayons weird get along fine but it's the exclusive access requirement that ok leads into a deadlock right so those are four or four conditions hopefully all four of them makes sense because in the next video",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8f1b71ff-82be-442b-835a-49c8714f9776",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "e that to know preemption right and the last one at least one resource must be held in a non shareable mode ok so do you know what this is so this is exclusive access to the resource if we could all just share those pieces of papers and crayons weird get along fine but it's the exclusive access requirement that ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8f1b71ff-82be-442b-835a-49c8714f9776",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t this is so this is exclusive access to the resource if we could all just share those pieces of papers and crayons weird get along fine but it's the exclusive access requirement that ok leads into a deadlock right so those are four or four conditions hopefully all four of them makes sense because in the next video",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c62f6568-fa2b-4be3-9e27-5e119359489e",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "e that to know preemption right and the last one at least one resource must be held in a non shareable mode ok so do you know what this is so this is exclusive access to the resource if we could all just share those pieces of papers and crayons weird get along fine but it's the exclusive access requirement that ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c62f6568-fa2b-4be3-9e27-5e119359489e",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "t this is so this is exclusive access to the resource if we could all just share those pieces of papers and crayons weird get along fine but it's the exclusive access requirement that ok leads into a deadlock right so those are four or four conditions hopefully all four of them makes sense because in the next video",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ect let's have a look see what it does first of all philosopher waist to pick up the fork on the left ok so that's only going to proceed once you get exclusive access to that particular fork alright and then it's going to change this local variable failed to based on on what happens when it tries to pick up the the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8cd1533-dec2-4250-9e5f-bc34e9a3181a",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ect let's have a look see what it does first of all philosopher waist to pick up the fork on the left ok so that's only going to proceed once you get exclusive access to that particular fork alright and then it's going to change this local variable failed to based on on what happens when it tries to pick up the the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "e you can invent a similar ideas but often if you got pointers just use the pointer value as as a way to order the items that you need to acquire for exclusive access right in the next video we can start talking about how we can actually implement virtual memory so by understanding how virtual memory works uh we ca",
        "label": "Use"
      }
    ]
  },
  {
    "text": "file systems",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "1be96113-98ce-4816-86a2-55d1f7e9357e",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ea because we don't want one process using up all of the kernel resources will sign off here because now we're going to start talking about files and file systems and how to represent files on a disk right bye for now",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "oesn't have eddie access the tool so that's the simplest kind of access control that we might have there are more complicated versions today in other file systems what else could we have well in addition to the actual contents we've probably care about its eyes are some interesting meta information cape we migh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "g a whole load of things that we might want to store about the file but i want to kind of simplify it back down to linux does and what we see in most file systems ok right so let's choose a new colour let's let's go for this yellow here right so first of all the we can we can keep some of this meta information ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "resent that once on the disk ok wait what else would you like ok so far we've been thinking about features what about performance case so we like our file systems to be nice and fast we wanted to have a good performance when it's empty and asbestos performance as possible when it's getting near fall as well so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ecomes sensitive information ok right so that was a pretty good listen i hope you get to see why actually implementing a file system is hard and many file systems today are surprisingly old it's actually some of the oldest code you'll find inside the kernel why because writing code without bugs to satisfy all o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ures if tomorrow you decided to have a new startup to make a new file system will return to this little game in the future when we look at some newer file systems like zfs and also btrfs and what else we got ok so another nonlinear systems you'll find xfs as well where where these newer fire systems actually su",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "emainder will be used for all of the data that i want to store so that's my initial very simple model it's not very accurate in the sense that modern file systems allow me to have more than one area of memory set aside for on it but it's a good representation of how we started with early file systems ok so make",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hat modern file systems allow me to have more than one area of memory set aside for on it but it's a good representation of how we started with early file systems ok so make that choice when you when you first formatted an will store that your choice inside the super block let's hope you don't under estimate ab",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "68eae3bc-b156-461c-8392-ea61a730464c",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ea because we don't want one process using up all of the carnal resources will sign off here because now we're going to start talking about files and file systems and how to represent files on a disk right bye for now",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "se doesn't have any access at all so that's the simplest kind of access control that we might have there are more complicated versions today in other file systems what else could we have well in addition to the actual contents we've probably care about its size or some interesting meta information cape we might",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hole load of things that we might want to store about the file but i want to kind of simplify it back down to what linux does and what we see in most file systems ok right so let's choose a new colour let's let's go for this yellow here right so first of all the we can we can keep some of this meta information ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "emainder will be used for all of the data that i want to store so that's my initial very simple model it's not very accurate in the sense that modern file systems allow me to have more than one area of memory set aside for on it but it's a good representation of how we started with early file systems ok so make",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hat modern file systems allow me to have more than one area of memory set aside for on it but it's a good representation of how we started with early file systems ok so make that choice when you when you first formatted an we'll store that your choice inside the super block let's hope you don't under estimate a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hat represent that once on the disk ok what else would you like ok so far we've been thinking about features what about performance ok so we like our file systems to be nice and fast we wanted to have a good performance when it's empty and as best performance as possible when it's getting near full as well so w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ecomes sensitive information ok right so that was a pretty good listen i hope you get to see why actually implementing a file system is hard and many file systems today are surprisingly old it's actually some of the oldest code you'll find inside the kernel why because writing code without bugs to satisfy all o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "res if tomorrow you decided to have a new startup to make a new file system we'll return to this little game in the future when we look at some newer file systems like zfs and also btrfs and what else we got ok so another nonlinux systems you'll find xfs as well where where these newer filesystems actually supp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ittle gotchas there and don't be surprised in the marketing materials if they really if we get to be accurate right so let's kind of go back onto our file systems now here's a useful little command get cwd noticed that's right it tells us the process is current working directory which is going to be useful if w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " ourselves data loss in these kind of difficult corner cases so kind of hope you like that little kind of little confirmed case study of why creating file systems that are performed and secure is difficult the last thing i will mention is here's another when we started this section when we just brainstormed a l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "would like ok let's have a look at a real list of features of a real modern filesystems and this is just kind of a high level feature list of two two file systems that you'll probably hear about one is zfs and this support things like raid what's raid ok will talk about raid in the future we actually want to be",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "able to work with different pools of files so we want to be able to have kind of enterprising features to make it easy to manage all of our different file systems so we had this idea of different storage pools so we've introduced abstraction layers between the physical disks and the actual kind of virtual disks",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "eal enterprise systems because realize that these features can start to bite you in the corner cases that we've just seen even with relatively simple file systems like e x two three n x t four if the corner cases that case for example where your disk is now full or suddenly you've got one disk going down and a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " to two today to los in these kind of difficult corner cases so kind of hope you like that little kind of little confirmed case study of why creating file systems that are performed and secure is difficult the last thing i will mention is here's another when we started this section when we just brainstormed a l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "would like ok let's have a look at a real list of features of a real modern filesystems and this is just kind of a high level feature list of two two file systems that you'll probably hear about one is zfs and this support things like raid what's raid ok will talk about raid in the future we actually want to be",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "able to work with different pools of files so we want to be able to have kind of enterprising features to make it easy to manage all of our different file systems so we had this idea of different storage pools so we've introduced abstraction layers between the physical disks and the actual kind of virtual disks",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "eal enterprise systems because realize that these features can start to bite you in the corner cases that we've just seen even with relatively simple file systems like e x two three n x t four if the corner cases that case for example where your disk is now full or suddenly you've got one disk going down and a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " way that something might be stored on disk isn't necessarily that accurate or it might be more than more accurate than that for example some windows file systems are only accurate to within two seconds ok but now let's see what we've got we've got when it was last accessed when it was last modified and to fina",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ittle gotchas there and don't be surprised in the marketing materials if they really if we get to be accurate right so let's kind of go back onto our file systems now here's a useful little command get cwd noticed that's right it tells us the process is current working directory which is going to be useful if w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " way that something might be stored on disk isn't necessarily that accurate or it might be more than more accurate than that for example some windows file systems are only accurate to within two seconds ok but now let's see what we've got we've got when it was last accessed when it was last modified and to fina",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a04b015e-498e-4c02-9326-bd1715c8f047",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "reat information so now we can build little tools for example we could build a little tool called ps which looks at proc and maybe some other virtual file systems in order to tell us more about what the system is doing or for example we could look at the current set of users which and what are they doing where ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a04b015e-498e-4c02-9326-bd1715c8f047",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "example we could look at the current set of users which and what are they doing where they're going where they come from all again from these virtual file systems ok so all great stuff and we'll talk more about that in a future lecture but before that for now that's it for this letter bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b94d1f92-8ee2-461c-ae2e-934cfdcfd6cb",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ody write into this disk because we need lots of space but people only need this big space for a temporary amount of time so we'll have a part of our file systems say called slash temp where both you and i and others can unpack things maybe compile things etc so this directory itself needs to be world writable ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "is just a single slash here and beneath that that's where we're going to find just everything so we need a way to be able to say you know i want some file systems for my local machine perhaps i got some remote filesystems and i've got some file systems which don't even physically exist as well so how can we do ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ing so we need a way to be able to say you know i want some file systems for my local machine perhaps i got some remote filesystems and i've got some file systems which don't even physically exist as well so how can we do this well the idea is that we can actually set up what are called mount points so for exam",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "r actually made a real copy of those files we were just pretending that pretended we did whereas in fact they are stored in memory but how about some file systems which actually don't exist how about some virtual file systems ok so this is really fun stuff any moment of course we've got the kernel running and i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ing that pretended we did whereas in fact they are stored in memory but how about some file systems which actually don't exist how about some virtual file systems ok so this is really fun stuff any moment of course we've got the kernel running and i wonder how it's doing i wonder what it's doing how can i find ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dbf720c2-82de-433d-a735-d7968905688e",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "'s doing with each process and wouldn't it be great if i could somehow talk to it and that is how we use virtual filesystems so think about all these file systems we've just defined for example when you say something like ok list all the files inside a certain directory for example tell me all the files inside ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "p talking about how we can mount and unmount an entire file system so the reason it's called mounting and unmounting is for harks back to a time when file systems were big and heavy they might be contained on their very large drum there might be a large piece of magnetic tape that we actually had to put onto a ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "rts up it's actually gonna look for filesystems does described in this side is special file etc/fstab so that can describe a whole load of additional file systems like there might be a file system just for the users there might be a remote file system that is mounted on a network drive somewhere we can describe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ing at our regular file system we will go and look inside this file so the idea then is that your file system then becomes a large hierarchy of other file systems ok so the root of it all we've got a single slash and then on lenox we've got things like e t c home user been var all of these places they themselve",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " all we've got a single slash and then on lenox we've got things like e t c home user been var all of these places they themselves could be different file systems or you could choose subdirectory within that so for example you might have home extras like that could be his own file system or you might have say s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "found this ok that's what we're going to use so now i can say right hello melt if i just say mount without any options it let's me all of the current file systems which have been mounted but let's not worry about that right now let's instead say right i want to use the folder option i need to loop back device h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bc05bdb0-371d-4cd3-97a6-753a576a32f2",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "alright so let's talk about rate right so the big idea is we want to make our file systems resilient gay right sir why don't i have there we go ok so let's have a bit of a back story here which is that raid was born in the time where moore ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfe8f684-5acd-41bf-8ba0-276a3fc52ffb",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "o today of course we barely see any cd roms around but we still use that format because it's sufficiently efficient to be able to distribute complete file systems for example to install some new game or earning complete new operating system right so we used mount in order to mount an ics file using a loop back ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec6fca4d-5cae-48dd-b541-e7bae7852408",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "hub where i can create image and then post it from other people posted for people to use secondly what doctor does is it has a special kind of set of file systems where i can use what's called an overlay technique meaning that i might start say with unbuntu image complete image of a working copy of emblem two a",
        "label": "Intro"
      }
    ]
  },
  {
    "text": "c code",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "491a80ef-eda8-4e66-a332-f2dd12cb7ebe",
        "lecture": "CS",
        "lecture_num": 2,
        "context": " argc and arg v right ok so how will i use my contains function well for example i want to be able to say result and then i'll call contains a lot of c code actually the style is to use underscore so let's do that and will say contains out and we expect if we call it with a test one that if we pass in a s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "527934a0-530d-4125-a5a8-2a5cf05dcd5d",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "e examples of common examples first of all what is the c preprocessor is that it is a text replacement tool that runs before we actually compile this c code and we can think of is very simple and fairly dump tool that only stands a few understand a few limited commands so one thing i can do is that it can",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b876ebf8-b1c2-4187-bfab-f4c2fa732965",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "ght so let's compile this gcc off we go and will run it ok and you'll see by default the assert actually doesn't really cool it actually is generated c code that knows the filename assert demo and the line number line six that's really really cool how did they manage to do that well the trick by the way i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6fa7868f-bbe1-47f6-bee8-22507dfcc8c8",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "right file which one are open file called my data dot csv do we have such a file no we have something called data dot csv so we can let's either fix rc code or change our files i'll use medidata to change the file i want to move data dot csv to my data dot csv ok so now let's run it ok and see how we went",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "aaed71d6-01a3-42f8-b99e-ca3a84253b58",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "onal information in them like the username so who is the current user and it's me angry of great how about we actually want to get access these from rc code as well ok so to do that we alright so from r c programming there's some couple of useful things one is if you just want to read it we can call get e",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "hi so let's review some ideas from c code first of all what do you think the size of char is\uff1f at this point you say oh now i know this ones easy the size of chart is defined to be one yes the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "how we talk about addressable memory and so that's kind of the fundamental unit of one item that we can read or write so that is defined to be one in c code and have a look at their supposing one someone said the following i've got x what is x it's a pointer to in it and we've initialized it to hold the f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d310b36e-5c21-4803-b0c6-78d62b73b532",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " imagine for a moment that say you're running gcc i'm running gcc inside those processes there was lots of pointers going on going about whether it's c code or c plus plus code those menu locations are actually scoped by virtual memory by that particular process so your idea of what's the address ten thou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0173c9a1-6ea6-40ab-b5d1-ccc145c2f251",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " i'm actually in section one of the manual so that's great if you're trying to do something from your shell not so great if it won't actually program c code ok so let's get out of that ok let's have a look at section two ok this is more like it so now you can see we need to process id and the signal that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4aa29e14-ce85-47a2-a685-4c0979a6c56b",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "nds time alright so my first challenge to you is what is the secret password that we need to enter so quickly read this code see if you can read this c code see if you can workout what each part is doing because you've only got four seconds to escape this little while loop to get the password right if you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "how to build a shell how to play with signals and how to review some system code so let's start with that here's our first little problem here's some c code and we wanted to see if we can spot any errors in this so let's go through this and see what we see if we can understand how it works what is trying ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " actually if you return from maine has the same effect as calling exit as well alright so we go around here ok now this is actually kind of common in c code which is just use zero and one for false at times so zero false one for true you could include static ball and use true if you wish ok so get line th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1f76e788-6515-470d-8411-5a70fc7d7edb",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ght be some spam space behind the current entry as well but we won't go into those details today we're not going to implement a full piece of working c code here instead we can think about conceptually about how these placement strategies work and for that to have a feel for what's going on we're going to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "305a1d6f-7dfb-4fe9-8271-64421be8f294",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ght be some spam space behind the current entry as well but we won't go into those details today we're not going to implement a full piece of working c code here instead we can think about conceptually about how these placement strategies work and for that to have a feel for what's going on we're going to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cadee54-ee1a-49c8-b696-1968feee37b3",
        "lecture": "CS",
        "lecture_num": 10,
        "context": " alright so we've got we've got this challenge was saying how she ran up to sixteen bytes here's our basic plan let's calculator size inside our malloc code ok to say this is the actual request that you're going to do so you want the size in bytes but here's what i'm going to do i'm going to add fifteen t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cadee54-ee1a-49c8-b696-1968feee37b3",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "gards to these sixteen byte boundaries so conceptually now i'm going to stop thinking about my my my memory in terms of bytes for the rest of my malloc code i want to think about it now as all of my distances and spaces are actually going to be conceptually sixteen bytes so now when i do any point arithme",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "633f10ed-2038-4da2-9855-c3cad245559f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ercent s and then his arg let's and let's k let's do rather than having a new line let's flushed and it out today just to prove that we can do normal c code there's nothing special different inside these threads compared to the main thread for an important idea is that all the threads great equality there",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "74e03522-c6e8-4e59-84ba-95a62ce5f3fd",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ful about where they were talking about what truly happens when we turn on all optimizations and what happens with our simple model of how we compile c code to running code with that we're going to skip into the next video where i talk now about more exciting example where actually going to start working ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d20bd8cb-7714-4093-a0bd-850b11d62c39",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ode that i'm going to run looks similar to that yeah i'm flipping some bits and we'll try different version of that in a moment ok and here is my magic code to get the width and the height you see i'm taking pointers to it to integers and then i update i right into those locations ok so back in my main me",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d20bd8cb-7714-4093-a0bd-850b11d62c39",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "t want very high frequency noise we don't want very low frequency noise and a guy called pearl in actually developed a noise function and wrote it in c code and that is now a very common source of noise for graphical effects so you look it up perlin noise or like i said it's the only a piece of code and i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f2346ed4-1e17-412e-91f1-e269250987e5",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "s or so so so yes don't do this if you're going to avoid it it's not safe so that was fun but don't be surprised to see this kind of ugly code in old c code and hopefully now understand why it might work in some systems and might fail miserably in others by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " right so first of all let's not confuse deadlock with dreadlocks ok both of those can get you into trouble on the high seas so but we are looking at c code today but just a simulation of process is requesting obtaining resources and releasing them ok so what do we got right ok so here's the here's the ga",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "41b0a81d-3653-466e-87dd-0eda65d6af2e",
        "lecture": "CS",
        "lecture_num": 20,
        "context": " and research some kind of classic solutions to this problem but in my next video i'm going to look at some attempt to actually solve this using some c code ok i'll see you then bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1950b119-9d1c-4760-aafa-f10604e9d6cd",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "work and the idea is that we've seen in this course in terms of concurrency in parallel vitalization and synchronization primitives they all apply to c code to python code and even to gpu design as well right so that's it for this video and that's the end of lecture bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "199ad3c7-e0c6-414e-8fa1-80276ca9fdcc",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " programs on this current directory ok all of these pipes special in the sense that we just using this pipe mechanism that we've just seen inside the c code and it means that cat at some point will block it will block trying to write data into this pipe which is useful we don't want to keep generating gig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "031c882d-0a19-4489-b1ef-d9328844d378",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "and if i wanted i could have a little website here as well so now let's do let's do our web client in c so here we go one of the same thing now from rc code ok so we need to make sure connecting to port eight thousand on localhost and i want to make sure i'm requesting the homepage ok so that looks pretty",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0cebe85c-2283-48d7-bb48-045052e80cae",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " if i wanted i could have a little website here as well so now let's do let's do our web client in c so here we go one of the same thing now from our c code ok so we need to make sure connecting to port eight thousand on localhost and i want to make sure i'm requesting the homepage ok so that looks pretty",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "22302903-5bcb-4262-bd2c-179cf2135ab9",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "the future but for now let's actually stop talking about conceptual stuff actually let's actually now make our own http so our own client inside some c code so let's actually start looking to see what network code looks like for real ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "38d669a5-394b-4826-bb65-0090a3444b01",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "uture but for now let's actually stop talking about conceptual stuff actually let's actually now make our own http--sorry, our own client inside some c code so let's actually start looking to see what network code looks like for real ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ok so here's the big idea to make tcp client i actually only need two calls i need a way to escape out of my c code and actually start talking to the network card and for that i need a socket so this is the thing that is going to give me a file descriptor and we ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "92db69f3-9bba-45d8-8f6d-84d8ae3c2b2e",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " if i wanted i could have a little website here as well so now let's do let's do our web client in c so here we go one of the same thing now from our c code ok so we need to make sure connecting to port eight thousand on localhost and i want to make sure i'm requesting the homepage ok so that looks pretty",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a60784ac-5129-4d35-8feb-23e8aa752f87",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "the future but for now let's actually stop talking about conceptual stuff actually let's actually now make our own http so our own client inside some c code so let's actually start looking to see what network code looks like for real ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ok so here's the big idea to make tcp client i actually only need two calls i need a way to escape out of my c code and actually start talking to the network card and for that i need a socket. so this is the thing that is going to give me a file descriptor and we c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ok so here's the big idea to make tcp client i actually only need two calls i need a way to escape out of my c code and actually start talking to the network card and for that i need a socket so this is the thing that is going to give me a file descriptor and we ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "work implementation to number which is understood why we assume you'll be using this as well ok so using these cool stand means that now we can write c code which is compatible and it doesn't matter whether your cpu uses a little endian format a big endian format or a completely different way to represent",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "twork implementation to a number which is understood on what machine you'll be using as well ok so using these calls then means that now we can write c code which is compatible and it doesn't matter whether your cpu uses a little endian format a big endian format or a completely different way to represent",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "aybe my file system should support compression as well so for some files for example suppose i'm storing all of the linux kernel that's just a lot of c code and i could store that in a very much more space on my disk and if i can decompress it quickly i might even be able to load these files in and use on",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "aybe my file system should support compression as well so for some files for example suppose i'm storing all of the linux kernel that's just a lot of c code and i could store that in a very much smaller space on my disk and if i can decompress it quickly i might even be able to load these files in and use",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "400997f2-57b2-4cbf-8257-c43a761b7df6",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ok right so here we go let's you start to look at two things first of all the time of when my c code was modified and the time of the executable that i'm trying to create so in other words i'm trying to make make be very lazy i don't want to actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "to our backups and now we cannot trust the data that our business is built on so it for file changes if you really want to make make strong difficult c code your life then i said yes do you make your own file system that's it for now and the end of this lecture by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "to our backups and now we cannot trust the data that our business is built on so it for file changes if you really want to make make strong difficult c code your life then i said yes do you make your own file system right that's it for now and the end of this lecture by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a36c9a4b-0ff7-4b83-9157-f856ccfd8b26",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ful say if we want to write something recursive for example suppose we wanted to write our own version of chmod to recursively change everything from c code then we could quickly use stat to see whether something is a directory or not and the last thing we should try let's give it a fictitious file doesn'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "look inside the current directory i can see a bunch of files and one of them happens to be a symbolic link ok so how can i detect symbolic links from c code clearly ls can do it it's giving me some hints about these different files so let's do all again there you go you can see that it's a link and in fac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " time systems so if i'm going to estero rocket i will have certain processes and calculations which are time critical if i am going to use a piece of c code to control the engine firing to maximize the efficiency of the engine or the performance of the edge and then i need to be able to complete my calcul",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9c4b2de5-a3dd-4f12-99ed-f3bf1b2ee816",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "ok right so as part of a judicial review of the c code written inside engine unit an engine control unit of a toyota car we could look at the complexity of that code and decide how like it is that might b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9c4b2de5-a3dd-4f12-99ed-f3bf1b2ee816",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "s being accused of uncontrolled acceleration in their cars and this is just regular cars were not even talking about self driving cars this is just a c code designed to control the engine they're designed to control exactly what happens on every millisecond and every step of that engine be so it's not all",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f815b599-ae2e-4d57-9c3e-b1834f484942",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "o be warned be careful and check pass before you start randomly deleting things right and their last video we're going to talk about how not to write c code and maybe why you should think twice before stepping in front of a car alright i'll see you then bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "ctually generate generate that code for us and in fact in the lab you saw that with tool called rpc jen ok which will automatically generate all that c code forwards but typically what it needs to do is it needs to marshall all the information that we're going to send down the wire across the network to t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "580ae97f-7447-4844-927b-098638c01c95",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "ms let's have a look at thinking about what happens here with the kernel when we do something like the following so here's a kind of typical piece of c code where we're going to make a file pointer there it is and we are opening up this particular file so we're going to open up for read ok so of course we",
        "label": "Use"
      }
    ]
  },
  {
    "text": "child process",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "7dd4705a-6995-4f39-a32c-12a1174bd04e",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "k and remember what fork does focuses hey take this current process and duplicated for kits and now that you've got the original parent process and a child process and these two processes look very similar to one another they have the same variable setup they have they have some stack memory they have heap memor",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7dd4705a-6995-4f39-a32c-12a1174bd04e",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "iginal you or the new you so let's put that result into a variable and in fact what it gives you is the process ideas small integer of the of the new child process that you've created at least that's what the parent the original process will see if you are the new copy if you are that doppelganger then actually ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7dd4705a-6995-4f39-a32c-12a1174bd04e",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "nger then actually what you get back here is zero so that's the easy way to find out if you are the original or the dastardly clone ok if you are the child process ok so let's print out there's actually print out the result of fork and we actually see that so now we're going to actually have multiple processes r",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "un homework fun thing to think about is on his previous page which is try the following how about a forking program where the pen process creates end child processes or as an alternative picture can you create a chain of process in other words each process except the last one has its own child process so there a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "reates end child processes or as an alternative picture can you create a chain of process in other words each process except the last one has its own child process so there are two very different structures of processes that you might want to make where that that's the end of the lecture by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0e904504-e9c5-4ef5-9739-b762f6053521",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "nother words before using its value change the value of the variable so c is now full which is greater than one and then we say ok and not fork so in child process ok so here's the original power to poopy doopy doopy doopy do and then we made the child process in the child process fork returns zero and otherwise",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0e904504-e9c5-4ef5-9739-b762f6053521",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "eater than one and then we say ok and not fork so in child process ok so here's the original power to poopy doopy doopy doopy do and then we made the child process in the child process fork returns zero and otherwise it's true so we get to kyon round the loop so around we go and that child is going to have a val",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0e904504-e9c5-4ef5-9739-b762f6053521",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "en we say ok and not fork so in child process ok so here's the original power to poopy doopy doopy doopy do and then we made the child process in the child process fork returns zero and otherwise it's true so we get to kyon round the loop so around we go and that child is going to have a value of four but that g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "67bd4b3a-2f54-49a6-9c31-ff5dd35bf7d9",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "e wanted to compile we were storing that inside little variable called target ok right so off it goes we've given it a little head transplant and the child process will now merrily run attempt around the compiler so what should we do inside the parent inside the parent we need to wait until that compilation has ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "67bd4b3a-2f54-49a6-9c31-ff5dd35bf7d9",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "d the compiler so what should we do inside the parent inside the parent we need to wait until that compilation has finished in other words until that child process is finished so we will call wait pid that's turn it into and i can i backwards right wait pid and as usual will need the child process id and here's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "67bd4b3a-2f54-49a6-9c31-ff5dd35bf7d9",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "rds until that child process is finished so we will call wait pid that's turn it into and i can i backwards right wait pid and as usual will need the child process id and here's the address of my little status variable to receive the result ok and there's no options today ok sue if the child successfully managed",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "e reading every line of input in order to run that as a process ok so now what we want to do we want to say somehow i want to check to see if i'm the child process so imagine now you have a split brain what we want to do is actually think about our code in two different scenarios that will have the scenario wher",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "ife simple we can actually buy some if statements remembering then what we wait inside one 's statement is only going to be able to applicable to the child process right so how can i tell if the child if i if this code here is actually being run inside the child crisis well return value from fork is what is o i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "crisis well return value from fork is what is o i can also find out who my parent is just by calling get p p i d so we've got all our condition for a child process and in child process i'm going to change its value of m to point to a different string hello and right what happens next in the child process well al",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "lue from fork is what is o i can also find out who my parent is just by calling get p p i d so we've got all our condition for a child process and in child process i'm going to change its value of m to point to a different string hello and right what happens next in the child process well all this other stuff go",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "n for a child process and in child process i'm going to change its value of m to point to a different string hello and right what happens next in the child process well all this other stuff going to else is irrelevant to that child process so what is the child process do next it prints out string put s remembers",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "m to point to a different string hello and right what happens next in the child process well all this other stuff going to else is irrelevant to that child process so what is the child process do next it prints out string put s remembers just print half with an additional new line as well so it's going to say ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "ing hello and right what happens next in the child process well all this other stuff going to else is irrelevant to that child process so what is the child process do next it prints out string put s remembers just print half with an additional new line as well so it's going to say ok child print out whatever you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b4efecab-e0c0-41b8-b21e-6ccca0ed2893",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "ow got to running processes but at some point i want to synchronize their behavior and the simplest synchronization that we can do is to wait for our child process to finish so our child is running here practice calculating something perhaps it's sending something to disk etc perhaps it's serving a website who k",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b4efecab-e0c0-41b8-b21e-6ccca0ed2893",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "e is perhaps our parent process was the shell we've logged in we ssh-ed in for example and we've type something to run and now we use fork to start a child process perhaps that child process for example is going to be running gcc but anyway for whatever reason it finishes and so now we want to make our original ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b4efecab-e0c0-41b8-b21e-6ccca0ed2893",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "cess was the shell we've logged in we ssh-ed in for example and we've type something to run and now we use fork to start a child process perhaps that child process for example is going to be running gcc but anyway for whatever reason it finishes and so now we want to make our original parent process wait for tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b4efecab-e0c0-41b8-b21e-6ccca0ed2893",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "ait for that how do we do that well we now make use of another call called wait or wait pid if i use weight pid i could actually specify a particular child process i'd like to wait for so for example let's wait for process number hundred and thirty two but we can do more than that we can say hey kernel please no",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b4efecab-e0c0-41b8-b21e-6ccca0ed2893",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "n practice we would never actually productive write this expression we can just make use of the macro suppose you wanted to check to see whether your child process didn't exit normally but instead actually exited abnormally because a signal was delivered what's a signal you ask great questions we're going to tal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d310b36e-5c21-4803-b0c6-78d62b73b532",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " different program that is going to start from maine so hopefully you can now see that a very very common pattern is to call fork and then inside the child process we want to do something else we don't keep executing the same code so the child process will call exec meanwhile the parent process wants to wait for",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d310b36e-5c21-4803-b0c6-78d62b73b532",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " very very common pattern is to call fork and then inside the child process we want to do something else we don't keep executing the same code so the child process will call exec meanwhile the parent process wants to wait for the child to finish and it does not by calling wait pay id and we know the process id o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "parent when your fault returns you get the parents so the child id but if your child you just get zero as a result so this is where the pound and the child processes are going to diverge going to do different things if you're the child then your return value or fork is zero so this result is true and so the chil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "ecify the first thing twice this is the name of the file we'd like to find on the disk on the path somewhere please load that in and give this little child processor head transplant stop running my code in one that instead and then we better actually say what the process name is going to be and so typically that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "his line because the child and the processor going to share standard in and the way that they they can interact is not necessarily senseable when the child process exits in fact it's worse than just having this line we actually need to do flush on all of our open file handles and so here's another one we better ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ed the pipe because we want to share that between the parent and child if i am the if i am the child case so if the child pid is zero then we are the child process let's do our little high their game again ok and will exit at this point so we return from main. ok meanwhile the payment will will read as usual cas",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " well problem it is that the kernel is keeping track of all of these file descriptors and the read and write end both exist inside the parent and the child processes so both parent and child could be writing into the right end in both the parent and child could be reading from the read end so we close the right ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "d out which signal killed my program but notice this time the kernel sorry the shell does not actually print out anything useful to say hey this is a child process actually was just killed by a signal and the reason for that is we use pipes a lot in the shell so if you say things like ok cat all my files then pi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "er two seconds we send it and then we send it back great so you could use pipes now to do all sorts of fun things for example perhaps if you've got a child process you're running that child process could start sending you results or perhaps if you want to shut it down you could use a signal but you could obvious",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " we send it back great so you could use pipes now to do all sorts of fun things for example perhaps if you've got a child process you're running that child process could start sending you results or perhaps if you want to shut it down you could use a signal but you could obviously use a pipe as a way to control ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "eferring to an actual object inside the kernel that we indirectly talk to by either calling read or write seek right so if i then call fork to make a child process then the same number child process over here the same integer number here we go right refers to the same kernel objects so here's the wonderful kerne",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " the kernel that we indirectly talk to by either calling read or write seek right so if i then call fork to make a child process then the same number child process over here the same integer number here we go right refers to the same kernel objects so here's the wonderful kernel up here with its view on the worl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ant to quit with some kind of error message so that's the same kind of idea as my piper quit let's just rap the system call with quick test ok so the child processes is going to become the actual executable that we want to test so down here is when we actually call exec and we're going to say ok here's a program",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " to an actual object inside the kernel that we indirectly talk to the biotic either calling read or write seek right so if i then call fork to make a child process then the same number child process over here the same integer number here we go right refers to the same kernel objects so here's the wonderful colon",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "nel that we indirectly talk to the biotic either calling read or write seek right so if i then call fork to make a child process then the same number child process over here the same integer number here we go right refers to the same kernel objects so here's the wonderful colonel up here with its view on the wor",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "r of four kb at a time and the parent is going to copy the contents of some file called input dot text and we want to send that to start it in of the child process ok so you gotta figure out how to do that how would you like to send send those those bytes it so you're going to need to use kind of say open to get",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "be the correct file descriptor so the good news is that you can use dup2 two to re label it to file descriptor zero in order to be standard in of the child process ok so how you get to make this work right so i'll let you figure this one out have a great writing it and then you can always test it of course becau",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "figure this one out have a great writing it and then you can always test it of course because then you're going to take that and call exec inside the child process and set it as a create a bash shell so you can call exec you'll need some version of exec and then price if you're looking on the path for example yo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t account or really really lazy if he gets interrupted by signal so for example suppose an alarm signal went off suppose a sigpipe happened suppose a child process finished then it will just return doesn't actually do any writing force ok what a lazy kernel that is so ok will keep scrolling down and you can see ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "so if we now put this into the earlier code where we played with process is you'd now notice that sleep now would works a lot better even when i have child processes that existing and causing c chart events which interrupt our sleep ok right so with that stuff for this video in the next video let's talk about ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t account or really really lazy if he gets interrupted by signal so for example suppose an alarm signal went off suppose a sigpipe happened suppose a child process finished then it will just return doesn't actually do any writing for us ok what a lazy kernel that is so ok will keep scrolling down and you can see",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "so if we now put this into the earlier code where we played with process is you'd now notice that sleep now would works a lot better even when i have child processes that existing and causing c chart events which interrupt our sleep ok right so with that stuff for this video in the next video let's talk about ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t account or really really lazy if he gets interrupted by signal so for example suppose an alarm signal went off suppose a sigpipe happened suppose a child process finished then it will just return doesn't actually do any writing force ok what a lazy kernel that is so ok will keep scrolling down and you can see ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "so if we now put this into the earlier code where we played with process is you'd now notice that sleep now would works a lot better even when i have child processes that existing and causing c chart events which interrupt our sleep ok right so with that stuff for this video in the next video let's talk about ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "le very well if i could only actually handle one request at a time so perhaps my next idea is to every time except returns is to fork and i'll have a child process work with each each client well that was scale up to a certain point because at some point my all these processes might be very heavy handed way of s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0f5acc21-05fe-4694-921a-f38f2fb0134e",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "ere is a reason here to say no and here's the idea that for any particular signal for example sig child right to say hey one of my children one of my child processes has just finished just terminated then actually if multiple signals signals occur then your process itself may see only one single sick child event",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ff918b22-18b3-4e5f-96f5-e6eb462fbefd",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "nt anonymous mapping meaning that it doesn't actually map to any file at all so why might i do this because i can create some shared memory between a child process an apparent process gets so for example let's have four thousand ninety six bytes case that this is going to be the number of bytes we want let's dec",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ff918b22-18b3-4e5f-96f5-e6eb462fbefd",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "o read and write to this page of memory and lastly because we're going to fork we do care about changes that i make inside this file to be seen by my child process as well so let's ask nmap for shared memory as well ok so first thing will do with steel quick error check if this returns negative we know we don't ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "o we've got curl here and then we've got this argument ok so what happens next well this is meant for you to talk about forking we're going to make a child process so we call fork and we're going to call exec some variant of exact which will use the path because we're going to look for this command called curl s",
        "label": "Intro"
      }
    ]
  },
  {
    "text": "cpu time",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " until there's some bites ready to give you in other words this call to read might wait forever was this waiting for it's not gonna use any other any cpu time we can give the cpu to other processes and other kernel tasks that need to run so realize that this read is what's called a blocking call that it doe",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7dd4705a-6995-4f39-a32c-12a1174bd04e",
        "lecture": "CS",
        "lecture_num": 5,
        "context": " again we're going to see those two two lights i don't know which one is actually going to appear first completely up to the scheduler as to how much cpu time each of my two processes going to get in on this particular machine i actually have a cpu with more than one core so i can truly run these two proces",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b4efecab-e0c0-41b8-b21e-6ccca0ed2893",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " core on my laptop it really is doing two things at the same time if i've only got one actually the kernel is going to cheat and give a little bit of cpu time to each process but it can swap between these faster than i can notice it might be swapping between them say every millisecond or every time that one",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "412638bd-03f0-44d0-a48b-5c8f0bee64e9",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "is and the only purpose of the p thread yield is the idea that there's no point just checking this in a very very tight loop that would burn a lot of cpu time more unnecessary energy so slow it down right so that's my lock first of all wait until their value is zero and then change it ok right so think abou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "on a a second cpu core or it will be automatically given the cpu after a millisecond of time or so but for the whole millisecond we were just wasting cpu time whilst a first read just needlessly check the value of count so ideally we would want to give up the cpu at this point and sleep until the value of c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " they're all going to test their conditions for example is although no writers around and then they just might go back to sleep and so we just wasted cpu time evaluating something that we could have reasoned must be zero so anyway let's think about what we should do here when should i wake up readers well i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34a28852-0928-4275-9d51-ae6393b84ed4",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ample of livelock and notices not deadlock we don't maintain exclusive access we don't have hold and wait but there is no progress we just burning up cpu time but we're not actually doing anything useful ok so sometimes we'll see livelock if example you are constantly polling things and it looks like you're",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " possible out of this machine onto the network so we want good sequence sequential access and of course we want to do this we use in the minimum over cpu time because i want to use my cpu for other things so what else might we need here right k so if i'm storing say text information that text could easily b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "lt to implement together for example compression may or may not hurt performance deduplication requires ability to scan files and may take additional cpu time additional memory and so may actually actually affect negatively the performance of your whole system the last thing will put on here which is kind o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " possible out of this machine onto the network so we want good sequence sequential access and of course we want to do this we use in the minimum over cpu time because i want to use my cpu for other things so what else might we need here right k so if i'm storing say text information that text could easily b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "lt to implement together for example compression may or may not hurt performance deduplication requires ability to scan files and may take additional cpu time additional memory and so may actually actually affect negatively the performance of your whole system the last thing will put on here which is kind o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " a whole lot of things that we don't normally see as well however all the meta information for example the kernel is going to keep track of the total cpu time used by the process and also possibly the amount of cpu time that is used in more recently is perhaps the last kind of time segment also process may ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ever all the meta information for example the kernel is going to keep track of the total cpu time used by the process and also possibly the amount of cpu time that is used in more recently is perhaps the last kind of time segment also process may be running or not perhaps we've temporarily paused it for exa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " get to run on the cpu in fact this even happened with the apollo missions to the moon where certain jobs were unable to complete there wasn't enough cpu time to run them anyway so that's a whole another story but there's lots of fun things about the software bugs and hardware bugs that we managed to land o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " i press a letter nothing happens so instead i need a way to be able to say look every every process that is ready to run should have a little bit of cpu time ever so often and even if it doesn't get to kind of fully complete its calculation at least if we give every ready process a little bit cpu time then",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "t of cpu time ever so often and even if it doesn't get to kind of fully complete its calculation at least if we give every ready process a little bit cpu time then for simple things like updating the display when you press a button updating menu as you click at least able appears kind of somewhat interactiv",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " user we may not have time to fully re paginate the page but that's ok those things don't need to be kind of immediate ok also if i give a little bit cpu time then then appears to the user that they at least have us all access to the cpu when in fact they're only getting a little slice of it so if we make o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " start or if i'm using an editor like vim or something else or microsoft visual studio then list i can continue even whilst you are using some of the cpu time for your compile job then there's things like real time systems so if i'm going to estero rocket i will have certain processes and calculations which",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e598bf6-90ab-4adf-86a5-0f9204ac0b6f",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "y fractal program maybe it's calculating over mandel brot picture or maybe it's kind of mining coins but for whatever reason it it's hoarding as much cpu time as possible so maybe it's a big numerical simulation but it is going to use as much cpu time as we can give it ok so here's what happens this actuall",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e598bf6-90ab-4adf-86a5-0f9204ac0b6f",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "g coins but for whatever reason it it's hoarding as much cpu time as possible so maybe it's a big numerical simulation but it is going to use as much cpu time as we can give it ok so here's what happens this actually look at time going this way ok think about our time quanta so here is a little bit of time ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e598bf6-90ab-4adf-86a5-0f9204ac0b6f",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "sed up by our cat say just to execute lines twelve and thirteen of my program which ultimately calls say read so it only needs a nanosecond or two of cpu time ok it already called read so then gives up its time quanta and it's time for the cpu to do something else so here we go let's give it to the fractal ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "5e598bf6-90ab-4adf-86a5-0f9204ac0b6f",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "a and it's time for the cpu to do something else so here we go let's give it to the fractal program or whatever it is and it's going to munch on that cpu time for as long as we give it and it would like to use the cpu for basically forever fortunately it doesn't a little hardware timer goes off but it's onl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " couple of basic ideas one is the arrival time so this is when the process is is created when it first arrives on the scene it's ok i'd like to use a cpu time and also we know how much time it's going to require to actually execute so that's a duration that's not a wall clock time and then the completion ti",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "e actually have an empirical result based on how long we expect these jobs to run but we could actually kind of prioritize our jobs based on how much cpu time they need and this by the way is the total cpu time they need and in fact on a real system we talk about the idea of the burst time so let me go back",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "g we expect these jobs to run but we could actually kind of prioritize our jobs based on how much cpu time they need and this by the way is the total cpu time they need and in fact on a real system we talk about the idea of the burst time so let me go back to my very first discussion about hey on real proce",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "e idea of the burst time so let me go back to my very first discussion about hey on real process is they may not actually need one hundred seconds of cpu time in total because after one second of cpu time they're ready to do some io again they are ready to say read the next piece of data or perhaps right ou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "my very first discussion about hey on real process is they may not actually need one hundred seconds of cpu time in total because after one second of cpu time they're ready to do some io again they are ready to say read the next piece of data or perhaps right out some kind of result so the time the cpu time",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "cpu time they're ready to do some io again they are ready to say read the next piece of data or perhaps right out some kind of result so the time the cpu time that they need right now in order to get to that point is called the first time so a real sjf system would want to order things by how much burst tim",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " burst time things need so idea of fairness here excuse me is the is the idea that hey some jobs only need or some process is only need a tiny better cpu time so let's give them the cpu first that way will get lots of things done over the next minute or two because we've maximized a number of processes that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " maximized a number of processes that can actually complete because each i'm going to give priority to the process which only needs a small amount of cpu time right now there is another version of this which is called the preemptive shortest job first and so with preemption you are allowed to kick someone o",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "emption you are allowed to kick someone off the fairground right ok so let's imagine right now that process five because they only need one second of cpu time is on the ferris wheel right for some reason a new process is created let's call it process ten and process ten only needs point five of a second so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "you're up next ok so this is a different idea of fairness the idea of a round robin is that we still have some ordering but the process will get some cpu time eventually so the amount of time that we allow a process to have is called the time quanta here it is and you could think about the extremes here sup",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "running the kernel scheduler code is minimal but this is not so hot for interactive systems now the time is going to take before process ten gets any cpu time might be upwards of an hour more that's a long time to wait for a key pressed on in fact with such a long time say ten minutes most processes won't e",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "all these little processes that would like to run we want to make it so that there is some interactivity so for things which only need tiny amount of cpu time when you press that letter you generate an eye over event hopefully you're going to see that letter arrive on your terminal ok so what would be of re",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "here and and so if we have a short quanta then then if we're swapping out multiple processes in here then hopefully we'll get each process will get a cpu time within the reaction time of what humans need to feel like system is interactive another quick comment on this is that if you're working with audio th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ea is that we want to give kind of bursty behavior to some process is so for example let's say that you resize the window that might take up a lot of cpu time in order to do all of their kind of layout and updating the data structures etc but we'd like that to be as interactive as possible so will give you ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "l of their kind of layout and updating the data structures etc but we'd like that to be as interactive as possible so will give you an extra piece of cpu time if you haven't been monopolizing the cpu in the recent past so let's keep track of whether you used up the full time quanta in yoga last time you use",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "eb60661b-5d09-4877-bb19-11bf0d303584",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " allow low priority jobs to run by the way when i say jobs that's the classic operating system description of processes and items which actually need cpu time but you can i'm sure generalize to the idea of this applying to individual threads insider multithreaded program ok so anything that has some kind of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "e available they would all like a cpu unfortunately in this model we've only got one cpu then we've got their burst time in other words the amount of cpu time they actually need to complete here and we've got a wait time that we're going to calculate by seeing how much time they spend inside the ready queue",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "the total the burst time to decide which job to run next so we don't keep track we don't use how much time the cpu how much time job is used how much cpu time her job is used so far it deciding which to run first would just simply look at the first time ok write an lastly welcome here first come first serve",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f815b599-ae2e-4d57-9c3e-b1834f484942",
        "lecture": "CS",
        "lecture_num": 35,
        "context": " we wrote and you'll see that we can see a stack trace so this is pretty cool next time your java program deadlock so is just using a hundred percent cpu time you can see where it is at that last moment and you can see it was actually currently spending its time inside the system here getting that last modi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "12682bb1-804f-4939-a519-445af7451475",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "an encode in just a few bites but now we using could have at least five bites here with decimal digits secondly actually going to take quite a bit of cpu time to turn this number back into an actual integer value so perhaps rather than using a text based protocol we could actually choose a binary based prot",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " not go back to process one plus two pets want to process three instead ok so we gotta update this accounting information about just exactly how much cpu time where we are spending on a particular process ok so are we done no absolutely not here's something which is perhaps surprising which is do you rememb",
        "label": "Use"
      }
    ]
  },
  {
    "text": "virtual memory",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "367502e6-86bd-4b7c-8b0f-a6d09829fe75",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "ks linux provides is a really really important concept and we're going to see this especially we start talking about the memory of a process and what virtual memory can give us so great we can talk conceptive processes but how about we actually create one and this is where the fun begins so let's see if we have a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "367502e6-86bd-4b7c-8b0f-a6d09829fe75",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " variables and in fact the addresses of anything outside our process are specific to that particular process so we're going to learn more later about virtual memory that these addresses actually each process can be mapped to completely different pieces of physical ram so even though they appear to be the same add",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d310b36e-5c21-4803-b0c6-78d62b73b532",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "e those processes there was lots of pointers going on going about whether it's c code or c plus plus code those menu locations are actually scoped by virtual memory by that particular process so your idea of what's the address ten thousand is completely different and independent of what i think is address ten tho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2c80a67a-6e39-4b62-812c-69eb49905471",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ore bytes please alright so what does that actually mean ok so between you and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2c80a67a-6e39-4b62-812c-69eb49905471",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but we will use it for cs two forty one to implement a simple memory allocator ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3b653f0c-c210-4f13-a615-5d87a823e96e",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "you say looking at address ffff liberalizing resume what something that number actually correspond to a different piece of ram and that's the idea of virtual memory that the address space of a process is unique to each process this ensures that if one process has a security or so it has a bug in it then it just i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57f1edee-d98f-4b8b-9ca9-c3c66e7774d1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ore bytes please alright so what does that actually mean ok so between you and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57f1edee-d98f-4b8b-9ca9-c3c66e7774d1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but we will use it for cs two forty one to implement a simple memory allocator ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7aab9397-22c3-4ad5-beca-764e7308dfdf",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ore bytes please alright so what does that actually mean ok so between you and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7aab9397-22c3-4ad5-beca-764e7308dfdf",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but we will use it for cs two forty one to implement a simple memory allocator ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e3b111b7-8038-4f0e-a112-7fb6b2538548",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ore bytes please alright so what does that actually mean ok so between you and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e3b111b7-8038-4f0e-a112-7fb6b2538548",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "and me as big is not actually used anymore instead we're going to use some virtual memory tricks of all the slide this did modern c library uses some virtual memory tricks that we haven't learned yet so s breakers are simply mechanism but we will use it for cs two forty one to implement a simple memory allocator ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "hi great so let's welcome to virtual memory ok so the story so far we've been designing process is and each process has its own address space as we had this idea of virtual memory ok and so the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "'s welcome to virtual memory ok so the story so far we've been designing process is and each process has its own address space as we had this idea of virtual memory ok and so the address numbers that you and i talk about inside our code only make sense inside one particular process meanwhile we've actually gone o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "e a great solution the solution we actually describing all the way is called like the base and bound where there's a mapping simple mapping from your virtual memory addresses we add some kind of offset offset that will be the base to get to the actual physical address or inside my ram and then we also put some ki",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " we got to change our first stroman idea to now a mapping between a page which is something which is meaningful inside a process and it's part of the virtual memory address going to map that somehow we want to do it quickly to a particular place inside my actual memory my actual ram in other words are particular ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1950b119-9d1c-4760-aafa-f10604e9d6cd",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ok let's round out this lecture with two little non virtual memory ideas first of all i've hinted at this i think of ipc so when you hear ipc in a interview they're probably talking about inter process communication ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1950b119-9d1c-4760-aafa-f10604e9d6cd",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "munication and we've just seen one today ok so inter process communication and where we used communication ok where we used a shared memory using the virtual memory mechanisms some more that we're going to look at in the future again it be pipes where we can treat pipes a bit like files or at least streams where ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ok hi right so we've got memory there we go right we've got memory virtual memory working using a page table and we've just invented a two level page table but now we actually want to think about getting recovering that performance",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " this is a cache it's got a limited size we can't remember what kind of all of oil look up 's and what we're basically doing is saying hey i've got a virtual memory address except that i don't need to store a look up for a particular address instead actually i'm going to store this with a page the page number and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "lb so useful ok anything else wanna say about the tlb oh yeah just kind of as a quick sketch you realize that the page numbers were talking about our virtual memory addresses process specific so the mappings that we do always of course per process if we fork we make a child that is going to have a different mappi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "read some memory inside my program right now i want to change a bite in my heat for example ok so we convert their physical psychological address the virtual memory address and we see this in page six so let's go to page six one two three four let's imagine it's just here ok and we read this entry right ok page s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ome when we start talking about mmap in the future but it ultimately relies on the very page tables that we've been talking about as how we implement virtual memory so what's the big takeaways first of all realized every page has these bits we've got things like the modified bit we've got to read only and whether",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ou can control is the return addresses that are actually present on the stack and we've talked about page tables which allow us to actually implement virtual memory so we can do this mapping and then finally we talked about the tlb which allowed us to actually have some performance ok and along the way we talked ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ng in an paging out an page faults right there's multiple decide the course book but i hope you have a good understanding now of how the mechanics of virtual memory by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "please go to memory over there right so let's not worry about the actual memory used by my program let's just look at the overhead actually requiring virtual memory annual see now i needed to find space inside my actual physical ram for three pages of memory in other words my overhead is twelve megabytes ok i'd s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "way to order the items that you need to acquire for exclusive access right in the next video we can start talking about how we can actually implement virtual memory so by understanding how virtual memory works uh we can understand some of the tradeoffs that occured some of its performance characteristics and then",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " acquire for exclusive access right in the next video we can start talking about how we can actually implement virtual memory so by understanding how virtual memory works uh we can understand some of the tradeoffs that occured some of its performance characteristics and then later will be used in this machinery t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "d systems and we are kind of at the lowest level saying hey i want to send a block of data tool for my device so why do we make these same size is my virtual memory is because think back to our virtual memory table where i needed to have a mapping from virtual addresses to physical addresses and the very first th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "evel saying hey i want to send a block of data tool for my device so why do we make these same size is my virtual memory is because think back to our virtual memory table where i needed to have a mapping from virtual addresses to physical addresses and the very first thing we did is we took our physical memory an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ystems and we are kind of at the lowest level saying hey i want to send a block of data to and from my device so why do we make these same size is my virtual memory is because think back to our virtual memory table where i needed to have a mapping from virtual addresses to physical addresses and the very first th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "l saying hey i want to send a block of data to and from my device so why do we make these same size is my virtual memory is because think back to our virtual memory table where i needed to have a mapping from virtual addresses to physical addresses and the very first thing we did is we took our physical memory an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "econd look up so we have to go back to our disk to read another little table and so this is a lot like kind of the page table tricks that we saw with virtual memory and finally this gives us the actual disk block that will actually hold the data so finally we can meet the next four kilobytes of data ok so how muc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nd look up so we have to go back to our disk to read another little table and so this is a lot like kind of the page table tricks that we sought with virtual memory and finally this gives us the actual disk block that will actually hold the data so finally we can meet the next four kilobytes of data ok so how muc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " the things that we now understand that comprises a process first of all we now know that the memory that we are working with the process is actually virtual memory and the mapping from that using page tables to the actual physical ram and that that mapping can change overtime so we might need more memory but we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b576d61-d378-4ab7-892f-56f113eb5f08",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "tty cool and exciting and also as part of files were going to talk about quick introduction first look at memory mapped files as well where we used a virtual memory machinery that we have to actually directly access files as part of memory ok so first of all let's talk about umask so i made hints about umask at t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "pace i'd like to use ok so the next two things can cause a little bit of confusion they do different things here so remember when we talked about our virtual memory four pieces of actual physical memory inside our page tables we cared about whether you could read or write or execute them and why do we do this aga",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3d0ca20e-770a-4185-b85c-16363e80fe82",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "ow why storage gets a bad rap in terms of its performance that of order a hundred events per second is extremely slow so let's kind of go back to our virtual memory discussions when we said hey when we were running low on ram will just page out some disk block and store it to disk when you do that then the latenc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cd13b51-dc41-427e-91b3-c63a9d8334fe",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "n disk for example its current code or i have to copy that dirty page to disk maybe to page store or a file or file system dedicated to supporting my virtual memory so now what's happened now every nanosecond every little memory right is going to result in a disk access as we page in an page out ok so unfortunate",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "erhead to moving from one process to another right so what are the kind of some of the things that we need to two right so first of all we've got the virtual memory address mapping in other words are page tables these only makes sense for a particular process that a particular memory inside a particular process i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "708df333-e9ad-4b1c-8f24-df23dcfb4811",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " how about we lie how about we use copy on write so also known as the tabakow c o w copy on write ok so here's what we could do let's make use of the virtual memory machinery to lie to our poor process so for example you asked for two hundred thousand bytes all zeroed out to be equal to zero i could cheat at this",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "708df333-e9ad-4b1c-8f24-df23dcfb4811",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "y and i can easily give you now two hundred thousand bytes of memory where is all been zeroed out just by playing this game with the mappings between virtual memory an actual physical memory so there is no cost to giving you memory that appears to all have been zeroed out it's only the moment that you attempt to ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "symbolic link",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "d51e1b38-6c01-4584-9e0b-69d42464cfa6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e more ok oops i want out ok look it actually found my password file so we guess the number of times to go up and in fact in this case because of the symbolic links which we haven't talked about yet on this machine et see password it's real canonical path is that following private ttc passwords if that is the ab",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "more ok oops i want a.out ok look it actually found my password file so we guess the number of times to go up and in fact in this case because of the symbolic links which we haven't talked about yet on this machine etc/password it's real canonical path is that following private etc/passwords that is the absolute",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "n file there's one other version is as well here which is going to leave a little bit but we're going to find that useful when we start talking about symbolic links so let's have a look at the kind of information that we can get back from stat ok right so the system gives us the following struct we can use and b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aac7d262-6dd0-4009-967c-be10e55a9cd5",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "se secondly you can use this to find out about whether it's a regular file whether it's a regular directory all whether it's something else like it's symbolic link or named pipe or some other bizzle object that we've got stored in a file system ok we can actually have multiple links to the same i knowed entry so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "n file there's one other version is as well here which is going to leave a little bit but we're going to find that useful when we start talking about symbolic links so let's have a look at the kind of information that we can get back from stat ok right so the system gives us the following struct we can use and b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c6d33883-2388-4db3-8817-93586fd5f883",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "se secondly you can use this to find out about whether it's a regular file whether it's a regular directory all whether it's something else like it's symbolic link or named pipe or some other bizzle object that we've got stored in a file system ok we can actually have multiple links to the same i knowed entry so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "935f6155-a7a0-4504-b818-62e2db066493",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " any changed files which are newer than my offsite backup but i can still make it to be confused so let's just have some fun with this by making some symbolic links what's the symbolic link good question we're going to look at that in a future video but right now i'm just going to make one i'm going to go into a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "935f6155-a7a0-4504-b818-62e2db066493",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "re newer than my offsite backup but i can still make it to be confused so let's just have some fun with this by making some symbolic links what's the symbolic link good question we're going to look at that in a future video but right now i'm just going to make one i'm going to go into a directory let's go into s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "935f6155-a7a0-4504-b818-62e2db066493",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ted to go as deeply as possible right so how could we possibly could have overcome that well the first thing is to realize i better i better look for symbolic links carefully and there's a trick i'll show you the moment about that and secondly remember that every file actually has an inode number so if i truly w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "935f6155-a7a0-4504-b818-62e2db066493",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ng a backup service i might make a note of the actual inode numbers that i had archived in back up so that i know that if i do end up following say a symbolic link or arriving at the same file i know that i've actually already made a copy of it right that's enough for this video i'll see you in the next video wh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "935f6155-a7a0-4504-b818-62e2db066493",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ile i know that i've actually already made a copy of it right that's enough for this video i'll see you in the next video when we start talking about symbolic links ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a36c9a4b-0ff7-4b83-9157-f856ccfd8b26",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "so this would be a way to actually check to see whether that filename corresponds to one of these pipes and lastly here's a useful one is something a symbolic link there's a big gotcha with this one or big secret about having to use it correctly so we'll talk about that a little bit ok so let's go actually look ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ok so we've seen two kinds of links now symbolic links and hardlinks let's talk about some of their differences ok so what are the kind of say what can you do let's not say about advantages here let's sa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " nonexistent file why because remember what we're doing is that we're adding a new entry into a directory and increasing the reference count versus a symbolic link ok we can actually make symbolic links add the o just up there symbolic links to nonexistent files so we can say i can make a link to something which",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " what we're doing is that we're adding a new entry into a directory and increasing the reference count versus a symbolic link ok we can actually make symbolic links add the o just up there symbolic links to nonexistent files so we can say i can make a link to something which doesn't even exist yet so that's ok a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "a new entry into a directory and increasing the reference count versus a symbolic link ok we can actually make symbolic links add the o just up there symbolic links to nonexistent files so we can say i can make a link to something which doesn't even exist yet so that's ok and also directories are ok the other th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "'s ok and also directories are ok the other thing which is not that surprising is that it can cross file system boundaries so remember that because a symbolic link is basically just some text we could talk about files which exist on a completely different file system for example maybe your files exist on a usb s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "t some text we could talk about files which exist on a completely different file system for example maybe your files exist on a usb stick and so your symbolic link would just contain the text say for example slash wherever their stores lay mat or mount usb stick here ok and so i can talk about a symbolic link i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ur symbolic link would just contain the text say for example slash wherever their stores lay mat or mount usb stick here ok and so i can talk about a symbolic link i can talk about so creating a symbolic link to a file on a totally different file system and i could store this inside my say my user directory righ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "say for example slash wherever their stores lay mat or mount usb stick here ok and so i can talk about a symbolic link i can talk about so creating a symbolic link to a file on a totally different file system and i could store this inside my say my user directory right which one do you think has better performan",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "erent file system and i could store this inside my say my user directory right which one do you think has better performance ok so there is a cost of symbolic links you have to read that text file and then process the text in order to follow it versus a hard link there is no performance penalty the link is the f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "t as opening the file as the other why because they immediately tell you about the inode number and remember the inode number is the actual file with symbolic links if you really wanted you can make a symbolic link that points to a symbolic link that points to symbolic link that points to symbolic link etc etc e",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " immediately tell you about the inode number and remember the inode number is the actual file with symbolic links if you really wanted you can make a symbolic link that points to a symbolic link that points to symbolic link that points to symbolic link etc etc etc and then the poor kernel would have to follow al",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " inode number and remember the inode number is the actual file with symbolic links if you really wanted you can make a symbolic link that points to a symbolic link that points to symbolic link that points to symbolic link etc etc etc and then the poor kernel would have to follow all these links in order to try t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "e inode number is the actual file with symbolic links if you really wanted you can make a symbolic link that points to a symbolic link that points to symbolic link that points to symbolic link etc etc etc and then the poor kernel would have to follow all these links in order to try to find the actual real file t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "file with symbolic links if you really wanted you can make a symbolic link that points to a symbolic link that points to symbolic link that points to symbolic link etc etc etc and then the poor kernel would have to follow all these links in order to try to find the actual real file the real directory that you tr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "give up and say i'm sorry i'm refusing to follow any to follow this anymore perhaps you deliberately or unintentionally made a cycle but clearly your symbolic linking is too deep alright so you can see that both symbolic and hard links actually have their purposes they are kind of very useful and they work with ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ok so symbolic links what are they and can i have one yes so you can have them they are really easy and they do a lot of work for you ok so here's the idea what if i act",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ght be an absolute link so for example it might say dot dot slash dot dot in which case this relative path is relative to the directory of the actual symbolic link or we might put for example actually i care about say like media slash hollywood and i can put all of my favorite disney films inside here for exampl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "other directores on my system and as we saw there's no limits to actually kind of then trying to follow this forever right so that's the idea of of a symbolic link how does the system know that it should treat this piece of text as a symbolic link as opposed to just a regular text file and the answer to that is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "en trying to follow this forever right so that's the idea of of a symbolic link how does the system know that it should treat this piece of text as a symbolic link as opposed to just a regular text file and the answer to that is there's a mode bit there's a mode bit that says this file is actually a symbolic lin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ymbolic link as opposed to just a regular text file and the answer to that is there's a mode bit there's a mode bit that says this file is actually a symbolic link so you've seen how we made one so from the shell you say ok i want to make a link i want to make a symbolic link and you start off with the target wh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "it that says this file is actually a symbolic link so you've seen how we made one so from the shell you say ok i want to make a link i want to make a symbolic link and you start off with the target where it should end up so for example if you had a whole load of android sdk 's you might say for example alright s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " load of them i might have some things on my home directory called say latest sdk so now when i update to a new android sdk i can always create a new symbolic link called latest and so it's very easy for me to talk about the latest sdk that i've got installed and when i start working on a project i could do thin",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " and when i start working on a project i could do things like cd into latest and i will actually be inside this directory some people create a lot of symbolic links inside their home directory so that it's very quick to navigate to different projects even though the projects themselves might be buried deep insid",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "gh the projects themselves might be buried deep inside deep other kind of nested directory structure ok so something you can do which is you know the symbolic links by default you never see this trick right you never notice that buried deep inside it as a file you never actually see it's contents unless you use ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " you never notice that buried deep inside it as a file you never actually see it's contents unless you use read link read link says do not follow the symbolic link instead read it as a simple text file just ignore the fact that it's a symbolic link and give me its contents instead right so let's have a look at t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ntents unless you use read link read link says do not follow the symbolic link instead read it as a simple text file just ignore the fact that it's a symbolic link and give me its contents instead right so let's have a look at this let's make some others right so i can say see if i actually have any in this dire",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "t's make some others right so i can say see if i actually have any in this directory right now ok it doesn't look like it let's make one let's make a symbolic link to say you're in a kind of dark forest or exits that says if you go east you end up in the same directory ok so not going to go anywhere so that's my",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "t ok so my current directory is changing and each time i look inside the current directory i can see a bunch of files and one of them happens to be a symbolic link ok so how can i detect symbolic links from c code clearly ls can do it it's giving me some hints about these different files so let's do all again th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ing and each time i look inside the current directory i can see a bunch of files and one of them happens to be a symbolic link ok so how can i detect symbolic links from c code clearly ls can do it it's giving me some hints about these different files so let's do all again there you go you can see that it's a li",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "in there you go you can see that it's a link and in fact we get a hint on the left hand side over here to say hey the mode bits are telling me it's a symbolic link ok so how can i detect that right let me show you how not to do it we remember that i said oh look here's the is link why we had to skip the i inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ll write the result into s assuming that works so if this returns zero we know it worked ok i surely could say right tell me is this a link is this a symbolic link surely that would be true and the answer is no if i look at the mode bits of this it would actually say nope this is a directory why because stat jus",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "tat just like open followed the link in attempting to open this file or this directory the kernel automatically said oh i see you're trying to open a symbolic link i'm going to follow the money right so that's not very useful we'd actually like to know this time that no do not follow if this is a symbolic link a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "a symbolic link i'm going to follow the money right so that's not very useful we'd actually like to know this time that no do not follow if this is a symbolic link and how do we do that ok so with stat rather than using stat it's important to call l stat and l stat works just like stat except when you're actuall",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "do that ok so with stat rather than using stat it's important to call l stat and l stat works just like stat except when you're actually looking at a symbolic link if it is a symbolic link then it's actually going to tell you the meta information the inode information about the symbolic link you're going to find",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ather than using stat it's important to call l stat and l stat works just like stat except when you're actually looking at a symbolic link if it is a symbolic link then it's actually going to tell you the meta information the inode information about the symbolic link you're going to find out when the symbolic li",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ctually looking at a symbolic link if it is a symbolic link then it's actually going to tell you the meta information the inode information about the symbolic link you're going to find out when the symbolic link was created if you use this macro you can determine that yes it truly is a link and if you use lstat ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "mbolic link then it's actually going to tell you the meta information the inode information about the symbolic link you're going to find out when the symbolic link was created if you use this macro you can determine that yes it truly is a link and if you use lstat just on a regular file or regular directory it's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " stat so as usual it will fill out the structure for you so that's kind of the big tip is if you truly want to check whether a directory or file is a symbolic link use l stat and also you can check the mode bits then to see whether what you're looking at is actually a link if you forget use l stat then this this",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "hing will always return false because we end up looking at a regular file right so in the next video let's talk about some of the differences between symbolic links and hardlinks i'll see you then bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a6948c0b-717d-4a5a-afbc-f2641ef17bc1",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "r python for example or rust or c or some other language which is not bash or shell right so the next video let's go return to making directories and symbolic links in code i'll see you then bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e61962ea-1b9a-41e3-8779-5e49bf8449a5",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "which ones do you think will actually be successfully created and then after you've answered that i've got another question i'm making three more now symbolic links so with a symbolic link we need to specify its target in other words what kind of currently exists usually and we are pointing to the subdirectory h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e61962ea-1b9a-41e3-8779-5e49bf8449a5",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ill actually be successfully created and then after you've answered that i've got another question i'm making three more now symbolic links so with a symbolic link we need to specify its target in other words what kind of currently exists usually and we are pointing to the subdirectory hopefully we managed to ma",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e61962ea-1b9a-41e3-8779-5e49bf8449a5",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "th d i rs and so in this case the command we actually ran was lsd one d r two d i l three but i wanted to be lazy in typing right so what about those symbolic links ok so our symbolic links you remember we're in different colors why was that ok let's have a look at this a long form and you'll see that i've made ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e61962ea-1b9a-41e3-8779-5e49bf8449a5",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "case the command we actually ran was lsd one d r two d i l three but i wanted to be lazy in typing right so what about those symbolic links ok so our symbolic links you remember we're in different colors why was that ok let's have a look at this a long form and you'll see that i've made three symbolic links here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e61962ea-1b9a-41e3-8779-5e49bf8449a5",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "o our symbolic links you remember we're in different colors why was that ok let's have a look at this a long form and you'll see that i've made three symbolic links here they are and this is their content right this is what happens if we were to say read link to say quick one ok would actually get that contents ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e61962ea-1b9a-41e3-8779-5e49bf8449a5",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "for the other two their simple links that don't go anywhere they are pointing to directories which just don't currently exist which you can do with a symbolic link symbolic doesn't think doesn't care it's only if we try to use it for example if we try to go into quick to complain to say i'm sorry we cannot navig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e61962ea-1b9a-41e3-8779-5e49bf8449a5",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " just been changing is stored inside the i node ok so that's the kind of a quick introduction to making links thinking about these permissions making symbolic links and making hardlinks you'll notice that when you actually make a file both from the shell and from the from the interface you can actually explicitl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e8fc277c-1bd5-4c49-99df-f1b1b017da12",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "how we can converse a directory or navigate into it so for that i will need a terminal here right so right now are we east remember when playing with symbolic links here so let's get back out of here perhaps if we want to know key tell it off there we go right so perhaps we want to go to a particular directory l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfe8f684-5acd-41bf-8ba0-276a3fc52ffb",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "about the name in case insensitive minus i name something that ends with i so so great that's what we need right so of course i could actually have a symbolic link 'cause i don't want to keep having to type that so let me just make a symbolic link so l n minus s right and i can call this test dot iso alright so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfe8f684-5acd-41bf-8ba0-276a3fc52ffb",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "at that's what we need right so of course i could actually have a symbolic link 'cause i don't want to keep having to type that so let me just make a symbolic link so l n minus s right and i can call this test dot iso alright so now here i have my test or i so there it is ok i could have made a hard link as well",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f815b599-ae2e-4d57-9c3e-b1834f484942",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "on lenox this would actually print out the process id why because here i'm opening a special file called slash proc slash self and that is normally a symbolic link in lenox to the process numbers so then i could get the real path and get its name however i'm running on a mac so that did not tell me the process n",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "the expression rather than assign it to a local variable ok but if you do that's then great this will work now tell me what would happen if abc was a symbolic link to a directory where the code that we've got right now will report that abc is a directory why because we used just a regular kind of stat and that w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "tory where the code that we've got right now will report that abc is a directory why because we used just a regular kind of stat and that will follow symbolic links automatically if we actually wanted to find something about the actual symbolic link then we would do things like else tap for example to actually l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "ecause we used just a regular kind of stat and that will follow symbolic links automatically if we actually wanted to find something about the actual symbolic link then we would do things like else tap for example to actually look at the original link and then we could also do things like ass is what is it physi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "the original link and then we could also do things like ass is what is it physical it looks something like is lnk there we go to check to see if it's symbolic link but that will only work if you've used elstat not stat otherwise you've already followed the money and as usual you're pulling in the mode bits there",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": " that's the metadata there what do we got some next what q oh i've just answered the following question right so yeah if i want to find out if it's a symbolic link yet we should use l stat and also let's take all of that and stick it in here so will check to see if that is equal to zero for succeeded and also wi",
        "label": "Use"
      }
    ]
  },
  {
    "text": "void pointer",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "3b9f5713-ca11-400c-bd6f-428347679520",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "le is how can i make these two calls actually returned the same address now you might notice in this example here that i've got these void things so avoid pointer means i want to store an address and i'm not going to tell you what there just simply treat it as a number as an address as a memory location and we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3b9f5713-ca11-400c-bd6f-428347679520",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "about what kind of objects or what kind of primitives or anything about with storing there so we can't we can't we shouldn't do pointer arithmetic on void pointers or at least that's the official line more about that later ok so we've got our two memory allocation requests how could these possibly would be retu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "t, strcat is immediately going to find that nul byte and say ah-ha that's where i should start from the last thing i notice is that returns a type of void pointer a void pointer isn't is not scary it just means i want to point to some memory but i'm not going to tell you what is there i just actually really onl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "mediately going to find that nul byte and say ah-ha that's where i should start from the last thing i notice is that returns a type of void pointer a void pointer isn't is not scary it just means i want to point to some memory but i'm not going to tell you what is there i just actually really only care about th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "117f0f11-cc38-4a40-b359-8f1ba81655e1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "t's exactly what i need as my return value ok so i will just however just check to see if if it failed esperat returns negative one when cast it as a void pointer if it fails if it refused to give us any more memory case so in that case we should return null because that's part of the malloc specification wait ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "117f0f11-cc38-4a40-b359-8f1ba81655e1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " to give us any more memory case so in that case we should return null because that's part of the malloc specification wait just a reminder what does void pointer mean it means i'm a pointer but i'm not going to declare or i don't care i want to keep secret exactly what i'm going to store at that location and v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "117f0f11-cc38-4a40-b359-8f1ba81655e1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "r mean it means i'm a pointer but i'm not going to declare or i don't care i want to keep secret exactly what i'm going to store at that location and void pointers can be cast to other kinds of pointers implicitly so you don't need to explicitly say cast that to another type ok so yeah we don't care about what ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "117f0f11-cc38-4a40-b359-8f1ba81655e1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "this pointer is just simply or what was going to be stored there just simply that if i want to compare it to get negative one i should cast out first void pointer ok right so now i'm before i'm returning i'm doing some logging here printf say hey great now you have some memory at that location so let's print ou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1eae9ffe-aa3f-41af-bb4f-a63743eb80a6",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " notice i'm not writing any kind of casting in here so i was some people traditionally like to put casting here 'cause we're changing the type from a void pointer to a double pointer in practice i found i don't like to do that i think it's necessary and be leads to more visual clutter when the most likely mista",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "re is always going to be the metadata i just need to therefore subtract off some magic number to get to the start of the metadata so if you give me a void pointer that i perhaps just need to go back sixteen bytes or sixty four bytes or however big the size of this metadata is and how can i determine the size we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " be absolutely correct however or modern compilers gcc clang and others do support this is the following extension which is you can add and subtract avoid pointers and if you do that then they behave like character pointers and in particular you are adding subtracting bytes off this memory location so we're wal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "ith shows enough spacing enough bytes where each one of these entries is a major data entry type in other words is enough space for two integers and avoid pointer so and you start off with a pointer that is looking at the beginning of the user area but i've just casted it so i can walk backwards by one and so i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " your pointer types because we don't want to accidentally subtract minus size of something when i'm fat you're working with the pointer that is not a void pointer or character pointer if i had for example accidentally instead of writing minus one here i'd written minus size off blah blah blah i would have gone ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": " would be ok that is going to be just knew size ok right whoops this is a great example of forgetting about pointer arithmetic the type here is not a void pointer it's pointer to one of these entry struts so i'm not adding just one i'm adding a very large number here but this is in bytes so what's the address i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "hain ok there are other ways to calculate the size you can do differences are two pointers if you do that as usual remember to always be working with void pointers or character pointers void pointers you're not supposed to do pointer arithmetic on but in practice all modern c compilers will support that okie ri",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "734339b1-3010-43a2-9cfa-55d690efddab",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "ulate the size you can do differences are two pointers if you do that as usual remember to always be working with void pointers or character pointers void pointers you're not supposed to do pointer arithmetic on but in practice all modern c compilers will support that okie right so we scared out some ideas here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "633f10ed-2038-4da2-9855-c3cad245559f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ethod or case so let me have my little program called say shout right except it needs to be something that p thread can understand so let's make it a void pointer and take a void pointer are right so what should we shout let's have this one prints whatever you said so actually we can shorten this code to just p",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "633f10ed-2038-4da2-9855-c3cad245559f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "have my little program called say shout right except it needs to be something that p thread can understand so let's make it a void pointer and take a void pointer are right so what should we shout let's have this one prints whatever you said so actually we can shorten this code to just print percent s and then ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "need a way to say to the cpu hey please start running this particular function and the kind of function that peter supports is something that takes a void pointer and returns a void pointer so hopefully this is no longer looking quite so so gnarly right so we can see this returning a void pointer and takes a vo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "u hey please start running this particular function and the kind of function that peter supports is something that takes a void pointer and returns a void pointer so hopefully this is no longer looking quite so so gnarly right so we can see this returning a void pointer and takes a void pointer it still looks p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "g that takes a void pointer and returns a void pointer so hopefully this is no longer looking quite so so gnarly right so we can see this returning a void pointer and takes a void pointer it still looks pretty awful and that's because it's a they function definition in c so let's talk about that when you want t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "er and returns a void pointer so hopefully this is no longer looking quite so so gnarly right so we can see this returning a void pointer and takes a void pointer it still looks pretty awful and that's because it's a they function definition in c so let's talk about that when you want to talk about pointers to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "are or once we take a double and return a double and that's exactly what we have here for a start routine we want to talk about functions that take a void pointer and return a void pointer now the taking and returning avoid pointers p thread doesn't actually care about those values they are for our benefits and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "le and return a double and that's exactly what we have here for a start routine we want to talk about functions that take a void pointer and return a void pointer now the taking and returning avoid pointers p thread doesn't actually care about those values they are for our benefits and in fact when we say hey c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "hat we have here for a start routine we want to talk about functions that take a void pointer and return a void pointer now the taking and returning avoid pointers p thread doesn't actually care about those values they are for our benefits and in fact when we say hey colonel please start my other function for m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " be it might be the milliseconds time or it might be practically instantaneous but at some point in the future they we know that the function takes a void pointer and so this is the value would like to pass in ok and the return value that is going to be the exit value from the function so if the thread never ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "include p thread to h i get that from the band page now let me have something which actually runs separately ok so let's do i know it has to return a void pointer and i will call it let's say hello alright and key and we know it takes a void pointer right so what should my little program do i will make my littl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ually runs separately ok so let's do i know it has to return a void pointer and i will call it let's say hello alright and key and we know it takes a void pointer right so what should my little program do i will make my little thread wanna do a big calculation yeah i'll get it to just call sleep for a second ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "s there so the type is just void ok so let's compile that ok after one second they both finish what return value one is zero what did we do ok so see void pointer why did that fail is a good question wait oh because yes do you see why ok we never got to return statement yes my p three at exit took away my threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "23d922a6-680c-4d83-887e-43c407779538",
        "lecture": "CS",
        "lecture_num": 12,
        "context": " hacky way to do it so here's what we'll do we will have a little loop here and my little loop will know when i call pizza create i have to pass in a void pointer but what if that void pointer actually was just the y value in other words somehow will take the value that we want to give to a thread and convert i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "23d922a6-680c-4d83-887e-43c407779538",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "what we'll do we will have a little loop here and my little loop will know when i call pizza create i have to pass in a void pointer but what if that void pointer actually was just the y value in other words somehow will take the value that we want to give to a thread and convert it into just the void pointer t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "23d922a6-680c-4d83-887e-43c407779538",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "t void pointer actually was just the y value in other words somehow will take the value that we want to give to a thread and convert it into just the void pointer type so we're literally just casting it pretending that the values zero is a memory location pretending that value one is a memory location etc so we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "23d922a6-680c-4d83-887e-43c407779538",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "at value one is a memory location etc so we're not actually passing in the address of a real piece of memory we're just converting the integer into a void pointer into a memory pointer we have to do the same hack when we receive this information so we've asked thread create to start a thread and to get a new cp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "23d922a6-680c-4d83-887e-43c407779538",
        "lecture": "CS",
        "lecture_num": 12,
        "context": " is an exciting hack honestly we have no true way to know whether enters officially going to be as large or smaller than what can be represented by a void pointer i certainly wouldn't recommend this in production code but i hope you can see how it works and certainly you will come across these kind of hacks aga",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "74e03522-c6e8-4e59-84ba-95a62ce5f3fd",
        "lecture": "CS",
        "lecture_num": 12,
        "context": " new thread will go in here so that null is going to be the value of this pointer if i'd said something else like an address of a variable again that void pointer would have taken that address ok so great we're starting three threads and then after that loop we're going to call p thread exit and as you know wha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "802abd70-0cc9-49a1-8916-5ff1c0a98738",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "stead we're saying hey here's the address or something you might need and if we go and look at calculator here's what we do we say thank you for that void pointer but i don't want to avoid point i know there's an integer that location so let me cast that argument as an end pointer and the only reason i need to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "802abd70-0cc9-49a1-8916-5ff1c0a98738",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "et me cast that argument as an end pointer and the only reason i need to write it like this is just because peter create create requires us to have a void pointer argument and avoid point of return value so great now i've got an integer value at that site interpoint sure i know there's never there so let me rea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "98759da5-160f-4e80-9141-033193a74769",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "to some memory so let's say that this id represents some integer type thing which is some address type things or just print it out and now i've got a void pointer i can use percent p to say right treat this doesn't address ok so will pick that up and if we wanted we could play the same trick down here we put th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e12861bf-8be8-4e4d-a2d8-c07e5d79f3dd",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "to some memory so let's say that this id represents some integer type thing which is some address type things or just print it out and now i've got a void pointer i can use percent p to say right treat this doesn't address ok so will pick that up and if we wanted we could play the same trick down here we put th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e574f9c9-dc9b-4dd2-b746-c100de94ae3b",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "to some memory so let's say that this id represents some integer type thing which is some address type things or just print it out and now i've got a void pointer i can use percent p to say right treat this doesn't address ok so will pick that up and if we wanted we could play the same trick down here we put th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8c34ce3-8698-443a-b044-40b8ce707888",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " let's have a look at that alright so here it is i i get to start now three threads are call my pizza at exit and it is ok and i'm going to pass in a void pointer to my array of starting and ending positions here so now when i call runner on pc it create that's given by people there ok what is runner oh it's ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "o write a temp to write a ring buffer and let's see what we can see about this ok well it's so we've got our buffer of sixteen slots looks like sixty void pointers so we can use it for any kind of pointer we're going to keep track of an in and out a number of items and we're using condition variables so my firs",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7d923e20-7168-4cea-b7dd-1ffabc4e892c",
        "lecture": "CS",
        "lecture_num": 23,
        "context": " take this destination first alright great ok so back to my code and if i rely on the c compiler i can just there for providing my buffer is either a void pointer or character pointer i just add these two together to calculate the correct address of where we where we want to write to ok so let's do that right i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "31222488-6252-419c-9c31-9ff072cffeee",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e thread ids and i'm going to say ok i want a thread that is going to start function a and another thread starts function b and we're going to pass a void pointer the address of the string literals so the address of the capital a and address of the capital x to each one right so what will function b do function",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5f3d6627-e0d7-473c-920e-5f3d6584e568",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "where the fed id 's and i'm going to say ok i want to thread that is going to start functioning and let's start function be and we're going to pass a void pointer the address of the string literals so the address of the capital a and address of the cadillacs to each one right so what will function be do functio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "78b23023-0958-47d0-90f2-41607cd135b3",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "where the fed id 's and i'm going to say ok i want to thread that is going to start functioning and let's start function be and we're going to pass a void pointer the address of the string literals so the address of the capital a and address of the cadillacs to each one right so what will function be do functio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "84c32d4e-7aac-462f-b6e7-5a15921bfb97",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "where the fed id 's and i'm going to say ok i want to thread that is going to start functioning and let's start function be and we're going to pass a void pointer the address of the string literals so the address of the capital a and address of the capital x to each one right so what will function be do functio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "95f1881e-d728-4112-81d1-6c7060a34beb",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "let's call right so ok right here zafar descriptor but i don't want to start from the beginning of the buffer let me just use pointer arithmetic on a void pointer here ok we know compilers today will accept so well but take buffer plus let me add an offset ok right but the total number of bytes i'd like to send",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aa979b80-c6f3-4eca-aaf9-1b888ebea383",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "where the fed id 's and i'm going to say ok i want to thread that is going to start functioning and let's start function be and we're going to pass a void pointer the address of the string literals so the address of the capital a and address of the cadillacs to each one right so what will function be do functio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8eabf8ac-475f-41e0-83f4-7e1e117f86f0",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "ou can actually get a lot more information from the kernel about why this signal was created and what was going on at the time then door so there's a void pointer you can use yourself as well ok so this more complicated function is called a cig action and by default is not used you have to specify a flag a flag",
        "label": "Intro"
      }
    ]
  },
  {
    "text": "code review",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "7a7590a3-2294-4d27-89ff-d625512f82e5",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "hi i've got a challenge for you let\u2018s do a code review of the following code and see what errors we can spot in this and how we could improve it ok so get my little pen out here let's choose a new color o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "802abd70-0cc9-49a1-8916-5ff1c0a98738",
        "lecture": "CS",
        "lecture_num": 12,
        "context": " does that help ah has made it worse ok so let's see what happened to our code what what caused it alible program bug right so let's go actually do a code review ok so right so here we go right this probably should causes some concern here right that i'm looking at lines that say don't delete this line and you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0f70d1df-7a51-4bea-9a39-589fd7c57802",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "se you might implement a database so it's critical that only one process updates particular row at a time ok so you can imagine that if we were doing code review you might say hold on a moment there i've got a race condition here between say my implement incrementing i and when we actually reading the value of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "849095e8-a9e5-4467-8af4-be36e4991af6",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "se you might implement a database so it's critical that only one process updates particular row at a time ok so you can imagine that if we were doing code review you might say hold on a moment there i've got a race condition here between say my implement incrementing i and when we actually reading the value of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b60fb3d4-0600-4074-8432-449ea0067907",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "se you might implement a database so it's critical that only one process updates particular row at a time ok so you can imagine that if we were doing code review you might say hold on a moment there i've got a race condition here between say my implement incrementing i and when we actually reading the value of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " one percent level but is that is that is that does that give me confidence to put this into production no i'd actually want to kind of actually do a code review and think carefully about how my code works so so in multithreaded code it's a very important we have strong understanding about how our code works a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " one percent level but is that is that is that does that give me confidence to put this into production no i'd actually want to kind of actually do a code review and think carefully about how my code works so so in multithreaded code it's a very important we have strong understanding about how our code works a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " one percent level but is that is that is that does that give me confidence to put this into production no i'd actually want to kind of actually do a code review and think carefully about how my code works so so in multithreaded code it's a very important we have strong understanding about how our code works a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " one percent level but is that is that is that does that give me confidence to put this into production no i'd actually want to kind of actually do a code review and think carefully about how my code works so so in multithreaded code it's a very important we have strong understanding about how our code works a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "bout that and then i'll tell you in my point of view ok right so a preferred mutex lock let's talk about positive things first let's do like positive code review here so the good news with this implementation is that only one writer at a time actually gets to run ok that the only way you can get through to the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ys need to write this using a while so that we can only continue if condition is met in this case the taxes become positive ok right so that's it for code review in next video let's talk about livelock bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ys need to write this using a while so that we can only continue if condition is met in this case the taxes become positive ok right so that's it for code review in next video let's talk about life lock by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ys need to write this using a while so that we can only continue if condition is met in this case the taxes become positive ok right so that's it for code review in next video let's talk about life lock by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ys need to write this using a while so that we can only continue if condition is met in this case the taxes become positive ok right so that's it for code review in next video let's talk about life lock by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "hi welcome to lecture twenty one so let's get started with a bit of a code review suppose you were given the following code and asked to review it, ok what do we think of the following so how can we improve it and what's its purpos",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ress then will lock that first then will not be and then if it turns out that be was actually a smaller address then finally we lock a so turns about code review well i personally would like to see some squiggly braces around here a little bit safer and maybe if we could put on two separate lines as well but w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ok let's do a code review on some attempt to write a temp to write a ring buffer and let's see what we can see about this ok well it's so we've got our buffer of sixteen slots",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "tex initiate the very least we need to use the magic constant p thread mutex initializer ok so let's check that ok what else can we see in our little code review ok so we are using a pizza at mutex lock but we also have this infinite loop here that while the count is less than sixteen loop forever oh ok so tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": " and finally returned with so what do you think about that if you test this likely it will appear to work however if you gave it gave me this is at a code review i would be unhappy why would i be unhappy ok so the thing that i don't like is that we open the file but we never closed it so if we keep calling thi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2d49256b-843d-4c27-969c-5a4a8ef761ed",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to lecture twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4bb4d9de-3031-4ca5-9b24-28a62fa33ed8",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to like twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "50ebb1c4-4d86-4abe-bcf6-d6d0948214d6",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to lecture twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to lecture twenty four let's start with the code review case so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "now and then we've got lots of threads producing things and consuming things as well ok so here's some questions that we might want to ask in sort of code review first of all can we find a way that deadlock can occur in other words when could it actually get stuck and if so under what conditions could it be fo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to letter twenty four let's start with the code review case so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "now and then we've got lots of threads producing things and consuming things as well ok so here's some questions that we might want to ask in sort of code review first of all can we find a way that deadlock can occur in other words when good it actually get stuck and if so under what conditions could it be for",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca90fc46-67a5-4381-9bae-274ec85fffbb",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to like twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to lecture twenty four let's start with the code review ok so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "now and then we've got lots of threads producing things and consuming things as well ok so here's some questions that we might want to ask in sort of code review first of all can we find a way that deadlock can occur in other words when good it actually get stuck and if so under what conditions could it be for",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to letter twenty four let's start with the code review case so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "now and then we've got lots of threads producing things and consuming things as well ok so here's some questions that we might want to ask in sort of code review first of all can we find a way that deadlock can occur in other words when good it actually get stuck and if so under what conditions could it be for",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to letter twenty four let's start with the code review case so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "now and then we've got lots of threads producing things and consuming things as well ok so here's some questions that we might want to ask in sort of code review first of all can we find a way that deadlock can occur in other words when good it actually get stuck and if so under what conditions could it be for",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ed85781a-a46c-454f-99d6-e290835a6979",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to like twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ling opened are won't work in the future we don't have any spare file descriptors left ok the other thing that we might comment on if we were doing a code review instead opened a could fail so if this returns null for example there is no current directory 's kind of a little bit bizarre but we could imagine th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ling opened are won't work in the future we don't have any spare file descriptors left ok the other thing that we might comment on if we were doing a code review instead opened a could fail so if this returns null for example there is no current directory 's kind of a little bit bizarre but we could imagine th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f93d7eee-504a-401c-940d-9680e03614c3",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "ptor table to store any new information about new open files ok so this is a standard problem in real programs that we don't release resources and in code reviews make sure that you're not only releasing resources when everything goes fine but also that you're releasing resources when everything does not go fi",
        "label": "Use"
      }
    ]
  },
  {
    "text": "main method",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "491a80ef-eda8-4e66-a332-f2dd12cb7ebe",
        "lecture": "CS",
        "lecture_num": 2,
        "context": " put those braces around those single statements for the year from the else but in the interest of time let's keep going ok so we've got ourselves on main method now it's time to write our contains out method so we wanted something returns an int and it's going to be called contains at an we want something whi",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "what we're going to see let's try it out ok so i've got questions seven ready to go is the same code again i've just wrapped it with standard io in a main method so let's run this let's compile it hey questions seven and i'll produce some output they call it questions seven so now i've got a question seven exi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f6868da9-5be3-472a-ac74-0889cc0d698a",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "e a look at kind of question eight let's see ok there we go right i better fix this up question eight dot c so what do we want to do inside my little main method here i need a variable so we know i know that a s printf takes a variable have you get my in some kind of funky mode that ok right right case we want",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " demo right we demo and i need to declare it i don't need to write that i can just i know that it's inside you unistd.h right so now we have a little main method high maine and you take the number of arguments and a pointer pointer rv fight ok so let's just read from standard input right now i need a place for",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aaed71d6-01a3-42f8-b99e-ca3a84253b58",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "demo here key right so i will create demo ok right so we need see uni standard and standard io for going to print stuff help ok and that's how little main method here main function so ok so we can do things like ok who's the user and we see get em and well acid environment available card user and what secret d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "603b0b01-6f4b-4c59-b606-c075dd30516e",
        "lecture": "CS",
        "lecture_num": 5,
        "context": " right so are colic exact demo dot c and right so we will have unique standard h i'll have standard io just we can print a few things out i'll have a main method and today i'm not going to declare what the arguments are for maine so it's just too little prince is there so what should we do let's print somethin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8459ee6a-30aa-499c-9226-74f97c8f7ce4",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "ray all of the arguments that we're going to get to give to this so i want you to think for a moment where you seen this with in terms of arcv of our main method case so when here we go when we when we call maine maine is called for us what's going on with the argv well remember that i have a little variable t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "6294f981-6e83-4197-a055-9b34816b1257",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "s movies never mind life is still fun right ok so instead i'd like you to workout what does the following code do it looks pretty tricky so we have a main method and it's written in a pretty obtuse and difficult way to read instead of rvr knoxy we just got this little counter then we have a while loop and look",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "67bd4b3a-2f54-49a6-9c31-ff5dd35bf7d9",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "fine the compiler that would like to use i'm going to choose gcc but we could choose c lang or we can choose a different compiler and then decide our main method let's check to see if it's being used as we as we like so did you give me right number of arguments and then if you didn't let's kind of suggest usag",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " how it works what is trying to do and how we might improve it so what do we see ok i get my little pen going right so right i have a our method here main method and i'm checking to see if oxy is not equal to two in other words this little program that expects its own name and some command file to run ok let's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "633f10ed-2038-4da2-9855-c3cad245559f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "se of you that actually have had to go let's let's see how far we get so i'm going to try to do this quickly alright so here's what we need we need a main method i'm going to start with a new program let's meet hello world ok write some things remember first of all we need what we need the peace red library so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "633f10ed-2038-4da2-9855-c3cad245559f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "flushed something else and now will exit so what's use pthread_exit just practice ok so i've got something we can shout stuff out great now i need my main methods so let's not declare the arguments today will be a bit lazy and we want to call shelt so shout hello right and then shouts world k what do you think",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aa01a980-f756-4c1c-87f6-abf1aed24f98",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "happened to be the very last thread then then the process will finish uh ok so that gives us a reason sometimes for calling p thread exit inside your main method is a way to be lazy let's let's go have a look at this so if i had a program that started many many threads are case so imagine ok there we go i star",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d80efb9d-96a2-4cc0-ad4f-a9049155313e",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "happened to be the very last thread then then the process will finish uh ok so that gives us a reason sometimes for calling p thread exit inside your main method is a way to be lazy let's let's go have a look at this so if i had a program that started many many threads are case so imagine ok there we go i star",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "74e03522-c6e8-4e59-84ba-95a62ce5f3fd",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "e variable here ok so let's say analyzes code and see what we can see right so we're going to have looks like three new threads created and inside my main method i'm going to have an array of these thread i ds ok so it looks like we need to fill in some code here right so what should be right here we need some",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d20bd8cb-7714-4093-a0bd-850b11d62c39",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ic code to get the width and the height you see i'm taking pointers to it to integers and then i update i right into those locations ok so back in my main method where are we we can say get terminal width and will pass in the address of two integers the last thing to do is change the colour so there are contro",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ttle warm up have a look at some multithreaded code that i've written to download two things at the same time so this is what we got so far here's my main method i'm going to use two p threads today so we can see i've got two thread i ds and when i call pizza hut create i'm going to pass in the address of my t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hread doesn't need to run anymore ok great so if i run this i've got a potential race condition can you see where ok so our race condition is that my main method might finish early or at least might continue to early if i actually now wanted to wait for these things to complete how would i do that ok so hopefu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "98759da5-160f-4e80-9141-033193a74769",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "at how we can write some code which is non deterministic and then fix it up in different ways so here we go let's get started right i've got a little main method down here and i'm going to create ten threads and each time i go to store the address inside my little ray here of thread i ds and then i call pizza ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "these race conditions occur and then maybe we can figure out how to use our mutex locks to fix them right so here's a story so far i've got my little main method doesn't do much it creates irwan thread here for under one and another thread for two ok then we run for five seconds then we set a global flag code ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "thread here for under one and another thread for two ok then we run for five seconds then we set a global flag code please stop ok and then inside my main method i just wait for both to finish before returning so that is my main method nothing to it there's going to have a look at these two little runner threa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ve seconds then we set a global flag code please stop ok and then inside my main method i just wait for both to finish before returning so that is my main method nothing to it there's going to have a look at these two little runner threads here ok so here we go first of all let's look at run a one doesn't do m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e12861bf-8be8-4e4d-a2d8-c07e5d79f3dd",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "at how we can write some code which is non deterministic and then fix it up in different ways so here we go let's get started right i've got a little main method down here and i'm going to create ten threads and each time i go to store the address inside my little ray here of thread i ds and then i call pizza ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e574f9c9-dc9b-4dd2-b746-c100de94ae3b",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "at how we can write some code which is non deterministic and then fix it up in different ways so here we go let's get started right i've got a little main method down here and i'm going to create ten threads and each time i go to store the address inside my little ray here of thread i ds and then i call pizza ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "int our case so let's briefly introduce this and then you can pause the video and work it out i've got a fireworks variable you'll see that inside my main method i set fireworks equal to one and then here is my firework code ok so tell me based on what you can see what do you think that the highest value that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok right so let's analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " about this so we know that when we escape out of here the very first thread will see of fireworks value of one because we changed it upstairs in the main method so we implement so we increment it to two case of wig the first escapes out of here will will print out too and then we decrement it down to one agai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok right so let's analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " about this so we know that when we escape out of here the very first thread will see of fireworks value of one because we changed it upstairs in the main method so we implement so we increment it to two case of wig the first escapes out of here will will print out too and then we decrement it down to one agai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok right so let's analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " about this so we know that when we escape out of here the very first thread will see of fireworks value of one because we changed it upstairs in the main method so we implement so we increment it to two case of wig the first escapes out of here will will print out too and then we decrement it down to one agai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok right so let's analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " about this so we know that when we escape out of here the very first thread will see of fireworks value of one because we changed it upstairs in the main method so we implement so we increment it to two case of wig the first escapes out of here will will print out too and then we decrement it down to one agai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok right so let's analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " about this so we know that when we escape out of here the very first thread will see of fireworks value of one because we changed it upstairs in the main method so we implement so we increment it to two case of wig the first escapes out of here will will print out too and then we decrement it down to one agai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok right so let's analyze this challenge ok so we've got a global variable called fireworks here and inside our main method we're going to do we're going to create a whole load of pizza it's ok and make a note of their thread i ds pass in the firework function ok and then ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " about this so we know that when we escape out of here the very first thread will see of fireworks value of one because we changed it upstairs in the main method so we implement so we increment it to two case of wig the first escapes out of here will will print out too and then we decrement it down to one agai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "looking for the magic slash r slash n slash r slash end mean great we've read enough to see the end of the headers of the request ok so here comes my main method where i'm going to set up my signal handler straightaway will print out the ip address and we actually want to serve up this meme image as well so ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "24389f97-732f-4c49-9ec5-d5ea195e83da",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "n thread to ever have to worry about getting a signal hey i don't want any signals being delivered to it so the first thing i'm going to do inside my main method here my main function so is to set a cig mask to say hey block all these signals in fact block sigterm blocks eginton if i wish i could walk a whole ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a9f8e960-2caa-4eb8-b9a8-108fee71d968",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "imilar trick we could save match say one through seven ok and they're gone as well what do we have a working program not quite we better actually add main method in here ok and we got the pending and control see if control c is printed put that anna finally return zero ok ok right so let's try compiling that c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ff918b22-18b3-4e5f-96f5-e6eb462fbefd",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "ith mmap which is guess what you can use mmap without even having a file to write into so it's kind of see this here it is right so here's my kind of main method today instead of using with mmap to say hey here's my file descriptor please map this into memory we're going to say actually i want anonymous mappin",
        "label": "Use"
      }
    ]
  },
  {
    "text": "counting semaphores",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ng actually there ok so in these situations we actually want to block alright so let's think about how we can do that and for that we're going to use counting semaphores their perfect we can use accounting semaphore to represent the number of items in there and we can use a counting semaphore to represent the amount o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " want to be able to share this counting semaphore across multiple processes using shared memory but more about that in the future also notice that my counting semaphores here number spaces and numb items i'm afraid works on linux but does not work on os x so if you in turn apple maybe think about this as a summer proj",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a7b5c6d-c236-498b-8c94-c4baac66feaf",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "hi ok so two little kind of fun problems for you here first one is which is the correct way to kind of completely statements for counting semaphores so i've got accounting center for and you need to choose where you want to say will always may or will never ok so what about send post will it block",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ow you going to implement that ok right the last thing automation is is some interesting challenges to think about is can you make a value using only counting semaphores and can you make a barrier using only mutex locks or like more about that in a future lecture but there's a kind of fun puzzles to think about when y",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ta structure so i've actually got two different kinds of concurrency things i'm worried about here one is the size of my buffer and i'm using the the counting semaphores for that and the other is a critical section and i'm using a mutex locks to protect that ok so we've done that we've done that right ok so we've impl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "is a critical section and i'm using a mutex locks to protect that ok so we've done that we've done that right ok so we've implemented a version using counting semaphores what about condition variables suppose you wanted to make this work on a mac as well could we do it with condition variables and the answer is yes so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " a mac as well could we do it with condition variables and the answer is yes so of course we can so condition variables are more general purpose than counting semaphores and we would replace this same weight with the kind of code that we saw with our cookie eat a code where we check this value safe is equal to zero an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have another",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally calls stem post but that's not going to happen because thread what is st",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have another",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is s",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have another",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is s",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have another",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is s",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have another",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is s",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have another",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is s",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "199ad3c7-e0c6-414e-8fa1-80276ca9fdcc",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "re kernel says \"\"that's it i'm only\" \"going to support that number.\"\" so you can even think of for\" example the ring buffer that we implemented using counting semaphores as an implementation of a pipe! ok so if i was to start removing characters out of this then i could actually kind of keep sending anymore. however a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2d49256b-843d-4c27-969c-5a4a8ef761ed",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "can actually hold so presumably we were going to corrupt something possibly value that we have not yet written out so what do we got here we have two counting semaphores and will see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4bb4d9de-3031-4ca5-9b24-28a62fa33ed8",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "can actually hold so presumably we were going to corrupt something possibly value that we have not yet written out so what do we got here we have two counting semaphores and will see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "50ebb1c4-4d86-4abe-bcf6-d6d0948214d6",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "n actually hold so presumably we were going to corrupt something possibly a value that we have not yet written out so what do we got here we have two counting semaphores and we'll see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca90fc46-67a5-4381-9bae-274ec85fffbb",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "can actually hold so presumably we were going to corrupt something possibly value that we have not yet written out so what do we got here we have two counting semaphores and will see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ed85781a-a46c-454f-99d6-e290835a6979",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "can actually hold so presumably we were going to corrupt something possibly value that we have not yet written out so what do we got here we have two counting semaphores and will see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ation event has happened that we allows us to continue so what do we got we've got things like mutex locks you are able to acquire the lock we've got counting semaphores somebody's returned that piece of pizza into the counting semaphore so now we get to pull it out and continue and of course we've seen condition vari",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecc913a8-cf8a-4205-b23c-530df9ebc4eb",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "und so when we actually want to remove implement remove we're going to see some very similar code except that of course you swap the use of these two counting semaphores around and we're going to call add a remove roar method or something the last thing we need to think about is how we want to initialize these things ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "peter condition",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "and in fact i lied again because it's actually not two things is going to do it does three things when you finally wake it up before it returns outta peter condition wait it calls p thread mutex lock ok so that means when it finally continues when it finally goes around in this code it has to meet ex again ok so w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ways have a mutex lock and never we work and we have our condition application condition that the cake value must not be zero and here's the big idea peter condition wait we call it a condition variable but there's no condition part that the kernel or the system actually cares about it's up to us to write this whi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "rwise if there's pieces of kate lying about no one 's going to be sleeping when they call decrement so let me test that if cake is now on let me call peter conditions signal now some of you might ask is it best to call peter conditions signal or broadcast before or after you are not the mutex surely it's better to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "eping when they call decrement so let me test that if cake is now on let me call peter conditions signal now some of you might ask is it best to call peter conditions signal or broadcast before or after you are not the mutex surely it's better to call it afterwards but the surprising thing is that actually best pr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "r a few seconds we think we call implement a few times so you could see that we've called broadcast now we're going to wake up the document method so peter conditioned weight returns and is able to eat cake right so in fact we can follow this pattern for a few few times the producer makes more cake each time we in",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ause you're not changing the code doesn't mean that someone else might so it's it's a hint to the optimizer right the last thing we want to say about peter condition wait is it has two important ideas first of all the unlocking the mutex and sleeping actually occurs as if it's an atomic operation so there's no opp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "x and going to sleep where another threat might call peace road conditions signal we don't want accidentally to allow another thread to continue call peter condition broadcast or signal sent out a signal when there's no one sleeping and then we go to sleep that would be bad like we would never wake up so those two",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hen we go to sleep that would be bad like we would never wake up so those two operations actually occur as one as if its atomic and secondly actually peter condition wait can suffer from something called experience wake up let's spell that correctly spurious weekend which is where it wakes up for no reason oh but ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " we've got a test in here and so if it's supposed to go back to sleep because there's still no cake then we go once around the while loop and we call peter condition wait again ok so why does spears wakeups occur they occur because it is incredibly hard to actually say for sure that we unlock the mutex and went to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "s case say that well if we cannot guarantee that we didn't miss a signal instead we will allow a spurious wake up to occur so that's why you must use peter condition wait inside a while loop knot f statement right that's it for now i'll see you in the next lecture by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ey do they immediately around the while loop again and they will check to see if they can now actually proceed if they can't thread will go back into peter condition wait and block again so that's what we're doing is we're just say i don't want to repeat any additional logic in here just wake up somebody who might",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "her particular i thread has managed to lock mutex locks so if it gets dark inside this moment here it will be stuck on lock if it is about to go into peter condition wait you will see that it will see nap here ok so if the value is less than two we're going to nap the other thing you might notice is that i've now ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "also immediately break out of here ok so here's my taking two items and then i also grab the second lock here and now i'm actually going to just call peter conditions signal will see why just working at one fed is sufficient l a little bit ok right and do when do i unlock the very first very first thread here let'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "broadcast here on the very first condition variable ok so what are we doing here right so when it quits then that first red quits it is going to call peter condition signal on the next thread ok so if that thread is sleeping we wake it up and then it will notice that the quick variable has been set and so that wil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " so that will quit as well now this code perfect no there's actually a small race condition is actually very small possibility that we intend to call peter condition signal here but we do it just before a thread is actually is calling peter condition wait so how can we ensure that the race condition is not a probl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "dition is actually very small possibility that we intend to call peter condition signal here but we do it just before a thread is actually is calling peter condition wait so how can we ensure that the race condition is not a problem here let's let's also put this inside a mutex locks so p thread mutex lock an i wa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "cookie eat a code where we check this value safe is equal to zero and if it was we would be calling p three condition wait so are some weight becomes peter condition wait and i'll send post well we'd be using things like broadcast in order to wake up the right condition variable ok right so that's it for question ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "y kind of potential race conditions ok so i'm going to have some kind of global variable here called please stop and when i set that i also then call peter condition broadcast but in my other threads i do the following ok so if the variable please stop is not set then i want to wait so would that work as implement",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "here will be decreasing the value of reading and calling p three conditions signal so that is a little unnecessary we have actually only need to call peter conditions signal when we we know there's an active so we know there's a writer waiting and when we notice that we've taken the reading countdown to zero so ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mall possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "t when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if that just that moment in time then what's going to happen we've actually called preconditions signal but",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mall possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "t when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if that just that moment in time then what's going to happen we've actually called preconditions signal but",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mall possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "t when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if that just that moment in time then what's going to happen we've actually called preconditions signal but",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mall possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "t when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if that just that moment in time then what's going to happen we've actually called preconditions signal but",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mall possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "t when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if that just that moment in time then what's going to happen we've actually called preconditions signal but",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "mall possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "t when i change the value folks and then i call peter condition that could happen between us deciding the value of fireworks is zero and then calling peter condition wait so if it happened right inside there if that just that moment in time then what's going to happen we've actually called preconditions signal but",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " hold onto a log but that's only for us to do some accounting either we will immediately a scape can have through this code or we will end up calling peter condition way in which case we release the mutex anyway ok and down here you'll see that the last thing we do is we want to again acquire the mutex just once w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " at least one of those so i could say greater than zero but technically i could just wait right then my knew reader will will go to sleep little call peter condition wait right and of course there were listed mutex lock and when we do eventually wake them up what happens well the first thing they will do is will g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "'s talk about the number of writers and then exit but before we exit maybe it's time to wake some people up ok so the most loud code would be to call peter condition broadcast on both the both condition variables so notice i've got a condition variable here for writers so we're going to send all the writers to som",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "e the problem could occur so we've got this test here and then later maybe a few nanoseconds later but it might be a bit longer eventually by calling peter condition wait my thread is going to block so here's the problem scenario what if we had an interleaving of these operations such that changing the value of x ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "'s the problem scenario what if we had an interleaving of these operations such that changing the value of x here happens after this test and calling peter condition signal happens before the thread blocks and waits for signals ok so now what's happened our second thread is going to deadlock it's now waiting for a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "e the problem could occur so we've got this test here and then later maybe a few nanoseconds later but it might be a bit longer eventually by calling peter condition wait my thread is going to block so here's the problem scenario what if we had an interleaving of these operations such that changing the value of x ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "'s the problem scenario what if we had an interleaving of these operations such that changing the value of x here happens after this test and calling peter condition signal happens before the thread blocks and waits for signals ok so now what's happened our second thread is going to deadlock it's now waiting for a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "e the problem could occur so we've got this test here and then later maybe a few nanoseconds later but it might be a bit longer eventually by calling peter condition wait my thread is going to block so here's the problem scenario what if we had an interleaving of these operations such that changing the value of x ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "'s the problem scenario what if we had an interleaving of these operations such that changing the value of x here happens after this test and calling peter condition signal happens before the thread blocks and waits for signals ok so now what's happened our second thread is going to deadlock it's now waiting for a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "e the problem could occur so we've got this test here and then later maybe a few nanoseconds later but it might be a bit longer eventually by calling peter condition wait my thread is going to block so here's the problem scenario what if we had an interleaving of these operations such that changing the value of x ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "'s the problem scenario what if we had an interleaving of these operations such that changing the value of x here happens after this test and calling peter condition signal happens before the thread blocks and waits for signals ok so now what's happened our second thread is going to deadlock it's now waiting for a",
        "label": "Use"
      }
    ]
  },
  {
    "text": "memory address",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "3b9f5713-ca11-400c-bd6f-428347679520",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "s that the memory allocator can put those bites back into its pool and so future cost in my lock may not guaranteed but may actually give us the same memory address in the future goodbye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "491a80ef-eda8-4e66-a332-f2dd12cb7ebe",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "ouble quotes there what happens if we instead passing nothing what happens if we pass in address zero so we need null know that this is equivalent to memory address zero what are things going to happen so the exciting thing here is that actually when our process runs our memories divided into different segments s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6500319c-14b4-4a6e-a714-3cf7e49e96a9",
        "lecture": "CS",
        "lecture_num": 2,
        "context": " panic here's what we start the first thing we see is just that working backwards like oh i have a pointer in other words all argv is is just holds a memory address and that's we could stop there and say ok points just something so that's all obvious it's going to be eight bytes on a sixty four bit machine this a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "83c8c367-376a-4574-bc73-6b7b742d1b47",
        "lecture": "CS",
        "lecture_num": 2,
        "context": " tricky we're not going to use any counters we're just going to use pointer arithmetic ok so here's the challenge denton right so i'm going to take a memory address which will be the value of where this array starts in memory it's actual memory location and i want to keep walking through that reading each integer",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2ce0c44c-c7e2-4bab-becf-4f3ab3af2d11",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " the sheer luck would come across a bite a series of bytes which represented a large enough integer value or my little program here would walk into a memory address that is no longer valid piece of memory to read we would have expected that we would have left the existing memory segment and perhaps we had entered",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f6868da9-5be3-472a-ac74-0889cc0d698a",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "tten is to have a pointer ok so a pointer to a character ok we're pointing at one character but you and i know that actually we're going to point one memory address for the character but then the remaining characters then remaining bytes can be used for more characters we have whole c string and rather than just ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " descriptive zero corresponds to standard input and then we have to say where do we want this day to arrive so we need to give it a memory location a memory address now read doesn't care about a type we simply going to say hey start putting bites into this particular memory location and if i ask for more than one",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "95b8a0e0-2c36-49bf-aa43-15733ee06e86",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " words the day that i actually decide to use it and go to memory to actually read what's in there and as you can see we can what we find that now the memory address and so on and so on and so on and eventually if we followed all of those memory pointers we would get to actually reading an integer but we are not g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "ver here but you won't actually find any characters there instead it's a pointer itself so it also is going to be four bytes or eight bytes holding a memory address and if we follow that that is where we will find the beginning of some string ok so this function is meant to append things but it has several errors",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " i wanted to first of all create a a process where i've got a global variable little m here and we're going to initialize it by asking it to hold the memory address of this string literal in other words it's going to hold the address of where to find that that w there ok what do we do inside a little program here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0173c9a1-6ea6-40ab-b5d1-ccc145c2f251",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "notices that your process is attempting to write into some invalid memory and the actual cpu catches that to attempt to read or write to an incorrect memory address and that causes an interrupt we stopped reading your stop reading your process code the kernel code runs instead which ultimately generates segfault ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2c80a67a-6e39-4b62-812c-69eb49905471",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "kernel and beg for some more ram beg for some more real addresses we don't want to talk to the oblivion we don't want to avoid we actually need those memory addresses now to refer to some actual memory and that's the purpose of s break is to say yes i know i've got my heap possibly say zero bytes at the beginning",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3b653f0c-c210-4f13-a615-5d87a823e96e",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "my stack another variable core pointer and what type is it it's a pointer never mind what it points to simply by the fact that it has to point to any memory address means that it's going to need to be the right number of bytes queso say on a thirty two bit machine that will be four bites on a sixty four bit machi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3b653f0c-c210-4f13-a615-5d87a823e96e",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " made a one two three four five six seven ok have one more byte there we go by eight bytes there and what do we put inside this these eight bytes the memory address of a literally it's looking at a it's holding that address and then we have another variable called child when we put that in here these will stack v",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "57f1edee-d98f-4b8b-9ca9-c3c66e7774d1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ernel and beg for some more van back for some more real addresses we don't want to talk to the oblivion we don't want to avoid we actually need those memory addresses now to refer to some actual memory and that's the purpose of s break is to say yes i know i've got my heap possibly say zero bytes at the beginning",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7aab9397-22c3-4ad5-beca-764e7308dfdf",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ernel and beg for some more van back for some more real addresses we don't want to talk to the oblivion we don't want to avoid we actually need those memory addresses now to refer to some actual memory and that's the purpose of s break is to say yes i know i've got my heap possibly say zero bytes at the beginning",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c761dcf5-f751-4ac2-acb7-906f30ff83be",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "from the very beginning or from the very yet and i've also tiebreaker is if there's a type break use the one which is lowest in memory has the lowest memory address so we will actually assign p e to the base here ok and the up here is a two to kill about whole there's two kilobytes spaces right so what are we con",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e3b111b7-8038-4f0e-a112-7fb6b2538548",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ernel and beg for some more van back for some more real addresses we don't want to talk to the oblivion we don't want to avoid we actually need those memory addresses now to refer to some actual memory and that's the purpose of s break is to say yes i know i've got my heap possibly say zero bytes at the beginning",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "mplicit link list so this implementation uses an explicit link list meaning that we are throwing pointers around were writing a lot of code that uses memory addresses explicitly we can talk about the memory address of p we cannot talk about members of chosen we could talk about the memory addressing turn to my lo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "xplicit link list meaning that we are throwing pointers around were writing a lot of code that uses memory addresses explicitly we can talk about the memory address of p we cannot talk about members of chosen we could talk about the memory addressing turn to my lock so we have lots of memory dresses and in partic",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "f code that uses memory addresses explicitly we can talk about the memory address of p we cannot talk about members of chosen we could talk about the memory addressing turn to my lock so we have lots of memory dresses and in particular link list when we want to jump from one entry to another we look at the entry ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "e can use those thirty two bytes to actually as a metadata entry so sometimes it takes a bit of getting used to the idea that i can just talk about a memory address and then immediately say ok now put these filters filters over eyes and don't think of it as just bits and bytes actually think of it as a piece of a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "692302bd-49d3-4d62-bbc5-f1d4ce6e3684",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "oks at our knew entry and finally we need to return something to the user should we return chosen now that would be a mistake that would be the wrong memory address return we actually want to return the piece of memory that we allocated for them which is inside our data structure under the word pointer or under t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37245daa-183e-43b4-9765-a5d9bc2a6ac6",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "f interesting useful things like the total number of bytes that i want to allocate my pointers cannot hold values greater my point is cannot point to memory address is greater than this value so if i've chunked up my memory into the size of these things i know that my location is going to be robust and powerful o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37245daa-183e-43b4-9765-a5d9bc2a6ac6",
        "lecture": "CS",
        "lecture_num": 10,
        "context": " four into that location and you have also asked me for a hundred and thirty two bites so here's a hundred thirty two i gave you plus one here's your memory address and also wrote the hundred thirty two in there ok so why did i do this so the wonderful thing is and i may have sketched out before in a previous vid",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "633f10ed-2038-4da2-9855-c3cad245559f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "for example let's cast that or what would happen if i just return the argument well sure you can do these things remember all your doing is returning memory addresses petered itself is not little peek at that memory so it's perfectly reasonable to store to return sainul that that will be those values will be reme",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "deadbeef ok but i can't spell there there we go and i'll say here's an integer hexter written in hexadecimal notation but i want you to treat it as a memory address and we don't care what's there so the type is just void ok so let's compile that ok after one second they both finish what return value one is zero w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "78b152f6-1621-4792-8595-2687dfbc6aa9",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "m going to need space inside my memory for another thread and so each thread then it's going to get its own stack right and these are inside the same memory address space but they're going to be separated by say megabyte or so so they don't collide ok and then the last quite common is why do they call it the thre",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8078f738-b531-4bab-83c7-0facaf3ee1bf",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ttle function called shout and he's going to pass to shout when it starts when it finally gets a cpu core to run we're going to pass in the following memory address so what is that well it's a global variable i just want to reinforce the idea that all these threads are running inside one process and they can see ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "8078f738-b531-4bab-83c7-0facaf3ee1bf",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ething on the stack of the thread this pointer and we do something with that so for example i could print it out as a pointer so arg is now holding a memory address so let's print out that memory address or flush it and what exit wait and then when i want to wait for all my fears to finish i could just call pizza",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8078f738-b531-4bab-83c7-0facaf3ee1bf",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "pointer and we do something with that so for example i could print it out as a pointer so arg is now holding a memory address so let's print out that memory address or flush it and what exit wait and then when i want to wait for all my fears to finish i could just call pizza at exit on my main bird instead less u",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca760730-bb8f-426f-8d87-931bf10baf4e",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "re i could call malloc from one thread i could have some global variables just beneath that and all of my threads can refer to these things that just memory addresses it's up to you how you store these memory addresses where you use them so all of my threads could see my constants like hello tomato so let me put ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca760730-bb8f-426f-8d87-931bf10baf4e",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "some global variables just beneath that and all of my threads can refer to these things that just memory addresses it's up to you how you store these memory addresses where you use them so all of my threads could see my constants like hello tomato so let me put tomorrow in here somewhere down here but near the co",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d20bd8cb-7714-4093-a0bd-850b11d62c39",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "is pretty simple i just want to print print out everything and for that i'm going to use right today remember how it works is you simply say here's a memory address start sending the following bytes and as we're sending this to a terminal we're going to see that as ascii values so i've just got a very simple a pi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f2346ed4-1e17-412e-91f1-e269250987e5",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "do we have here well of course we have a string literal so this is going to behave as an array but can also decay into just a pointer point being the memory address of this first entry the age ok so that memory address could be treated as an int right which we then store into this variable and then later we say o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f2346ed4-1e17-412e-91f1-e269250987e5",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "l so this is going to behave as an array but can also decay into just a pointer point being the memory address of this first entry the age ok so that memory address could be treated as an int right which we then store into this variable and then later we say ok take that in value and pass it so and change its typ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f2346ed4-1e17-412e-91f1-e269250987e5",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "a character pointer right so this gives me shivers down my spine here will it work one of the question is do we feel lucky there is a chance that the memory address of hello because it's a little in a memory will be in a low address so there's a chance that we could actually represent that using a c type int let'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "t solution the solution we actually describing all the way is called like the base and bound where there's a mapping simple mapping from your virtual memory addresses we add some kind of offset offset that will be the base to get to the actual physical address or inside my ram and then we also put some kind of bo",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "to change our first stroman idea to now a mapping between a page which is something which is meaningful inside a process and it's part of the virtual memory address going to map that somehow we want to do it quickly to a particular place inside my actual memory my actual ram in other words are particular physical",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " a cache it's got a limited size we can't remember what kind of all of oil look up 's and what we're basically doing is saying hey i've got a virtual memory address except that i don't need to store a look up for a particular address instead actually i'm going to store this with a page the page number and i want ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "eful ok anything else wanna say about the tlb oh yeah just kind of as a quick sketch you realize that the page numbers were talking about our virtual memory addresses process specific so the mappings that we do always of course per process if we fork we make a child that is going to have a different mapping to di",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "e memory inside my program right now i want to change a bite in my heat for example ok so we convert their physical psychological address the virtual memory address and we see this in page six so let's go to page six one two three four let's imagine it's just here ok and we read this entry right ok page six i see",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e4db746-ae92-4bc8-ba83-cf475b89a78c",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " read or write to request because it doesn't actually map to any memory so our first example then was when we were trying to actually read an invalid memory address but i wanted to realize that we can now stop playing tricks on our process is so for example for the longest time i've been looking at you and for th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "table here to get me a frame number and then finally we get to actually read the users bite say inside the heap so congratulations it now takes three memory address look up 's in order to do anything so my machine is now three times slower anytime it does a main memory access ok so we need to come up with a way t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "d send forty bytes of it directly to stand it out meanwhile my parent process is modifying the memory so let's use s printf to directly write to this memory address that we got back from a map and we will write the following formatted string will say hello from the other side and followed by a little number accou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "o listen on any port that happens to be free then you can always pass in a port number of zero here remember that it's a string not a zero pointer to memory address zero uh and that will later bind will actually find the right free report for port for you but if you do that then it's time to actually figure out w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "o moving from one process to another right so what are the kind of some of the things that we need to two right so first of all we've got the virtual memory address mapping in other words are page tables these only makes sense for a particular process that a particular memory inside a particular process is going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ade our socket and if we just want to send something somewhere just simply call send too and that moment you say here's my fire descriptor here's the memory address that i want to start sending bytes from then on the number of bytes and here's the address off your go seal it with a kiss and off off both at packet",
        "label": "Use"
      }
    ]
  },
  {
    "text": "whole lot",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "603b0b01-6f4b-4c59-b606-c075dd30516e",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "t is actually how we can do new things with our programs and actually exec has comes in several flavors we can specify the arguments for exec using a whole lot of parameters or we can give it in a way we can also say this is specifically the program that we want to load from disk or we can ask the system to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0173c9a1-6ea6-40ab-b5d1-ccc145c2f251",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "hing about positive signals is that they can actually interrupt our code so perhaps we've got deeply piece of nested recursive code perhaps we've got whole lot of nested for loops it's going to take another hour to complete process i've got a while loop that runs forever it doesn't matter with a posix signal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "94ea6cdc-aa81-48b6-84f3-323a89a40075",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "ts of memory a cold hole arbitrary values from previous malloc calls and so we are just treating it as a struct but actually all the memory is just a whole lot of zeros and ones so the value that you're going to see for this next pointer it's completely arbitrary even if we hadn't freed it so that's several ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4854068-5be5-4c56-b771-fcf375c9a2d2",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " not appropriate use so but let me show you a real example use of this is that now i recently you needed to do some analysis using python and i had a whole lot of different files to analyze so i quickly wrote the following little script where you can see i ran all these different little programs in parallel ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "553189a9-6ee0-4efd-8e9e-0f57d5500e5f",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "memory structure in here so let's take a look at this right so what are we got well today we're talking about a struct which is a way for us to put a whole lot of information together in this case we're going to have a pointer for the users area of this particular application how large it is and whether this",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "there's going to be wasted space inside internal to each little shoe box here and in addition there is going to be wasted space if i start to throw a whole lot of shoeboxes a different sizes into my truck ok so the wasted space inside the shoe box it will be internal fragmentation that now i've got lots of l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3c6b2669-f4b1-4b5e-ad45-a0b90bff5373",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " those results get stored inside a different men variable one for each each thread because each thread gets its own stack right so you probably got a whole lot of questions about threads in people 's at this point so what i'm going to suggest you do is post a video and by the google something or try a man pa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "lly using so i want to mac right now so i pulled up the lyrics version of stuart error and will see a couple surprising things first of all there's a whole lot of additional versions with under school are underneath and they will might be useful to us in the future but i right now i just want to kind of scro",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "lly using so i want to mac right now so i pulled up the lyrics version of stuart error and will see a couple surprising things first of all there's a whole lot of additional versions with under school are underneath and they will might be useful to us in the future but i right now i just want to kind of scro",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "unning a compiler let's say it's clang right and so your address space yes you have your own heap yes you have your own stack etc but you also have a whole lot of memory dedicated to the executable code of client so there it is but guess what there i'm also on the same machine also running clang so i need th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "lenge for you something you can discuss on piazza etc if you wish so it's the following it's the kind of typical have exam question where we put in a whole lot of concepts together and the nice thing about this one is that it's easy to write and easy to test as well ok so but it shows it demonstrates that yo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a339955c-d52d-4f69-9c8a-c4e9d4cf038f",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "top thinking about implementing the c library and instead get the stack and instead think about actually working with real data now you could store a whole lot of data using scan f and printf etc but what about the day that you decide to work with binary data ok so with binary data there's lots of advantages",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7c19bcb8-2e74-423d-94b8-77b2b5ccb983",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ged whenever there's an error with a system called and we read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descripto",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "923b48d1-82c9-4c57-9d23-3c0a31dd37d0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "anged whenever there's an error with a system call and we read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from one particular file descriptor and then try to write those bytes somewhere else to another file descriptor",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1020a6c-61f2-4b16-b8a8-b2f4b04242c5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ged whenever there's an error with a system called and we read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descripto",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b96e8ea2-f596-4b5a-807e-4646d78cc7a0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ged whenever there's an error with a system called and we read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descripto",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "bbb895a1-cba7-4548-8727-a436ca271b72",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ged whenever there's an error with a system called and we read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descripto",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "urprising thing about get address info is that it can return zero one or more results and if we remember that the results are this struct here with a whole lot of fields and if we have a look you'll see the last entry inside here let's just move this out the way let's do it let's do it this way let's move sc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "xample perhaps the server offers an ip four address and an ip six address so you might try both you might try one after another or you might create a whole lot of threads and do it asynchronously and see which one actually kinda connect faster ok so let's let's remind ourselves about what what the entries ar",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "urprising thing about get address info is that it can return zero one or more results and if we remember that the results are this struct here with a whole lot of fields and if we have a look you'll see the last entry inside here let's just move this out the way let's do it this way let's move scroll this ov",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "perhaps the server upper offers an ip four address and an ip six address so you might try both you might try one after another all you might create a whole lot of threads and do it asynchronously and see which one actually kinda connect faster ok so let's let's just remind ourselves about what what the entri",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ut it first of all inside of file all you all you would find if you actually opened it and actually had to look at it as a file you would just find a whole lot of entries that look like this you would find a name and and inode number and then another name and then another i know number so that is all that a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "it using ls minus i all the other way is to use stats so fine let's do that let's do this called stat on a file like a doubt ok and this prints out a whole lot of summary information which is very similar to the information we've just seen it from ls but in a less kind of useful formatted way and you'll see ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ut it first of all inside of file all you all you would find if you actually opened it and actually had to look at it as a file you would just find a whole lot of entries don't look like this you would find a name and and i know number and then another name and then another i know number so that is all the d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "it using ls minus i all the other way is to use stats so fine let's do that let's do this called stat on a file like a doubt ok and this prints out a whole lot of summary information which is very similar to the information we've just seen it from ls but in a less kind of useful formatted way and you'll see ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "6469a892-5a29-4895-b922-8ef54fabb1a8",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "les and directories that begin with dot unless you explicitly asked for it for example by saying ls minus a l that will now give you everything and a whole lot of details about everything inside a particular directory ok some surprises about directories so the surprising thing about directories is that they ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "31a84e40-90fe-4ea7-9af5-cfc0d0ffebe8",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "igh asterisk or so just for fun by the way let's suppose let's get out of here right so let's suppose that someone had deleted ls that they removed a whole lot of things all is so let's suppose that someone had deleted slash bin ls oh dear so how would you still list the contents of your current directory we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bcc2191c-ce75-4441-b029-c038282b1677",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "g secrets for encryption keys for example then you can use slash dev slash view random and urandom does not block so will keep generating for us to a whole lot of random numbers still based on some of the secure entropy of the system however there's no requirement for it to be cryptographically secure gay so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e61962ea-1b9a-41e3-8779-5e49bf8449a5",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "is now let's actually have a look at some code key right where you see i'm going to use this trick you see to write it octal because i want to make a whole lot of directories i gotta make directory called d i one and i want it permissions to be re divide execute for me and no access for any group or anybody ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "th relative paths because they are relative to the current directory and we know that we can change this by using things like chi hdr tudor there's a whole lot of things that we don't normally see as well however all the meta information for example the kernel is going to keep track of the total cpu time use",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "mited this out but it's going to keep going for a little while ok there we go let's run it on something smaller like a toy out and will see there's a whole lot of strings hidden inside that executable including any strings that we've actually written as well and even the names of functions that it wants want",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "111f8779-d189-4a26-9857-42833718e44a",
        "lecture": "CS",
        "lecture_num": 35,
        "context": " here loads of them and then the one shifted left three times so this would we get right this would be this expression here on in in base two write a whole lot of zeros here but that's not what we want to end with this is actually the very bit that we want to turn off so if we take the not of this to bitwise",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b93caeac-d529-4079-99f4-28d2f8c07db2",
        "lecture": "CS",
        "lecture_num": 35,
        "context": "ne that because i'm well terribly else to use my sig set type so for example i could pretend that my signals down or just some kind of integer with a whole lot of with enough bits that i can represent any possible signal on my system right but how do i then manipulate my signal set well i'm going to need som",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11d312f-2dc3-4d38-893d-f28714ba089d",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ant the web page so give me the give give me the html as soon as i start getting bites back from that i know that say i want a cat picture i've got a whole lot of javascript libraries to load i've got some css s to load i can make all these requests and not have to wait for any of them to finish so i can eff",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "d fashion so if for example you have a whole load of parameters to send you might have to decide which order to send those parameters or if you had a whole lot of integers dissent you might decide to say send the number of integers followed by their values or if you had a graph you'd have to find a way to tu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "k lists of hosts where you can reduce the amount of trackers that are able to track you on the on the internet because now with web pages that have a whole lot of javascript and other mechanisms to track or what you're doing those will no longer resolve to valid hosts and in fact if you use these extensions ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7dec3665-e1bb-4bf2-a909-d43c2937b24b",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ember that http is quite verbose we send things like ok the the name of the web browser in its version the kinds of my tights were prepared to accept whole lot of other stuff like if we've cashed it some tag values associated with our local cache we've got a lot of information we want to send up to say kb st",
        "label": "Use"
      }
    ]
  },
  {
    "text": "standard error",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "c library here ok right so the default behavior is actually kind of reasonable when we kind of think about it first of all if you're sending stuff to standard error is probably a good idea that we see this as soon as possible we if our programs about crash or this or there's any kind of problem let's not keep tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "his or there's any kind of problem let's not keep that information hidden inside our process instead let's write it as soon as possible so by default standard error is not buffered ok so that information is going to be sent as soon as possible ok so let's actually have a lot of output and will see that yes we got",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "at let's try sending this output not to the toggle i send it someone else ok so we can do that by running our program and sending the standard out in standard error to different places for example i can send a stamped out to a file so i can call this hello dot text and i can send the up the error output to somewh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " got my output in try again not there i've got my output inside hello dot text so there we see hello and system and i've got the stuff we sent to the standard error in the other file so if we look at error will see we've got cs two forty one and programming right so the last kind of quick comment on all of this c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "he c library has a file objects and, by default, we get three of these for free. there we go. we have standard in (stdin), standard out (stdout), and standard error (stderr). and i can use these, i can use standard out and standard error, for example, with fprintf. so all those times you been writing printf, that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "r free. there we go. we have standard in (stdin), standard out (stdout), and standard error (stderr). and i can use these, i can use standard out and standard error, for example, with fprintf. so all those times you been writing printf, that's \"actually just equivalent to saying, \"\"hey, fprintf,\" please send thos",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b876ebf8-b1c2-4187-bfab-f4c2fa732965",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " a little assert function now or little assert macro that we test to see if the expression is correct is true and if not let's print something out to standard error add immediately quit the program alright so how can i do some more debugging at this point well every good c programmer knows first of all that if yo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " write into buffer at minus one i should stop before that moment so let's do if result is minus one let's get outta here right let's put something to standard error so hey if i could not read from standard in ok and maybe want to quit a program so i could call exit for example or i could just return from maine it",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6fa7868f-bbe1-47f6-bee8-22507dfcc8c8",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "uld see it failed so if f is is null we could do something about this we could see could not open whoops i want to send a little error message to the standard error could not open data file okay and let's quit at that point so i could also type to return one right so now i want to start reading my data and i need",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6fa7868f-bbe1-47f6-bee8-22507dfcc8c8",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "sibilities other if we only managed to read one value that's a problem so maybe we should print something out so i could do my little f printf things standard error read only on value right and probably at this point we might want to continue or maybe we just want to exit ok other some other possibilities yes may",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aaed71d6-01a3-42f8-b99e-ca3a84253b58",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "r is null unlikely but hey let's be defensive here or secret is not we can complain so we could say hey you forgot to set these print f f print f the standard error please ensure user and secret an environment variables i said i have the little dude line and then let's exit with a non zero code to mean failure ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "42ebcdb6-a366-49f4-b95a-a0614c5ac1ce",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "better one cat and where did my second do you see what happened ok so first of all why is this in the middle answers because that's actually going by standard error so that is not being buffeted is being print it's being sent to the terminal immediately so let's pretend that that's a problem right so we will make",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7a7590a3-2294-4d27-89ff-d625512f82e5",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "le an start printing its output to standard out so good is checking that the arguments is two and printing out little usage message and sending it to standard error looks good stuff however this program continues it should have exited there so how should we do that well after printing something out here we should",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8459ee6a-30aa-499c-9226-74f97c8f7ce4",
        "lecture": "CS",
        "lecture_num": 5,
        "context": " and the argument give me if you're doing that then we got problems services if it's less than two then let's print usage message so&nbsp; fprintf to standard error or little uses message ok so i don't hard code the program name in here let me actually find it out from the process name so i can say percent s and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "g low levels things with file scripters but we've jumped back up into the c library where we say put string in other words print out the following to standard error and and also print out a new line ok hold on a moment didn't we just close down it out yes you're correct but we didn't tell the c library the c libr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "the files of the current directory and what does that count directory we just changed it to slash bin if that fails where will print something out to standard error with perror but honestly we don't expect these lines to one so great let's actually run this and see what we get ok ok right so let's and then this g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "particular file descriptor.\"\" ok so here's my file descriptor\" and that is typically a small number say 0, 1, or 2 for standard in, standard out, and standard error and then if i start making files with fopen(), i'm going to have some more... 3, 4, 5, etc. there is a limit to these still. your processor can't hav",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "hing is truly truly working now when i'm going to create a greater i actually need three pipes i need one for standard in one percent without one for standard error ok so to create all those pipes here's what would do you give me an integer array of six entries so here in fact is the six integers they were going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "oing to say ok here's a program name that we want to run here's all the arguments and and before that we need to set up the standard input output and standard error ok so how do i do that well there's one of the thing called duck to sewed up two allows me to rename file descriptors so right now i've got my pipe f",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "pipe so for example for standard out that is going to go there we go into the right end of the pipe 'cause we're writing into the pipe and simply for standard error meanwhile for standard in if you're going to be reading from a pipe you need the read end of the pipe so that's why we have these offsets into my arr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "lose the unused parts of the pipe so the child only needs the right end of my first pipe so let's close the meat end and similarly first a bit out in standard error it only needs the the it doesn't need the read end of these pipes it's going to be writing into them so let's going to close these as well right so g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "948fe415-3254-4286-bc66-225eba2cb234",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "tor so now we can run your process and we can feed it arbitrary information into standard in and we can capture all of the output on standard out and standard error without having to save it to disk ok alright so with that welcome to pipes and i'll see you in a future lecture bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "01850175-f9bd-4eba-a73b-9dc63940ee41",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "rrors that right so you want to put out some errors ok so here's first way you've probably seen things like ok i can use p error to print an error to standard error and i can include piece of text here which gets included along with some standard string ok there's also if you prefer a way to get just a simple str",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "01850175-f9bd-4eba-a73b-9dc63940ee41",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "m so if we needed to write kind of piero ourselves we might do something like the following we might say ok so peer error i just want to print out to standard error cater to do and now will have format string to say whatever the user said ok cologne another ok and then another string ok and then we'll need whatev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8258d360-0ce7-4e09-93ba-dbde1dba4781",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "rrors that right so you want to put out some errors ok so here's first way you've probably seen things like ok i can use p error to print an error to standard error and i can include piece of text here which gets included along with some standard string ok there's also if you prefer a way to get just a simple str",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8258d360-0ce7-4e09-93ba-dbde1dba4781",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "m so if we needed to write kind of piero ourselves we might do something like the following we might say ok so peer error i just want to print out to standard error cater to do and now will have format string to say whatever the user said ok cologne another ok and then another string ok and then we'll need whatev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "82687def-c053-4955-8eef-1d80e8bf31da",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "rrors that right so you want to put out some errors ok so here's first way you've probably seen things like ok i can use p error to print an error to standard error and i can include piece of text here which gets included along with some standard string ok there's also if you prefer a way to get just a simple str",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "82687def-c053-4955-8eef-1d80e8bf31da",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "m so if we needed to write kind of piero ourselves we might do something like the following we might say ok so peer error i just want to print out to standard error cater to do and now will have format string to say whatever the user said ok cologne another ok and then another string ok and then we'll need whatev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9edf0a56-503a-444a-861d-6bd29f8a2e58",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "rrors that right so you want to put out some errors ok so here's first way you've probably seen things like ok i can use p error to print an error to standard error and i can include piece of text here which gets included along with some standard string ok there's also if you prefer a way to get just a simple str",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9edf0a56-503a-444a-861d-6bd29f8a2e58",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "m so if we needed to write kind of piero ourselves we might do something like the following we might say ok so peer error i just want to print out to standard error cater to do and now will have format string to say whatever the user said ok cologne another ok and then another string ok and then we'll need whatev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dff47837-9853-4be6-9e60-8ab2c54b8272",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "rrors that right so you want to put out some errors ok so here's first way you've probably seen things like ok i can use p error to print an error to standard error and i can include piece of text here which gets included along with some standard string ok there's also if you prefer a way to get just a simple str",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dff47837-9853-4be6-9e60-8ab2c54b8272",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "m so if we needed to write kind of piero ourselves we might do something like the following we might say ok so peer error i just want to print out to standard error cater to do and now will have format string to say whatever the user said ok cologne another ok and then another string ok and then we'll need whatev",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "935f6155-a7a0-4504-b818-62e2db066493",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "et's pull that in ok right ok so now ok that's looking better and fprintf i need to call send to say i want it will send this to not standard out but standard error so let's send that to standard error ok so now when we run it says failed to open null bad address why because we didn't give it any arguments so a s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "935f6155-a7a0-4504-b818-62e2db066493",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ok that's looking better and fprintf i need to call send to say i want it will send this to not standard out but standard error so let's send that to standard error ok so now when we run it says failed to open null bad address why because we didn't give it any arguments so a slightly better program here would at ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "935f6155-a7a0-4504-b818-62e2db066493",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "ve this a little bit that says look if you didn't give me one argument so i expect argc to be two then let's print out a little usage message here to standard error i will say usage percent s directory ok and we need the program name ok right and how about our new line ok so now we run it failed to open ok almost",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a6948c0b-717d-4a5a-afbc-f2641ef17bc1",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ute let's also of delete a few files so for example i want to remove a lot out if it exists i don't care if it doesn't exist so i'm going to redirect standard error which you know is file descriptor two so this is what this is doing to a special place a very special file this particular file does not exist you wo",
        "label": "Use"
      }
    ]
  },
  {
    "text": "web page",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "5c6032d9-cc7d-468f-82d9-4054bf6258ab",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " threads and occasionally update it so this for example might be a cash it might be your web cache perhaps you've heard today that many you have your web pages aren't served by a single server but instead we have hundreds or thousands of boxes set up around the globe already to cash your content and so that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " the server can send and receive so it behaves as a full two way communication medium so i can from the client sensed after this server to requests a web page and on the same connection the server can write back information and it will appear outside eventually to the client again ok so that's very quick in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "031c882d-0a19-4489-b1ef-d9328844d378",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "he user you can see that now is being served by python and here's a stuff here's the html document that we can now pause and turn into a nice looking web page and look here's all of the the links that we might want to follow so for example here is client dot c and his aide out etc so the last thing i would ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0cebe85c-2283-48d7-bb48-045052e80cae",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "he user you can see that now is being served by python and here's a stuff here's the html document that we can now parse and turn into a nice looking web page and look here's all of the the links that we might want to follow so for example here is client dot c and his aide out etc so the last thing i would ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "22302903-5bcb-4262-bd2c-179cf2135ab9",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ok it's sir let's talk a little bit about http so http is the mechanism today that how you actually get a web page and http actually grew out of an existing protocol and this very first version of h d two p the first of official version one point oh and also one p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "22302903-5bcb-4262-bd2c-179cf2135ab9",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ht but most packets today for http are using tcp ok because we wanna be able to send large will be able to send large web pictures of cats back large web pages and we don't want to implement a whole network stack would like tcp to do that for us ok so that's a very short introduction to http we wrote in fac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "request instead you'll see that it's saying that illinois now supports encrypted communications encrypted version of http and if you want to see this web page you should open a new connection on https which would be a different port now our little web client today does not support encryption yet so we're no",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "38d669a5-394b-4826-bb65-0090a3444b01",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ok so let's talk a little bit about http so http is the mechanism today that how you actually get a web page and http actually grew out of an existing protocol and this very first version of http the first official version one point oh and also one 1.1 is a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "38d669a5-394b-4826-bb65-0090a3444b01",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " on that new information right but most packets today for http are using tcp ok because we wanna be able to send larg web pictures of cats back large web pages and we don't want to implement a whole network stack would like tcp to do that for us ok so that's a very short introduction to http we wrote in fac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "request instead you'll see that it's saying that illinois now supports encrypted communications encrypted version of http and if you want to see this web page you should open a new connection on https which would be a different port now our little web client today does not support encryption yet so we're no",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7c96669f-3968-4af3-b08d-c28d80ecf477",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "xample ok so these different levels of abstraction allow us to work independently so for example tomorrow i might decide that as you want to access a web page not over tcp but over udp of course if i do that then my web client better be able to actually handle udp connections and also my web server needs to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "92db69f3-9bba-45d8-8f6d-84d8ae3c2b2e",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " user you can see that now it's being served by python and here's a stuff here's the html document that we can now pause and turn into a nice looking web page and look here's all of the the links that we might want to follow so for example here is client dot c and here's a out etc so the last thing i would ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a60784ac-5129-4d35-8feb-23e8aa752f87",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ok so let's talk a little bit about http so http is the mechanism today that how you actually get a web page and http actually grew out of an existing protocol and this very first version of h d two p the first of official version one point oh and also one p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a60784ac-5129-4d35-8feb-23e8aa752f87",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ht but most packets today for http are using tcp ok because we wanna be able to send large will be able to send large web pictures of cats back large web pages and we don't want to implement a whole network stack would like tcp to do that for us ok so that's a very short introduction to http we wrote in fac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ge right so again i need to say what protocol k a new line you'll see that great it's now given me a content type of text slash html in other words a web page and the speaking utf eight which is character set and what follows after the blank line will be four hundred and sixty nine bytes and here it is and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " working when i said there's not much of a web server right now because it's not truly actually returning web web content not something that's a real web page ok and it's not actually truly talking http instead so let's modify it just use kind of deep printf and talk about some other things that this thing ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "k client off you go wait who it connected a k and what it gave us it told us to go to a different page ok so please refresh this and go to this other web page fine so i'd write a web server web client now which actually kind of understands this text and follow that link right but we'll see that fundamentall",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ut we'll see that fundamentally our request was ok and it gave us back a hundred and sixty three bites of actual content and the content gavers was a web page ok that's the mind type text slash html so let's have a brief look at the remainder of the code to see how it works first of all i'm defining my requ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "e hey let's just try that for a moment ok so will compile it ok and will run the client again ok ok nope that's still telling us to go to a different web page ok but you might notice something surprising here which is that i'm using this call i haven't talked about it before called d printf ok so d print f ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ok client off you go wait who it connected ok and what it gave us it told us to go to a different page ok so please refresh this and go to this other web page fine so i'd write a web server web client now which actually kind of understands this text and follow that link right but we'll see that fundamentall",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ut we'll see that fundamentally our request was ok and it gave us back a hundred and sixty three bites of actual content and the content gavers was a web page ok that's the mind type text slash html so let's have a brief look at the remainder of the code to see how it works first of all i'm defining my requ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "e hey let's just try that for a moment ok so will compile it ok and will run the client again ok ok nope that's still telling us to go to a different web page ok but you might notice something surprising here which is that i'm using this call i haven't talked about it before called d printf ok so d print f ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " working when i said there's not much of a web server right now because it's not truly actually returning web web content not something that's a real web page ok and it's not actually truly talking http instead so let's modify it just use kind of dprintf and talk about some other things that this thing is d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "client off you go wait woohoo it connected ok and what it gave us it told us to go to a different page ok so please refresh this and go to this other web page fine so i'd write a web server web client now which actually kind of understands this text and follows that link right but we'll see that fundamental",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " that link right but we'll see that fundamentally our request was ok and it gave us back 163 bytes of actual content and the content it gave us was a web page ok that's the mime type, text/html so let's have a brief look at the remainder of the code to see how it works first of all i'm defining my request h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "hey let's just try that for a moment ok so we'll compile it ok and we'll run the client again ok ok nope that's still telling us to go to a different web page ok but you might notice something surprising here which is that i'm using this call i haven't talked about it before called dprintf ok so dprint is t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "age right so again i need to say what protocol k a new line you'll see that great it's now given me a content type of text left html in other words a web page and the speaking utf eight which is character set and what follows after the blank line will be four hundred and sixty nine bytes and here it is and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "nally get it all completed so for example if there's a web server this would be the time between you making the request and then getting the complete web page ok so this is going to be with in terms of our little formulas here things like the completion time minus the arrival time ok write the wait waiting ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "the response time what do you think of that are you ok so this is the moment that the first output is created you can imagine for example that with a web page we care about the very moment we can thirst start sending the bytes back because that moment we can at the web browser can start trending the respons",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4032b6db-39d8-4d61-bef9-218a42c0a7e4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "'t want regular port eighty on a listener port one two three four ok does it work right why we have to give it a second right yeah ok so it sent us a web page and then we made a second request to get the get the image and so here's a cove silly picture i used as our first meme and on this side you can see t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2635d0a3-9614-4aa7-9bdc-dca870b27eec",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "p seeing which is this head of line congestion we like the cell head of line congestion so we saw this in various forms where say you wanted to get a web page and we use this as motivation for h t p two to say hey we should be able to get all these resources at the same time hey we solve the problem well we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578b472b-d7f9-455d-b241-95da7faa4f77",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "where the same ip address and the same server listing on the ip address could be pretend to be multiple things so for example maybe i could serve the web pages for chocolate dot edu or document dot com and start selling favorite candy bars i could have another website that says sells go carts so i guess i'm",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578b472b-d7f9-455d-b241-95da7faa4f77",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "spec and there was integrated with https as well right so we still have some problems however which is that the cat jpeg can't even be sent until the web pages actually been sent back to the browser and the browser has actually finished looking at the content and figuring out the cat jpeg is even required p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578b472b-d7f9-455d-b241-95da7faa4f77",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " then what will do is for every request walls send in their session cookie with a unique id inside it and so that is specific to a particular clients web page so we can now use this to track particular users and to know whether a particular user has logged in we can connect it up to their shopping cart and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9951a684-a841-47e6-8d48-035d4127b468",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ok right so let's suppose that you have a web page and in its there's a small image like a thumbnail picture of a cat right so let's think about how long would actually take to actually get that data ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9951a684-a841-47e6-8d48-035d4127b468",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " one tcp connection per per request and in fact are probably we're going to have two requests were going to make a first request to say a homepage or web page and that will have some html incited ok so html looks a bit like this i've got inside html tag i've gotta head tag and inside that i've got things li",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b9161da0-95b9-41ea-9071-0d954a849a97",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ch is look at pictures of cats yes so let's start talking about not tcp but the implications of tcp on the hypertext protocol how we actually request web pages and other web based resources and will do that in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11d312f-2dc3-4d38-893d-f28714ba089d",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "n have pipelining which means that if i can spell it that i can make multiple requests and not have to wait for the response it's like yes i want the web page so give me the give give me the html as soon as i start getting bites back from that i know that say i want a cat picture i've got a whole lot of jav",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11d312f-2dc3-4d38-893d-f28714ba089d",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "s dot com you the server already knows the resources that you're likely to want it already knows that you're in the future as soon as you decode this web page that you're going to be asking for a cat say the react javascript library and maybe the custom css s so why doesn't the server actually say hey have ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cfb03b59-dbf5-447a-880e-0633fd40a533",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "'ll have some client side code to render this into some html for example so we see a lot of json information being sent today back to back to back to web pages where they then iterate over this in order to turn it into something displayable for on the page ok so the downside of json is that there's no forma",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cfb03b59-dbf5-447a-880e-0633fd40a533",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "o very kind of loose format another alternative then to sending information is xml and in fact today when we talk about kind of html which we use for web pages so for example you know the web page has things like a body tag and then inside that i might have a paragraph for example right this is actually a v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cfb03b59-dbf5-447a-880e-0633fd40a533",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "ternative then to sending information is xml and in fact today when we talk about kind of html which we use for web pages so for example you know the web page has things like a body tag and then inside that i might have a paragraph for example right this is actually a variant of xml where i have these tags ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cfb03b59-dbf5-447a-880e-0633fd40a533",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "ok so what happens if you mouse over that event or my body here wall no node one is a key i can say bg color and i can set the background color of my web page today more than html has attributes to do with style sheets so i can say hey use the following particular kind of style for say this h h one tag but ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ther than the real bbc dot com right so that sounds pretty scary does this happen yes absolutely it's been used to inject a malicious javascript into web pages in order to take over machine the however there are starting to be some defenses against is in that for for web pages which of for https connection ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ect a malicious javascript into web pages in order to take over machine the however there are starting to be some defenses against is in that for for web pages which of for https connection then it is possible to actually detect whether the certificate for web server is valid so we hopefully that that is a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "e these so called black lists of hosts where you can reduce the amount of trackers that are able to track you on the on the internet because now with web pages that have a whole lot of javascript and other mechanisms to track or what you're doing those will no longer resolve to valid hosts and in fact if yo",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7dec3665-e1bb-4bf2-a909-d43c2937b24b",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ok right let's remind ourselves about some http which is the bedrock of how we display web pages and other items on our web today so why is it that web pages are faster using http one versus one point oh so at this point you should remember that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7dec3665-e1bb-4bf2-a909-d43c2937b24b",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ok right let's remind ourselves about some http which is the bedrock of how we display web pages and other items on our web today so why is it that web pages are faster using http one versus one point oh so at this point you should remember that one point oh was a very simple protocol and it did not suppo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7dec3665-e1bb-4bf2-a909-d43c2937b24b",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " ice cream or whatever that server just has a strong suspicion that you're really going to need this resource so we can actually help you create your web pages faster because when you do suddenly decide that oh yeah i really did need that cat jpeg you've already got it locally right so it's just kind of som",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "r will can also kind of tell you some basic cool stuff as well so for example his day the whale say demo that we saw and in fact it shows you on this web page how that well say image was created that's a system kind of dockerfile script that says ok start from a bun to run these unbuntu things to install a ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "operating system",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "f84e2260-9145-46a3-bdce-409d6138324a",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "o the kernel \"and say, \"\"hey excuse me, kernel, please look at my memory\" \"to figure out how long my c string is.\"\" i don't need\" to invoke the whole operating system for that. i can do that directly inside my process's memory. so for things which are part of the c library, i just need to go to section three. and s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "367502e6-86bd-4b7c-8b0f-a6d09829fe75",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "ss was cloned into two now i have two completely happy independent processes running each of those processes then calls fork independently and so the operating system says fine ok you could for all duplicate you or you could fall to our clone you as well now i've got four processes so we could sketch this out in ti",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "367502e6-86bd-4b7c-8b0f-a6d09829fe75",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "al process will return from fork so it's just going to keep keep going on in time and eventually will print something else to say hey is valuable but operating system says great i will clone you and make a new process so a few milliseconds later brand new process has appeared on off it goes ok and eventually this p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0e904504-e9c5-4ef5-9739-b762f6053521",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " it looks like we've almost created ourselves in order and sleeping sources simple order end algorithm to do sorts but we're relying of course on the operating system to properly schedule our processes and did not return from sleep until that time is up to that time is expired so that's what we've got we create all",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14984eb1-a900-473a-816e-4e304fedc041",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "whatever it was doing before and anything else arguments maybe return value as well ok so ok so immediately above we have nothing in practice the the operating system may include what's called a canary value so if we could deliberately put a value into some memory so for example i can have a value a hexadecimal val",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2c80a67a-6e39-4b62-812c-69eb49905471",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ok so let's talk about why the nation part of the operating system here that is ass break now if we were to look at the manpage of s break you'd read something like the following s break increases the process is data",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2c80a67a-6e39-4b62-812c-69eb49905471",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "bout the day you call malloc and say hey my malloc i need another four thousand and ninety six bytes please this point we need need to go back to the operating system to the kernel and beg for some more ram beg for some more real addresses we don't want to talk to the oblivion we don't want to avoid we actually nee",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57f1edee-d98f-4b8b-9ca9-c3c66e7774d1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ok so let's talk about why the nation part of the operating system here that is ass break now if we were to look at the manpage of s break you'd read something like the following s break increases the process is data",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57f1edee-d98f-4b8b-9ca9-c3c66e7774d1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "bout the day you call malloc and say hey my malloc i need another four thousand and ninety six bytes please this point we need need to go back to the operating system to the kernel and beg for some more van back for some more real addresses we don't want to talk to the oblivion we don't want to avoid we actually ne",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7aab9397-22c3-4ad5-beca-764e7308dfdf",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ok so let's talk about why the nation part of the operating system here that is ass break now if we were to look at the manpage of s break you'd read something like the following s break increases the process is data",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7aab9397-22c3-4ad5-beca-764e7308dfdf",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "bout the day you call malloc and say hey my malloc i need another four thousand and ninety six bytes please this point we need need to go back to the operating system to the kernel and beg for some more van back for some more real addresses we don't want to talk to the oblivion we don't want to avoid we actually ne",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e3b111b7-8038-4f0e-a112-7fb6b2538548",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ok so let's talk about why the nation part of the operating system here that is ass break now if we were to look at the manpage of s break you'd read something like the following s break increases the process is data",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e3b111b7-8038-4f0e-a112-7fb6b2538548",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "bout the day you call malloc and say hey my malloc i need another four thousand and ninety six bytes please this point we need need to go back to the operating system to the kernel and beg for some more van back for some more real addresses we don't want to talk to the oblivion we don't want to avoid we actually ne",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "whole load of cpus to come and work on our program together if it turns out that we don't actually really have say two cpus on my my machine then the operating system lies to us it gives it it plays a game where we pretend that we've got an infinite number of cpus versus really in fact what you have is like a a sho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8078f738-b531-4bab-83c7-0facaf3ee1bf",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ch one of them was responsible for printing out one thing now you might have guessed that my laptop here doesn't actually have a hundred cores so the operating system cheats virtually we can pretend that we have a hundred different cpus running but in reality what happens is that my poor little two or three or four",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "412638bd-03f0-44d0-a48b-5c8f0bee64e9",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " if i allow the kernel to interrupt what i'm currently doing so if i did turn off interrupts there can be kind of no opportunity for my kernel to the operating system to stop my code from running the cpu becomes very blindsided to anything else going on because it cannot be interrupted ok so of course for real syst",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ment a critical section and and we want to find ways to ensure the only one thread enter the critical section at a time so this is actually a classic operating system problem because critical sections occur all over the place inside the kernel because there's so much concurrency going on and can we kind of find a w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "deadlock or not so what can we do to prevent deadlock and one algorithm that our system could use is something called the bankers algorithm so if the operating system knew in advance what resources particular process wanted so if we knew an example example for example the process one is going to need let's say eigh",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "deadlock or not so what can we do to prevent deadlock and one algorithm that our system could use is something called the bankers algorithm so if the operating system knew in advance what resources particular process wanted so if we knew an example example for example the process one is going to need let's say eigh",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "4601a707-5dd9-44c5-b66d-261ac8ae080b",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "re on requires to think about these low level posix interface is we just want to write code that works say in windows as well maybe you kind of other operating systems that support the c library and which is kind of everything so let's have a look at how we can kind of jump around in file now i big word of caution ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "781c2c19-58df-4f6e-9dcf-99e51f685f66",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "re on requires to think about these low level posix interface is we just want to write code that works say in windows as well maybe you kind of other operating systems that support the c library and which is kind of everything so let's have a look at how we can kind of jump around in file now i big word of caution ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "31a84e40-90fe-4ea7-9af5-cfc0d0ffebe8",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " stand a chance of running this this kind of tricks were once used to rescue a satellite where someone had accidentally managed to delete most of the operating system from the satellite but they still had a and interactive prompts like this and they were able to play enough games to recover the system so that satel",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": " a lot like complete bootable linux system and we will see in a future lecture how we can actually run this inside an emulator so i've got a complete operating system now is not a very big one so if i say say disk usage see a summary you see it's about fifty thousand fifty thousand megabytes let's check yeah fifty ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf992758-bf07-4e89-af7f-f47de3438f0d",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "sk usage see a summary you see it's about fifty thousand fifty thousand megabytes let's check yeah fifty fifty megabytes so the whole thing is a tiny operating system just fifty meg right so we've mounted it we can have a look around when i finished i want to unmount this how do i do that ok so now i can say you me",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfe8f684-5acd-41bf-8ba0-276a3fc52ffb",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "ormat because it's sufficiently efficient to be able to distribute complete file systems for example to install some new game or earning complete new operating system right so we used mount in order to mount an ics file using a loop back file system we did that before how can you download things from the command li",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "so with audio you would actually might consider kind of other higher priority system scheduling is dead right so there's kind of the basic theory and operating system courses can develop formulas and talk about these kind of example models in detail in today's real lennox world we don't actually use any of these si",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "eb60661b-5d09-4877-bb19-11bf0d303584",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "priority then the high priority jobs if they keep on arriving will never allow low priority jobs to run by the way when i say jobs that's the classic operating system description of processes and items which actually need cpu time but you can i'm sure generalize to the idea of this applying to individual threads in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bb308b87-9d36-4d8c-b1da-bcd886514268",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "file descriptors were ready to either receive or send more data the poll was developed on there going to bsd system so not linux but the another free operating system which is also aims to be posix compliant but today you won't find poll on your linux machine but you will find it on your macintosh laptop on os x be",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e09a816e-d4d4-46c2-9a55-faaa21d5a1d4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "two minutes where the you cannot simply start a new server listening on the same port ok so that's the default behavior for tcp under linux and other operating systems we can actually change their behavior so that a new process can immediately listen on that port in fact we can set an option on our socket when we f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4c2cacef-7dbd-4877-97e1-9c6cf834fa33",
        "lecture": "CS",
        "lecture_num": 34,
        "context": " pulling all the bytes for a video file i just want to get in say four gigabytes of data as quickly as possible or for example you're starting up the operating system or you are loading an application you just want to move in as many bytes as possible one after another or random so you have random read write access",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8b87906-763d-4c78-8224-d88dd43fdd87",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "ch allows us to install a signal handler ok so one downside of signal is that it's exact behavior is not precisely specified and actually varies from operating system to auto operating system for example what should happen if you're in the middle of a signal handler and in other signal is is delivered is allowed to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8b87906-763d-4c78-8224-d88dd43fdd87",
        "lecture": "CS",
        "lecture_num": 34,
        "context": " signal handler ok so one downside of signal is that it's exact behavior is not precisely specified and actually varies from operating system to auto operating system for example what should happen if you're in the middle of a signal handler and in other signal is is delivered is allowed to be delivered it should w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8b87906-763d-4c78-8224-d88dd43fdd87",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "ppen if you're in the middle of a signal handler and in other signal is is delivered is allowed to be delivered it should we remain pending different operating systems have interpreted signal in different ways secondly a signal is not actually supported in multithreaded programs though in practice in linux it does ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "don't control this particular struct and tomorrow depending on how lynn exchanges this truck it may grow in size it also may have more fields on what operating system compared to another operating system all those fields may be put in a different order it gets worse than that however because a compiler may choose t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3eef8bd5-25ff-471b-9ae8-2388a3967aa9",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "and tomorrow depending on how lynn exchanges this truck it may grow in size it also may have more fields on what operating system compared to another operating system all those fields may be put in a different order it gets worse than that however because a compiler may choose to change the binary layout of a parti",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "386e3067-a4c7-42a0-9721-75a58c84ced0",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "hi welcome to lecture 38, so let's get started right today we're going to do some review ideas and also go into some operating system ideas as well. so let's start with going all the way back to threads and ask why is the following code threadsafe ok so let's have a look at it what'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "708df333-e9ad-4b1c-8f24-df23dcfb4811",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ok sir how could it be the celcom malik take the same amount of time well the answer is it depends it depends upon actually which operating system we're talking about and also actually just now talking about implementation choices based on implementation toys choices you'll find inside bsd and l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "708df333-e9ad-4b1c-8f24-df23dcfb4811",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "bsd says bsd says you know we want to be very security conscious and that in fact is going to be our guiding principle that we want to make it secure operating system as possible so if a process has finished with a page of memory here then there could be important secrets inside that memory for example maybe there'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "708df333-e9ad-4b1c-8f24-df23dcfb4811",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "actice if you benchmark calloc and malloc you will often actually see similar performances because of all these kind of sophisticated tricks that are operating systems play on us behind the scenes alright i'll see you in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0fe42c84-6a79-4581-94d8-ef1fae922e78",
        "lecture": "CS",
        "lecture_num": 39,
        "context": " trying to modify so the critical section problem became really important in the nineteen sixties when we were trying to figure out how to write good operating systems because with operating systems there's lots of things going on concurrently i've got lots of processes to an update things i've got bits of hardware",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0fe42c84-6a79-4581-94d8-ef1fae922e78",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "al section problem became really important in the nineteen sixties when we were trying to figure out how to write good operating systems because with operating systems there's lots of things going on concurrently i've got lots of processes to an update things i've got bits of hardware interrupting me trying to get ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "al and you ran the following so call http illinois dot edu and press return what happens next right so this is an opportunity to show off all of your operating system knowledge and system programming knowledge ok so first of all what is curl right so we better talk about that for a moment ok so curl actually is a b",
        "label": "Use"
      }
    ]
  },
  {
    "text": "six bytes",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "a855d876-1b55-4c60-aedf-e70a95f03847",
        "lecture": "CS",
        "lecture_num": 2,
        "context": " that's part of my text segment the actual things i've loaded from disk and i've copied that into the stack so there's one two three four five or six six bytes including the zero bite that have been copied into the stack and blah if i asked him as an address as a pointer would actually be hey i'm beginning o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " accept four thousand and ninety six but in our original code how many bytes do we actually right well potentially if i typed in four thousand ninety six bytes putting in that zero byte would have gone past the end of my buffer i would've had buffer four thousand ninety six here so i would have gone past the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "nds up calling read for performance may not ask for just one bite it might say yeah guess what the c library has lots of space that's a full thousand six bytes or something for for a buffer area itself in order to make the code performance alright are we done now we've got a little bit more work here because",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "117f0f11-cc38-4a40-b359-8f1ba81655e1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ore memory from the system hey system i need to increase my data segment by that many bytes ok so we'll call it s break with say four thousand ninety six bytes over many you needed ok add will wait for that to return system calls can be slow so this may not be the fastest memory allocator but certainly is th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "a piece of memory which is one hundred and eighteen bites and somebody requests one hundred twelve bytes ok so now i've got a small piece of just six six bytes that no one is ever going to be able to use effectively and it's very deep inside my link list etc right so it's going to take a long time to find an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2c80a67a-6e39-4b62-812c-69eb49905471",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "d to this is just sufficient for what we need ok but what about the day you call malloc and say hey my malloc i need another four thousand and ninety six bytes please this point we need need to go back to the operating system to the kernel and beg for some more ram beg for some more real addresses we don't w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2c80a67a-6e39-4b62-812c-69eb49905471",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ero bytes at the beginning but that's not enough now i need to extend it so i please i'd like to move this watermark upwards say by two hundred fifty six bytes so that now i've got some more addresses i can play with i can use to hold some data so that's one less pack gives you an ability to turn on like a t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57f1edee-d98f-4b8b-9ca9-c3c66e7774d1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "o this is g asked sufficient for what we need ok but what about the day you call malloc and say hey my malloc i need another four thousand and ninety six bytes please this point we need need to go back to the operating system to the kernel and beg for some more van back for some more real addresses we don't ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57f1edee-d98f-4b8b-9ca9-c3c66e7774d1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ero bytes at the beginning but that's not enough now i need to extend it so i please i'd like to move this watermark upwards say by two hundred fifty six bytes so that now i've got some more addresses i can play with i can use to hold some data so that's one less pack gives you an ability to turn on like a t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7aab9397-22c3-4ad5-beca-764e7308dfdf",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "o this is g asked sufficient for what we need ok but what about the day you call malloc and say hey my malloc i need another four thousand and ninety six bytes please this point we need need to go back to the operating system to the kernel and beg for some more van back for some more real addresses we don't ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7aab9397-22c3-4ad5-beca-764e7308dfdf",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ero bytes at the beginning but that's not enough now i need to extend it so i please i'd like to move this watermark upwards say by two hundred fifty six bytes so that now i've got some more addresses i can play with i can use to hold some data so that's one less pack gives you an ability to turn on like a t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e3b111b7-8038-4f0e-a112-7fb6b2538548",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "o this is g asked sufficient for what we need ok but what about the day you call malloc and say hey my malloc i need another four thousand and ninety six bytes please this point we need need to go back to the operating system to the kernel and beg for some more van back for some more real addresses we don't ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e3b111b7-8038-4f0e-a112-7fb6b2538548",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ero bytes at the beginning but that's not enough now i need to extend it so i please i'd like to move this watermark upwards say by two hundred fifty six bytes so that now i've got some more addresses i can play with i can use to hold some data so that's one less pack gives you an ability to turn on like a t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1f0947f0-7d90-4971-8f36-20b870937782",
        "lecture": "CS",
        "lecture_num": 10,
        "context": "y three block splitting but what if they only ask for say three hundred and ninety six then their actual usage is only these three hundred and ninety six bytes and we've got all of these bytes over here which are wasted space no one can see them similarly if we were very lazy or very fast with our real ac an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e4db746-ae92-4bc8-ba83-cf475b89a78c",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ntents of the program which i can load into memory so i will go to my i o systems say hey please can read me this page of memory four thousand ninety six bytes and will wait for that to complete so hopefully in just a few milliseconds time but it might take longer i'll actually have those bites now and now w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "o the ten entries ok and if each entry is four bytes then the total size of this is going to be two to the twelve in other words four thousand ninety six bytes or in other words four kb ok so that's its size in memory so this little directory will fit really neatly into a single frame isn't that great a sing",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "tries here and as usual each one is should be attend each one is four bytes ok so again this little table will fit snugly inside four thousand ninety six bytes so for example the one i'm currently drawing might just happen to live inside my physical memory just here right and then finally when that when we r",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "segment requires two pages and the stack requires two pages ok right so we'll pretend water thirty two bit system so i've got my four thousand ninety six bytes for each page so the twelve bits here is my page offset the upper twenty bits are going to be the page number ok so that's the page number and that's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " go there were only limit here is going to be the buffer that i've put in here and i said i could i prepared to accept up to four thousand and ninety six bytes in one go ok so don't just assume that each read is going to become one so one right is beginning to come one read it doesn't have to write it just l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "or case so one and will say hello right and how many bytes do we want to send let's send one two three four five one two three k let's do it let's do six bytes and say hello in exclamation point but not the super bite at the end ok what do you think about that what's going to happen now ok so if i exit this ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "o let's let's put that put that right call early ok so now when we compile it ok you can see great we got back my read return dad it says ok i got by six bytes and of course if we wished we could print that out now it would be dangerous to treat it as a c string because there's no guarantee that a) they woul",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "s oh yes i correctly well matched and we'd say one thousand two hundred and seventy five bytes even though i said you could read four thousand ninety six bytes then this is the number of bytes that you should be writing to the to actually standard input ok alright have fun with that there's a key piece that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7d923e20-7168-4cea-b7dd-1ffabc4e892c",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "even checked today the capacity of the buffer and so we are just happy calling mem copy and if we were exhausted say there's four thousand and ninety six bytes we're going to start writing arbitrarily into memory ok so what can we do about this well one attempt might be to do the following so you could say l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ld type apache two point two point one five in and look for vulnerabilities associated with this it's telling me that it's sending hundred and twenty six bytes and it's closing the connection as well it's also telling me that is this is a character set it's using and this is what we get for two hundred and t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ype apache two point two point one five in and look for vulnerabilities associated with this it's telling me that it's sending two hundred and twenty six bytes and it's closing the connection as well it's also telling me that is the character set it's using and this is what we get for two hundred and twenty ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "er block such a much larger today but let's let's concentrate on this main convention here so in other words i'm throwing around four thousand ninety six bytes anytime i want to load or read something from the disk so you've probably been talking about kind of cache lines and this idea that if you make a req",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "er block such a much larger today but let's let's concentrate on this main convention here so in other words i'm throwing around four thousand ninety six bytes anytime i want to load or read something from the disk so you've probably been talking about kind of cache lines and this idea that if you make a req",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "ut i don't need to be able to execute them i don't care where inside my virtual address space this memory ends up and i want four thousand and ninety six bytes please ok so if this succeeds great i get it back a pointer which i can actually start to use it will be the contents of alice dot text but we of cou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3d0ca20e-770a-4185-b85c-16363e80fe82",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "units and that unit will be the smallest unit of read the area that i can write on too so a sector might itself be pretty small say two hundred fifty six bytes but probably a lot smaller than our four thousand ninety six blocks that we take typically talk about ok so we talked about spindletop butthead actua",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4c2cacef-7dbd-4877-97e1-9c6cf834fa33",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "s like block erasing when i finish with the block i don't want to have to erase each individual byte instead i want to erase say four thousand ninety six bytes all in one go we've already talked about wear leveling we want to make sure that we're using we're writing to the whole storage area as a whole so th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4c2cacef-7dbd-4877-97e1-9c6cf834fa33",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "write that particular cell in fact the way that that ssd 's work is you erase an entire block so if i've got say block let's say four thousand ninety six bytes but it could actually be a different size and you decided to change one bit then that whole block is now invalid i'm going to have to actually to wri",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4c2cacef-7dbd-4877-97e1-9c6cf834fa33",
        "lecture": "CS",
        "lecture_num": 34,
        "context": " called write amplification happening here which is the the user program just set one bit but we had to actually write more than four thousand ninety six bytes or however big the blocksize happened to be on the device which is much larger than one bit but anyway so if i have the single bit purcell then empir",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "38a81991-43dc-442e-b214-b0fdcb528caf",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " here this right so zoom in ok so the client says let me send a heartbeat request and if so please reply potato and send at six six letters please or six bytes if you like ok and then what if we subverted this what if as a malicious actor on the internet we said ok i'm going to send you hat please send me ba",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ff918b22-18b3-4e5f-96f5-e6eb462fbefd",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "ght i do this because i can create some shared memory between a child process an apparent process gets so for example let's have four thousand ninety six bytes case that this is going to be the number of bytes we want let's decide how we want to use these bites so we don't need to execute any code here but w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cc2fa93f-a576-423d-b080-9da120a3796d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ot edu and then import so we said port seven six five four and then a message ok so we'll try hello right ok and great we send a little datagram with six bytes the actual datagram that gets sent of course is a little larger because we've got the overhead of the ip address in the front of it and then we wait ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "c string",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "491a80ef-eda8-4e66-a332-f2dd12cb7ebe",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "ok so let's complete the following to return one if the given c string contains an at symbol or not otherwise return zero so let's write this little bit of code so first of all take a look at this it's going to be given ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "491a80ef-eda8-4e66-a332-f2dd12cb7ebe",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "w that that is sixty value sixty four but that code is not very readable it maybe it's better to use oh no that's not right because that's actually a c string and so that would just give me an address instead what i need is a single quotes to say here's an here's an ascii character please convert that into ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "491a80ef-eda8-4e66-a332-f2dd12cb7ebe",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "hey no more and at that moment we've read the actual ascii value is zero so the value zero is not printable character it means this is the end of the c string ok so i could write hey let's read the value up memory and surface zero but there's no point i can just read the value and if that zero great we know",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f6868da9-5be3-472a-ac74-0889cc0d698a",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "ng to point one memory address for the character but then the remaining characters then remaining bytes can be used for more characters we have whole c string and rather than just passing where that pointer points to we very sneakily are going to say hey tell me the address of this variable because i'm goin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f7acd66f-6e2d-4d16-ad5b-83adf8627df9",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " like it's trying to check to see if there's a zero byte there, because if we get to the zero byte, great! we know that we've reached the end of this c string. [indistinct words] the reasonable request. ok, what's going on here? inside this loop, destination equals source. wait a moment! that is just copyin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f84e2260-9145-46a3-bdce-409d6138324a",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "en not a system call. we do not need to go back to the kernel \"and say, \"\"hey excuse me, kernel, please look at my memory\" \"to figure out how long my c string is.\"\" i don't need\" to invoke the whole operating system for that. i can do that directly inside my process's memory. so for things which are part of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8ecc9da-31e3-4c40-bd72-4df6058e9d24",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "t actually there's going to be four bytes, the capital s, \"y, the s, and the zero byte to say, \"\"hey, no more bytes please\"\".\" this is the end of the c string. so what is this actually going to evaluate to? well, when we pass a strlen in this memory location that's held by p, strlen is going to walk along, ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "g to need then are going to be a pointer to a character but you and i know we don't care just that single character actually going to treat this as a c string so all the characters after that including the null byte so i'll call this a buffer and how big is that buffer once its capacity so i'll call it say ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "y and my result are cast with simple enters well result ok her key so if i wanted to just directly use those those bites get line actually gives me a c string including the null byte so i could print it out i could say right kind of buffer contents and will say percent s k and we had a buffer at ok alright ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "ype something like one two three and you'll see that great we've actually script off the new line an only printing that so and we can now use it as a c string so abc and we have abc and we have a longer string and we change capacity and potentially the address of a buffer ok so what do we got little get lin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "cient right and with anything else you want to do well ok what do you think about this let's see we've got some bites but we didn't necessarily get a c string what we got is just some bytes is not actually going to be null terminated so how could i actually see those bytes well one way is to use every right",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "ted so how could i actually see those bytes well one way is to use every right to say give spit out those particular bites but let's start using as a c string how can i do that and the trick of course is to put a zero at the end so if i said buffer at the number of bytes read that will definitely be one mor",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " ok so this is now in dangerous territory i hope you can see why but now if i did actually get some bites i've terminated it so now i can use it as a c string so i can do things like put it in print f and i can say and and you gave me write a little string here right now i need to say buffer and we know tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6fa7868f-bbe1-47f6-bee8-22507dfcc8c8",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "hich file to read from which filestream so this f scanner for that or you might say actually guess what i've got some bytes in memory that i did as a c string and i want to pass the output from that so in which case i can use snf and all i need to do is pass in the address of my c string right so let's have",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6fa7868f-bbe1-47f6-bee8-22507dfcc8c8",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "ory that i did as a c string and i want to pass the output from that so in which case i can use snf and all i need to do is pass in the address of my c string right so let's have a play with this then because guess what on up here i've got a little csv file called my data dot csv it got some values in it an",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "42ebcdb6-a366-49f4-b95a-a0614c5ac1ce",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "k otherwise we still watch you want to return a valid string we've got some we've got some bites that we've read already let's turn it into a a valid c string so let's turn that like with a zero and return the last option is that we've just read a new line so we've put that new line into our return heap are",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "42ebcdb6-a366-49f4-b95a-a0614c5ac1ce",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "e've put that new line into our return heap area and now let's make sure that we've terminated the string and return the number of bytes red form the c string from the stream so as you can see that's quite a gnarly little function to write so isn't it great that the c library be provides it for us okay so t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "ing to exceed our buffer and we might write a code a bit like this we have to be a little bit careful however because we're going to need to return a c string so at the end of my code kate is disappeared right anyway code that's the case i'm going to write it for real the enemy code you can get way there we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "ine pointer dereferences with now looking at the heap memory and then put a null byte at the end to ensure that what we return is a proper terminated c string so let me go bites weird and you would say sure ok but when we do that we've got a little bit of work to do first of all right now we're turning nega",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8459ee6a-30aa-499c-9226-74f97c8f7ce4",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "bout why and then again let's exit with an error value k right so what do we think about this well i'm using exec here so better include i think it's c string send liberal standard dodge ok and i didn't declare what program dangerous so can you guess what how i should declare a little viable here program na",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3645730a-4aa1-43d8-be7d-16db4e0c5df3",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "imple numerical digit or not and in fact the libra has a lot of these little useful functions here which work either with a single character or whole c string so whilst it's a digit or position is less than the length of the string keep going well we actually want to terminate if either of these conditions ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3645730a-4aa1-43d8-be7d-16db4e0c5df3",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "le look at i want you available to now look at some heat memory and i'm allocating this number of bytes i think the intention here is to try to put a c string in there let's see how well it does so we men copy into this is not right right now we're trying to copy it into where your variable is if that's on ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3645730a-4aa1-43d8-be7d-16db4e0c5df3",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "opy behaves in a very similar way we give a target and a source but now we have to say exactly how many bytes and did we copy do we actually create a c string no we didn't because we copy the digits but we never terminated it so we should remember to before returning if we want to see string we should remem",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3645730a-4aa1-43d8-be7d-16db4e0c5df3",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " is actually going to be pause plus one ok so great now we've got a function to ashley finds the digits at the beginning and then creates a brand new c string just for those digits it's possibly an empty string if the original message did not start with any digits now let's have a look at part two ok what d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " come that in a moment for now let's just carry on ok so we do put s which as you know are starts printing out characters until it gets to the end of c string character the null null byte and followed by a newline for us and then we say ok if stricken power so this is going to compare two strings and we pas",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8c34ce3-8698-443a-b044-40b8ce707888",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "om some start to ending value in my loop here it is or print that out as well using long 's and then so for each value of i i construct just a simple c string here it is i'm going to construct it not not by printing it out but i've got some memory here my little message so let me use aspirin f which is goin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t back my read return dad it says ok i got by six bytes and of course if we wished we could print that out now it would be dangerous to treat it as a c string because there's no guarantee that a) they would get order those bytes in one go and b) we never even sent a zero byte so i'm just going to print it o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "t need to set any of this memory to zero so let's just use malloc and how much memory i want ok i could have half however if i want to return it as a c string maybe that's not quite enough let's get back to the moment ok so will call every to say ok fread we is a far handle and i can say give me one item th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": " if it doesn't then ok so we could say look if that is not equal to half ok then do some error handling ok now are we done so kind of except is not a c string ok so now we have to say right ok whereas let's advance forward half bites and put in our terminating zero byte at that point there we go ok and fina",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "31222488-6252-419c-9c31-9ff072cffeee",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " a pointer that now points to the b ok and we return that so if and when these two threads run we know that the first first one returns a pointer to bc string and the second one prints out xyz right what is the rest of the code to write so equals p thread join on thread a and grab the result and so in store",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5f3d6627-e0d7-473c-920e-5f3d6584e568",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "d a pointer that now points to the b ok an we return that so if and when these two threads run we know that the first first one returns a pointer to bc string and the second one prints are xyz right what is the rest of the code to write so equals p thread join on thread a and grab the result and so in store",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "78b23023-0958-47d0-90f2-41607cd135b3",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "d a pointer that now points to the b ok an we return that so if and when these two threads run we know that the first first one returns a pointer to bc string and the second one prints are xyz right what is the rest of the code to write so equals p thread join on thread a and grab the result and so in store",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "84c32d4e-7aac-462f-b6e7-5a15921bfb97",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "d a pointer that now points to the b ok an we return that so if and when these two threads run we know that the first first one returns a pointer to bc string and the second one prints are xyz right what is the rest of the code to write so equals p thread join on thread a and grab the result and so in store",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aa979b80-c6f3-4eca-aaf9-1b888ebea383",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "d a pointer that now points to the b ok an we return that so if and when these two threads run we know that the first first one returns a pointer to bc string and the second one prints are xyz right what is the rest of the code to write so equals p thread join on thread a and grab the result and so in store",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "so let me read up to nine hundred and ninety nine bytes and if they give me something valid then ardesta printed out but remember what i get is not a c string it's up to me to terminate what what we received with the zoomer bite ok and will put it up and then i can say something back to them ok so let me no",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "let me read up to nine hundred and ninety nine bytes and if they give me something valid then i'll just print it out but remember what i get is not a c string it's up to me to terminate what what we received with the zero byte ok and we'll print it out and then i can say something back to them ok so let me ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " the string that you can request can never be larger than this constant here path max and we add one just to ensure that there's enough space for the c string zero bite at the end ok so if you want to know how where you currently on file system here is one way to do it right so that is a limitation of funct",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "want to work with kind of paths then you can use this constant which is actually part of the kernel but provided by the c library to assure that your c strings are always of sufficient size right so now let's actually start working with directories it would be great if for example we could enumerate all fil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " the string that you can request can never be larger than this constant here path max and we add one just to ensure that there's enough space for the c string zero bite at the end ok so if you want to know how where you currently on file system here is one way to do it right so that is a limitation of funct",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "want to work with kind of paths then you can use this constant which is actually part of the kernel but provided by the c library to assure that your c strings are always of sufficient size right so now let's actually start working with directories it would be great if for example we could enumerate all fil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "398ab8f1-44ca-4550-8662-16d9a98af68a",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "nd out its size ok and then i can malloc some space are use every today to say right i want to read in that number of bytes i don't need this to be a c string because i mean immediately going to call f right to output the contents of the file another going to read in exactly the bytes of the file and then i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "that's a little hard to read let's actually have a look at just text here it is we gotta hello from the other side then there kind of the terminating c string character and then the rest of the alice dot text ok so welcome the looking glass welcome to kind of escaping out of a single process using nmap also",
        "label": "Use"
      }
    ]
  },
  {
    "text": "page table",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ok hi right so we've got memory there we go right we've got memory virtual memory working using a page table and we've just invented a two level page table but now we actually want to think about getting recovering that performance because right now with out",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ok hi right so we've got memory there we go right we've got memory virtual memory working using a page table and we've just invented a two level page table but now we actually want to think about getting recovering that performance because right now with output to level page table it takes three memory a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "st invented a two level page table but now we actually want to think about getting recovering that performance because right now with output to level page table it takes three memory accesses in order to actually read or write the bite that we care about inside our heap or stack or whatever it wasn't part of ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " page number and i want to go from a page number to the physical frame number so let's go to the frame number which date we did using our multi level page tables but what if we actually had a very fast piece of memory to do this as part of the cpu and this has to be extremely quickly has to be much faster tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "s where ns count even tense of nanoseconds count so let's start asking the tlb as we fire up the machinery to talk to main memory to walk through the page tables but hopefully we won't need to complete that task because the tlb will say uh huh i have the answer for you i can tell you the physical frame for wh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ent but we can't guarantee that so that means that overtime my program will actually get a little bit faster because now i no longer need to walk the page tables and my memory accesses direct can take this shortcut right that's enough of the tlb and i'll see the next video where we start talking about what el",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "rect can take this shortcut right that's enough of the tlb and i'll see the next video where we start talking about what else we can store inside our page tables bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "push them straight out towards our ram and so that we can now actually read the correct but ok so that's our plan but we've just invented is called a page table so we've got a single level page table and it's k and it gives us the security of of each process now each process will have its own page table so we",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "and so that we can now actually read the correct but ok so that's our plan but we've just invented is called a page table so we've got a single level page table and it's k and it gives us the security of of each process now each process will have its own page table so we've just looked at the page table one p",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "led a page table so we've got a single level page table and it's k and it gives us the security of of each process now each process will have its own page table so we've just looked at the page table one particular process if another process starts to run will have to tell the cpu to use a different piece of ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "level page table and it's k and it gives us the security of of each process now each process will have its own page table so we've just looked at the page table one particular process if another process starts to run will have to tell the cpu to use a different piece of memory for the page table and this page",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "looked at the page table one particular process if another process starts to run will have to tell the cpu to use a different piece of memory for the page table and this page table will be maintained by the kernel so if you call s break if you load more libraries if you'll start gets bigger than this page tab",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "able one particular process if another process starts to run will have to tell the cpu to use a different piece of memory for the page table and this page table will be maintained by the kernel so if you call s break if you load more libraries if you'll start gets bigger than this page table need to be update",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ge table and this page table will be maintained by the kernel so if you call s break if you load more libraries if you'll start gets bigger than this page table need to be updated as well right so anything we can do to improve this do we have any problems with this right so the first thing i want you to notic",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "t inside my process most of them i'm never going to touch for example my stack might be small my heat might be small and yet i have entries inside my page table for these so maybe a future design can improve upon that a second problem we've got is that congratulations we just made our machine run twice as slo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e4db746-ae92-4bc8-ba83-cf475b89a78c",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ying to re divide into addresses which don't probably exist yet ok so when that happens what's happening is that we are going through our multi level page table system here and we get to an entry that says no i'm sorry i do not map to any one of my actual physical pieces of ram so when that happens mmu the pa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e4db746-ae92-4bc8-ba83-cf475b89a78c",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "to an entry that says no i'm sorry i do not map to any one of my actual physical pieces of ram so when that happens mmu the part that is reading this page table causes a page fault and a page fault is a hardware interrupt to tell the cpu that i'm sorry i cannot satisfy this read or write to request because it",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e4db746-ae92-4bc8-ba83-cf475b89a78c",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "eeding the functions that the io functions that we wrote in this half of the program right so at that moment we try to go to this location we use the page tables so we tracked through the page tables ok the upper ten bits tell me to use this table the middle ten bits time we choose this table and this is i'm ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e4db746-ae92-4bc8-ba83-cf475b89a78c",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ions that we wrote in this half of the program right so at that moment we try to go to this location we use the page tables so we tracked through the page tables ok the upper ten bits tell me to use this table the middle ten bits time we choose this table and this is i'm sorry that doesn't correspond to any m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e4db746-ae92-4bc8-ba83-cf475b89a78c",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "r that to complete so hopefully in just a few milliseconds time but it might take longer i'll actually have those bites now and now we can fix up our page table to say ok don't look at nothing anymore instead this entry is now going to be just here great so now we fixed it up we can release process and let it",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ok so we designed the little page table and let's just think about how big it is hopefully it's going to be a bit smaller than that gigabyte version that we designed in the beginning so let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "hat each entry is four bytes and we know that we need two to the twenty entries because there's a up to two to the twenty pages ok so this gives us a page table of size two to the twenty two k two to twenty two bytes right how can we be that off well as usual remember the two to the ten is thousand twenty fou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "s tiny even if it only takes one hundred kb actually i'm going to give four megabytes of space that i need to find inside my real memory to hold this page table and worse it needs to be four megabytes of contiguous memory as well in order for the hardware to do is look up so it's ok but maybe we can do better",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " hardware to do is look up so it's ok but maybe we can do better than this and so a key idea is maybe we should actually make not just a single level page table but a double level page table ok so let's think about how that might work and this is kind of maybe a little tricky the first time you see it ok so h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "it's ok but maybe we can do better than this and so a key idea is maybe we should actually make not just a single level page table but a double level page table ok so let's think about how that might work and this is kind of maybe a little tricky the first time you see it ok so here's the plan let's let's do ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "f so one two three four five six seven eight nine ten so i've got ten bits over here and ten bits over here so here's the plan let's have a top level page table there is only going to be used as input these top most bits so we can think of this like a directory into some other page table look up 's as well so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "et's have a top level page table there is only going to be used as input these top most bits so we can think of this like a directory into some other page table look up 's as well so ultimately we're still going to do a mapping from a page number to a physical frame but we're going to do it in two stages thes",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ween all of these different processes right so that's all to come when we start talking about mmap in the future but it ultimately relies on the very page tables that we've been talking about as how we implement virtual memory so what's the big takeaways first of all realized every page has these bits we've g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "nd of clever way of misusing the stack when all you can control is the return addresses that are actually present on the stack and we've talked about page tables which allow us to actually implement virtual memory so we can do this mapping and then finally we talked about the tlb which allowed us to actually ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ok right so what's the next part lecture let's do a several things let's start talking about what we can store inside our page tables let's go through a little bit of math some examples and let's start talking about page fills so fasten your seatbelts and let's go ok so let's do a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "it of math some examples and let's start talking about page fills so fasten your seatbelts and let's go ok so let's do a worked example for two level page table so remember that's where we've taken the page number and divided it up into pieces and so rather than have one big giant contiguous table will have a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ieces and so rather than have one big giant contiguous table will have a directory at the top so what do we got here how much memory does a two level page table require assuming the data segment requires two pages and the stack requires two pages ok right so we'll pretend water thirty two bit system so i've g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "s let's work with this very very simple example and the point realize is that i'm going to need one page of memory to hold the top level page part my page table so there it is ok with it's a thousand twenty four entries did you do ok in other words the top level the top ten bits of feeding into that in order ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "n see that i've now going to need three three pieces of memory three pages inside my physical memory to hold all of this so that's the overhead of my page table system so what does that mean right i just finished this guy off we said that the stack has two so that'll be two entries inside here here we go this",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "k i'd say we've done pretty good at the beginning of this lecture we had a system that required multiple gigabytes and then we went to a single level page table which required four megabytes wait a moment i've got my phone minutes here and now we've got three pages each one is a four four kilobytes oh we've g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ickly fill it in will quickly replace the wall will put it back in so the process itself is none the wiser so the trick we've done here is that in my page table look up ok let's choose knew color blueish thing here ok we will say for example scrub that out will make it so that this points to nothing okayed it",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nswer and look this we're doing a second look up so we have to go back to our disk to read another little table and so this is a lot like kind of the page table tricks that we saw with virtual memory and finally this gives us the actual disk block that will actually hold the data so finally we can meet the ne",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " answer i look this we're doing a second look up so we have to go back to our disk to read another little table and so this is a lot like kind of the page table tricks that we sought with virtual memory and finally this gives us the actual disk block that will actually hold the data so finally we can meet the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "es a process first of all we now know that the memory that we are working with the process is actually virtual memory and the mapping from that using page tables to the actual physical ram and that that mapping can change overtime so we might need more memory but we might also page out some of our memory in o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "ok right so i think this part one of the most exciting parts of cs two forty one so here's the story so far we have talked a little bit about page tables and the idea that inside my virtual addresses i can map to a particular piece of memory and i do this on a per page basis and then we've discussed h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "e bit of confusion they do different things here so remember when we talked about our virtual memory four pieces of actual physical memory inside our page tables we cared about whether you could read or write or execute them and why do we do this again for security so for example i might have pages in my stac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " so what are the kind of some of the things that we need to two right so first of all we've got the virtual memory address mapping in other words are page tables these only makes sense for a particular process that a particular memory inside a particular process is going to be mapped or not to actual physical",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "am and so the same address inside a different physical process could be mapped in a completely different fashion so we need to change the process the page table from page table for process one to page table process too the second thing we need to do is that we keep a lot of accounting information so let's upd",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "me address inside a different physical process could be mapped in a completely different fashion so we need to change the process the page table from page table for process one to page table process too the second thing we need to do is that we keep a lot of accounting information so let's update how much tim",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "physical process could be mapped in a completely different fashion so we need to change the process the page table from page table for process one to page table process too the second thing we need to do is that we keep a lot of accounting information so let's update how much time are processor has actually b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "so fast that if in my process one i know that i want to read a particular memory ok let's read this piece of memory here then i can bypass all of the page table vlookups if i've read the same piece of memory or a nearby piece of memory in the very near future so if i swap now from process one process two i ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "tion about the tlb in other words if i now inside process two then in order to read or write even a single bite of main memory i've got to follow the page tables and remember page table will typically for your process down slow it down say two or three times compared to just begun to access memory immediately",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "er words if i now inside process two then in order to read or write even a single bite of main memory i've got to follow the page tables and remember page table will typically for your process down slow it down say two or three times compared to just begun to access memory immediately so tlb here makes naivel",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "t data stored because or any of those mappings are to do with an incorrect incorrect processor different process so we are forced to actually use the page table lookups which as you know a slow remember those you had to read one in order to read another in order to read the actual bite that you care about ok ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "wait time",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this video and make your choice and then we'll see if you're correct ok so we think about this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this video and make your choice and then we'll see if you're correct ok so we think about this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this video and make your choice and then we'll see if you're correct ok so we think about this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this video and make your choice and then we'll see if you're correct ok so we think about this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this video and make your choice and then we'll see if you're correct ok so we think about this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this video and make your choice and then we'll see if you're correct ok so we think about this for five seconds and then we'll review the answers ok wait times up so let's let's have a look at the key key detail here the key detail is a mutex lock our mutex lock allows us to reason strongly about the number",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "le formulas here things like the completion time minus the arrival time ok write the wait waiting time we've already talked about that it's the total wait time the total amount of time that process is spent on the weight on the redi cube ok here's a surprising won the response time what do you think of that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ically if i'm going to schedule things so batch i just want to maximize how fast i can complete more in other words i care about minimizing the total wait time of the entire system across all of my jobs across all of my jobs also when i'm kind of comparing different schedule schedulers scheduling there's lot",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ndred percent at the type sometimes a cpu is given to another process instead ok right so let's talk about some scheduling terms the first one is the wait time if someone talk about the wait time what do you think we mean do you think we're talking about the total wait time or does the first waiting time bef",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "a cpu is given to another process instead ok right so let's talk about some scheduling terms the first one is the wait time if someone talk about the wait time what do you think we mean do you think we're talking about the total wait time or does the first waiting time before it is between when it is first s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "eduling terms the first one is the wait time if someone talk about the wait time what do you think we mean do you think we're talking about the total wait time or does the first waiting time before it is between when it is first scheduled and when it actually runs ok make your guest now and the correct answe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "aiting time before it is between when it is first scheduled and when it actually runs ok make your guest now and the correct answer is it's the total wait time so this is all the time that we wish the operator would actually using the cpu but was unable to because it was in the ready queue but it was unable ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "e to because it was in the ready queue but it was unable to actually use the cpu core cpu is you being used by different process ok so ideally at the wait time of our system would be zero for all of our processes maybe that could occur if i had more cpus than then the process is that actually wanted to run o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "d be zero for all of our processes maybe that could occur if i had more cpus than then the process is that actually wanted to run ok so so that's the wait time it means total wait time so we can actually kind of write down a formula then based on a couple of basic ideas one is the arrival time so this is whe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "processes maybe that could occur if i had more cpus than then the process is that actually wanted to run ok so so that's the wait time it means total wait time so we can actually kind of write down a formula then based on a couple of basic ideas one is the arrival time so this is when the process is is creat",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "more waiting going on here and then some more waiting going on here etc so there's different ways that in practice are persons might run so the total wait time is the sum of all of these kind of little wait times here so we can see that one form for the wait time is going to be the completion time the actual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "g going on here etc so there's different ways that in practice are persons might run so the total wait time is the sum of all of these kind of little wait times here so we can see that one form for the wait time is going to be the completion time the actual wall clock time like ten twenty for example minus t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "n practice are persons might run so the total wait time is the sum of all of these kind of little wait times here so we can see that one form for the wait time is going to be the completion time the actual wall clock time like ten twenty for example minus the arrival time ok so that gives us a total time tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "but for some of that time it was actually executing so let's remove the execution time the execution duration ok so now we can actually calculate the wait time and like i said ideally we were scheduled things and we have enough resources that that could be zero so there's some other terms as well and i'll ta",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "odel we've only got one cpu then we've got their burst time in other words the amount of cpu time they actually need to complete here and we've got a wait time that we're going to calculate by seeing how much time they spend inside the ready queue unable to continue ok so we've got a couple of possibilities ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "rsons three to one and after ten milliseconds we love process four two one ok at this point process four has finished so let's actually calculate its wait time you'll see that it finished at forty milliseconds in however it's wait time is not thirty milliseconds because it only arrived ten minutes after ten ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "k at this point process four has finished so let's actually calculate its wait time you'll see that it finished at forty milliseconds in however it's wait time is not thirty milliseconds because it only arrived ten minutes after ten milliseconds so it's wait time with these two blocks here so it's totaled wa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "inished at forty milliseconds in however it's wait time is not thirty milliseconds because it only arrived ten minutes after ten milliseconds so it's wait time with these two blocks here so it's totaled wait time was twenty milliseconds ok but sue who's next right after process four comes process one and sim",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "me is not thirty milliseconds because it only arrived ten minutes after ten milliseconds so it's wait time with these two blocks here so it's totaled wait time was twenty milliseconds ok but sue who's next right after process four comes process one and similar we do this round robin so they keep going around",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " they keep going around right here is processed to process two is now finished its completion we've made its burst time requirements and so what's it wait time well you could actually visually look you could say well it waited here here here and here so forty milliseconds but we can also use that formula ver",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " the difference of that then is forty milliseconds ok and finally like purses three and processed three has same idea but fifty milliseconds worth it wait time so it didn't wasn't quite happy and finally process one gets to finish as well so what's our wait time here will see fifty milliseconds yep right so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " has same idea but fifty milliseconds worth it wait time so it didn't wasn't quite happy and finally process one gets to finish as well so what's our wait time here will see fifty milliseconds yep right so that's the way time for each one of my process is so we could actually calculate the total wait time of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ur wait time here will see fifty milliseconds yep right so that's the way time for each one of my process is so we could actually calculate the total wait time of my system so here's the earlier time that we spent twiddling our fingers waiting for our different choices to finish an if we add up all of these ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "he earlier time that we spent twiddling our fingers waiting for our different choices to finish an if we add up all of these will see we've got total wait time of one hundred milliseconds hundred sixty milliseconds which is an average of forty milliseconds ok so this kind of just keep and over that will comp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "hoose process too and we do not preempt there's no preemption going on in this model so process to you run two through to completion which means your wait time was zero right now what happens ok so now in the schedule gets to choose who's next and of course process four has since appeared so process four you",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " month at the end ok and process warren had thirty fifty milliseconds ok right so if we look at this with the shortest job first then we discover all wait times actually gone down and hopefully this shouldn't be a surprise because we've put the total wait time now nineteen milliseconds which is an average of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "with the shortest job first then we discover all wait times actually gone down and hopefully this shouldn't be a surprise because we've put the total wait time now nineteen milliseconds which is an average of twenty two and a half million seconds we've nearly half the actual average wait time why because we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "e put the total wait time now nineteen milliseconds which is an average of twenty two and a half million seconds we've nearly half the actual average wait time why because we put all the shortest things first if we put process one first then and then all that running time of process one would have been added",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " then all that running time of process one would have been added into all of my other jobs by clearing my desk of the shortest things first the total wait time with all my process is is minimal ok could we have done better than shortest job first yes in fact if we used pre emptive shortest job first we could",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "l ok could we have done better than shortest job first yes in fact if we used pre emptive shortest job first we could potentially put an even shorter wait time ok right so just a quick comment is sometimes people think that shortest job first in terms of scheduling choice means shortest remaining time that i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "u get to go right and then process two you came and then process three finally process for so if we add all these up we can calculate these posts the wait time for process one is of these zero wait time for process two they had to wait for process want to finish thirty k the process three had to wait see fif",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "came and then process three finally process for so if we add all these up we can calculate these posts the wait time for process one is of these zero wait time for process two they had to wait for process want to finish thirty k the process three had to wait see fifty milliseconds and processed four had to w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "nt to finish thirty k the process three had to wait see fifty milliseconds and processed four had to wait seventy milliseconds ok right so i'll total wait time who is a hundred fifty milliseconds ok did i get oh yeah i made a mistake right because the wait time for this one should have been sixty ok because ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ait seventy milliseconds ok right so i'll total wait time who is a hundred fifty milliseconds ok did i get oh yeah i made a mistake right because the wait time for this one should have been sixty ok because it didn't appear until here ok so doing some math again hundred and forty milliseconds gay which gives",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "hould have been sixty ok because it didn't appear until here ok so doing some math again hundred and forty milliseconds gay which gives us an average wait time of thirty five milliseconds ok so not as good as our shortest job first but not as bad as round robin ok and then his operator shortest job first so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " and then processed we then process three and finally process one gets finally their cpu ok so what does this look like well in this case are average wait time was ninety milliseconds again with an average of twenty two milliseconds per process ok so no worse than the shortest job and finally here's another ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "efd565c9-78d8-4cd0-8d76-4beb5b405651",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " four was just ten milliseconds so now we have a hundred milliseconds or twenty five millisecond average ok so hopefully i've convinced you the total wait time changes based on their scheduler and also it just a feeling of hey these schedulers do impact the actual performance to running performance of the sy",
        "label": "Use"
      }
    ]
  },
  {
    "text": "write code",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "t could be an arbitrary bit pattern but what we'd like is four stroke at to definitely put the copy the message to the beginning of that well i could write code to now let's see do malloc and then in the case of mark use store copy but instead let me show you another alternative which is let's let's deliberat",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "28a2bdb5-a357-4b00-bb00-b9d1e478498b",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "third signal that it's really useful to discover when our children who finished and we can use this as one way to prevent zombies now i don't need to write code that just blocks and waits for my child to finish i could start many children and then be told being formed when one of them finishes and the the thi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "32897e63-cb36-4269-8874-4059caa719c9",
        "lecture": "CS",
        "lecture_num": 8,
        "context": " hundred into zero bytes in other words that would do nothing so that would be a failure whoops so another example of where is often great to kind of write code slowly use the manpages check to make sure that the things you are using actually work the way that you think they're working ok so we've set those b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "thread exit then all we return from here that thread is done ok so there's a bit of a kind of mind moment here that i want you to realize that now we write code on a page but it's important to think about which thread is actually running that code and of course by default you get one thread for free you get o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what memory barrier we're not going to write code that does not explicitly instead we're just kind of allowing the factor period mutex lock makes our world saying again makes our programs be equal to",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what memory barrier we're not going to write code that does not explicitly instead we're just kind of allowing the factor period mutex lock makes our world saying again makes our programs be equal to",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what memory barrier we're not going to write code that does not explicitly instead we're just kind of allowing the factor period mutex lock makes our world saying again makes our programs be equal to",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "g to ask a threat to sleep in and we also going to release a mutex so it's we discovered it is always necessary to use a mutex because we're going to write code in here where we want to test some condition and then later use that the assumption that condition is now true so we need a mutex lock to ensure that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "em because critical sections occur all over the place inside the kernel because there's so much concurrency going on and can we kind of find a way to write code to ensure that only one thread or process or algorithm can actually manipulate one resource two resources at a time ok so this is kind of the last si",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4be923cb-0fb1-4a38-b904-ceb8ff09755a",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "rs can't beat ok so we had to figure out how to implement that alright that's all three classic problems you should be able to explain these and also write code to implement them by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "called let's just hope for the best which the ostrich algorithm is basically it's let's pretend it's not our problem their system is going to let you write code that can cause deadlock it's up to you the system programmer to make sure that deadlock cannot occur so the system does not prevent you from causing ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ero and what well there's at least one writer then wake them up now we could do that but if we only wake up one writer i better make sure that when i write code down here that uh this code also wakes up those writers so yes i could do this just wake up a single writer by calling p three conditions signal but ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "is called let's just hope for the best which the ostriches algorithm is basically let's pretend it's not our problem their system is going to let you write code that can cause deadlock it's up to you the system programmer to make sure that deadlock cannot occur so the system does not prevent you from causing ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "41b0a81d-3653-466e-87dd-0eda65d6af2e",
        "lecture": "CS",
        "lecture_num": 20,
        "context": " continue so both of these suffer from deadlock so these are not solutions to the dining philosophers problem right so in practice of course we don't write code that manage is philosophers eating spaghetti or whatever with chopsticks but it does illuminate how different socalled solutions behave and we can me",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "re needs to be an entry for each page inside this big giant look up table you can imagine it is just say like an array except that we're not going to write code to actually talk to this array directly instead the silicon is going to be implemented to actually talk to this very directly ok so right so we we pu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4601a707-5dd9-44c5-b66d-261ac8ae080b",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "rary perhaps you wanna write some very portable code it doesn't require on requires to think about these low level posix interface is we just want to write code that works say in windows as well maybe you kind of other operating systems that support the c library and which is kind of everything so let's have ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " a semi color somewhere i have that's my first error right with a different type ok oh there we care right so yeah what you mean i can't read i can't write code this morning different character type where is my error so oh look at this ok right too many parentheses ok that's more like it so finally how are af",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "781c2c19-58df-4f6e-9dcf-99e51f685f66",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "rary perhaps you wanna write some very portable code it doesn't require on requires to think about these low level posix interface is we just want to write code that works say in windows as well maybe you kind of other operating systems that support the c library and which is kind of everything so let's have ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a339955c-d52d-4f69-9c8a-c4e9d4cf038f",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ng to talk about the following challenge can you read in half a file so try pausing the video and just using what you currently know see if you could write code that just reads in just the first half of a file using only kind of these these functions here ok i'll see you then bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "01850175-f9bd-4eba-a73b-9dc63940ee41",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "unction inside here and we thought we could do everything we wanted inside our threads it's not thread safe key and if we instead we actually want to write code that is two s dave then ok we actually should use something else which is stewart ever underscore r and then we pass in some integer like eleanor ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t is everything which case we can finish and return say yeah we sent all the bytes ok we're done we're done with this return so we've actually got to write code that copes correctly with all four of these situations for read we also have the possibility that it would return zero which means ok that's it you'v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8258d360-0ce7-4e09-93ba-dbde1dba4781",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "unction inside here and we thought we could do everything we wanted inside our threads it's not thread safe key and if we instead we actually want to write code that is two s dave then ok we actually should use something else which is stewart ever underscore r and then we pass in some integer like eleanor ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "82687def-c053-4955-8eef-1d80e8bf31da",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "unction inside here and we thought we could do everything we wanted inside our threads it's not thread safe key and if we instead we actually want to write code that is two s dave then ok we actually should use something else which is stewart ever underscore r and then we pass in some integer like eleanor ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t is everything which case we can finish and return say yeah we sent all the bytes ok we're done we're done with this return so we've actually got to write code that copes correctly with all four of these situations for read we also have the possibility that it would return zero which means ok that's it you'v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9edf0a56-503a-444a-861d-6bd29f8a2e58",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "unction inside here and we thought we could do everything we wanted inside our threads it's not thread safe key and if we instead we actually want to write code that is two s dave then ok we actually should use something else which is stewart ever underscore r and then we pass in some integer like eleanor ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t is everything which case we can finish and return say yeah we sent all the bytes ok we're done we're done with this return so we've actually got to write code that copes correctly with all four of these situations for read we also have the possibility that it would return zero which means ok that's it you'v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dff47837-9853-4be6-9e60-8ab2c54b8272",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "unction inside here and we thought we could do everything we wanted inside our threads it's not thread safe key and if we instead we actually want to write code that is two s dave then ok we actually should use something else which is stewart ever underscore r and then we pass in some integer like eleanor ok ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "22302903-5bcb-4262-bd2c-179cf2135ab9",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " size of google today then you might actually choose to actually implement your own connection stack based on udp and then you would actually have to write code to cope with the fact that packets might go missing but this is useful if you want for example to provide an interactive feedback as soon as the user",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "38d669a5-394b-4826-bb65-0090a3444b01",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " size of google today then you might actually choose to actually implement your own connection stack based on udp and then you would actually have to write code to cope with the fact that packets might go missing but this is useful if you want for example to provide an interactive feedback as soon as the user",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a60784ac-5129-4d35-8feb-23e8aa752f87",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " size of google today then you might actually choose to actually implement your own connection stack based on udp and then you would actually have to write code to cope with the fact that packets might go missing but this is useful if you want for example to provide an interactive feedback as soon as the user",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "s which have completed their handshake and waiting to talk to you or it will block if there's no new customers ready to talk so you might for example write code where we'll put this accept insider loop and will process one customer at a time and there is exactly what we're doing here perhaps in the future wil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "s which have completed their handshake and waiting to talk to you or it will block if there's no new customers ready to talk so you might for example write code where we'll put this accept inside a loop and will process one customer at a time and there is exactly what we're doing here perhaps in the future wi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cfb03b59-dbf5-447a-880e-0633fd40a533",
        "lecture": "CS",
        "lecture_num": 37,
        "context": " hey let's do this in reverse order so here's google 's protocol buffers now one advantage of using google protocol buffers is that they allow you to write code in multiple languages so rpc obviously jenn only works really fucking a c and c plus plus projects versus google protocol buffers or implementations ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "meta information",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "s today in other file systems what else could we have well in addition to the actual contents we've probably care about its eyes are some interesting meta information cape we might care about the mind type so what kind of thing is this file and today we represent that using these types for example we've already see",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "most file systems ok right so let's choose a new colour let's let's go for this yellow here right so first of all the we can we can keep some of this meta information about when it was created modified even if we wish we can keep it accessed there in practice today you will find that this is actually really used in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "xciting than that right but no we're not going to store the name as part of the file that our file yes has contents has size has some of this kind of meta information but it does not have a name instead what we're going to discover it is our file has this wonderful thing called and i know number so that is going to",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "o we're getting down to this next part here that right so what is an ai node this is the definition of how we store a file on disk and it has certain meta information it tells us about the size that file it tells us about who owns it and things like when it was last modified it also tells us kind of where on disk i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ing stat and stat is reading the i node so of course we don't usually say ok please start for me particular i knowed number so please tell me all the meta information about kind of four i knowed number seven say twenty three instead we write a particular file so for example i want to look at file say one dot c a pa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " name and use that as a look up in order to get the i node number and once we have an unknown number great we can very quickly read from disk all the meta information about that particular i knowed number so that's the big idea is that our files are actually exist because they are represented with an i node and the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "mber so that's the big idea is that our files are actually exist because they are represented with an i node and the i node itself directly holds the meta information but also then points to provides a way for us to actually get the contents of the file but without the inode you have no file so so i want you to for",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nd of logging i want to keep track of the number of files have been created each week probably want to keep track of the latest files so there's some meta information that we want as well so we've got things like when was the last file access when with file opened and who by how large is a file in terms of bytes or",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "441ed34b-d340-4f03-8c15-3753a894fcf7",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "iles directly form disk and for things like military and health care records we care very strongly about the access to the actual information and the meta information as well maybe it's not just enough to store to encrypt the actual contents of a file maybe we even need to make sure that it's not possible to see th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "do use all of these disk blocks ok so we will take the zero block here and will declare that as super block there it is so that is going to hold some meta information we choose a new color here how about how about some green gay so that's going to hold some meta information about how we've decided to organize the t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "there it is so that is going to hold some meta information we choose a new color here how about how about some green gay so that's going to hold some meta information about how we've decided to organize the the rest of the disk so before we can actually start talking about that i notes and where the actual data is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ns today in other file systems what else could we have well in addition to the actual contents we've probably care about its size or some interesting meta information cape we might care about the mind type so what kind of thing is this file and today we represent that using these types for example we've already see",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e number eight he let me share file number ten with you we like to give our files some kind of name we also might want to store some other additional meta information so we might have kind of search meta information so for example there might be key value pairs like who is the artist if it was a gps coordinates of ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "th you we like to give our files some kind of name we also might want to store some other additional meta information so we might have kind of search meta information so for example there might be key value pairs like who is the artist if it was a gps coordinates of where something was stored or found maybe if it w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "most file systems ok right so let's choose a new colour let's let's go for this yellow here right so first of all the we can we can keep some of this meta information about when it was created modified even if we wish we can keep it accessed there in practice today you will find that this is actually rarely used in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "xciting than that right but no we're not going to store the name as part of the file that our file yes has contents has size has some of this kind of meta information but it does not have a name instead what we're going to discover it is our file has this wonderful thing called and inode number so that is going to ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " so we're getting down to this next part here that right so what is an inode this is the definition of how we store a file on disk and it has certain meta information it tells us about the size that file it tells us about who owns it and things like when it was last modified it also tells us kind of where on disk i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " using stat and stat is reading the inode so of course we don't usually say ok please stat for me a particular inode number so please tell me all the meta information about kind of inode number seven say twenty three instead we write a particular file so for example i want to look at file say one dot c a particular",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ile name and use that as a look up in order to get the inode number and once we have an inode number great we can very quickly read from disk all the meta information about that particular inode number so that's the big idea is that our files are actually exist because they are represented with an inode and the ino",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "number so that's the big idea is that our files are actually exist because they are represented with an inode and the inode itself directly holds the meta information but also then points to provides a way for us to actually get the contents of the file but without the \u00a0inode you have no file so so i want you to fo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "do use all of these disk blocks ok so we will take the zero block here and will declare that as super block there it is so that is going to hold some meta information we choose a new color here how about how about some green ok so that's going to hold some meta information about how we've decided to organize the th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " there it is so that is going to hold some meta information we choose a new color here how about how about some green ok so that's going to hold some meta information about how we've decided to organize the the rest of the disk so before we can actually start talking about that inodes and where the actual data is g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hat inodes themselves are fixed size say one hundred and twenty eight bytes or so we don't have much space on them so definitely we want to store the meta information on it like say when this file was created or modified etc but then we actually want to say ok but if you actually want the bytes of this cat picture ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "hat i knows themselves or fixed size say one hundred and twenty eight bytes or so we don't have much space on them so definitely we want to store the meta information on it like say when this file was created or modified etc but then we actually want to say ok but if you actually want the bytes of this cat picture ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nd of logging i want to keep track of the number of files have been created each week probably want to keep track of the latest files so there's some meta information that we want as well so we've got things like when was the last file access when was the file opened and who by how large is a file in terms of bytes",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "iles directly form disk and for things like military and health care records we care very strongly about the access to the actual information and the meta information as well maybe it's not just enough to store to encrypt the actual contents of a file maybe we even need to make sure that it's not possible to see th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d5fa5a60-c6ea-4207-bb11-869c29ad96ff",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "contents of a file maybe we even need to make sure that it's not possible to see the name of the file or who owns it or when it was modified even the meta information becomes sensitive information ok right so that was a pretty good listen i hope you get to see why actually implementing a file system is hard and man",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4140b9d-47b6-45a5-b675-3e2e57dd9224",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ist obviously with zero bytes and also we've just going to change the modification time to just now so touch even if the file exists is modifying the meta information about when the while was last changed when it was last modified ok so let's give this a shot let's actually try this and see whether we get a valid p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "500f2f37-cb53-4088-952f-c866acfded89",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ok for i knowed entries which have been deleted but which still don't appear inside anyways like my file system but we still might contain all of the meta information so for example it might be i did deleted i knowed entry can still point to the disk blocks that were being used to hold the file contents so that all",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6bda4161-ec8d-403f-b5c5-d510d46fe230",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "ok for i knowed entries which have been deleted but which still don't appear inside anyways like my file system but we still might contain all of the meta information so for example it might be i did deleted i knowed entry can still point to the disk blocks that were being used to hold the file contents so that all",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f98ba734-0314-4594-abb4-128d7495d297",
        "lecture": "CS",
        "lecture_num": 29,
        "context": " l stat works just like stat except when you're actually looking at a symbolic link if it is a symbolic link then it's actually going to tell you the meta information the inode information about the symbolic link you're going to find out when the symbolic link was created if you use this macro you can determine tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "d we know that we can change this by using things like chi hdr tudor there's a whole lot of things that we don't normally see as well however all the meta information for example the kernel is going to keep track of the total cpu time used by the process and also possibly the amount of cpu time that is used in more",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f0e1bf48-9541-4edc-b44d-924ad17a8ee2",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "n create for particular user or the amount of memory that our process can have that kind of thing or even the number of file descriptors we also have meta information about whether we care a lot about a particular process or thread we can give them different priorities so if you have a thread whose goal is to keep ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "thread exit",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "633f10ed-2038-4da2-9855-c3cad245559f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "d better go in the second slot so let's add one and address point arithmetic comes to the rescue rescue and i want to use that trick of just saying p thread exit here so i will never return from maine ok never returns so so exit never happens wait ok so put back around that to mean i'm talking about the c libr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "662ac3ea-798b-43f9-bf91-290620d22337",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ok so for ways that thread can be terminated right so what do we got so we might have that the thread calls p thread exit we might have that the thread returns from its starting function ok what else so the other way is that a thread could be terminated as if we terminat",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "eed to say i'd like to exit please so\u00a0 pthread_exit right so the peace road exit is the last thing your thread will ever do there is no return from p thread exit it's done your cpu causes ok i'm going to wash my hands of this thread i know that there's nothing else is going to happen so p thread exit is a one ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "rn from p thread exit it's done your cpu causes ok i'm going to wash my hands of this thread i know that there's nothing else is going to happen so p thread exit is a one way ticket do not try to execute anymore code after p calling p thread exit right so if i've got my little function let's call it say mine t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " thread i know that there's nothing else is going to happen so p thread exit is a one way ticket do not try to execute anymore code after p calling p thread exit right so if i've got my little function let's call it say mine to continue that silly idea at some point i wanted to quit so i would call p thread ex",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "read exit right so if i've got my little function let's call it say mine to continue that silly idea at some point i wanted to quit so i would call p thread exit by the way if you return from that function in other words if there's no more stack frames then that is equivalent of calling p thread exit so i migh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ld call p thread exit by the way if you return from that function in other words if there's no more stack frames then that is equivalent of calling p thread exit so i might have some code in here this might call other functions called air from that cause g and that cause premier fanatic or something else etc i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ons called air from that cause g and that cause premier fanatic or something else etc it opens files whatever but eventually if any of these called p thread exit then all we return from here that thread is done ok so there's a bit of a kind of mind moment here that i want you to realize that now we write code ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "er the one exciting piece of news is when you return from maine that kills that's the end of your process that's the equivalent to calling exit not p thread exit but process exit and when we do that everything disappears all of your other threads disappear ok so i think it's time for a demo soon but first of a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ad and detangle this ok so let's have a look at what the manpage tells us and we'll see the following kind of thing so let me for example take care p thread exit and type it into man page ok so man p thread x copy so it creates do that one ok and we see the following ok right and we can read about this and we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "o this is the value would like to pass in ok and the return value that is going to be the exit value from the function so if the thread never calls p thread exit its return value will be the threads exit value ok so let's go and actually kind of demos demonstrate this now right so i need a little bit of a prog",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "e do ok we got two options here they're both equivalent i can either return something from here so i could return say null alternatively i can call p thread exit now so they are equivalent statements nothing happens after this point and it's important to bear in mind that anything else any other threads that a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " different stack with ok so different part of memory that takes a different argument an runs to a different sort of execution is going to end up in p thread exit so just kind of prove that these variables are living in different places let's actually print out the address of my local variable here so my messag",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8078f738-b531-4bab-83c7-0facaf3ee1bf",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ereference tds for my thread i ds plus i there we go but instead i prefer the kind of using the array syntax instead and we want to find out what the thread exited with so here's the address of a variable that will take that ok between you and me we know that it's going to be exiting with the value of null so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "83887d4e-f5b2-4f94-9e3f-4d3c19d88dd9",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "appear as well because now we don't have any memory for them to run on versus a thread you seen how we create it and then destroy it through either p thread exit or by returning from the function i'll just say the starting starting function from returning from the starting function where basically where it ori",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aa01a980-f756-4c1c-87f6-abf1aed24f98",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "read now is that thread happened to be the very last thread then then the process will finish uh ok so that gives us a reason sometimes for calling p thread exit inside your main method is a way to be lazy let's let's go have a look at this so if i had a program that started many many threads are case so imagi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aa01a980-f756-4c1c-87f6-abf1aed24f98",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "rted many many threads here i could write p thread join and wait for them all to finish i could put that inside a loop but an alternative is to say p thread exit are on the main thread right so now this return here will never happen sir we will never actually remember is equivalent to calling exit so given tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d80efb9d-96a2-4cc0-ad4f-a9049155313e",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "read now is that thread happened to be the very last thread then then the process will finish uh ok so that gives us a reason sometimes for calling p thread exit inside your main method is a way to be lazy let's let's go have a look at this so if i had a program that started many many threads are case so imagi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d80efb9d-96a2-4cc0-ad4f-a9049155313e",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "rted many many threads here i could write p thread join and wait for them all to finish i could put that inside a loop but an alternative is to say p thread exit are on the main thread right so now this return here will never happen sir we will never actually remember is equivalent to calling exit so given tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "74e03522-c6e8-4e59-84ba-95a62ce5f3fd",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ariable again that void pointer would have taken that address ok so great we're starting three threads and then after that loop we're going to call p thread exit and as you know what does p thread exit do? it's the point of no return it's the one way ticket to oblivion for my poor little thread and in this cas",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "74e03522-c6e8-4e59-84ba-95a62ce5f3fd",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ve taken that address ok so great we're starting three threads and then after that loop we're going to call p thread exit and as you know what does p thread exit do? it's the point of no return it's the one way ticket to oblivion for my poor little thread and in this case i'm doing it on the main thread which ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "r these stories to complete yeah the other way would be just in my main thread if that's the only thing i wanted this program to do is i could call p thread exit and the the words i'm asking my main thread to not do anymore work ok so i went to say pizza exit null and that's the end of it for my main thread ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " but they didn't escape why not the problem here is that yes we call broadcast but then each thread notice that the java store zero so we exited each thread exited pizza condition wait but then when around the while loop and said oh look jar is zero what should i do i'll go back into my water loop and wait aga",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "type so i put in some in there ok will never happen ok so stop trying to make their day to happen it's never going to happen stop trying to make this thread exit it's never going to happen ok so our poor poor little fair door process is waiting some for an event maybe we're going to signal that event using a v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "type so i put in some in there ok will never happen ok so stop trying to make their day to happen it's never going to happen stop trying to make this thread exit it's never going to happen ok so our poor poor little fair door process is waiting some for an event maybe we're going to signal that event using a v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "type so i put in some in there ok will never happen ok so stop trying to make their day to happen it's never going to happen stop trying to make this thread exit it's never going to happen ok so our poor poor little fair door process is waiting some for an event maybe we're going to signal that event using a v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "type so i put in some in there ok will never happen ok so stop trying to make their day to happen it's never going to happen stop trying to make this thread exit it's never going to happen ok so our poor poor little fair door process is waiting some for an event maybe we're going to signal that event using a v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "type so i put in some in there ok will never happen ok so stop trying to make their day to happen it's never going to happen stop trying to make this thread exit it's never going to happen ok so our poor poor little fair door process is waiting some for an event maybe we're going to signal that event using a v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "type so i put in some in there ok will never happen ok so stop trying to make their day to happen it's never going to happen stop trying to make this thread exit it's never going to happen ok so our poor poor little fair door process is waiting some for an event maybe we're going to signal that event using a v",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      }
    ]
  },
  {
    "text": "pizza slice",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ounting semaphore to represent the amount of space left and remember counting semaphore behaves like a pizza box ok and we're going to add and remove pizza slices so let's think about how we can do this alright so i'll \"have a little method say called enqueue which is going to add things in here so here's my k",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "et's do the blocking ok so the blocking we actually want to block if there's not enough space so i'll use a counting semaphore to say please take his pizza slice and i'll have account semaphore before which represents the amount of space available so the number of empty slots in my data structure so the number",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " of items actually inside my data structure number of items so remember how this works the same weight will return immediately if it's able to take a pizza slice so if we are able to decrement the internal counter of the counting semaphore then then you can continue alright \"so are we done here not quite becau",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ecause after we've enqueued something let's inform the i want you to do there yeah right sam let's write this and then get their case sam let's add a pizza slice to the number of items cave and after we have ok after we have dequeued something let's make a note of the number of spaces has now increased can now",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a7b5c6d-c236-498b-8c94-c4baac66feaf",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " tell you the right answer right you're ready i'll give you three seconds ok here we go right so sem post will never block sem posts that just puts a pizza slice back in the pizza box that you can do it you can immediately return some ways some weight may block if there's no pizza slice to be eaten then it wil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a7b5c6d-c236-498b-8c94-c4baac66feaf",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " posts that just puts a pizza slice back in the pizza box that you can do it you can immediately return some ways some weight may block if there's no pizza slice to be eaten then it will wait around until there is one and if more than one person is called sam wait an is blocked and you then call sam post then ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2a7b5c6d-c236-498b-8c94-c4baac66feaf",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "around until there is one and if more than one person is called sam wait an is blocked and you then call sam post then only one of them will get that pizza slice the other person is still hungry and they will continue to block all right so now what about the following challenge but i i've got there we go i've ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2a7b5c6d-c236-498b-8c94-c4baac66feaf",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "t what happens after i call send post ok so hope you said something like the following you can see that three were able to continue because there was pizza slices in there but the remainder got stuck in other words are count of slices went down to zero but then we call sem_post twice so we added two more slice",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a7b5c6d-c236-498b-8c94-c4baac66feaf",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "so do we say which particular threads which two of these seven will continue? no, we don't have any say in that all we're doing is just putting these pizza slices into the account example for alright so in the next video we'll talk about three classic synchronization problems by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ructure so once that gets down to zero you know that that call will block until it becomes a positive number again in which case great it can scale a pizza slice and then continue and when do we change that value when do we actually increment it where you'll look down here and you'll see oh look it happens aft",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "actually stop our threads right now so before this we will need to initialize that variable and will initialize it to zero in other words do you know pizza slices ok so we've done that previous to calling the barrier right so was left well we've got this if we made an post right so here's the plan that most th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "all there still they'll each one at a time reduced reduced remain and the first four will go into same weight and then get blocked because there's no pizza slices there but the fifth one has remained value of zero so where when it comes through it will not go into that if statement and instead will call sam po",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "zero so where when it comes through it will not go into that if statement and instead will call sam post so great what is the fifth thread do it puts pizza slice back into the counting semaphore right so we've got we've called sam post right so the effect of that is that one of these hungry threads inside here",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ontinue gets to steal that slice of pizza and so it can a scape at asem weight and continue ok what does it do equals sam post in other words it adds pizza slice back into the counting semaphore ok so now another thread is allowed to escape so it reduces the count back down to zero and out it comes what does i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility of deadlock right now that for every same weight called we call assam post ok right so what if we could have made it ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "or sale wanted change well someone will change down here but unfortunately thread three is blocked waiting for the count for sam three is waiting for pizza slice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizz",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "lice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally calls stem pos",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "l i get that only from thread one when thread one finally calls stem post but that's not going to happen because thread what is still waiting for the pizza slice from thread three so now you see we've got this love triangle here between our three threads they'll never going to continue that always waiting for ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility of deadlock right now that for every same weight called we call assam post ok right so what if we could have made it ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "or sale wanted change well someone will change down here but unfortunately thread three is blocked waiting for the count for sam three is waiting for pizza slice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizz",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "lice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem po",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is still waiting for the pizza slice from thread three so now you see we've got this love triangle here between our three threads they'll never going to continue that always waiting for ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility of deadlock right now that for every same weight called we call assam post ok right so what if we could have made it ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "or sale wanted change well someone will change down here but unfortunately thread three is blocked waiting for the count for sam three is waiting for pizza slice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizz",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "lice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem po",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is still waiting for the pizza slice from thread three so now you see we've got this love triangle here between our three threads they'll never going to continue that always waiting for ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility of deadlock right now that for every same weight called we call assam post ok right so what if we could have made it ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "or sale wanted change well someone will change down here but unfortunately thread three is blocked waiting for the count for sam three is waiting for pizza slice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizz",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "lice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem po",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is still waiting for the pizza slice from thread three so now you see we've got this love triangle here between our three threads they'll never going to continue that always waiting for ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility of deadlock right now that for every same weight called we call assam post ok right so what if we could have made it ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "or sale wanted change well someone will change down here but unfortunately thread three is blocked waiting for the count for sam three is waiting for pizza slice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizz",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "lice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem po",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is still waiting for the pizza slice from thread three so now you see we've got this love triangle here between our three threads they'll never going to continue that always waiting for ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility of deadlock right now that for every sem_wait called we call assam post ok right so what if we could have made it a l",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "or sale wanted change well someone will change down here but unfortunately thread three is blocked waiting for the count for sam three is waiting for pizza slice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizz",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "lice and were able to get that piece of sliced form it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem po",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is still waiting for the pizza slice from thread three so now you see we've got this love triangle here between our three threads they'll never going to continue that always waiting for ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ecc913a8-cf8a-4205-b23c-530df9ebc4eb",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "l what ok so we can call sam wait k on my my pizza box here so in space and that would normally just carry on straight away but if we're down to zero pizza slices that will block at this point let's now call add war here we go right and passing their value ok after that's completed we can let the world know th",
        "label": "Use"
      }
    ]
  },
  {
    "text": "counting semaphore",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "can do and sometimes we want more flexibility and for that hard counting summerfields semaphores to their rescue so how does accounting before work accounting semaphore behaves a lot more like a pizza box so let me get a pizza box here right here is and inside this fantastic pizza right with lots and lots and lots of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ver what happens on the day where there are no slices left inside my pizza box ok so this is what account is that will do for you if you walk up to a counting semaphore pizza box and say hey i'm going to take a piece of pizza going to reduce the pizza count by one and there's nothing there then your thread will block",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "row a slice of pizza back in the box doesn't matter whether it's five days old and has fungus growing on top of it we can do that with account with accounting semaphore ok so of course when you put a slice of pizza it back into the box number of slices in here goes up by one so if it was zero it now goes up to one if",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " next line of code so that's the theory we will actually see the code that does this in the future lecture but the only operations that will need for counting semaphore is to go down by one or up by one and then when we create it we get to say how many slices of pizza we'd like to put inside the box when we first get",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ng actually there ok so in these situations we actually want to block alright so let's think about how we can do that and for that we're going to use counting semaphores their perfect we can use accounting semaphore to represent the number of items in there and we can use a counting semaphore to represent the amount ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "actually want to block alright so let's think about how we can do that and for that we're going to use counting semaphores their perfect we can use accounting semaphore to represent the number of items in there and we can use a counting semaphore to represent the amount of space left and remember counting semaphore b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " that we're going to use counting semaphores their perfect we can use accounting semaphore to represent the number of items in there and we can use a counting semaphore to represent the amount of space left and remember counting semaphore behaves like a pizza box ok and we're going to add and remove pizza slices so l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "accounting semaphore to represent the number of items in there and we can use a counting semaphore to represent the amount of space left and remember counting semaphore behaves like a pizza box ok and we're going to add and remove pizza slices so let's think about how we can do this alright so i'll \"have a little met",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "we need to think about here first of all let's do the blocking ok so the blocking we actually want to block if there's not enough space so i'll use a counting semaphore to say please take his pizza slice and i'll have account semaphore before which represents the amount of space available so the number of empty slots",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "lable so the number of empty slots in my data structure so the number of spaces and i will have the similar when i want to remove things let's have a counting semaphore that represents the number of items actually inside my data structure number of items so remember how this works the same weight will return immediat",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " how this works the same weight will return immediately if it's able to take a pizza slice so if we are able to decrement the internal counter of the counting semaphore then then you can continue alright \"so are we done here not quite because after we've enqueued something let's inform the i want you to do there yeah",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "rrent data side my away that will be zero so it's the last value that is important here this middle one is a hint if we want to be able to share this counting semaphore across multiple processes using shared memory but more about that in the future also notice that my counting semaphores here number spaces and numb i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " want to be able to share this counting semaphore across multiple processes using shared memory but more about that in the future also notice that my counting semaphores here number spaces and numb items i'm afraid works on linux but does not work on os x so if you in turn apple maybe think about this as a summer pro",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " that's the somewhere you've got lots of concurrency going on here this idea that i protected the critical section using a mutex lock and i'm using a counting semaphore to make sure that i don't get buffer underflow or buffer overflow alright that's it bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a7b5c6d-c236-498b-8c94-c4baac66feaf",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "hi ok so two little kind of fun problems for you here first one is which is the correct way to kind of completely statements for counting semaphores so i've got accounting center for and you need to choose where you want to say will always may or will never ok so what about send post will it bloc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ow you going to implement that ok right the last thing automation is is some interesting challenges to think about is can you make a value using only counting semaphores and can you make a barrier using only mutex locks or like more about that in a future lecture but there's a kind of fun puzzles to think about when ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "sure that we block well in the case that my fix sized ring buffer is full i want my call to send wait here to block in other words i'm going to use a counting semaphore for remember that's like a pizza box to actually keep track of how much space is left right and every time we call sam wait we're stealing a slice of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "this this variable by one ok simile let's have a look at the remove side we want to remove to block if there's nothing in there so let's have another counting semaphore another pizza box and this is going to represent then the number of items in my data structure ok so if that's zero then some weight will block in ot",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ta structure so i've actually got two different kinds of concurrency things i'm worried about here one is the size of my buffer and i'm using the the counting semaphores for that and the other is a critical section and i'm using a mutex locks to protect that ok so we've done that we've done that right ok so we've imp",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "is a critical section and i'm using a mutex locks to protect that ok so we've done that we've done that right ok so we've implemented a version using counting semaphores what about condition variables suppose you wanted to make this work on a mac as well could we do it with condition variables and the answer is yes s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " a mac as well could we do it with condition variables and the answer is yes so of course we can so condition variables are more general purpose than counting semaphores and we would replace this same weight with the kind of code that we saw with our cookie eat a code where we check this value safe is equal to zero a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s through it will not go into that if statement and instead will call sam post so great what is the fifth thread do it puts pizza slice back into the counting semaphore right so we've got we've called sam post right so the effect of that is that one of these hungry threads inside here gets to continue gets to steal t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " slice of pizza and so it can a scape at asem weight and continue ok what does it do equals sam post in other words it adds pizza slice back into the counting semaphore ok so now another thread is allowed to escape so it reduces the count back down to zero and out it comes what does it do it also puts a slice of pizz",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "025c4079-6f2d-496a-bc87-51d078e15f66",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this method called this function and i've got to keep track of how many there we go and all i'm going to give you is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearr",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "025c4079-6f2d-496a-bc87-51d078e15f66",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "u is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearrange these lines enter the correct order so that's my challenge to you pause this video and see if you can work i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "27f7e6d9-2a1f-419b-b0c5-3ad8dc4064d3",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this method called this function and i've got to keep track of how many there we go and all i'm going to give you is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearr",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "27f7e6d9-2a1f-419b-b0c5-3ad8dc4064d3",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "u is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearrange these lines enter the correct order so that's my challenge to you pause this video and see if you can work i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have anothe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " that does something similar or key and another thread does something similar ok so do we see any problems right now nope we could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "g to in order to continue i'm going to wait on this thread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties are forced to started off with a value of zero you ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally calls stem post but that's not going to happen because thread what is s",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "37ee433b-e79d-4957-9dbc-0d62b0785dbd",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this method called this function and i've got to keep track of how many there we go and all i'm going to give you is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearr",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "37ee433b-e79d-4957-9dbc-0d62b0785dbd",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "u is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearrange these lines enter the correct order so that's my challenge to you pause this video and see if you can work i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "533db1aa-ad5e-40dd-b819-8b989c89b1f6",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this method called this function and i've got to keep track of how many there we go and all i'm going to give you is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearr",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "533db1aa-ad5e-40dd-b819-8b989c89b1f6",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "u is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearrange these lines enter the correct order so that's my challenge to you pause this video and see if you can work i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have anothe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " that does something similar or key and another thread does something similar ok so do we see any problems right now nope we could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "g to in order to continue i'm going to wait on this thread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties are forced to started off with a value of zero you ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have anothe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " that does something similar or key and another thread does something similar ok so do we see any problems right now nope we could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "g to in order to continue i'm going to wait on this thread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties are forced to started off with a value of zero you ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d4eaea6f-874c-4acc-a000-07cdfb9fa35b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this method called this function and i've got to keep track of how many there we go and all i'm going to give you is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearr",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d4eaea6f-874c-4acc-a000-07cdfb9fa35b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "u is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearrange these lines enter the correct order so that's my challenge to you pause this video and see if you can work i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have anothe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " that does something similar or key and another thread does something similar ok so do we see any problems right now nope we could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "g to in order to continue i'm going to wait on this thread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties are forced to started off with a value of zero you ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have anothe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " that does something similar or key and another thread does something similar ok so do we see any problems right now nope we could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "g to in order to continue i'm going to wait on this thread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties are forced to started off with a value of zero you ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "der it would have been impossible to get deadlock ok so that was with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s with a mutex lock now that's actually think about could we do something similar with counting semaphores sure ok so let's do something similar with counting semaphores where thread one calls say sam weights on counting center four as well and at the end we'll will increase the count again ok so now i'll have anothe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " that does something similar or key and another thread does something similar ok so do we see any problems right now nope we could imagine that these counting semaphore 's my kind except for has been initialized just account of one ok so same initiate here go let's have one pizza slice in there there's no possibility",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "g to in order to continue i'm going to wait on this thread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "hread and then i'm going to post on some samples to an meanwhile thread two i'm going to wait on counting semaphore two and then i'm going to post on counting semaphore three ok and then some weight three i'm going to then post inseminate one ok if all my counties are forced to started off with a value of zero you ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "m it is waiting for sam post to be called by thread two but thread two is not going to give it that pizza slice until it gets a piece of slice out of counting semaphores s two and where will i get that only from thread one when thread one finally called stem post but that's not going to happen because thread what is ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fa389ce6-5fa6-4288-b2a2-949e66af677a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " this method called this function and i've got to keep track of how many there we go and all i'm going to give you is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearr",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fa389ce6-5fa6-4288-b2a2-949e66af677a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "u is the following code which uses a counting semaphore so you get to choose how what you would like to implement what you'd like to to initialize is counting semaphore with and all you have to do is rearrange these lines enter the correct order so that's my challenge to you pause this video and see if you can work i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b7f1de1e-a1ea-4bb5-9459-de401bd7f1ab",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " wait in fact we're waiting for what we're waiting for some kind of event right so it may be a mute ox mutex to be unlocked for example waiting for a counting semaphore to have for someone else to call send post may be waiting for a file to be nonempty but we're waiting for some kind of event that will never happen s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "199ad3c7-e0c6-414e-8fa1-80276ca9fdcc",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "re kernel says \"\"that's it i'm only\" \"going to support that number.\"\" so you can even think of for\" example the ring buffer that we implemented using counting semaphores as an implementation of a pipe! ok so if i was to start removing characters out of this then i could actually kind of keep sending anymore. however ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "08a28266-820e-4f7f-8326-7c8c3f53dc2b",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "u'll see the following kind of code that we can do things like like we'd like to call some weight ok and we're going to call some way on a particular counting semaphore ok like ok here's a pointer to my structure there but it could be that that returns a negative one meaning it failed ok so we could store that inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2d49256b-843d-4c27-969c-5a4a8ef761ed",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "can actually hold so presumably we were going to corrupt something possibly value that we have not yet written out so what do we got here we have two counting semaphores and will see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4bb4d9de-3031-4ca5-9b24-28a62fa33ed8",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "can actually hold so presumably we were going to corrupt something possibly value that we have not yet written out so what do we got here we have two counting semaphores and will see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "50ebb1c4-4d86-4abe-bcf6-d6d0948214d6",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "n actually hold so presumably we were going to corrupt something possibly a value that we have not yet written out so what do we got here we have two counting semaphores and we'll see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ly you'll see the following kind of code that we can do things like like we'd like to call semwait ok and we're going to call semwait on a particular counting semaphore ok like ok here's a pointer to my structure there but it could be that that returns a negative one meaning it failed ok so we could store that inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8bac3c58-461d-4e82-b52c-289fa7e681a4",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "that we didn't get zero value here then maybe we actually want to exits or log it somewhere so for example that would that would help us catch if the counting semaphore was not properly initialized ok so this is a lot of annoying code to write each time and actually makes it harder for us to generally read our code s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ne to sleep it's blocked inside the same wait call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the dequeue side so on the dequeue side we are going to wait until at least on",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " dq thread to try to read a value from the buffer before we've even put the value in right so better code of course would actually only increment the counting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " to sleep it's blocked inside the same weight call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the d q side so on the dq side we are going to wait until at least one item ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " dq thread to try to read a value from the buffer before we've even put the value in right so better code of course would actually only increment the counting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca90fc46-67a5-4381-9bae-274ec85fffbb",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "can actually hold so presumably we were going to corrupt something possibly value that we have not yet written out so what do we got here we have two counting semaphores and will see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " you'll see the following kind of code that we can do things like like we'd like to call sem_wait ok and we're going to call sem_wait on a particular counting semaphore ok like ok here's a pointer to my structure there but it could be that that returns a negative one meaning it failed ok so we could store that inside",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "one to sleep it's blocked inside the sem_wait call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the d q side so on the dq side we are going to wait until at least one item ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " dq thread to try to read a value from the buffer before we've even put the value in right so better code of course would actually only increment the counting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " to sleep it's blocked inside the same weight call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the d q side so on the dq side we are going to wait until at least one item ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " dq thread to try to read a value from the buffer before we've even put the value in right so better code of course would actually only increment the counting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going to be initialized to two fifty six so this is kind of counting the number of free space is or how much capacity is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " to sleep it's blocked inside the same weight call but it's still holding on to the mutex lock this is not a condition variable ok it's just a simple counting semaphore oh dear so can we have deadlock well let's find out to what happens on the d q side so on the dq side we are going to wait until at least one item ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " dq thread to try to read a value from the buffer before we've even put the value in right so better code of course would actually only increment the counting semaphore after we modified the buffer so so this line actually belongs down here so do this later ok and we can do it after we've released a mutex lock ok and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ed85781a-a46c-454f-99d6-e290835a6979",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "can actually hold so presumably we were going to corrupt something possibly value that we have not yet written out so what do we got here we have two counting semaphores and will see the s one is initialized to two hundred and fifty six so this smells to me like some kind of capacity counting thing which is going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ation event has happened that we allows us to continue so what do we got we've got things like mutex locks you are able to acquire the lock we've got counting semaphores somebody's returned that piece of pizza into the counting semaphore so now we get to pull it out and continue and of course we've seen condition var",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "got we've got things like mutex locks you are able to acquire the lock we've got counting semaphores somebody's returned that piece of pizza into the counting semaphore so now we get to pull it out and continue and of course we've seen condition variables so now say broadcasters occured and now my thread is made cont",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecc913a8-cf8a-4205-b23c-530df9ebc4eb",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "und so when we actually want to remove implement remove we're going to see some very similar code except that of course you swap the use of these two counting semaphores around and we're going to call add a remove roar method or something the last thing we need to think about is how we want to initialize these things",
        "label": "Use"
      }
    ]
  },
  {
    "text": "memory location",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "203bde9a-6185-4ffa-94f2-2c4b061612e8",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "ey live that's the purpose of this address of operate say tell me where something is because maybe i want to write something directly into that those memory locations right so that's going to pass in the address of my global and also the value of ten meanwhile there's going to look inside f one because our challen",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3b9f5713-ca11-400c-bd6f-428347679520",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "things so avoid pointer means i want to store an address and i'm not going to tell you what there just simply treat it as a number as an address as a memory location and we won't talk about what kind of objects or what kind of primitives or anything about with storing there so we can't we can't we shouldn't do poi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "491a80ef-eda8-4e66-a332-f2dd12cb7ebe",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "hile loop it's perfectly fine to pass a value of null to new variable that just means that we bought a variable holds the value zero for the zoo with memory location it's only when we try to read from that memory location will our process crash so we could have also found that out using the debugger right and that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "491a80ef-eda8-4e66-a332-f2dd12cb7ebe",
        "lecture": "CS",
        "lecture_num": 2,
        "context": " new variable that just means that we bought a variable holds the value zero for the zoo with memory location it's only when we try to read from that memory location will our process crash so we could have also found that out using the debugger right and that's the question too right i'll see you next video for qu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6500319c-14b4-4a6e-a714-3cf7e49e96a9",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "t as a string and we want that value and just at the end of the loop let's take argv and we need to move it forward once they stop looking at the old memory location move to the next one ok right so let's looks good i want a new line ok compile this again ok an run it ok initially just one and then if i do ab and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "83c8c367-376a-4574-bc73-6b7b742d1b47",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "k so here's the challenge denton right so i'm going to take a memory address which will be the value of where this array starts in memory it's actual memory location and i want to keep walking through that reading each integer until i find negative one so his head will do this then so i'll have another variable my",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "83c8c367-376a-4574-bc73-6b7b742d1b47",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "in the next video what are we going to do yes i'm going to challenge for you how could we possibly be that p one and p two actually refer to the same memory location as it did that in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2ce0c44c-c7e2-4bab-becf-4f3ab3af2d11",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "ng it a pointer that it's going to point it is going to use an appointed that to read directly and it's just going to start looking at the subsequent memory locations right so let's see what our next little video is going to be about ok and next video is going to be talking about using asserts and then put in that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c8a95218-1f53-4559-b5f5-32b9385d7f90",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "most anything i want, providing i promise but of course i only use the number of buttons that i requested. i don't want to accidentally start writing memory locations before that pointer or memory locations after the end of it. i'm going to corrupt the process memory. so if i've got a pointer that malloc has given",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c8a95218-1f53-4559-b5f5-32b9385d7f90",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "e but of course i only use the number of buttons that i requested. i don't want to accidentally start writing memory locations before that pointer or memory locations after the end of it. i'm going to corrupt the process memory. so if i've got a pointer that malloc has given me, \"there we go. \"\"so hey malloc, plea",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f7acd66f-6e2d-4d16-ad5b-83adf8627df9",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "te.\"\"\" ok, and then i was incrementing it. now i actually want to move the pointers themselves. i don't want to change the value inside each of those memory locations. i'm just moving the pointers to look at different bytes. ok, so what do you think of that? have we got a reasonable implementation of strcat? so i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f7acd66f-6e2d-4d16-ad5b-83adf8627df9",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "oing write into are of valid location. so that's why c programming can be exciting. we've actually got to make sure that we think carefully about our memory locations. it is up to us to wield this power and this fire correctly. so only set fire to things which are supposed to be on fire. alright, so with that i'll",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f7acd66f-6e2d-4d16-ad5b-83adf8627df9",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " so do i have my little pen working? yes, i do! ok, right so, we can look back at our code and imagine that if i've passed in a source, the following memory location and a destination at two thousand, we could actually kind of evaluate what actually our process does. so let me set up a little example here where, i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8ecc9da-31e3-4c40-bd72-4df6058e9d24",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " it's initialized to point to the following. so, take five seconds to have a guess, and i'll tell you the answer in a moment. ok, so p is holding the memory location of that string literal, that constant, and inside that memory, we know that actually there's going to be four bytes, the capital s, \"y, the s, and th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8ecc9da-31e3-4c40-bd72-4df6058e9d24",
        "lecture": "CS",
        "lecture_num": 3,
        "context": ", \"\"hey, no more bytes please\"\".\" this is the end of the c string. so what is this actually going to evaluate to? well, when we pass a strlen in this memory location that's held by p, strlen is going to walk along, reading a byte at a time, until it gets to that zero byte, and then report to us how far it went, an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8ecc9da-31e3-4c40-bd72-4df6058e9d24",
        "lecture": "CS",
        "lecture_num": 3,
        "context": " at the end. ok, so the result of that expression is zero! and of course, this is going to be true for most strings, providing we pass strlen a valid memory location, so in other words, if p is a valid pointer to a string. right, so have a think about this. i want to delete my little marks, there we go. right, so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8ecc9da-31e3-4c40-bd72-4df6058e9d24",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "ght, so let's think about how strlen might work in some different situations. if i call strlen with an empty string, that's still going to be a valid memory location. it's just that the very first bite is that zero. \"if i call strlen with an \"\"at\"\", then that, of course,\" \"will work, and it says, \"\"i'm a string of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8ecc9da-31e3-4c40-bd72-4df6058e9d24",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "of length one,\"\" and\" actually that string of course as you now know takes two bytes. but strlen isn't always going to work. if we pass it an invalid memory location, and here's one that everybody knows for example, null, which is implemented as address zero, then our program will crash. this is not a fault of str",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "367502e6-86bd-4b7c-8b0f-a6d09829fe75",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "l print out twenty now one point of confusion here is if we actually look at the output of this it looks like these variables are all inside the same memory location ok very important idea and point here is that these addresses of variables and in fact the addresses of anything outside our process are specific to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "ens to be that far descriptive zero corresponds to standard input and then we have to say where do we want this day to arrive so we need to give it a memory location a memory address now read doesn't care about a type we simply going to say hey start putting bites into this particular memory location and if i ask ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " to give it a memory location a memory address now read doesn't care about a type we simply going to say hey start putting bites into this particular memory location and if i ask for more than one byte then use the success of the addresses after this location it is useful to say however how large are buffers we do",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " the stack is not a pointer it's an away and arrays can't be changed to look at somewhere else so i can't say ok variable start looking at this other memory location you cannot do that but we can use it in a pointer context so let's do that let's call size t and will say result and say ok read now at this point i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "64320885-c055-41b4-9516-16a7910a1baa",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "see extra letters so the answer to this is that the contents of our buffer in the stack is just going to be the whatever happens to be in those stack memory locations and we didn't actually set any others to zero so when we asked to print it out as a string printf and put i said fine i'll do that i'm going to keep",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "eb1a08a4-8b77-4361-a5d8-4e3b26439f27",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " but let's just deal with just two two numbers per line today right so that could be my format now what happens to these numbers we need to give some memory locations of where to write them and so because i've given a hint to scanf after i'm expecting integers it's going to write four byte integers so let me for e",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "get line we were passing in the address of all line and the address of our capacity right so the values which are actually going into get line or the memory locations of those two variables so just to be clear what we're doing is we're diving in to get line and pretending that we actually need to write this little",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "28a2bdb5-a357-4b00-bb00-b9d1e478498b",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "ss and of course you could find this out using the weight pid macros here's another one if we write bad code and we try to read write to some invalid memory location we get segfault or a cig i think a sig fault sick i notice i notice let's let's delete that that that that that that is sigsegv be ok there we go sig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b4efecab-e0c0-41b8-b21e-6ccca0ed2893",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "nge program by either calling exit or by returning from main or if your program crash for example it tried to read and write some invalid memory like memory location zero then it's going to segfault and we could discover that well or if your program was perfectly happily running along and somebody press control c ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "117f0f11-cc38-4a40-b359-8f1ba81655e1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "n be slow so this may not be the fastest memory allocator but certainly is the simplest ok so will wait for that to return to give us some more valid memory locations and then when it returns like i said it returns the old address so great that means that if i've just increased my watermark here we go up to valid ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "009c9eb3-b71a-4571-8437-2a3fe5ce01e4",
        "lecture": "CS",
        "lecture_num": 9,
        "context": " and in particular link list when we want to jump from one entry to another we look at the entry code next and that is an explicit address it's got a memory location all the other ways to do this and the answer is yes so the alternative is to work with an implicit linked list and with an implicit linked list we st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "moment this pointer you're starting with this user pointer it's avoid type that means that we're not declaring anything about what's actually at that memory location and if you read the c standard you're not allowed to do pointer arithmetic on that type because we don't know what's there would be absolutely correc",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d",
        "lecture": "CS",
        "lecture_num": 9,
        "context": "d and subtract avoid pointers and if you do that then they behave like character pointers and in particular you are adding subtracting bytes off this memory location so we're walking back exactly the right number of bytes in this case because of this type ok so now i've got that now i can immediately say things li",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "23d922a6-680c-4d83-887e-43c407779538",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "at we want to give to a thread and convert it into just the void pointer type so we're literally just casting it pretending that the values zero is a memory location pretending that value one is a memory location etc so we're not actually passing in the address of a real piece of memory we're just converting the i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "23d922a6-680c-4d83-887e-43c407779538",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "nto just the void pointer type so we're literally just casting it pretending that the values zero is a memory location pretending that value one is a memory location etc so we're not actually passing in the address of a real piece of memory we're just converting the integer into a void pointer into a memory pointe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "23d922a6-680c-4d83-887e-43c407779538",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "ng to appear here that's going to be passed into this variable here avoid pointed here and rather than try to dereference that no we're treating that memory location that address as the actual integer that we want ok so we're passing it casting it back into it so this is an exciting hack honestly we have no true w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "802abd70-0cc9-49a1-8916-5ff1c0a98738",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "of line ninety eight i've got myself that y value from the for loop and then i go ahead and calculate all my pixels so what do we expect to find that memory location ok and here is the problem that now we're talking about multithreaded programs so i've gotta main thread that is happily going through this little lo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "802abd70-0cc9-49a1-8916-5ff1c0a98738",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "his value of y is going to change as fast as it possibly can ok meanwhile we're going to ask to create a new thread so that new thread will read that memory location read the value of y as soon as it can but we don't know when that's going to be so this all this print s stuff and sdl delay the reason that appeared",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ght here where we get the result from to text message and then we actually use it so we actually when print f runs and takes the sequence of bytes at memory location right so that's the first part of our critical section the other is when we also want to overwrite it so that will be inside here we do not want thes",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "e it is an so let me put aside some memory for example sixteen sixteen little slots in here so i can keep dividing this up ok so now i've got sixteen memory locations and my trick for making certain memory will just simply be if i fall off the end here then start at the beginning so it's perfect for all the people",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "cause we are going to acquire mutex locks always in the same order in other words we've given them a rank ordering and their ordering is based on the memory location of the actual object in memory so great so providing all of our code which is going to lock mutex is always follows the same convention or cause this",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a36c9a4b-0ff7-4b83-9157-f856ccfd8b26",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "hat i'm using sprintf waste sprintf works is bit like printf except that rather than printing something else it's going to write the result into this memory location so hey let's get some memory and we'll print into that so what do you think of all this code it's obviously some mistakes in it see how many mistakes",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "tle demo where i'm actually going to now do some communication between a parent and a child so strong copy and i can copy contents directly into that memory location so here's the child writing something into there and what about the parent the parent can read from the same address now back at the beginning of two",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0f5acc21-05fe-4694-921a-f38f2fb0134e",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "d we've seen sigpipe we've also seen things like segfault as well with the kernel would generate if your program tries to read or write to an invalid memory location right before that signal aggregates delivered to a process we can say that the signal is pending in other words it's hanging over process wanting to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cd13b51-dc41-427e-91b3-c63a9d8334fe",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ight now it's this actual actual address is here do not uh not connected to any physical ram so when you demand this when your cpu attempts to read a memory location inside here we know that we can actually recover this page by going back to our disk and so what we need to do then is if this is all of my random ac",
        "label": "Use"
      }
    ]
  },
  {
    "text": "ring buffer",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "what do you think about these arguments and what's going on so what we like and what don't we like well first of all we're passing in the following string buffer plus one why are we passing in buffer plus one well if we went back and actually with the read the instructions we discovered that the idea is that i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ight actually slow down my application so how can i fix that or maybe i need to develop a better logging mechanism say using some kind of buffer like ring buffer that we're going to talk about later on in the course ok so that was our first issue in their next part going to introduce you to a new synchronizati",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ight actually slow down my application so how can i fix that or maybe i need to develop a better logging mechanism say using some kind of buffer like ring buffer that we're going to talk about later on in the course ok so that was our first issue in their next part going to introduce you to a new synchronizati",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "hi ok so i want to talk about a classic problem called producer consumer and in particular we're going to implement this using a fixed sized ring buffer so here's the game you might have multiple threads or even processes that produce a lot of things and then consumers which consume a lot of things an",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " blocked if there's nothing available to consume ok so here's what we're going to do between the producer and a consumer we are going to put a little ring buffer in here so let me try to draw a perfect circle that some powers best you're going to get today which will hold all of my values so we'll go out to am",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " values might actually hang around inside this memory so what is important though is is to understand that where we are reading and writing from this ring buffer is controlled by these two little pointers or there's two little indices ok now in practice we're not actually going to write buy some some circular ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ing ok so if i've got a little index here let's call it in a little integer here then as i incremented i asked you only want the lowest bits so if my ring buffer it says of size sixteen then i need to just take the lowest for bits and how can i do that i can say bitmask please with fifteen or if i want to writ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "93398f4a-2825-4434-b33c-6fcac2f37ef7",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "e this my end pointer in here will keep going around here and when i fall off the end i will start at the beginning now we need to make sure that the ring buffer never gets never allows me to push things in if it's already full and never allows me to pull things from it if it's already empty otherwise i will s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4be923cb-0fb1-4a38-b904-ceb8ff09755a",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "gave invalid data to the consumer or i never let the producer overfill my data structure and we've seen an implementation of that using a fixed sized ring buffer and we used some counterexample force to temporarily block the producer or the consumer ok so that's the classic producer consumer problem and then t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " see what we've got all right so the story so far this does check i'm on laptop mode yet good write the story so far is that i could have fixed sized ring buffer and so we can see it here that here's my buffer taking some value but i only care about the lowest four bits of my little counter here and each time ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "bit masking trip trick so that i use the lowest four bits ok so what do we got to actually make sure that we block well in the case that my fix sized ring buffer is full i want my call to send wait here to block in other words i'm going to use a counting semaphore for remember that's like a pizza box to actual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ter names to them as well ok so what do you think about this suppose as one was actually initialized not to sixteen but to seven would are fixed size ring buffer still work hope he said yes the difference however is that you could only our store seven items in before you able before before trying to add anymor",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "out if we set its initial value to thirty two well now we have a problem because we're not stopping the length of train from exceeding the size of my ring buffer so you can imagine a were able to go round and actually overwrite entries which we actually still needed so later when i come to remove values yes i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "tually now i'm removing recently added values i can no longer access the old values so thirty two won't work this actually larger than the size of my ring buffer ok right so can you tell me what's missing from this code and when would it matter right hopefully is hopefully you remember that last time we did th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "cks yes so there are problems was to make sure that if we called add at the same time we want those two values to occur at different points inside my ring buffer in other words line three here represents a critical section case so let me do that in red ok right so i can't have two threads running this line at ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "199ad3c7-e0c6-414e-8fa1-80276ca9fdcc",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "eep sending bytes \"but at some point are kernel says \"\"that's it i'm only\" \"going to support that number.\"\" so you can even think of for\" example the ring buffer that we implemented using counting semaphores as an implementation of a pipe! ok so if i was to start removing characters out of this then i could ac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4e573abf-cf71-448e-9c87-e47ce02c5bf0",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "o don't just assume that each read is going to become one so one right is beginning to come one read it doesn't have to write it just like you have a ring buffer we've put stuff in there and then we're going to want to read the most of bytes as possible when we call reed ok so we've learned how to discover whe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ok let's do a code review on some attempt to write a temp to write a ring buffer and let's see what we can see about this ok well it's so we've got our buffer of sixteen slots looks like sixty void pointers so we can use it for an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "fore we unlock the mutex let's make sure we decorated count so if we do that make all these changes congratulations we've now got a working fix sized ring buffer using condition variables and we could do a bit better performance if we limited the pizza addition broadcaster only calling this if we if there migh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2d49256b-843d-4c27-969c-5a4a8ef761ed",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to lecture twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things that we want to ask are is deadlock possible in other words could g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2d49256b-843d-4c27-969c-5a4a8ef761ed",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ble to continue is underflow possible in other words could it be that we attempt to write so attempt to read some data that's not actually inside the ring buffer so will just be reading back some garbage information or perhaps overflow as possible which means that we're able to put more data into my buffer the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4bb4d9de-3031-4ca5-9b24-28a62fa33ed8",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to like twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things that we want to ask are is deadlock possible in other words could g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4bb4d9de-3031-4ca5-9b24-28a62fa33ed8",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ble to continue is underflow possible in other words could it be that we attempt to write so attempt to read some data that's not actually inside the ring buffer so will just be reading back some garbage information or perhaps overflow as possible which means that we're able to put more data into my buffer the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "50ebb1c4-4d86-4abe-bcf6-d6d0948214d6",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to lecture twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things that we want to ask are is deadlock possible in other words could i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "50ebb1c4-4d86-4abe-bcf6-d6d0948214d6",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ble to continue is underflow possible in other words could it be that we attempt to write so attempt to read some data that's not actually inside the ring buffer so will just be reading back some garbage information or perhaps overflow as possible which means that we're able to put more data into my buffer the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b2add30a-6189-4ab5-96fd-957e96967d60",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to lecture twenty four let's start with the code review case so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b44a6271-011d-4df4-88e4-54685e216cf9",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to letter twenty four let's start with the code review case so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca90fc46-67a5-4381-9bae-274ec85fffbb",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to like twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things that we want to ask are is deadlock possible in other words could g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca90fc46-67a5-4381-9bae-274ec85fffbb",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ble to continue is underflow possible in other words could it be that we attempt to write so attempt to read some data that's not actually inside the ring buffer so will just be reading back some garbage information or perhaps overflow as possible which means that we're able to put more data into my buffer the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d1de06d0-ffdb-44f8-9fcd-6df31432c967",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to lecture twenty four let's start with the code review ok so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to letter twenty four let's start with the code review case so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to letter twenty four let's start with the code review case so we're going to do we're going to look at a fixed sized ring buffer and look at an implementation and we know the following things about it so first of all it uses counting semaphores and the first one s one is going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ed85781a-a46c-454f-99d6-e290835a6979",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "hi welcome to like twenty four we're going to start with a quick code review let's see look at this attempted waiting a fixed sized ring buffer and we'll see if we can figure out how it might go wrong ok so some of the things that we want to ask are is deadlock possible in other words could g",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ed85781a-a46c-454f-99d6-e290835a6979",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "ble to continue is underflow possible in other words could it be that we attempt to write so attempt to read some data that's not actually inside the ring buffer so will just be reading back some garbage information or perhaps overflow as possible which means that we're able to put more data into my buffer the",
        "label": "Use"
      }
    ]
  },
  {
    "text": "condition variables",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "nformation inside my manual for example i could all this stuff about the p threads and what i can do in a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many pa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "nformation inside my manual for example i could all this stuff about the p threads and what i can do in a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many pa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "de we don't understand synchronization primitives so just do under loop and every second we were polled the result ok so as a stepping stone to using condition variables this is actually really useful way to think because what we've done is we've defined a condition for when we cannot continue and that's actually the ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "y really useful way to think because what we've done is we've defined a condition for when we cannot continue and that's actually the secret of using condition variables and that's why they're called condition variables so yes in practice we've seen the behavior alot like hypnotising someone to sleep for a moment and ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ne is we've defined a condition for when we cannot continue and that's actually the secret of using condition variables and that's why they're called condition variables so yes in practice we've seen the behavior alot like hypnotising someone to sleep for a moment and then wake up later but the trick or the key part i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hat kind of loop ok so let's actually kind of now sketch out how we can use this so rather than actually just saying sleep for a second let's use our condition variables so instead let's call p thread condition wait there we go and we know that does the same thing but others posted just sleeping for a second my thread",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " that i i ok i want my scissors that i put a parentheses there let's drop you off there we go so it actually that is not the whole story for pizza at condition variables when you go to sleep you actually pass in the address or a mutex so he is my mutex i called it ok i've been writing mutex i should've been dis writin",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le but there's no condition part that the kernel or the system actually cares about it's up to us to write this while loop and the correct way to use condition variables is always to write them inside a while loop do not using this statement always use a while loop and i'll tell you more about that in a future video o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "star than making cake and negative will just blocked until more cake arrives ok so he was our plan we said as a stepping stone to understanding using condition variables let's pretend we haven't taken cs two forty ward and will just kind of keep polling will just keep keep beating luke blooping so look well say cake w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ement other things as well so in the future when you want to say implement a barrier or complicated condition of when a thread is allowed to continue condition variables will come to the rescue so let's get started you can imagine lots of examples in life where you need to temporarily stop, like you cannot leave the h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " keys and something else, or you cannot say get a ticket from the train until you know which train and where you're going. so let's let's look at how condition variables can emulate this process, emulate this idea, and in particular what condition variables allow us to do is to pause a thread, to say stop, right, do n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hich train and where you're going. so let's let's look at how condition variables can emulate this process, emulate this idea, and in particular what condition variables allow us to do is to pause a thread, to say stop, right, do not continue and then later we can wake up that specific thread all we can wake up a whol",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "that so i'll have use a little while loop here right so if the counter is less than eight then try again and will hold on a moment we should be using condition variables for this so let's have a condition variable here to say ok please block inside here and release the mutex lock ok right so if that will go to sleep w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "this problem get by with a fewer number of locks sorry a few more locks in order to reduce lock contention so so in this case we have we've got eight condition variables and eight locks plus here's my data structure is actually is going to be of eight integers but i want you to imagine that this actually could be a lo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "t integers but i want you to imagine that this actually could be a lot more complicated ok right so i've got some initialization to initialize all my condition variables and locks as you can see all i'm doing is using the array name so that will decay to a simple pointer type and then i can use pointer arithmetic to m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "are going to look at using their producer consumer and how we can use county semaphores to implement this correctly and then we're going to jump into condition variables just so that we can start thinking about how to write good multithreaded code now of course the ideas here can actually be generalized to multiple pr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "sing a mutex locks to protect that ok so we've done that we've done that right ok so we've implemented a version using counting semaphores what about condition variables suppose you wanted to make this work on a mac as well could we do it with condition variables and the answer is yes so of course we can so condition ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "lemented a version using counting semaphores what about condition variables suppose you wanted to make this work on a mac as well could we do it with condition variables and the answer is yes so of course we can so condition variables are more general purpose than counting semaphores and we would replace this same wei",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f95595a2-cfee-4a7b-942b-a5818fd21a55",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " variables suppose you wanted to make this work on a mac as well could we do it with condition variables and the answer is yes so of course we can so condition variables are more general purpose than counting semaphores and we would replace this same weight with the kind of code that we saw with our cookie eat a code ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "of q example of implementing a single single use thread using accounting said before but if today i wanted to implement a value i of course would use condition variables ok right so in the next video we want to think about the following is the following does not have any kind of potential race conditions ok so i'm goi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5c6032d9-cc7d-468f-82d9-4054bf6258ab",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "l of our modern applications so if you were to implement this today here's the good news are posix specification includes not only p threads not only condition variables but reader writer locks as well ok so here they are that i make not just a mutex lock but a reader writer lock here it is and i initialize it and the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "n exit but before we exit maybe it's time to wake some people up ok so the most loud code would be to call peter condition broadcast on both the both condition variables so notice i've got a condition variable here for writers so we're going to send all the writers to some coffee shop and condition over variable here ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just got two threads one thread some point is going to modify this value of x and then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just got two threads one thread some point is going to modify this value of x and then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just got two threads one thread some point is going to modify this value of x and then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "hi welcome to lecture twenty so let's have a code review where we're going to talk about a little bit of code that uses condition variables are you ready ok so my little application is very simple it's just got two threads one thread some point is going to modify this value of x and then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " looks like sixty void pointers so we can use it for any kind of pointer we're going to keep track of an in and out a number of items and we're using condition variables so my first concern here is these things every initialized ok let's choose a darkish red ok so i better check that these things are initialized if th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t to be unsigned as well so we could say unsigned int for example ok if we didn't want to mess with negative numbers ok so this code is trying to use condition variables to implement an q but it right now it's not even thread safe we could have multiple threads calling nq and both of them could see the same value of i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " mutex let's make sure we decorated count so if we do that make all these changes congratulations we've now got a working fix sized ring buffer using condition variables and we could do a bit better performance if we limited the pizza addition broadcaster only calling this if we if there might be a thread either dq th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "there might be a thread either dq thread or an nq thread that is sleeping but let's so we could put some ifs inside here and also we could invent two condition variables but i'm not going to worry about this condition those performance improvements right now instead i want to finish this lecture with a look at how to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ce59bcf4-f76c-4a93-a4eb-d506559bd60d",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "ing semaphores somebody's returned that piece of pizza into the counting semaphore so now we get to pull it out and continue and of course we've seen condition variables so now say broadcasters occured and now my thread is made continue we've also got other things like barriers so for example finally all the feds have",
        "label": "Use"
      }
    ]
  },
  {
    "text": "race condition",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "e you ready let's run it and we get nothing are you surprised let's have a look why do you think we got nothing ok so what we actually have here is a race condition we asked the people i be to start a new thread but before it had a chance to actually print anything out so those are sleeping second here it was goi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "802abd70-0cc9-49a1-8916-5ff1c0a98738",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "this code we seen segfaults we've seen missing lines but we've also seen lines which seemed to work correctly so what this is a great example of is a race condition r codes behavior depends upon lock basically do we feel lucky that we have a race between different threads as to who is going to see what value here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "802abd70-0cc9-49a1-8916-5ff1c0a98738",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "es even code which runs on two different machines where the fact that it appears to work sometimes is purely down to luck so kind of great example of race conditions and soon we're going to start talking about how we can prevent these how we can actually get a handle on making sure that things happen in the order",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ok so let's play with race conditions and then fixing with blocks right so what do you think the following code is going to print here we have a counter variable which is global as you c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0f70d1df-7a51-4bea-9a39-589fd7c57802",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ok so yeah we talked about race conditions what i meant to say is let's talk about a critical section so here's here's an important idea that there's possible code that is necessary that only",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0f70d1df-7a51-4bea-9a39-589fd7c57802",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " one process updates particular row at a time ok so you can imagine that if we were doing code review you might say hold on a moment there i've got a race condition here between say my implement incrementing i and when we actually reading the value of i in our previous code when we were taking the value of this p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ok so let's play with race conditions and then fixing with locks right so what do you think the following code is going to print here we have a counter variable which is global as you ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "izza at exit remember they do the same thing but they say that this thread doesn't need to run anymore ok great so if i run this i've got a potential race condition can you see where ok so our race condition is that my main method might finish early or at least might continue to early if i actually now wanted to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "g but they say that this thread doesn't need to run anymore ok great so if i run this i've got a potential race condition can you see where ok so our race condition is that my main method might finish early or at least might continue to early if i actually now wanted to wait for these things to complete how would",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "question for you let's go look at this code at the top here suppose someone said you will hold on a moment i'm kind of confused because isn't there a race condition as well with this this malloc and the fact that i've got i've got a stack variable here i mean isn't it possible that both threads might end up using",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "849095e8-a9e5-4467-8af4-be36e4991af6",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ok so yeah we talked about race conditions what i meant to say is let's talk about a critical section so here's here's an important idea that there's possible code that is necessary that only",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "849095e8-a9e5-4467-8af4-be36e4991af6",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " one process updates particular row at a time ok so you can imagine that if we were doing code review you might say hold on a moment there i've got a race condition here between say my implement incrementing i and when we actually reading the value of i in our previous code when we were taking the value of this p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "98759da5-160f-4e80-9141-033193a74769",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ng to print out ok so why did that happen well hopefully you can see that we passed in the address of i and so actually what we have here is called a race condition it depends upon the exact interleaving in time of the instructions that are going to be executed i've got one thread that immediately after calling p",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "98759da5-160f-4e80-9141-033193a74769",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "t point is no longer really hours to be looking at so we've got a pretty badly formed program here right so how can we fix it we need to address this race condition but will do it in two different ways first of all how about we turn this into a task that we give each one and my task right now is just no little in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "98759da5-160f-4e80-9141-033193a74769",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "e have to find his balance we have to find a way to do it so that we have good performance as well and so in the next video let's start talking about race conditions ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b60fb3d4-0600-4074-8432-449ea0067907",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ok sir yeah we talked about race conditions what i meant to say is let's talk about a critical section so here's here's an important idea that there's possible code that is necessary that only",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b60fb3d4-0600-4074-8432-449ea0067907",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " one process updates particular row at a time ok so you can imagine that if we were doing code review you might say hold on a moment there i've got a race condition here between say my implement incrementing i and when we actually reading the value of i in our previous code when we were taking the value of this p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hi so let's have a look at some race conditions and we will check to see if we can actually make these race conditions occur and then maybe we can figure out how to use our mutex locks to fix them",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hi so let's have a look at some race conditions and we will check to see if we can actually make these race conditions occur and then maybe we can figure out how to use our mutex locks to fix them right so here's a story so far i've got my little main method doesn't ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "t it just keeps on calling text message so my question to this is problem are we going to run into any kind of critical sections here can we find any race conditions to answer that we actually need to understand more about two text message now i'm already a little concerned about it because it clearly returns a p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c4e34ebf-4fec-4220-80f0-55bff9d28117",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "rogram using a mutex lock we use them after we identify the critical sections and when we implemented it correctly we can ensure that there's no more race conditions in our code alright one last question for you what do you think would happen if i said you know i little concerned now about the performance of my c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e12861bf-8be8-4e4d-a2d8-c07e5d79f3dd",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ng to print out ok so why did that happen well hopefully you can see that we passed in the address of i and so actually what we have here is called a race condition it depends upon the exact interleaving in time of the instructions that are going to be executed i've got one thread that immediately after calling p",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e12861bf-8be8-4e4d-a2d8-c07e5d79f3dd",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "t point is no longer really hours to be looking at so we've got a pretty badly formed program here right so how can we fix it we need to address this race condition right will do it in two different ways first of all how about we turn this into a task that we give each one and my task right now is just know the l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e12861bf-8be8-4e4d-a2d8-c07e5d79f3dd",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "e have to find his balance we have to find a way to do it so that we have good performance as well and so in the next video let's start talking about race conditions ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e574f9c9-dc9b-4dd2-b746-c100de94ae3b",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ng to print out ok so why did that happen well hopefully you can see that we passed in the address of i and so actually what we have here is called a race condition it depends upon the exact interleaving in time of the instructions that are going to be executed i've got one thread that immediately after calling p",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e574f9c9-dc9b-4dd2-b746-c100de94ae3b",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "t point is no longer really hours to be looking at so we've got a pretty badly formed program here right so how can we fix it we need to address this race condition but will do it in two different ways first of all how about we turn this into a task that we give each one and my task right now is just no little in",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e574f9c9-dc9b-4dd2-b746-c100de94ae3b",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "e have to find his balance we have to find a way to do it so that we have good performance as well and so in the next video let's start talking about race conditions ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ok so let's play with race conditions and then fixing with blocks right so what do you think the following code is going to print here we have a counter variable which is global as you c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "tually ran this earlier when we had an initialized mutex we solve values switch variant and we're certainly not two million so here's an example of a race condition that we can easily detect and the reason of course is that ninety nine point nine percent of the time cpus are modifying this data structure so we go",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a73bb722-a006-40e7-ba5b-1402cd135b37",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ok hi right so let's think about lock contention and also how this also relates to discovering race conditions ok so here's the scenario that we're going to think about that i've got a thread that most of the time is not inside the critical section and in fac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a73bb722-a006-40e7-ba5b-1402cd135b37",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ty bad depending on whether you truly want to try to discover this problem or you're hoping that your code works so even though we know that we gotta race condition even though we know we didn't actually implement the locks we have a problem here which is a two percent chance that all code will fail because two t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a73bb722-a006-40e7-ba5b-1402cd135b37",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "we've only going to see this one time out of five hundred approximately like i said we didn't do the exact integral but this means that actually make race conditions to occur can be quite hard now we went for figures that said the race the critical section one millisecond dirt to run if you're critical section wa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a73bb722-a006-40e7-ba5b-1402cd135b37",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ou the idea that these two things about the same and so we have we don't want lock attention but on the other hand we want to be able to discover our race conditions as soon as possible for me during our testing before we put it into production before we start relying on this code to save lives or to move money o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a73bb722-a006-40e7-ba5b-1402cd135b37",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "me during our testing before we put it into production before we start relying on this code to save lives or to move money or to give demos etc so so race conditions are tricky is the big takeaway message and you could do back of the envelope calculation to see why it's difficult to detect these ok right so with ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b681599f-1223-4f55-aca4-e57ac7b4b6cd",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ok hi right so let's think about lock contention and also how this also relates to discovering race conditions ok so here's the scenario that we're going to think about that i've got a thread that most of the time is not inside the critical section and in fac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b681599f-1223-4f55-aca4-e57ac7b4b6cd",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " pretty bad depending on whether you truly want to try to discover this problem or you're hoping that your code works so even though we know we gotta race condition even though we know we didn't actually implement the locks we have a problem here which is this two percent chance that all code will fail because tw",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b681599f-1223-4f55-aca4-e57ac7b4b6cd",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "we've only going to see this one time out of five hundred approximately like i said we didn't do the exact integral but this means that actually make race conditions to occur can be quite hard now we went for figures that said the race the critical section took one millisecond dirt to run if you're critical secti",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b681599f-1223-4f55-aca4-e57ac7b4b6cd",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "u the idea that these two things about the same and so we have we don't want lock contention but on the other hand we want to be able to discover our race conditions as soon as possible in women during our testing before we put it into production before we start relying on this code to save lives or to move money",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b681599f-1223-4f55-aca4-e57ac7b4b6cd",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "en during our testing before we put it into production before we start relying on this code to save lives or to move money or to give demos etc 's so race conditions are tricky is the big takeaway message and you could do back of the envelope calculation to see why it's difficult to detect these ok right so with ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8c34ce3-8698-443a-b044-40b8ce707888",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "l right now is finding a lot of coins there some ok we found some which are not valid coins case so that is our proof that it is possible to generate race condition and actually see it fail so the value that were printing out for that hash is no longer zero zero so between testing it ok between test to get here a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "da7958fa-52cd-4d05-93a6-42c5aaca70a7",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ok hi right so let's think about lock contention and also how this also relates to discovering race conditions ok so here's the scenario that we're going to think about that i've got a thread that most of the time is not inside the critical section and in fac",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "da7958fa-52cd-4d05-93a6-42c5aaca70a7",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " pretty bad depending on whether you truly want to try to discover this problem or you're hoping that your code works so even though we know we gotta race condition even though we know we didn't actually implement the locks we have a problem here which is this two percent chance that all code will fail because tw",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "da7958fa-52cd-4d05-93a6-42c5aaca70a7",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "we've only going to see this one time out of five hundred approximately like i said we didn't do the exact integral but this means that actually make race conditions to occur can be quite hard now we went for figures that said the race the critical section took one millisecond dirt to run if you're critical secti",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "da7958fa-52cd-4d05-93a6-42c5aaca70a7",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "u the idea that these two things about the same and so we have we don't want lock contention but on the other hand we want to be able to discover our race conditions as soon as possible in women during our testing before we put it into production before we start relying on this code to save lives or to move money",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "da7958fa-52cd-4d05-93a6-42c5aaca70a7",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "en during our testing before we put it into production before we start relying on this code to save lives or to move money or to give demos etc 's so race conditions are tricky is the big takeaway message and you could do back of the envelope calculation to see why it's difficult to detect these ok right so with ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "412638bd-03f0-44d0-a48b-5c8f0bee64e9",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ing to just reset it back to zero there's no need to wait for any other thread right so it's not a good implementation ok so what we have course is a race condition you could imagine two threads call p for mutex look at exactly the same time and they both see a value of zero so they both say aah great i had the m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ke it up and then it will notice that the quick variable has been set and so that will quit as well now this code perfect no there's actually a small race condition is actually very small possibility that we intend to call peter condition signal here but we do it just before a thread is actually is calling peter ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ntend to call peter condition signal here but we do it just before a thread is actually is calling peter condition wait so how can we ensure that the race condition is not a problem here let's let's also put this inside a mutex locks so p thread mutex lock an i want to look on my locks plus i plus one ok so now w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "007a4c69-a949-4550-b450-ecb4cd7a8b1e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "would use condition variables ok right so in the next video we want to think about the following is the following does not have any kind of potential race conditions ok so i'm going to have some kind of global variable here called please stop and when i set that i also then call peter condition broadcast but in m",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "k first so that has to complete first and that will complete either we will complete here after the second thread ask has gone to sleep so there's no race condition we prevented the race condition ok so the big learning point here is that mutex locks are your friends they do lots of useful things for us and actua",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "first and that will complete either we will complete here after the second thread ask has gone to sleep so there's no race condition we prevented the race condition ok so the big learning point here is that mutex locks are your friends they do lots of useful things for us and actually what they do is they bring o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "'ll tell you my opinions ok great so what did you decide this is contestant too though winner ok no we've got several problems here we've got several race conditions so here's some example problems for example suppose writers appeared at the same time so they both would see that right now there's no readers and t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ritical section and so we're going to collect data structure so we can't do that we failed to have just one active writer second there's there's this race conditions with the reader as well so you could imagine i've got a reader and writer both appear at the same time and the reader says well is anybody right wri",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "isn't great i get to continue meanwhile the right the writer says is anybody meaning anybody writing no great i get to continue to so because of that race condition because they both check those conditions at the same time now we have a reader thinking that it's ok to read and we have in writer thinking ok two tw",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "t now i've got a reader that might need some invalid data of might and might get corrupted as well so no that's not going to work for us ok the other race conditions and other concerns as well which is let's think about some meters coming in ok so in they go and they're doing their reading that opening files find",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "the active number of readers and we want to make sure the only one writer data type can get into actually changing it and we need to be careful about race conditions between our state fair verbals between when we check them and when we assume that what we've we've checked is true we needed to continue to be true ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " we see all the fireworks go well remember we work up one of them here and then that far work wasn't man work up the rest now do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i cal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " we see all the fireworks go well remember we work up one of them here and then that far work wasn't man work up the rest now do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i cal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " we see all the fireworks go well remember we work up one of them here and then that far work wasn't man work up the rest now do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i cal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " we see all the fireworks go well remember we woke up one of them here and then that firework wasn't man work up the rest now do we have any possible race conditions here yes we do right so we actually just talked about a version of this in the previous video that is a small race condition small possibility that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "do we have any possible race conditions here yes we do right so we actually just talked about a version of this in the previous video that is a small race condition small possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i cal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " we see all the fireworks go well remember we work up one of them here and then that far work wasn't man work up the rest now do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i cal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " we see all the fireworks go well remember we work up one of them here and then that far work wasn't man work up the rest now do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " do we have any possible race conditions here yes we do so we actually just talked about a version of this in the previous video that there's a small race condition small possibility that these two lines of code here can i move that over or to keep throwing boxes right when i change the value folks and then i cal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "go and we'll call preset conditions broadcast on the off chance as any threads which are sleeping will call oh wait a moment we don't want to hit any race conditions around this count this better happen as part of our critical section so before we unlock the mutex let's make sure we decorated count so if we do th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f8b87906-763d-4c78-8224-d88dd43fdd87",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "n special thread just service delivered signals and the advantage of doing this is that we no longer have to worry so much about all of the potential race conditions and asynchronous thread safety problems we have with the code that we write using signal handlers with signal handlers of this is tricky because we'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0fe42c84-6a79-4581-94d8-ef1fae922e78",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "there were actual papers submitted and accepted for publication that claimed to solve the critical section problem which actually had errors they had race conditions so this stuff is hard to think about and even though we've basically only got three variables in this case actually formally analyzing this is diffi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0fe42c84-6a79-4581-94d8-ef1fae922e78",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "bout and even though we've basically only got three variables in this case actually formally analyzing this is difficult so be very very careful with race conditions if you try to kind of work this out and also realize that that in modern processes you can't just simply write this code the main reason being is th",
        "label": "Use"
      }
    ]
  },
  {
    "text": "network card",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "025c4079-6f2d-496a-bc87-51d078e15f66",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "dle hardware interrupt you too do to devices iot devices being ready to either take data from the system or give data from the system for example the network card might report that her new packages arrived and here's some data or a disk or solid state disk might report hey i've now finally got the data you can ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "27f7e6d9-2a1f-419b-b0c5-3ad8dc4064d3",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "dle hardware interrupt you too do to devices iot devices being ready to either take data from the system or give data from the system for example the network card might report that her new packages arrived and here's some data or a disk or solid state disk might report hey i've now finally got the data you can ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ee433b-e79d-4957-9dbc-0d62b0785dbd",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "dle hardware interrupt you too do to devices iot devices being ready to either take data from the system or give data from the system for example the network card might report that her new packages arrived and here's some data or a disk or solid state disk might report hey i've now finally got the data you can ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "533db1aa-ad5e-40dd-b819-8b989c89b1f6",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "dle hardware interrupt you too do to devices iot devices being ready to either take data from the system or give data from the system for example the network card might report that her new packages arrived and here's some data or a disk or solid state disk might report hey i've now finally got the data you can ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4eaea6f-874c-4acc-a000-07cdfb9fa35b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "dle hardware interrupt you too do to devices iot devices being ready to either take data from the system or give data from the system for example the network card might report that her new packages arrived and here's some data or a disk or solid state disk might report hey i've now finally got the data you can ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fa389ce6-5fa6-4288-b2a2-949e66af677a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "dle hardware interrupt you too do to devices iot devices being ready to either take data from the system or give data from the system for example the network card might report that her new packages arrived and here's some data or a disk or solid state disk might report hey i've now finally got the data you can ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ok so here's the big idea to make tcp client i actually only need two calls i need a way to escape out of my c code and actually start talking to the network card and for that i need a socket so this is the thing that is going to give me a file descriptor and we can pass some information into this is to say wha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "bytes have actually respond to as far as the host at the other end is simply means i've been able to take my buffer and copy those bites into say the network cards buffer and at some point hopefully the next few milliseconds those bytes will start to leave my machine eventually we want to close this connection ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ok so here's the big idea to make tcp client i actually only need two calls i need a way to escape out of my c code and actually start talking to the network card and for that i need a socket. so this is the thing that is going to give me a file descriptor and we can pass some information into this is to say wh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "bytes have actually respond to as far as the host at the other end is simply means i've been able to take my buffer and copy those bytes into say the network cards buffer and at some point hopefully the next few milliseconds those bytes will start to leave my machine eventually we want to close this connection ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ok so here's the big idea to make tcp client i actually only need two calls i need a way to escape out of my c code and actually start talking to the network card and for that i need a socket so this is the thing that is going to give me a file descriptor and we can pass some information into this is to say wha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "bytes have actually respond to as far as the host at the other end is simply means i've been able to take my buffer and copy those bites into say the network cards buffer and at some point hopefully the next few milliseconds those bytes will start to leave my machine eventually we want to close this connection ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ting up servers but realize that normally you don't care about the port number that is used locally and you don't care about specifying exactly which network card it should use you'd like your machine to figure that out automatically for example suppose you had a machine where one network card talked to your co",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ing exactly which network card it should use you'd like your machine to figure that out automatically for example suppose you had a machine where one network card talked to your corporate internet and the other network card talked to the internet and another network card might be connected to say a fiber line t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "machine to figure that out automatically for example suppose you had a machine where one network card talked to your corporate internet and the other network card talked to the internet and another network card might be connected to say a fiber line that runs under the atlantic ocean you might want to explicitl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "mple suppose you had a machine where one network card talked to your corporate internet and the other network card talked to the internet and another network card might be connected to say a fiber line that runs under the atlantic ocean you might want to explicitly specify which network card to use rather than ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "nternet and another network card might be connected to say a fiber line that runs under the atlantic ocean you might want to explicitly specify which network card to use rather than let the kernel just try to figure it out automatically so if you want to do that you can all we need to do is call bind so between",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " calling socket and connect you would make a bind call to say ok i really do want to connect on this i really want really want to use this particular network card and i really want to use this particular port right so there's enough for setting up our tcp client nice and easy excuse me do make use of error mess",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "s inside these low level c structs is actually stored in a binary format which is close to or compatible with the actual bit switches sent out by the network card so what bits should represent the number one two three four well for that we've got to make a couple of choices do we actually want to represent this",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "hese are the big four calls that we need to make a server they are right so we've got a socket course we need to suck it then we need to bind it to a network card right after that we need to listen to basically open up shop to allow clients to connect and then finally we need to accept and we're going to put ex",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "e we said i need just an ip for tcp style socket thank you very much now we actually want to make that be on a particular port number on a particular network card on our local machine and that's the purpose of mind right so you can pink handcuffs or whatever to say hey we're going to actually combined abstract ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "here we said i need just an ip4 tcp style socket thank you very much now we actually want to make that be on a particular port number on a particular network card on our local machine and that's the purpose of bind right so you can think handcuffs or whatever to say hey we're going to actually bind our abstract",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "s inside these low level c structs is actually stored in a binary format which is close to or compatible with the actual bit switches sent out by the network card so what bits should represent the number one two three four well for that we've got to make a couple of choices do we actually want to represent this",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ab2486a0-3b00-4439-9a3b-86695d469f1e",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "these are the big four calls that we need to make a server they are right so we've got socket course we need to a socket then we need to bind it to a network card right after that we need to listen to basically open up shop to allow clients to connect and then finally we need to accept and we're going to put ex",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ting up servers but realize that normally you don't care about the port number that is used locally and you don't care about specifying exactly which network card it should use you'd like your machine to figure that out automatically for example suppose you had a machine where one network called talked to your ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ample suppose you had a machine where one network called talked to your corporate internet and the other network cut talked to the internet and other network card might be connected to say a fiber line that runs under the atlantic ocean you might want to explicitly specify which network card to use rather than ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " internet and other network card might be connected to say a fiber line that runs under the atlantic ocean you might want to explicitly specify which network card to use rather than let the kernel does try to figure it out automatically so if you want to do that you can all we need to do is call bind so between",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " calling socket and connect you would make a bind call to say ok i really do want to connect on this i really want really want to use this particular network card and i really want to use this particular port right so there's enough for setting up our tcp client nice and easy excuse me do make use of error mess",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "r so again you've got this problem of a limited resource which is the network bandwidth we're going to send out assonet next network packet from your network card and given that you've got multiple person is trying to send out multiple different kind of streams udp packets tcp packets at the end of the day you ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": " right so so we can take an idea of hey let's try to be fair in the sense that we will allow different packets to be sent but if you haven't used the network card recently then i'm going to give you a full allotment on the other hand if you seem to be sending lots and lots and lots of bites all the time then i'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "he other hand if you seem to be sending lots and lots and lots of bites all the time then i'm just going to give you a regular sized allotment of the network card we're going to play the same game then with this cpu so the completely fair scheduler behaves like round robin except let's keep track of how much of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "e bit pattern held by that short variable that sixteen bit variable is in the correct format so for example if we had to send it down the wire to the network card to out onto the internet then we better make sure that part number is actually represented correctly why they were correct bit pattern not represente",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "t do we want to do next we want to bind it to a local port and in fact we're going to by inviting it to a port number also binding it to a particular network card as well right so great we've now identified a particular passive port that were listing on now we can open up our shop so we say listen at this point",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec6fca4d-5cae-48dd-b541-e7bae7852408",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "rocess and this process can't see my files it can't even see what other processes are running and it can't find out much about anything about say the network cards or anything else i have basically we're running this poor little process it feels like a virtual machine except it's a lot lighter we're going to ch",
        "label": "Use"
      }
    ]
  },
  {
    "text": "disk blocks",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "amples we've got a case where my files use ten direct blocks and we have our dis block numbers use thirty two bit numbers ok so the maximum number of disk blocks which are addressable two to the thirty two and if each disk block is four kb let's just work out how bigger disk we can actually use before we run o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "n to just very small units we much prefer to say to a disk system an external system gave me a whole bunch of bikes and useful ideas to make the same disk blocks the same size as our memory blocks in fact what we're going to see is all over our system examples where the blocks are based around four kilobyte ch",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i'm rendering this now i'm inside of game inside a new area of the world it's time to bring that stuff into memory so we want to be able to make our disk blocks on line it neatly with our memory blocks and like i said for most operations today we're going to be talking about four kilobyte blocks as our standa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i need is a very very simple kind of block read or block right and i'd like random access if possible please ok so how should we do use all of these disk blocks ok so we will take the zero block here and will declare that as super block there it is so that is going to hold some meta information we choose a ne",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ical part of the disk to read these blocks and then jump over here to read these blocks ok so we might want to make sure that if possible we keep our disk blocks together so we can quickly load my cat picture ok you right so ok so one thing that you might notice right now is that what would happen if a dis blo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "amples we've got a case where my files use ten direct blocks and we have our dis block numbers use thirty two bit numbers ok so the maximum number of disk blocks which are addressable two to the thirty two and if each disk block is four kb let's just work out how big a disk we can actually use before we run ou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i can already easily by a say twelve terabyte disk right so in practice then ext2 actually provides actually has its limit based on choice of saying disk blocks must be represented using just thirty two bits and each disk block is exactly four kb but let's go back to our scheme here of actually how we referen",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "n to just very small units we much prefer to say to a disk system an external system gave me a whole bunch of bytes and useful ideas to make the same disk blocks the same size as our memory blocks in fact what we're going to see is all over our system examples where the blocks are based around four kilobyte ch",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i'm rendering this now i'm inside of game inside a new area of the world it's time to bring that stuff into memory so we want to be able to make our disk blocks line up neatly with our memory blocks and like i said for most operations today we're going to be talking about four kilobyte blocks as our standard ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "so tells us kind of where on disk is the data we actually need to get to the contents so kind of where where is the data so in other words were which disk blocks should i go to to actually start reading the contents of my cat dot jpeg so it's a kind of keys if you like into the actually reading the file or fin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i need is a very very simple kind of block read or block write and i'd like random access if possible please ok so how should we do use all of these disk blocks ok so we will take the zero block here and will declare that as super block there it is so that is going to hold some meta information we choose a ne",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e on this disk so you make that choice when you format it when you say right this is going to be the layout of my disk i'm going to set aside so many disk blocks for the inodes here we go and the remainder will be used for all of the data that i want to store so that's my initial very simple model it's not ver",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ical part of the disk to read these blocks and then jump over here to read these blocks ok so we might want to make sure that if possible we keep our disk blocks together so we can quickly load my cat picture ok right so ok so one thing that you might notice right now is that what would happen if a disk block ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "get the contents ideally of course these would be contiguous but they don't have to be ok so in practice we might limit this scheme to say ten direct disk blocks ok so providing my file is not too big right so what does it mean to be too big right so how big is each disk block well is dis block remember we sai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "o you read one extra disk block so you're going to go back to the disk and say hey i need four kb please and this will tell you where the next set of disk blocks are ok so they will be somewhat on the disk and where on disk will be stored inside this little table so let's talk about this little table if my dis",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nter the file i can figure out where to go so i need to be able to do math to say why is it less than four kilobytes in which case which one of these disk blocks is it direct blocks is it in the next range in which case which one of these thousand and twenty four entries do i need to read ok and therefore wher",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "o you read one extra disk block so you're going to go back to the disk and say hey i need four kb please and this will tell you where the next set of disk blocks are ok so they will be somewhat on the disk and where on disk will be stored inside this little table so let's talk about this little table if my dis",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nter the file i can figure out where to go so i need to be able to do math to say why is it less than four kilobytes in which case which one of these disk blocks is it direct blocks is it in the next range in which case which one of these are thousand and twenty four entries do i need to read ok and therefore ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "e i can't create a file in this i've actually gotten inode entry and i'm going to have will say ten entries inside my inode directly to the first ten disk blocks used by my file so in otherwise i could hold forty kb there and then i also have inside the i node that this block which holds a table with a thousan",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "500f2f37-cb53-4088-952f-c866acfded89",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "rm actually reducer is the reference count of my entry by one and if that gets down to zero then we know that i node is not useful anymore and so the disk blocks that i required to store the contents of that file can be repurposed in the future so if we look at the stat of my file ok you'll see right now that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "500f2f37-cb53-4088-952f-c866acfded89",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " my file system but we still might contain all of the meta information so for example it might be i did deleted i knowed entry can still point to the disk blocks that were being used to hold the file contents so that allows us to do things like undelete files and find files which have no longer listed insider ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6bda4161-ec8d-403f-b5c5-d510d46fe230",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "rm actually reducer is the reference count of my entry by one and if that gets down to zero then we know that i node is not useful anymore and so the disk blocks that i required to store the contents of that file can be repurposed in the future so if we look at the stat of my file ok you'll see right now that ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6bda4161-ec8d-403f-b5c5-d510d46fe230",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " my file system but we still might contain all of the meta information so for example it might be i did deleted i knowed entry can still point to the disk blocks that were being used to hold the file contents so that allows us to do things like undelete files and find files which have no longer listed insider ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "re journaling which is the ability to make sure that our file system is always in a good state so a file system of course has to keep track of unused disk blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on bad information that if our idea of which disk bl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on bad information that if our idea of which disk blocks were available was incorrect that oh we might start overwriting valid files so ext3 implement this idea called journaling which is that i can conside",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "'ve already written the the data i've made modifications to my directory to say there's a new file that exists here but i haven't yet updated say the disk blocks which are no longer available that kind of thing so i've got multiple rights i need to my disk and it's only when i get to second checkpoint do i kno",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "re journaling which is the ability to make sure that our file system is always in a good state so a file system of course has to keep track of unused disk blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on bad information that if our idea of which disk bl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on bad information that if our idea of which disk blocks were available was incorrect that oh we might start overwriting valid files so xt through xt three implement this idea called journaling which is tha",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "'ve already written the the data i've made modifications to my directory to say there's a new file that exists here but i haven't yet updated say the disk blocks which are no longer available that kind of thing so i've got multiple rights i need to my disk and it's only when i get to second checkpoint do i kno",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "can't create a file in this i've actually gotten i knowed entry and i'm going to have will say ten entries inside my i know directly to the first ten disk blocks used by my file so in otherwise i could hold forty kb there and then i also have inside the i node that this block which holds a table with a thousan",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "d to do much because i've already got a copy of the data on the disk somewhere right so i've got all this wonderful machinery to page out and page in disk blocks back into ram let's use that for a different purpose wouldn't it be cool if i could have a file like alice perhaps you've read alice through the look",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "580ae97f-7447-4844-927b-098638c01c95",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "tart reading its contents so let's see what the question here is so uh so we've we've got as far as reading the the file and we want to know how many disk blocks in total have been read again what's assumption assumption the only mounted directory is through directory and all i know data is cached but director",
        "label": "Use"
      }
    ]
  },
  {
    "text": "indirect blocks",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "disk block is exactly four kb but let's go back to scheme here of actually how we reference a information about files and look at how many blocks and indirect blocks that we can reference here so for how many indirect blocks can be re reference we work this out by saying i had four space of four kb ok but each ent",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ere of actually how we reference a information about files and look at how many blocks and indirect blocks that we can reference here so for how many indirect blocks can be re reference we work this out by saying i had four space of four kb ok but each entry inside here took four bytes so therefore i can have a th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e we work this out by saying i had four space of four kb ok but each entry inside here took four bytes so therefore i can have a thousand twenty four indirect blocks because that's the size of my table that can fit inside one dis block right so the next question is how large the file in lots of data if the indirec",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "d twenty four inches it has five hundred twelve ok so how big is my file well it used ten direct blocks k so we have ten plus five hundred and twelve indirect blocks so in other words we have five hundred twenty two blocks is the size of my file gay right and let's see what is question three what is the total numb",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " the largest file that we could have here where is going to be let's see forty kilobytes for the direct blocks and then we had four megabytes for the indirect blocks and then we had four gigabytes for the double indirect blocks and then four terabytes for the triple indirect blocks so providing you don't need to m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " let's see forty kilobytes for the direct blocks and then we had four megabytes for the indirect blocks and then we had four gigabytes for the double indirect blocks and then four terabytes for the triple indirect blocks so providing you don't need to make files much greater than four terabytes this scheme will wo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "en we had four megabytes for the indirect blocks and then we had four gigabytes for the double indirect blocks and then four terabytes for the triple indirect blocks so providing you don't need to make files much greater than four terabytes this scheme will work now of course in practice today were actually now i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " block is exactly four kb but let's go back to our scheme here of actually how we reference a information about files and look at how many blocks and indirect blocks that we can reference here so for how many indirect blocks can be we reference we work this out by saying i had four space of four kb ok but each ent",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ere of actually how we reference a information about files and look at how many blocks and indirect blocks that we can reference here so for how many indirect blocks can be we reference we work this out by saying i had four space of four kb ok but each entry inside here took four bytes so therefore i can have a th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e we work this out by saying i had four space of four kb ok but each entry inside here took four bytes so therefore i can have a thousand twenty four indirect blocks because that's the size of my table that can fit inside one disk block right so the next question is how large is the file in blocks of data if the i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " twenty four entires it has five hundred twelve ok so how big is my file well it used ten direct blocks k so we have ten plus five hundred and twelve indirect blocks so in other words we have five hundred twenty two blocks is the size of my file ok right and let's see what is question three what is the total numbe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " that the largest file that we could have here was going to be let's see forty kilobytes for the direct blocks and then we had four megabytes for the indirect blocks and then we had four gigabytes for the double indirect blocks and then four terabytes for the triple indirect blocks so providing you don't need to m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " let's see forty kilobytes for the direct blocks and then we had four megabytes for the indirect blocks and then we had four gigabytes for the double indirect blocks and then four terabytes for the triple indirect blocks so providing you don't need to make files much greater than four terabytes this scheme will wo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "en we had four megabytes for the indirect blocks and then we had four gigabytes for the double indirect blocks and then four terabytes for the triple indirect blocks so providing you don't need to make files much greater than four terabytes this scheme will work now of course in practice today were actually now i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "this block so this diagram is very very incomplete there's actually many many many many more of these so there's a thousand and twenty four so called indirect blocks and they are called indirect blocks because i had to load this indirect table i had a performance hit whilst i had to go and read this one time now i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ery incomplete there's actually many many many many more of these so there's a thousand and twenty four so called indirect blocks and they are called indirect blocks because i had to load this indirect table i had a performance hit whilst i had to go and read this one time now in practice once i've read it one tim",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "his system so if my indirect table here is full then i've got a thousand and twenty four entries ok but each entry is for kilobytes in other words my indirect blocks can hold four megabytes worth of information so this scheme will work providing i don't exceed four megabytes plus my direct blocks which i said ther",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "four of them ok for my second look up here but i'm not done because actually i can play this this trick a thousand twenty four times so for my double indirect blocks i've actually got four kb times a thousand twenty four times a thousand twenty four in other words i can represent four gigabytes worth of informatio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nd then a second one as well before i can finally find out where the actual data is stored ok are we done well actually it turns out there are triple indirect blocks as well but after that we stop so actually there's one more entry inside here there we go i'll just write it now but the last entry here gives me a d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "te our little table and we can keep playing this trick for thousand twenty four times and then we start making work as we kind of create these double indirect blocks and you can see how there is some overhead here that have all of these blocks which don't actually hold any data over any cats or any other actually ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "this block so this diagram is very very incomplete there's actually many many many many more of these so there's a thousand and twenty four so called indirect blocks and they called indirect blocks because i had to load this in director table i had a performance hit whilst i had to go and read this one time now in",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ry very incomplete there's actually many many many many more of these so there's a thousand and twenty four so called indirect blocks and they called indirect blocks because i had to load this in director table i had a performance hit whilst i had to go and read this one time now in practice once i've read it one ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "m so if my indirect table here is full then i've got a thousand and twenty four entries ok but each entry is for cook for kilobytes in other words my indirect blocks can hold four megabytes worth of information so this scheme will work providing i don't exceed four megabytes plus my direct blocks which i said ther",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "four of them ok for my second look up here but i'm not done because actually i can play this this trick a thousand twenty four times so for my double indirect blocks i've actually got four kb times a thousand twenty four times a thousand twenty four in other words i can represent four gigabytes worth of informatio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nd then a second one as well before i can finally find out where the actual data is stored ok are we done will actually it turns out there are triple indirect blocks as well but after that we stop so actually there's one more entry inside here there we go i'll just fight it now but the last entry here gives me a d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "te our little table and we can keep playing this trick for thousand twenty four times and then we start making work as we kind of create these double indirect blocks and you can see how there is some overhead here that have all of these blocks which don't actually hold any data over any cats or any other white act",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "he rest of the disk for backup purposes have a space set aside for i nodes and the rest of the space is going to be used for the actual files and any indirect blocks that we need to store okie sue this will look at our quick first question for x two with four kilobyte blocks at thirty two bit addressing watson max",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " to actually represent directory 's as well ok right so what's the last question we want to work on here for xt two how large can of rb before triple indirect blocks are required ok so to answer this one it means we're going to use the ten direct blocks so that's going to be forty kilobytes then we have the indire",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "he rest of the disk for backup purposes have a space set aside for i nodes and the rest of the space is going to be used for the actual files and any indirect blocks that we need to store okie sue this will look at our quick first question for x two with four kilobyte blocks at thirty two bit addressing watson max",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " to actually represent directory 's as well ok right so what's the last question we want to work on here for xt two how large can of rb before triple indirect blocks are required ok so to answer this one it means we're going to use the ten direct blocks so that's going to be forty kilobytes then we have the indire",
        "label": "Use"
      }
    ]
  },
  {
    "text": "main memory",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "16e62b2f-2875-432e-af0d-583257d7723a",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "k to different parts that made memory to say oh i need to follow this link over there so it's not cache friendly which means i often we're talking to main memory which is so slow right so we've got we've got a performance issue there and then secondly with best fit it tends to organize things so that what let'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " going on we're saying ok read the value of counter add one to it and then right back into memory so there's three distinct stages here we go over to main memory you will see he may maybe i need to read the following four bytes please ok we pull that into a cpu register then we invoke the arithmetic logic unit",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "and then we take that bit pattern and we throw it back towards memory here you go memory have a new value the adding one is extremely fast writing to main memory is extremely slow compared to what the cpu can do so of course practice we have levels of cash operating but let's not worry about that model complex",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what memory barrier we're not going to write code that does not ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " going on we're saying ok read the value of counter add one to it and then right back into memory so there's three distinct stages here we go over to main memory you will see he may maybe i need to read the following four bytes please ok we pull that into a cpu register then we invoke the arithmetic logic unit",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "and then we take that bit pattern and we throw it back towards memory here you go memory have a new value the adding one is extremely fast writing to main memory is extremely slow compared to what the cpu can do so of course practice we have levels of cash operating but let's not worry about that model complex",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what memory barrier we're not going to write code that does not ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " going on we're saying ok read the value of counter add one to it and then right back into memory so there's three distinct stages here we go over to main memory you will see he may maybe i need to read the following four bytes please ok we pull that into a cpu register then we invoke the arithmetic logic unit",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "and then we take that bit pattern and we throw it back towards memory here you go memory have a new value the adding one is extremely fast writing to main memory is extremely slow compared to what the cpu can do so of course practice we have levels of cash operating but let's not worry about that model complex",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what memory barrier we're not going to write code that does not ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "h means which is a hint to the compiler but no more simply that this variable don't trust it don't make assumptions about its state always go back to main memory to actually read it just because you're not changing the code doesn't mean that someone else might so it's it's a hint to the optimizer right the las",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " it uses a kernel resource called a spinlock and also we have to ensure that our eddie information inside our caches are correctly pushed back out to main memory so if the actual implementation of preferred mutex lock is a little bit more complicated than this it includes memory barriers and performance charac",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ere's no cash meaning if i got two threads running on two different pieces of silicon they will see the correct value running inside the sword inside main memory ok so we've set game_running to zero and let's wake up our threads ok so now will just wait until they both exited and then will print finished ok so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "s to acquire exclusively acquire a lock it actually operates as a memory fence to ensure that any dirty rights inside a cash have been flushed out to main memory ok so so it like i said this is a bad barrier we can do much better let's use peterek condition wait as a better implementation of a barrier alright ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ually had a very fast piece of memory to do this as part of the cpu and this has to be extremely quickly has to be much faster than going to actually main memory and we're going to need this every time we actually want to kind of go back to main memory every time we want to you want to calculate and physical f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "emely quickly has to be much faster than going to actually main memory and we're going to need this every time we actually want to kind of go back to main memory every time we want to you want to calculate and physical frame so the speed of this implementation it is critical and in fact it's gotta look aside b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4a691a02-f191-450e-8b66-639b515b068e",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "se paths at the same time this is where ns count even tense of nanoseconds count so let's start asking the tlb as we fire up the machinery to talk to main memory to walk through the page tables but hopefully we won't need to complete that task because the tlb will say uh huh i have the answer for you i can tel",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "esses to memory so you need to read piece of the heap and it wasn't inside the cache congratulations what do we do well first of all we need to go to main memory to look up a frame number and then once we've got that finally we can actually go and read or write the byte that you cared about so now my machine i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " is full of the money because different entries inside here will point to different pages to go and read and our second read then will say ok also in main memory somewhere there is none other entry another table here ok and as input we're going to use these middle unused ten bits here here ok so these ten bits",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "838e7f44-0162-44a2-bc9a-9896d00d13e1",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "eap so congratulations it now takes three memory address look up 's in order to do anything so my machine is now three times slower anytime it does a main memory access ok so we need to come up with a way to fix that and how do we do that i'll talk about it in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i want to load or read something from the disk so you've probably been talking about kind of cache lines and this idea that if you make a request in main memory for one byte you're going to get say the whole cache line which might be sixty four bytes or thirty two bites or hundred depending on the system whol",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "depending on the system whole load of bytes are free they all come across right depending on the width of the actual physical number of lines between main memory in your cpu so you get all these bits for free the so the same thing applies for our fault based systems and we are kind of at the lowest level sayin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i want to load or read something from the disk so you've probably been talking about kind of cache lines and this idea that if you make a request in main memory for one byte you're going to get say the whole cache line which might be sixty four bytes or thirty two bites or hundred depending on the system a wh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "pending on the system a whole load of bytes are free they all come across right depending on the width of the actual physical number of lines between main memory in your cpu so you get all these bits for free the so the same thing applies for our file based systems and we are kind of at the lowest level saying",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4c2cacef-7dbd-4877-97e1-9c6cf834fa33",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "ly to the pci bus or pci express bus so ssd chip can talk directly to the cpu so it's much faster to be able to shuffle information from the ssd into main memory or even directly into the gpu as well so this does come important if you're ever decided to upgrade your pc or building your own pc pay attention to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578e3a53-f9ab-41fa-bf8f-4907d8f5ebbe",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "ve got oh yes we've we've got we got to traverse data structures and which potentially involves many cache lines or what you're reading or writing to main memory we've also got ever handling as well so even if we don't take those branches there's a lot of branching code including in this we've got potentially ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cd13b51-dc41-427e-91b3-c63a9d8334fe",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "to result in a disk access as we page in an page out ok so unfortunately our paging mechanisms are about a million times slower than direct access to main memory so congratulations we've now just made a machine which is suddenly a million times slower than normal and this this effect is called thrashing that w",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34b3522d-04fe-4f64-bfd8-427941a01fb5",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ss two i have lost all that information about the tlb in other words if i now inside process two then in order to read or write even a single bite of main memory i've got to follow the page tables and remember page table will typically for your process down slow it down say two or three times compared to just ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "708df333-e9ad-4b1c-8f24-df23dcfb4811",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "different addresses they will just see a lot of zeros even though in practice i set up my hardware so that it actually goes back to the same piece of main memory ok so that's a wonderful electric i actually only need a single page four kilobytes of memory and i can easily give you now two hundred thousand byte",
        "label": "Use"
      }
    ]
  },
  {
    "text": "peter mutex",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "value was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " same idea with this this mutex lock its represents a mutex but it's not the attribute x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imag",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ther thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to wait it's called preferred mutex lock is blocked so right so we know for sure that this coal here either continues if no on",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lize the constant or copy said dark addition iniciat we told how do you lock and unlock and i had mentioned how you destroyed me text by just calling peter mutex destroy ok and that's just like kind of closing a file to say ok kernal done with this resource alright see you in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "value was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " same idea with this this mutex lock its represents a mutex but it's not the attribute x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imag",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ther thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to wait it's called preferred mutex lock is blocked so right so we know for sure that this coal here either continues if no on",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lize the constant or copy said dark addition iniciat we told how do you lock and unlock and i had mentioned how you destroyed me text by just calling peter mutex destroy ok and that's just like kind of closing a file to say ok colonel done with this resource alright see you in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "value was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ou grab that duck unless you have acquired the mutex right so i think we've answered nearly all of these questions what about this one why is it that peter mutex lock does not block ok this one should be easy for you to answer we've already seen it that was our case when thread one called lock and no one had t",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ame thread well let's imagine for a moment that thread two is started up ok so thread two gets his own value of i and very soon we'll get to the same peter mutex lock all right so what does it do it goes to grab the duck but the duck has been taken the mutex lock has already been acquired so it will be blocked",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "that because what destroyed one do well it carries on so it increments the global counter and then goes around the loop again at which point it calls peter mutex lock and blocks forever because that mutex has already been acquired now you and i know that that mutex ashley held by thread one but we haven't set ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "continues 'cause that no ones holding the duck great raptor duck releases it when they call unlock if whilst we're doing that in another thread calls peter mutex log they can't access that duck 'cause i'm holding it right now so they have to wait they get blocked inside the local right so we've got over there ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "for just microseconds at a time just while we say test data structure and then maybe using so ok that looks pretty good we've got rp thread mutex and peter mutex on lock on mutex ok and now let's think about our asked what we doing inside a little loop here ok so we're sleeping will not peace it condition wait",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "itely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are goin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "itely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are goin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "itely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are goin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "itely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are goin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " multiple threats ok we're going to have two threads trying to eat cookies at the same time ok but will protect our data structure by the use of this peter mutex lock ok we need to weigh to add things to a data structure and so here is my little add cookie notice that i've got i protected my change the data st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ie so if you type nine or control d then we're going to stop ok how should we stop what do you think about the following so we will first of all call peter mutex lock and we do that to ensure that actually there's something special about peter text lock which is not only does it acquiring musics it ensures tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ppear i'd actually like them to get stuck inside condition wait ok that we're actually going to send their thread to sleep so making threads block on peter mutex lock for extended periods of time will work but it's not best practices ok partly because it might spin the cpu for a little while which is in our ca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "e that's looking at it and say ok great now process to has everything it needs it can continue so if we were writing code you can imagine our call to peter mutex lock has finally completed or access to the reader writer data structures finally given 's ability to read that so great we can continue right so eve",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "re resources in the same order so will have a meeting with all of our programmers and say look here's the things which you are saying a quiet calling peter mutex lock on abc and d we just need you to always acquire them in agreed apon order so for example if you're going to acquire a lock in order to access a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "e that's looking at it and say ok great now process to has everything it needs it can continue so if we were writing code you can imagine our call to peter mutex lock has finally completed or access to the reader writer data structures finally given 's ability to read that so great we can continue right so eve",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "re resources in the same order so will have a meeting with all of our programmers and say look here's the things which you are saying a quiet calling peter mutex lock on abc and d we just need you to always acquire them in agreed apon order so for example if you're going to acquire a lock in order to access a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "'re going to change variables like count again the plus plus it's not thread safe so again that needs to be protected by a lock ok so let's move this peter mutex lock down ok will do that they're very end also we actually need to block we actually need to pause if my buffer is completely full so that seems to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0fe42c84-6a79-4581-94d8-ef1fae922e78",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "all the performance characteristics of a modern system from the compiler to the cpu were working against you which is why the implementation of saint peter mutex lock not only has to kind of implement code like this or similar code like this it actually will have a special cpu primitives are instructions to sa",
        "label": "Use"
      }
    ]
  },
  {
    "text": "thread condition",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "right ok so great we've put thread to sleep by calling p thread condition wait and now is happily dozing inside that condition variable right at some point in the future on a different thread we now know that it's time to w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " our our rooms that it sleeping in so we better pass the condition variable that our thread is sleeping in ok and there's one other option which is p thread conditioned broadcast so the difference is that sometimes i actually send a whole load of threads to sleep inside my condition variable and if i call condition",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "f now sketch out how we can use this so rather than actually just saying sleep for a second let's use our condition variables so instead let's call p thread condition wait there we go and we know that does the same thing but others posted just sleeping for a second my thread is gonna sleep like sleeping beauty here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ok so let's have a look at this example one more time but actually the text editor and then we'll talk specifically about how pthread condition wait actually works so here we go remember the story so far is we want to modify some data structure which will just be a little integer here and in ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "g a condition variable we do need a loop i'll tell you one big reason why in a moment and what do we need to do we replaced the sleep where their pee thread condition weights and here's a condition variable we're going to ask a threat to sleep in and we also going to release a mutex so it's we discovered it is alwa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " we forgot to wake up any sleeping threads in here so we've modified the value of cakes so we could wake up all threats so for example we could say p thread condition forecast if we wanted to wake up all threats that might be sleeping inside the thread condition wait or we could call p thread conditions signal if w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "uld wake up all threats so for example we could say p thread condition forecast if we wanted to wake up all threats that might be sleeping inside the thread condition wait or we could call p thread conditions signal if we wanted to just wake up one of them and which one gets working up this arbitrary ok right what ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " could say p thread condition forecast if we wanted to wake up all threats that might be sleeping inside the thread condition wait or we could call p thread conditions signal if we wanted to just wake up one of them and which one gets working up this arbitrary ok right what else can i say about this well it could b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le test because we're holding the lock if all of our code uses a lot no one else will be able to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "en maybe we could call pizza hut conditions signal as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ight so what about the blocking all right so we need something like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code loo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "t code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le test because we're holding the lock if all of our code uses a lot no one else will be able to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "en maybe we could call pizza hut conditions signal as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ight so what about the blocking all right so we need something like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code loo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "t code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " variable so it will create one of those a little bit but after you've got one or or you need to do is your thread should call p thread p for short p thread condition wait ok we're going to skip on some details that make it a little bit more complicated but i'm going to write it just like this for now there's pass ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le test because we're holding the lock if all of our code uses a lot no one else will be able to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "en maybe we could call pizza hut conditions signal as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ight so what about the blocking all right so we need something like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code loo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "t code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "le test because we're holding the lock if all of our code uses a lot no one else will be able to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "en maybe we could call pizza hut conditions signal as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ight so what about the blocking all right so we need something like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code loo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "t code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "don't try to remove things if there's nothing there for example ok so here's my logic then i've got some code here that you can see i'm going to use pthread condition soapy threads to run and i'm going to pull out a name from this and inside my little loop here was my game is running a lot the mutex and then i want",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " ok so let's think about how we can now turn this into something which is thread safe we don't want to sleep for a bit this is where we should call p thread conditioned weight case so let's put that in there kay right and let's sleep on a particular condition variable associated with this particular data structure ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "tional logic in here or i could just say hey bring the building the fire bell and let them go round there loop so the latest code i can write with bp thread condition broadcast and then if there's anybody sleeping inside this condition variable if they're blocked let's wake them up and send them around there while ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " just wake up somebody who might care and simply we need to do that down here where after we've dated the i plus once data structure we better call p thread condition broadcast ok so enough of sketching this out let's actually have a look at some code ok and here is my code you'll see that it's actually littered wi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "13ca4430-73f8-429a-b935-c642a8be526e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "icrosecond most between when our code has decided that the value of please stop is one and then let's say one hundred nanoseconds later where inside pthread condition wait and we're actually blocking right so within that small window imagine the following happened imagine that between checking this and actually blo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "n see my right my poor little writer even though it arrives at nine o'clock in the morning here never gets a chance to run always stuck inside this p thread condition wait there's never a time when reading gets down down to zero so everybody continue because my website so popular continues to see yesterday's conten",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": " want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "alling the writer so so that's i could do that but if i wanted to not think so hard and just make my code tiny bit less efficient i just could call p thread conditioned broadcast on all other writers so let's wake up all of those and one of those vitus will win and continue and the others will wake up but then they",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ual to sixteen so let's fix this look if i've got sixteen items inside my queue right now then let me send this thread to sleep through our call my p thread condition there we go caper condition wait all right so we're only using one condition variable if i was to make this code more performance i would consider us",
        "label": "Use"
      }
    ]
  },
  {
    "text": "dot text",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "ur program and sending the standard out in standard error to different places for example i can send a stamped out to a file so i can call this hello dot text and i can send the up the error output to somewhere else so for example i could send the error to stream number two which we know is now the error i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af0122b-b9dc-41df-a00a-b449acd1c803",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "nd that to say error so let me run that and now what if i got after it runs i've got my output in try again not there i've got my output inside hello dot text so there we see hello and system and i've got the stuff we sent to the standard error in the other file so if we look at error will see we've got cs ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "derr<br> and we've just close standard out and immediately we call open so we're asking for a new file descriptor and we are giving it a filename log dot text now we're giving some hints about how we want you want to use this we want to open this we'd invite if it doesn't exist please create it if it does e",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "let's actually run this and see what we get ok ok right so let's and then this gcc captains log k and when i run it i now have some output called log dot text here it is is actually all of the little c programs which are compiled and you'll find on your system under the slash bin directory and so there's a ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1cac33e-3bee-4e92-81db-c22e4418b623",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "n look at the first few lines this look at the first five lines of my log will see captains log there we go and if i count the number of lines on log dot text it's thirty seven and if i run it again let's just check that it really is appending output so let me check see how see how long it is now and there ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f4854068-5be5-4c56-b771-fcf375c9a2d2",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "nts up the number of characters words and lines in each program ok so now rather than sending it to stand out i can say please please go to say daily dot text but i can also do some other things here i can take that output and for example i can print a little program as its standard input called sort so hey",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "le so if my my file up here is null so if not file then that's when i'm going to choose to f open it and i'm going to call it a file called error log dot text and i want to append so if there's any other content down there let's zip to the end of the file first ok so if two threads were calling this at the ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "le so if my my file up here is null so if not file then that's when i'm going to choose to f open it and i'm going to call it a file called error log dot text and i want to append so if there's any other content down there let's zip to the end of the file first ok so if two threads were calling this at the ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "d we want to use a buffer so we're going to have a buffer of four kb at a time and the parent is going to copy the contents of some file called input dot text and we want to send that to start it in of the child process ok so you gotta figure out how to do that how would you like to send send those those by",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "4f500541-bb78-41b4-8597-24e61e794f81",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ould make this work then it means you can actually start sending a script of commands to bash and actually see them being executed so your file input dot text can have things like ls echo word count etc and you should be able to send these all too a little bash program and see them run but this file itself ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "sponding and finally back in firefox we see that we can see a directory listing supposed by default it did this all the files and if i click on story dot text for example i can see the contents of the file ok right so if you don't have python three installed if you've only got python two then i think the si",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "happen to know a little bit of http and valid quests look like this so we have get and then what would we like well how about we could have the story dot text and the protocol that i'd like to use today is http slash say one point oh ok so let's try that have a blank line and there we go ok so this is what ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "sponding and finally back in firefox we see that we can see a directory listing supposed by default it did this all the files and if i click on story dot text for example i can see the contents of the file ok right so if you don't have python three installed he got python two then i think the similar module",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ppen to know a little bit of http and valid requests look like this so we have get and then what would we like well how about we could have the story dot text and the protocol that i'd like to use today is http slash say one point oh ok so let's try that have a blank line and there we go ok so this is what ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d8f6f268-02f8-4d31-a805-f951523e92a1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ots by the way if you do make files beginning with a dot then by default ls does not show them so if i've got a file say called dot secret dot secret dot text then just when i list files using ls by default it hides or files names that begin with a dot they are there however and you can ask ls to actually l",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "de67c1db-85ec-40ee-affa-68ebcf984028",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ots by the way if you do make files beginning with a dot then by default ls does not show them so if i've got a file say called dot secret dot secret dot text then just when i list files using ls by default it hides or files names that begin with a dot they are there however and you can ask ls to actually l",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "983b6f0c-8731-4f16-a4a4-67e9285836e5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "'ve set our access control so that only the owner can actually read or write this file this might be appropriate for example for a file called secret dot text where we don't want to execute it but we do want to read and write it ok so what about this chown so this allows us to change the owner in this case ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "983b6f0c-8731-4f16-a4a4-67e9285836e5",
        "lecture": "CS",
        "lecture_num": 29,
        "context": "an specify multiple files on here so you could for example say i want to modify all files that end with say dot c for example all files that end with dot text ok right so that's nice quick review of chmod and chown and remember you can also do these things from c as well ok so the next video we are going to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "31a84e40-90fe-4ea7-9af5-cfc0d0ffebe8",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "right file globbing so what is fargo bing far globbing is the idea that on the shell i can type things like cyrus asterix dot text and that will be expanded to all matching files inside the current directory that meet this pattern or i could do something like finally all files th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "398ab8f1-44ca-4550-8662-16d9a98af68a",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ing so even though route is not potato bob root can always kind of read it ok but what about angrave ok so angrave let's see if we try to read secret dot text we get permission denied because everybody else does not have reposition on this read on this file ok but if we look at this program called how which",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "398ab8f1-44ca-4550-8662-16d9a98af68a",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "ive user id is potato bob so i'm now running this process with potatoes bobs privileges which means that this little program can actually open secret dot text and read its contents so we could do that because of the sticky bit so the sticky bit is seems kind of obscure and strange at first but actually allo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "tly alright so will start off today whereby just sharing a file ok then we could have done this anonymously as well but let's use a file called alice dot text we might recognize some of the words in a moment and now we're going to say actually i want to be able to read and write to this file so i need those",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "d and ninety six bytes please ok so if this succeeds great i get it back a pointer which i can actually start to use it will be the contents of alice dot text but we of course were able to change it so let's do that right so here's a little demo where i'm actually going to now do some communication between ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": " memory and it will be the same piece of memory the same physical piece of ram for both the parent and the child for this particular mapping to alice dot text so the moment that the child starts writing into those piece that pieces of ramp the parent can read it as well so isn't that cool let's actually kin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "en the parent and a child so off we go right i need my right window okay who is ok so i've got my little map demo here ok and i'm going to open alice dot text as we saw here's some permissions just in case alice dot text doesn't actually kind of exist yet and haven't changed this the only thing i've added h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "indow okay who is ok so i've got my little map demo here ok and i'm going to open alice dot text as we saw here's some permissions just in case alice dot text doesn't actually kind of exist yet and haven't changed this the only thing i've added here is some counters and things just to prove that we are kind",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "he same piece of shared ram ok so will kind of get out of that let's actually how look to see if it updated the file so if i do say hex dump of alice dot text pipe that into less than we don't see too much ok right so oops that's a little hard to read let's actually have a look at just text here it is we go",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": " look at just text here it is we gotta hello from the other side then there kind of the terminating c string character and then the rest of the alice dot text ok so welcome the looking glass welcome to kind of escaping out of a single process using nmap also realize that would have made the malik mp really ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "address space",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "14984eb1-a900-473a-816e-4e304fedc041",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "e recurse so every time we make another function call i'm going to need to extend my my stack space so for for architectures that only have a limited address space so particularly true on say sixteen bit and thirty two bit architectures let's put these two structures as far away as possible so that the likelihoo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3b653f0c-c210-4f13-a615-5d87a823e96e",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ss ffff liberalizing resume what something that number actually correspond to a different piece of ram and that's the idea of virtual memory that the address space of a process is unique to each process this ensures that if one process has a security or so it has a bug in it then it just it can't just suddenly s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "e we started another thread starting on yeah or different function altogether ok the big news however is to all of these threads live inside the same address space they can all see the same physical ram if you had one thread that was like agent smith that wanted to go haywire it could actually overwrite the othe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "78b152f6-1621-4792-8595-2687dfbc6aa9",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " to need space inside my memory for another thread and so each thread then it's going to get its own stack right and these are inside the same memory address space but they're going to be separated by say megabyte or so so they don't collide ok and then the last quite common is why do they call it the thread of ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f2346ed4-1e17-412e-91f1-e269250987e5",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " machine so now my integers are only going to be thirty two bit still but my point is can be much larger they have a much larger space of numbers now address space now sixty four bits so in practice what's going to happen here we're going to truncate the value only going to take the lowest thirty two bits the bi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "hi great so let's welcome to virtual memory ok so the story so far we've been designing process is and each process has its own address space as we had this idea of virtual memory ok and so the address numbers that you and i talk about inside our code only make sense inside one particular p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " between each processor your process can't overwrite my memory well maybe we can do better than that ok so one thing to notice is that actually in my address space over here i've got tons of addresses loads of address numbers which i just don't care about they are not being used right now they're not part of the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " a very good idea ok so let's make this kind of concrete well they imagine we're running today on a two bit machine ok so i've got that means that my address space is thirty two bits meaning that is actually kind of thirty two physical wires also meaning that the total number of addresses is two to the thirty tw",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ece of my rab so in other words for each and every bite inside here i need to store number i need to store what i need to store four bytes so if your address space over here for your process is habig thirty two bits in other words i've got say two to the thirty two entries right but each entry now it's going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04149e23-3b12-41fe-bb0f-f717c1d17865",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "en offset would say three thousand two ok so there's my offset down there that distance there ok right so so far we've been talking about the virtual address space we can divide up our physical memory the stuff we physically gone out and brought and put inside our machine into these same blocks into these same f",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " i need to kind of hold my indexes here for my physical frames in other words how many frame numbers might i actually need to store here ok so if our address space for physical memory is also thirty two bits you might say well it's two to the thirty two of them except we've divided things up into four thousand n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5d08e5da-dc37-4280-b939-3b84bb917113",
        "lecture": "CS",
        "lecture_num": 21,
        "context": " actually for most programs i've got lots and lots of addresses in here that are utterly unnecessary my thirty two bit program like four gigabytes of address space is the time i talk about inside my process most of them i'm never going to touch for example my stack might be small my heat might be small and yet i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "o use our memory really efficiently i want you to for example imagine that you're currently running a compiler let's say it's clang right and so your address space yes you have your own heap yes you have your own stack etc but you also have a whole lot of memory dedicated to the executable code of client so ther",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "o use our memory efficiently the last thing will be able to do is to be able to say right i'm going to take a frame of memory here and map it into my address space and then also map it into another processes address space so now i can have two processes which can communicate extremely quickly when i write a valu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9eeb3210-b89c-48dc-b32c-2597c75bc28b",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "o do is to be able to say right i'm going to take a frame of memory here and map it into my address space and then also map it into another processes address space so now i can have two processes which can communicate extremely quickly when i write a value into here so if i write in a for example then you consid",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55699194-1692-490a-a863-a26370265ef7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " files directly into memory where we no longer even need to call read and write but we can actually look at the file as if it is actually part of our address space so that's coming up later inside cs two forty one and it's the most one of the most far and most powerful features of posix and system programming th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dcde2695-ae8c-4032-aceb-2d001a2ec718",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "files directly into memory; where we no longer even need to call read and write but we can actually look at the file as if it is actually part of our address space. so that's coming up later inside cs241 and it's the most.. one of the most fun and most powerful features of posix and system programming that you'l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "if there's one thing i wish we could change and vince cerf agrees we here is that i wish that our earlier address schemes had decided to use a bigger address space for our network packets then just just the thirty two bits so today these thirty two bits are described as octets so an octet is just eight bits so i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "t so this is ip four it's a very very simple idea of let's have a thirty two bits there's a little bit more to it we can actually start talking about address spaces within that you can talk about subnets etc and how we divide up this total address space of two to the thirty two possible addresses we can reserve ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "a little bit more to it we can actually start talking about address spaces within that you can talk about subnets etc and how we divide up this total address space of two to the thirty two possible addresses we can reserve different parts of it from i don't get there today instead i wanted to talk a little bit a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "31a84e40-90fe-4ea7-9af5-cfc0d0ffebe8",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "h i think is pretty cool ok so this process currently got you can see it's got a whole load of libraries which are mapped into different parts of the address space let me keep scrolling backwards here there's a lot of mappings kate looks there we go great then you might notice that i've got some address space ov",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "31a84e40-90fe-4ea7-9af5-cfc0d0ffebe8",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "he address space let me keep scrolling backwards here there's a lot of mappings kate looks there we go great then you might notice that i've got some address space over here which is mapped to the file slash bin slash bash yes that's right i've got different parts of bash mapped of the file bin bash mapped and t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "ble to read and we want to be able to write to these pages of memory but i don't need to be able to execute them i don't care where inside my virtual address space this memory ends up and i want four thousand and ninety six bytes please ok so if this succeeds great i get it back a pointer which i can actually st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1ea99e17-8bc6-433e-90ce-9d051362f24b",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "rent can read from the same address now back at the beginning of two forty one and we talked about forking we said hey these are completely different address spaces and actually there are no longer connected after you called fork ok well guess what that was a little lie why because you couldn't handle the truth ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "if we could actually map those directly into some memory ok so let's kind of copy them in and then those pieces of memory can be directly part of the address space of a process and that's what nmap is going to allow us to do this idea that we can kind of make as one the address space of our process and things on",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c",
        "lecture": "CS",
        "lecture_num": 31,
        "context": " can be directly part of the address space of a process and that's what nmap is going to allow us to do this idea that we can kind of make as one the address space of our process and things on the disk it allows us to do a bit more than that but let's kind of just start there ok alright so let's see what we can ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c",
        "lecture": "CS",
        "lecture_num": 31,
        "context": " you want to map the whole file then maybe you could say something like ok stat tell me the size of the file and that will be the space in my virtual address space i'd like to use ok so the next two things can cause a little bit of confusion they do different things here so remember when we talked about our virt",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cd13b51-dc41-427e-91b3-c63a9d8334fe",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "le of working set so i mentioned this kind of word in passing demand paging and just as a reminder what this means that i can have part of my process address space ok so for example this page my processors memory maybe it's part of the heap may be part of the code maybe is part of the stack but right now it's th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "708df333-e9ad-4b1c-8f24-df23dcfb4811",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "e comes is that we could have a single page of ram here is with some zeros in and now the big trick is to map this so that the different parts of the address space all mapped to the same piece of ram and my little processes will be none the wiser if they just simply look through all of these different addresses ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "web browser",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "little bit about ok so i send a packet from one machine to another how can i specify who gets his packet i mean for example passes packet is for your web browser perhaps it's for my service etc so i want to have a database perhaps i want to have a web server or running on the same machine so how do we differen",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "r responses back there the very top four hundred bad request the rest of it is just a nice documented formatted version that we can display inside of web browser cater your browser sending requests at this server could not understand ok so the status code is four hundred and it didn't like arbitrary request le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " ok so that's a full request now i'm behaving a lot more like a reasonable http client ok so will send all that so all we have to do is recompile our web browser right so that's easy we compile it is in klang and run it an were here then we get a different response now we get a status code of three oh one move",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " there is no web server listing on port eight thousand so in trying to connect this moment where's our connect call this is what this is where we are web browser failed connect failed it try to pack it saying hello i'd like to start a tcp connection but there was no one listening at the other end so if we coul",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " response back there at the very top four hundred bad request the rest of it is just a nice documented formatted version that we can display inside a web browser so your browser sent a request that this server could not understand ok so the status code is four hundred and it didn't like our arbitrary request l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": " ok so that's a full request now i'm behaving a lot more like a reasonable http client ok so will send all that so all we have to do is recompile our web browser right so that's easy we compile it is in klang and run it an were here then we get a different response now we get a status code of three oh one move",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "now there is no web server listing on port eight thousand so in trying to connect this moment where's our connect call this is what this is where our web browser failed connect failed it sent a packet it saying hello i'd like to start a tcp connection but there was no one listening at the other end so if we co",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ot listen on port eighty let's listen on say port eighty eighty ok great and off it goes again so now again i can make a connection using my favorite web browser and off we go and see the contents again wait and you'll see this particular web browser also prints out who's connecting to it and when and what res",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "again so now again i can make a connection using my favorite web browser and off we go and see the contents again wait and you'll see this particular web browser also prints out who's connecting to it and when and what resources they're requesting so another useful tool is called netcat let's have a look at th",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " not listen on port eighty let's list on say port eighty eighty ok great and off it goes again so now again i can make a connection using my favorite web browser and off we go and see the contents again wait and you'll see this particular web browser also prints out who's connecting to it and when and what res",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "again so now again i can make a connection using my favorite web browser and off we go and see the contents again wait and you'll see this particular web browser also prints out who's connecting to it and when and what resources they're requesting so another useful tool is called netcat let's have a look at th",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "dfe8f684-5acd-41bf-8ba0-276a3fc52ffb",
        "lecture": "CS",
        "lecture_num": 31,
        "context": " to say hey figure out a reasonable filename based on the url that we give it here so curl is kind of tremendously useful tool you can even with your web browser get an equivalent curl command form a web browser request that's useful if you need kind of session cookies or other authentication items or colors w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfe8f684-5acd-41bf-8ba0-276a3fc52ffb",
        "lecture": "CS",
        "lecture_num": 31,
        "context": " on the url that we give it here so curl is kind of tremendously useful tool you can even with your web browser get an equivalent curl command form a web browser request that's useful if you need kind of session cookies or other authentication items or colors well you can specify additional headers as well so ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3e1b1597-b1e1-4999-9d99-6e412cce8d0e",
        "lecture": "CS",
        "lecture_num": 32,
        "context": "n imagine for example that with a web page we care about the very moment we can thirst start sending the bytes back because that moment we can at the web browser can start trending the response maybe we don't have all of the javascript libraries available yet but we can store start to see the basic outline of ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4032b6db-39d8-4d61-bef9-218a42c0a7e4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "you'll see it it's printed out its ip address and we know it's listening on port one two three four ok so let's try connecting to that ok so i need a web browser here so i need to go to http key and actually i don't want regular port eighty on a listener port one two three four ok does it work right why we hav",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4032b6db-39d8-4d61-bef9-218a42c0a7e4",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "here's a cove silly picture i used as our first meme and on this side you can see that we see the request we actually get the actual request from the web browser we can find out let's see who they also this is all of the information that is included in that header not just the actual request but something abou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2635d0a3-9614-4aa7-9bdc-dca870b27eec",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "at might actually be containing javascript might be containing css s they might be complete and ready we should be able to give those directly to the web browser with tcp you can't do that your call to read were block right here until we get this information and only then will all of these other packets be sen",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9951a684-a841-47e6-8d48-035d4127b468",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " forty milliseconds to display our picture and if we had multiple cat thumbnails then each connection is going to take more time so the very earliest web browsers said well you know what we need to do better than this is taking a long time to display all these adverts we have on a page what will do is will we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9951a684-a841-47e6-8d48-035d4127b468",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "on a page what will do is will we took cs two forty one will have say some multiple threads and we will make up to four connections at a time to each web browser so that once we've loaded the html i can load four thumbnails in parallel wife or you might ask well this is a compromise because we didn't want to o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11d312f-2dc3-4d38-893d-f28714ba089d",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "tiple connections to the same server whereas in fact it's all running over a single tcp connection but we are hiding that from the higher part of the web browser so that is http you there's one last kind of really fun feature which is server side push that when you request the picture of so the website of your",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "trained way perhaps i for example should run it under a certain user that only has access to a certain set of directories simply with browser today a web browser i've got different parts which can have different different privileges required for example perhaps i need some part that's going to interact with th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "dns i've leaving the lab possibly at least this semester i'm recording it and you know that dns is based on udp so that let's say that i type into my web browser hey i want to load say a page from bbc dot com we need to turn that into an ip address maybe like before ip six address and that's where domain the d",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1260cf03-e3d2-405c-8846-79c5af487b4d",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " we don't see any udp packets ok so one answer to that is as trivial answer which is simply that hey my process was already cashed in answer so if my web browser has already gone to the bbc dot com then it doesn't necessarily need to look up that answer again and in fact dns records have a timeout parameter to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cd13b51-dc41-427e-91b3-c63a9d8334fe",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " now my program isn't using this page of memory at all that might be code say to formulate to format a table for example or it might be cold inside a web browser to render an svg and right now we don't have any svg images on our page so this part of our process doesn't actually need to live in ram and right no",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cd13b51-dc41-427e-91b3-c63a9d8334fe",
        "lecture": "CS",
        "lecture_num": 38,
        "context": " website to load or for this compiler to finish i know what i'll do i will give my machine something else to do instead like i'll open up a different web browser or i'll try to compile something else and so i just made the problem even worse that now i've actually increase the load on my poor system and so the",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7dec3665-e1bb-4bf2-a909-d43c2937b24b",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "be sent in order to transmit what we want we've got header compression remember that http is quite verbose we send things like ok the the name of the web browser in its version the kinds of my tights were prepared to accept whole lot of other stuff like if we've cashed it some tag values associated with our lo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7dec3665-e1bb-4bf2-a909-d43c2937b24b",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "ad on all the stuff that isn't actually connected with these packets it would be great if we could have given that already to the client and then our web browser would have been faster right and the last thing is how does dns work right we all sketched out very quickly in the next video bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "o send additional information as well if we wish and then here's the actual response headers we get back which is a standard http key by the way your web browser will can also kind of tell you some basic cool stuff as well so for example his day the whale say demo that we saw and in fact it shows you on this w",
        "label": "Use"
      }
    ]
  },
  {
    "text": "file handle",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": "e of these variables causes a size under course t my goodness and the last thing is where should it read from so we're going to give it a c c library file handle which we've either got from calling f open or which could use standard in if we want to read just from the standard input and it returns the number o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "14544fe6-66a5-40d6-988b-0d22aa081150",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " only had a few times until it starts to be at least believable ok so let's carry on we want to read from standard in i could have chosen a different file handle if i'd used f open right so this call to get line is going to block until it gives us complete line or an error occurs and it can't continuous so we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6fa7868f-bbe1-47f6-bee8-22507dfcc8c8",
        "lecture": "CS",
        "lecture_num": 4,
        "context": " to start reading things ok so how can we do this well remember we're going to say hey sdf don't read from standard input instead read from my little file handle here and i expect to see at integer comma and another integer and now i need to give it some addresses so before we used ampersand x but now i'm actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7292aa1d-0d99-46a1-8077-9688f41b785d",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "the f get see will return a negative value if it fails ok so let's a little while loop here to keep going providing there's no errors so if i take my file handle here ok so where does filehandle that's just what's being passed in so if there's no current errors and we haven't reached the end of the file then l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7a7590a3-2294-4d27-89ff-d625512f82e5",
        "lecture": "CS",
        "lecture_num": 5,
        "context": "e alright and we're passing in the address of two variables that's great way to use getline where are they are they up here and we're passing in that file handle as well ok and we only escape when we actually read a negative one so we don't know where it's going to be the end of the file or whether it's going ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "ll and use true if you wish ok so get line then we give it the address of our two variables to buffer the capacity and ask it to start reading from a file handle ok and then we put a zero in bytes minus one ok so what's the purpose is what is it trying to do here let's come that in a moment for now let's just ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " not necessarily senseable when the child process exits in fact it's worse than just having this line we actually need to do flush on all of our open file handles and so here's another one we better actually call f flush on our input here as well if you had printed some things out and he wanted to make sure th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "t we called we used for getline that will either be the original malloc we called or some new memory get line is used an then don't forget our little file handle as well and if we want to be good citizens we could also change our little file pointer here to be null just so no one could use it after that ok lik",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e0d9ea58-cf82-4b71-957b-9da72ccb2d90",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "t in that extra flush before fork where is my fork it no ok so we we want to flush our two input streams i've got standard into flush and i've got by file handle as well ok so let's save that and right ok and now if i run it it will give me a little usage ok we tested that now we want to say here's my here's m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " destroy right and here's the address of my lock so i want you to think of my variable here and it's not the actual mutex itself more is a bit like a file handle so when we've done things like f open to open a file handle or passive called open the kind of posix the low level version to open a file descriptor ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ou to think of my variable here and it's not the actual mutex itself more is a bit like a file handle so when we've done things like f open to open a file handle or passive called open the kind of posix the low level version to open a file descriptor the thing you got back words maybe just a little integer or ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " destroy right and here's the address of my lock so i want you to think of my variable here and it's not the actual mutex itself more is a bit like a file handle so when we've done things like f open to open a file handle or passive called open the kind of posix the low level version to open a file descriptor ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ou to think of my variable here and it's not the actual mutex itself more is a bit like a file handle so when we've done things like f open to open a file handle or passive called open the kind of posix the low level version to open a file descriptor the thing you got back words maybe just a little integer or ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "teger and an optional message which eventually we're going to save to a file so you'll see down here we call f printf we're going to store it in this file handle when we've just got a string of the message and some error string as well and then finally let's flush that as well so it is actually definitely writ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " well so it is actually definitely written out of the file ok now let's look at some of the other details first of all notice that we lazily open the file handle so if my my file up here is null so if not file then that's when i'm going to choose to f open it and i'm going to call it a file called error log do",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "6c7e145f-442c-430a-a17d-cd3630fbce96",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "oth threads see value of null because we haven't opened the file yet so both threads decide to call f open and then write that result into the single file handle the global variable there so that wouldn't be great we only want one thread to ever call ever open so that is certainly a critical section the time b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "s out an arbitrary number why is that ok so the key thing here is that we forgot to initialize our mutex and so there we have variable is just like a file handle it doesn't actually refer to anything and so rp thread mutex lock call does nothing is a no op we could have discovered that if we'd actually check t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "teger and an optional message which eventually we're going to save to a file so you'll see down here we call f printf we're going to store it in this file handle when we've just got a string of the message and some error string as well and then finally let's flush that as well so it is actually definitely writ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " well so it is actually definitely written out of the file ok now let's look at some of the other details first of all notice that we lazily open the file handle so if my my file up here is null so if not file then that's when i'm going to choose to f open it and i'm going to call it a file called error log do",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "oth threads see value of null because we haven't opened the file yet so both threads decide to call f open and then write that result into the single file handle the global variable there so that wouldn't be great we only want one thread to ever call ever open so that is certainly a critical section the time b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ore complicated but i'm going to write it just like this for now there's pass in the address of my condition variable and so again this is a bit like file handles that yes i have a variable in my code but actually refers to something else the actual object is not the variable so will write it like that and i'm",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ype here and a reminder that yes these are variables and they represent some memory sure but the actual objects themselves you can think of them like file handles that they actually exist as part of the part of the kernel so that's why i need to call p thread mutex initiate please create an object for me based",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4601a707-5dd9-44c5-b66d-261ac8ae080b",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t how big the file is so our trick would be to go to the end of the files so go to the very end right so will call f seek k and which file this is my file handle ok where i want to go to the zero offset and seek end ok so great now at the very end now i can tell where i am so let's say hey f tell right tell on",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ut how we can do that right so there's two easy ways to send more interesting data like some numbers. one way is to now wrap a file descriptor with a file handle so for example we can do things like fdopen() so if you call fdopen() you pass in a file descriptor so for example if you want a file handle to wrap ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "r with a file handle so for example we can do things like fdopen() so if you call fdopen() you pass in a file descriptor so for example if you want a file handle to wrap standard out you could do that but let's wrap one of our new file descriptors like the write end. here it is. and i want to use this for writ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " i call fdopen() rather than opening a file all i've done is ask to c library to wrap one of these low level things to give me one of these c library file handles one of these file pointers ok so this makes the life little bit easier. we'll call it 'easy' right, because now i can use fprintf() so now i can say",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t this down inside like code here so that we are now sending data that way right and in fact there's another kind of gotchas that now if you're using file handles with fork it's important to flush them so that's if we'd made our file handle before calling fork it's always important to make sure that we flushed",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t and in fact there's another kind of gotchas that now if you're using file handles with fork it's important to flush them so that's if we'd made our file handle before calling fork it's always important to make sure that we flushed anything. so do this on any input and output file handles. so there we go. we'",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "at's if we'd made our file handle before calling fork it's always important to make sure that we flushed anything. so do this on any input and output file handles. so there we go. we'll flush it because we're calling fork ok so and if we were using standard out and standard in we can flush those as well so we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "lush on standard out, flush on.. what else are we using.. standard out right ok so that looks a bit more posix compliant so now we've made our server file handle and we're going to call that right so let's run this and off we go after two seconds yeah great we get thirty characters back and then we send them b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "781c2c19-58df-4f6e-9dcf-99e51f685f66",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t how big the file is so our trick would be to go to the end of the files so go to the very end right so will call f seek k and which file this is my file handle ok where i want to go to the zero offset and seek end ok so great now at the very end now i can tell where i am so let's say hey f tell right tell on",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "right ok so let's think about fall positions when it comes to sharing file handles between a child and parent process and the big idea here is that there are kernel objects so we've already seen a couple of kernel objects in terms ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "posix says that before before forking if we truly want see libra to behave we read a flush any streams that we care about so we care about the the my file handle and though possibly is overkill in this case because i've only all i've done between the last flash and four king was to call f tell i'm going to fal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ike \"\"5678'\" go flush ok then will close it now this last flush i just did i could type there we go is technically unnecessary because in closing the file handle we will flush anyway but i just wanted to give the idea that hey we're going to write something and we don't want to buffer this we want to send it i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " around to writing stuff out it's going to be writing it in at the beginning of the file so this stuff gets tricky if you true you're trying to share file handles between a parent and a child in practice you're unlikely to actually do this i can't imagine overtime when you would want to be deliberately writing",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "to worry about whether the c library is actually called the kernel object or not so in practice what is usually better behavior is too close unwanted file handles before forking or after forking so that you don't unnecessarily share these objects so big big takeaway here is we saw that closing a file handle or",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "8b052423-2727-4a8f-a436-99ef0efaf792",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "ed file handles before forking or after forking so that you don't unnecessarily share these objects so big big takeaway here is we saw that closing a file handle or file descriptor inside the child doesn't affect the parent these things are reference counted and secondly that the kernel objects themselves main",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "right ok so let's think about fall positions when it comes to sharing file handles between a child and parent process and the big idea here is that there are kernel objects so we've already seen a couple of kernel objects in terms ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "posix says that before before forking if we truly want see libra to behave we read a flush any streams that we care about so we care about the the my file handle and though possibly is overkill in this case because i've only all i've done between the last flash and four king was to call f tell i'm going to fal",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " seven eight go flush ok then will close it now this last flush i just did i could type there we go is technically unnecessary because in closing the file handle we will flush anyway but i just wanted to give the idea that hey we're going to write something and we don't want to buffer this we want to send it i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "und to writing stuff out it's going to be writing it in at the beginning of the file. ok, so this stuff gets tricky if you truely are trying to share file handles between a parent and a child. in practice you're unlikely to actually do this. i can't imagine a time when you would want to be deliberately writing",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " worry about whether the c library has actually called the kernel object or not. so in practice, what is usually better behavior is to close unwanted file handles before forking or after forking so that you don't unnecessarily share these objects. ok, so big takeaway here is we saw that closing a file handle o",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d74d1bca-8940-47ce-bff5-6e04844cc7f7",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "d file handles before forking or after forking so that you don't unnecessarily share these objects. ok, so big takeaway here is we saw that closing a file handle or file descriptor inside the child doesn't affect the parent (these things are reference counted) and secondly that the kernel objects themselves ma",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "ok right so how do we read half a file? right, so let's go. well first of all let's open the file handle so will do this all at the c library level ok and next time you write a piece of python code or c++ code realize that many of those functions actuall",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "t happens if we fail so if fread fails if this has a return statement as well then i would want to make sure that we always end remember to close our file handles in both places so no matter what happens make sure we've closed that resource and if i wanted to make sure that people don't use my file handle on a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "86a6f898-deff-45df-b7a6-2a0d2dc10c5a",
        "lecture": "CS",
        "lecture_num": 23,
        "context": " our file handles in both places so no matter what happens make sure we've closed that resource and if i wanted to make sure that people don't use my file handle on accident anymore then i would reset my variable as well so ok if you can be null ok just as kind of best practice so that clear that that file tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a339955c-d52d-4f69-9c8a-c4e9d4cf038f",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "'s have a look at this right so here's some data that i saved earlier ok inside a file called points dot dat and at least f open so great now i gotta file handle and i'm just going to open it for reading so my first plan is to the very first thing i want to store inside this file is the actual number of points",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "398ab8f1-44ca-4550-8662-16d9a98af68a",
        "lecture": "CS",
        "lecture_num": 30,
        "context": "behave a bit like cat if you like ok so i'm being a good citizen and closing the resources as soon as i don't need them so i'm calling f close on the file handle and then freeing the memory as well ok so here's what we've got here is my secret file and you'll notice that my secret file here is very secretive t",
        "label": "Use"
      }
    ]
  },
  {
    "text": "heat memory",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "46d738b3-f1ab-4400-a64d-55474f51875f",
        "lecture": "CS",
        "lecture_num": 2,
        "context": "e let's have a look at this spot the errors problem a little bit more complicated than we've seen before here some code is actually going to use some heat memory to initialize some floating point values for 's case so what we do well we're taking some n value and then we're trying to ask malloc for some memory",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b876ebf8-b1c2-4187-bfab-f4c2fa732965",
        "lecture": "CS",
        "lecture_num": 3,
        "context": "xt and now remember how how we can do this we can use aspirin tariffs or to say hey it's been tough change my variable for me please to point to some heat memory that i am going to need for the results so for example i want integer now and here's the integer value i need to convert into some text so almost don",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "t and if it's not initialized to anything in other words it's just looking at null then our plan will be to change their pointer to look at some knew heat memory right so the idea is if there's nothing there hey let's at least get some some memory setup otherwise if they have given us a valid pointer then we'l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": "end ok so we could require that they give us sufficient memory but what about the case where we just called malac well what's going to be inside that heat memory and the answer is anything it could be an arbitrary bit pattern but what we'd like is four stroke at to definitely put the copy the message to the be",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "084ced83-e9fe-4139-9d64-86f4824864cf",
        "lecture": "CS",
        "lecture_num": 6,
        "context": " in the case of mark use store copy but instead let me show you another alternative which is let's let's deliberately set the very first bite of that heat memory to zero so in other words right how do i do that i need to dereference twice my variable to finally get to that very first character of my heap so le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3645730a-4aa1-43d8-be7d-16db4e0c5df3",
        "lecture": "CS",
        "lecture_num": 7,
        "context": "e the contents of your variable to point to something else this is what i want to make your variable look at i want you available to now look at some heat memory and i'm allocating this number of bytes i think the intention here is to try to put a c string in there let's see how well it does so we men copy int",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "94ea6cdc-aa81-48b6-84f3-323a89a40075",
        "lecture": "CS",
        "lecture_num": 7,
        "context": " piece of ramp that it is personally zeroed out just for you or it could be that you been calling malloc and free a lot and so now you're malloc your heat memory looks like an old dirty sock drawer where bits of memory a cold hole arbitrary values from previous malloc calls and so we are just treating it as a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "117f0f11-cc38-4a40-b359-8f1ba81655e1",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "ne last thing we should do with a little memory allocator which is remember programs are polite they should call free when they've finished with some heat memory and what are we going to do well we have the world 's fastest implementation of free just hear it does nothing you say hey i finished with this piece",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cbf2feb7-901b-481f-8dab-38bea64b966f",
        "lecture": "CS",
        "lecture_num": 8,
        "context": "locator under real conditions so for example we could actually instrument python or java or c plus plus program to see how efficient we could use the heat memory ok so that's it for best fit we can make a note of where p is well so it ended up at zero here let's in the next video let's look at now the allocato",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ca760730-bb8f-426f-8d87-931bf10baf4e",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "e we might use it again when a another thread is created right so anything else you want to say about this yeah and realize that look i can have some heat memory in here i could call malloc from one thread i could have some global variables just beneath that and all of my threads can refer to these things that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6ad1ba5c-6f3e-4ca6-b80b-2f7d444e23ef",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hi so it's quite common to put aside a little bit of heat memory in order to define exactly what we want our thread to do so i want to give you an example of that and then talk about how would set it up right so he",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6ad1ba5c-6f3e-4ca6-b80b-2f7d444e23ef",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lculation so once that actually has completed it can call free on this argument so it's perfectly fine to create memory inside one thread will create heat memory inside one thread and release it inside another just be careful that when you free it you're completely sure that no thread is going to be accessing ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "resources from the web right so let's kind of look at my download function here it is so it's going to be given a url and we'll start by getting some heat memory ok so both my threads or how many things i make will get their own heat memory here this malloc call right and then we'll have some code in here that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " it is so it's going to be given a url and we'll start by getting some heat memory ok so both my threads or how many things i make will get their own heat memory here this malloc call right and then we'll have some code in here that we weren't talking about yet to actually start downloading those bytes will ge",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "me bites from my download then i should i should save that ok so let's use a function part of the seal i be called f right where i'm going to save my heat memory and the number of bytes i've managed to download here some number between zero and two thousand forty eight k will talk about f right in the future b",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ads might end up using the same piece of heap memory so can you see why that's not true why is it that both threads will always end up with their own heat memory why isn't it say that they don't end up sharing this mem variable k so why why is it that they both get their own heap ok so some thoughts that hopef",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cfcca673-a18d-4f07-9473-13b87f7c5ef5",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hi so it's quite common to put aside a little bit of heat memory in order to define exactly what we want our thread to do so i want to give you an example of that and then talk about how would set it up right so he",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cfcca673-a18d-4f07-9473-13b87f7c5ef5",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "lculation so once that actually has completed it can call free on this argument so it's perfectly fine to create memory inside one thread will create heat memory inside one thread and release it inside another just be careful that when you free it you're completely sure that no thread is going to be accessing ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e4db746-ae92-4bc8-ba83-cf475b89a78c",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "oo many page faults for example right now my programs calculating a mandlebrot set it might be just that i need say my small bit of program code some heat memory where i'm going to store the result and maybe a little bit of stack memory and thats it so if i gave my process right now just one two three four fiv",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a339955c-d52d-4f69-9c8a-c4e9d4cf038f",
        "lecture": "CS",
        "lecture_num": 23,
        "context": "o hey fread please read into the following location so i don't want the address of my variable now because my points variable actually points to some heat memory and how much memory do i want well again just like calloc i'm going to say the size of each entry underscore t and then number of these well we've ju",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "e get a passing then a pointer to an existing struct and then here's where we pass in a variable appointed to a pointer and it's going to create some heat memory force with the results so that's what we need to get to let's think about how we can set up this hints object what does that look like gay so here's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d51e1b38-6c01-4584-9e0b-69d42464cfa6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ess and we are not going to give it any memory to write the result into so real path internally is actually going to call malloc is going to get some heat memory for the result which is why at the very end we are going to free it so you'll notice i put a little bit of logic in here to see whether it actually w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "12682bb1-804f-4939-a519-445af7451475",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " the inside we actually need to construct a message so how could we do that well here's one way there's a call called ass print f which will get some heat memory for you automatically so it's a bit like sprint f meaning that it will write the output to some memory but in this case it will actually get some hea",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "12682bb1-804f-4939-a519-445af7451475",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "cedure calls are very lightweight this is the opposite of lightweight in fact in our version we are we are getting stack memory and so inside here so heat memory so you know inside here there's going to be a call to malloc so now we're already talking micro hundreds of microseconds maybe ten microseconds if yo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578e3a53-f9ab-41fa-bf8f-4907d8f5ebbe",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "ls is about a hundred to a thousand lines of code at least compared to a simple local call which is perhaps one expert and i forgot one more thing as heat memory as well we might need to do some memory allocation and deallocation so is any surprise then the rpc can be at least a thousand times slower than loca",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b",
        "lecture": "CS",
        "lecture_num": 37,
        "context": "rs and as you can see we're doing a lot of work and in fact it's going to be quite slow to call not only making a remote procedure call will also the heat memory as well ok so but that's kind of a feel for why are writing this stuff code is is annoying boilerplate stuff to write ideally we'd have a tool to gen",
        "label": "Use"
      }
    ]
  },
  {
    "text": "disk block",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "amples we've got a case where my files use ten direct blocks and we have our dis block numbers use thirty two bit numbers ok so the maximum number of disk blocks which are addressable two to the thirty two and if each disk block is four kb let's just work out how bigger disk we can actually use before we run ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "have our dis block numbers use thirty two bit numbers ok so the maximum number of disk blocks which are addressable two to the thirty two and if each disk block is four kb let's just work out how bigger disk we can actually use before we run out of addressable space here so what is two to the thirty two minut",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1af6249c-bd09-46a8-9b8f-738611112cb5",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ice then e x two actually provides actually has is limit based on choice of saying dis blocks must be represented using just thirty two bits and each disk block is exactly four kb but let's go back to scheme here of actually how we reference a information about files and look at how many blocks and indirect b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "n to just very small units we much prefer to say to a disk system an external system gave me a whole bunch of bikes and useful ideas to make the same disk blocks the same size as our memory blocks in fact what we're going to see is all over our system examples where the blocks are based around four kilobyte c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "25f60154-4c5e-4768-9b0f-f050b09bb778",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i'm rendering this now i'm inside of game inside a new area of the world it's time to bring that stuff into memory so we want to be able to make our disk blocks on line it neatly with our memory blocks and like i said for most operations today we're going to be talking about four kilobyte blocks as our stand",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i need is a very very simple kind of block read or block right and i'd like random access if possible please ok so how should we do use all of these disk blocks ok so we will take the zero block here and will declare that as super block there it is so that is going to hold some meta information we choose a n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4675bcdc-930f-4e8f-bcf1-5baea25f1628",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ical part of the disk to read these blocks and then jump over here to read these blocks ok so we might want to make sure that if possible we keep our disk blocks together so we can quickly load my cat picture ok you right so ok so one thing that you might notice right now is that what would happen if a dis bl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "amples we've got a case where my files use ten direct blocks and we have our dis block numbers use thirty two bit numbers ok so the maximum number of disk blocks which are addressable two to the thirty two and if each disk block is four kb let's just work out how big a disk we can actually use before we run o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "have our dis block numbers use thirty two bit numbers ok so the maximum number of disk blocks which are addressable two to the thirty two and if each disk block is four kb let's just work out how big a disk we can actually use before we run out of addressable space here so what is two to the thirty two minute",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i can already easily by a say twelve terabyte disk right so in practice then ext2 actually provides actually has its limit based on choice of saying disk blocks must be represented using just thirty two bits and each disk block is exactly four kb but let's go back to our scheme here of actually how we refere",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "tice then ext2 actually provides actually has its limit based on choice of saying disk blocks must be represented using just thirty two bits and each disk block is exactly four kb but let's go back to our scheme here of actually how we reference a information about files and look at how many blocks and indire",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5e0c43a3-3588-4f37-80a2-d3681b4119ea",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nside here took four bytes so therefore i can have a thousand twenty four indirect blocks because that's the size of my table that can fit inside one disk block right so the next question is how large is the file in blocks of data if the indirect block index is half full so what that means is here's my table ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "n to just very small units we much prefer to say to a disk system an external system gave me a whole bunch of bytes and useful ideas to make the same disk blocks the same size as our memory blocks in fact what we're going to see is all over our system examples where the blocks are based around four kilobyte c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i'm rendering this now i'm inside of game inside a new area of the world it's time to bring that stuff into memory so we want to be able to make our disk blocks line up neatly with our memory blocks and like i said for most operations today we're going to be talking about four kilobyte blocks as our standard",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6c4c517c-e925-4d55-ac5a-58757254b2f6",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "so tells us kind of where on disk is the data we actually need to get to the contents so kind of where where is the data so in other words were which disk blocks should i go to to actually start reading the contents of my cat dot jpeg so it's a kind of keys if you like into the actually reading the file or fi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " i need is a very very simple kind of block read or block write and i'd like random access if possible please ok so how should we do use all of these disk blocks ok so we will take the zero block here and will declare that as super block there it is so that is going to hold some meta information we choose a n",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "know is going to be of the order of one hundred and twenty eight bytes or sixty four bytes a pretty small so we can actually fit a lot of them in per disk block, per four kb chunk ok so they're actually very very small here right so we'll set aside some space for all of these inodes in my very very simple mod",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "e on this disk so you make that choice when you format it when you say right this is going to be the layout of my disk i'm going to set aside so many disk blocks for the inodes here we go and the remainder will be used for all of the data that i want to store so that's my initial very simple model it's not ve",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ical part of the disk to read these blocks and then jump over here to read these blocks ok so we might want to make sure that if possible we keep our disk blocks together so we can quickly load my cat picture ok right so ok so one thing that you might notice right now is that what would happen if a disk block",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9ddff03f-fb90-4ca7-9381-f30bb13acc08",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "disk blocks together so we can quickly load my cat picture ok right so ok so one thing that you might notice right now is that what would happen if a disk block got slightly corrupted so for example let's say that some dust or for some reason the surface here got corrupted now is unable to read these bites so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "want to say ok but if you actually want the bytes of this cat picture i bet it can tell you where to load them so if my content of cat dot jpeg is on disk block kind of three seven fifty nine etc i need to store these numbers somewhere ok so our first idea then is to say look for very small files why don't i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " nine etc i need to store these numbers somewhere ok so our first idea then is to say look for very small files why don't i actually store the actual disk block numbers so say three seven fifteen directly inside the inode ok so we can do that providing the file doesn't get too big because my i node has a limi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "get the contents ideally of course these would be contiguous but they don't have to be ok so in practice we might limit this scheme to say ten direct disk blocks ok so providing my file is not too big right so what does it mean to be too big right so how big is each disk block well is dis block remember we sa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "it this scheme to say ten direct disk blocks ok so providing my file is not too big right so what does it mean to be too big right so how big is each disk block well is dis block remember we said it's going to be four kb ok so for files which are zero to forty kilobytes i've now got a scheme to actually store",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ss into the file you're going to have to work a little bit harder so after forty kilobytes this is what you're going to have to do you read one extra disk block so you're going to go back to the disk and say hey i need four kb please and this will tell you where the next set of disk blocks are ok so they will",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "o you read one extra disk block so you're going to go back to the disk and say hey i need four kb please and this will tell you where the next set of disk blocks are ok so they will be somewhat on the disk and where on disk will be stored inside this little table so let's talk about this little table if my di",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "cks are ok so they will be somewhat on the disk and where on disk will be stored inside this little table so let's talk about this little table if my disk block numbers can be represented using four bytes then how many entries can i have inside my little table here so the table itself is four kb but each entr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " myself another four kb as i keep reading the file i'm going to workout which entries inside here i need to go to and each time will give you another disk block number to read from disk and i can keep reading the next four kb again for performance hopefully these are next door neighbors but they don't have to",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ead another little table and so this is a lot like kind of the page table tricks that we saw with virtual memory and finally this gives us the actual disk block that will actually hold the data so finally we can meet the next four kilobytes of data ok so how much can we store with this double indirection sche",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nter the file i can figure out where to go so i need to be able to do math to say why is it less than four kilobytes in which case which one of these disk blocks is it direct blocks is it in the next range in which case which one of these thousand and twenty four entries do i need to read ok and therefore whe",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "l up kind of initially we're just working on this very first this block as we make our file greater than four kb now we start writing bytes into this disk block as we keep going we need to find a new disk block which is available so we started writing bytes in there and so on and so on and so on and keep doin",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a2f92ca4-d435-4bce-a132-de1a03149ff1",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "very first this block as we make our file greater than four kb now we start writing bytes into this disk block as we keep going we need to find a new disk block which is available so we started writing bytes in there and so on and so on and so on and keep doing for the first forty kb and then what happens wel",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " to say ok but if you actually want the bytes of this cat picture i bet it can tell you where to load them so if my content serves cat dot jpeg is on disk block kind of three seven fifty nine etc i need to store these numbers somewhere ok so our first idea then is to say look for very small files why don't i ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " nine etc i need to store these numbers somewhere ok so our first idea then is to say look for very small files why don't i actually store the actual disk block numbers so say three seven fifteen directly inside the i'd node ok so we can do that providing the file doesn't get too big because my i node has a l",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "it this scheme to say ten direct this blocks ok so providing my file is not too big right so what does it mean to be too big right so how big is each disk block well is dis block remember we said it's going to be four kb ok so for files which are zero two forty kilobytes i've now got a scheme to actually stor",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "ss into the file you're going to have to work a little bit harder so after forty kilobytes this is what you're going to have to do you read one extra disk block so you're going to go back to the disk and say hey i need four kb please and this will tell you where the next set of disk blocks are ok so they will",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "o you read one extra disk block so you're going to go back to the disk and say hey i need four kb please and this will tell you where the next set of disk blocks are ok so they will be somewhat on the disk and where on disk will be stored inside this little table so let's talk about this little table if my di",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "cks are ok so they will be somewhat on the disk and where on disk will be stored inside this little table so let's talk about this little table if my disk block numbers can be represented using four bytes then how many entries can i have inside my little table here so the table itself is four kb but each entr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " another little table and so this is a lot like kind of the page table tricks that we sought with virtual memory and finally this gives us the actual disk block that will actually hold the data so finally we can meet the next four kilobytes of data ok so how much can we store with this double indirection sche",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": "nter the file i can figure out where to go so i need to be able to do math to say why is it less than four kilobytes in which case which one of these disk blocks is it direct blocks is it in the next range in which case which one of these are thousand and twenty four entries do i need to read ok and therefore",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b6cf130c-a8fd-42d6-979b-2037d3be7212",
        "lecture": "CS",
        "lecture_num": 27,
        "context": " very first this block as we make our file greater than four kb now we start writing bytes into this dis block as we keep going we need to find a new disk block which is available so we started writing bytes in there and so on and so on and so on and keep doing for the first forty kb and then what happens wel",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "e i can't create a file in this i've actually gotten inode entry and i'm going to have will say ten entries inside my inode directly to the first ten disk blocks used by my file so in otherwise i could hold forty kb there and then i also have inside the i node that this block which holds a table with a thousa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "s not about the indirect and double in triple indirect it's more the fact that if i want to say to the disk hey disc actually would load a particular disk block please then i can pass in a number which is bounded by thirty two bit addressing scheme so i've got two to thirty two possible dis blocks i could req",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "500f2f37-cb53-4088-952f-c866acfded89",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "rm actually reducer is the reference count of my entry by one and if that gets down to zero then we know that i node is not useful anymore and so the disk blocks that i required to store the contents of that file can be repurposed in the future so if we look at the stat of my file ok you'll see right now that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "500f2f37-cb53-4088-952f-c866acfded89",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " my file system but we still might contain all of the meta information so for example it might be i did deleted i knowed entry can still point to the disk blocks that were being used to hold the file contents so that allows us to do things like undelete files and find files which have no longer listed insider",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6bda4161-ec8d-403f-b5c5-d510d46fe230",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "rm actually reducer is the reference count of my entry by one and if that gets down to zero then we know that i node is not useful anymore and so the disk blocks that i required to store the contents of that file can be repurposed in the future so if we look at the stat of my file ok you'll see right now that",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "6bda4161-ec8d-403f-b5c5-d510d46fe230",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " my file system but we still might contain all of the meta information so for example it might be i did deleted i knowed entry can still point to the disk blocks that were being used to hold the file contents so that allows us to do things like undelete files and find files which have no longer listed insider",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "re journaling which is the ability to make sure that our file system is always in a good state so a file system of course has to keep track of unused disk blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on bad information that if our idea of which disk b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on bad information that if our idea of which disk blocks were available was incorrect that oh we might start overwriting valid files so ext3 implement this idea called journaling which is that i can consid",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "75f9edda-e9ef-4983-8421-b05c1beb5f32",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "'ve already written the the data i've made modifications to my directory to say there's a new file that exists here but i haven't yet updated say the disk blocks which are no longer available that kind of thing so i've got multiple rights i need to my disk and it's only when i get to second checkpoint do i kn",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "re journaling which is the ability to make sure that our file system is always in a good state so a file system of course has to keep track of unused disk blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on bad information that if our idea of which disk b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": " blocks so we want to make sure that even if there's a power failure we don't accidentally start relying on bad information that if our idea of which disk blocks were available was incorrect that oh we might start overwriting valid files so xt through xt three implement this idea called journaling which is th",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "997db39c-e2cc-45d8-b756-16ad32dc030c",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "'ve already written the the data i've made modifications to my directory to say there's a new file that exists here but i haven't yet updated say the disk blocks which are no longer available that kind of thing so i've got multiple rights i need to my disk and it's only when i get to second checkpoint do i kn",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "can't create a file in this i've actually gotten i knowed entry and i'm going to have will say ten entries inside my i know directly to the first ten disk blocks used by my file so in otherwise i could hold forty kb there and then i also have inside the i node that this block which holds a table with a thousa",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c277c266-d1b9-4670-92b6-d06d4a8cee3f",
        "lecture": "CS",
        "lecture_num": 28,
        "context": "s not about the indirect and double in triple indirect it's more the fact that if i want to say to the disk hey disc actually would load a particular disk block please then i can pass in a number which is bounded by thirty two bit addressing scheme so i've got two to thirty two possible dis blocks i could req",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c",
        "lecture": "CS",
        "lecture_num": 31,
        "context": "d to do much because i've already got a copy of the data on the disk somewhere right so i've got all this wonderful machinery to page out and page in disk blocks back into ram let's use that for a different purpose wouldn't it be cool if i could have a file like alice perhaps you've read alice through the loo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3d0ca20e-770a-4185-b85c-16363e80fe82",
        "lecture": "CS",
        "lecture_num": 34,
        "context": "is extremely slow so let's kind of go back to our virtual memory discussions when we said hey when we were running low on ram will just page out some disk block and store it to disk when you do that then the latency of a spinning disc extracts a heavy price because the most you can hope most events you can ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "580ae97f-7447-4844-927b-098638c01c95",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "tart reading its contents so let's see what the question here is so uh so we've we've got as far as reading the the file and we want to know how many disk blocks in total have been read again what's assumption assumption the only mounted directory is through directory and all i know data is cached but directo",
        "label": "Use"
      }
    ]
  },
  {
    "text": "tcp connection",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "22302903-5bcb-4262-bd2c-179cf2135ab9",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "oint oh specification request but did we send it over tcp or udp well i'm pretty sure you can guess that tcp is the right answer yes that will make a tcp connection and then will send these bites and will know that these bites will arrive in the same order that we sent them is that the full story well not quite i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "oment where's our connect call this is what this is where we are web browser failed connect failed it try to pack it saying hello i'd like to start a tcp connection but there was no one listening at the other end so if we could not complete the handshake ok so this is where we exited out here we were unable to th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "38d669a5-394b-4826-bb65-0090a3444b01",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "oint oh specification request but did we send it over tcp or udp well i'm pretty sure you can guess that tcp is the right answer yes that will make a tcp connection and then we'll send these bites and will know that these bytes will arrive in the same order that we sent them is that the full story well not quite ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "moment where's our connect call this is what this is where our web browser failed connect failed it sent a packet it saying hello i'd like to start a tcp connection but there was no one listening at the other end so if we could not complete the handshake ok so this is where we exited out here we were unable to th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a60784ac-5129-4d35-8feb-23e8aa752f87",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "oint oh specification request but did we send it over tcp or udp well i'm pretty sure you can guess that tcp is the right answer yes that will make a tcp connection and then will send these bites and will know that these bites will arrive in the same order that we sent them is that the full story well not quite i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a8161152-527c-4bb1-b65e-2d56e013ab7e",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "between the client and the server we actually have to do a handshake ok so there's this handshake so there is a cost there's a time cost to opening a tcp connection meaning that we have to send a packet from the client to the server and some server back to the client before we can even do anything ok so there's a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a8161152-527c-4bb1-b65e-2d56e013ab7e",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "cket from the client to the server and some server back to the client before we can even do anything ok so there's a latency involved with creating a tcp connection secondly it's a good choice if you favor rely reliability reliability over latency so if a packet is slow to arrive tcp can help you here so reliabil",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "594d9f66-6e3e-4370-b43a-cf1498062ce1",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " well because by default sigpipe will simply shut down our application ok the last thing that we're not doing in his code is gracefully shutting down tcp connection so really we should be using shut down to tell the kernel and the server failed event that we finished sending information and finished receiving and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "76432ce8-d67d-4e28-9ec9-d38527969358",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " well because by default sigpipe will simply shut down our application ok the last thing that we're not doing in his code is gracefully shutting down tcp connection so really we should be using shut down to tell the kernel and the server failed event that we finished sending information and finished receiving and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "baaa7fb5-1eff-422c-a5c9-4666f6c80a74",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " well because by default sigpipe will simply shut down our application ok the last thing that we're not doing in his code is gracefully shutting down tcp connection so really we should be using shutdown to tell the kernel and the server at the other end that we finished sending information and finished receiving ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ust by using epoll ok so that's enough of a demo you can see this demo i committed itself lecture code you'll be writing similar kind of code but for tcp connections right bye for now",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b84f2ca-7d13-46c1-8e96-254217cc7d9b",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "on but we don't care we are not listing were just simply simply sending these opening handshake connection take great to meet you i'd like to start a tcp connection please and we can flood the server with millions of these little packets but second and for each one of these connections connection attempts the ker",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2635d0a3-9614-4aa7-9bdc-dca870b27eec",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "hese are the packets however continue to arrive and ideally we would actually give these to the rendering engine so remember that we've multiplex dot tcp connection so now packets that might actually be containing javascript might be containing css s they might be complete and ready we should be able to give thos",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "578b472b-d7f9-455d-b241-95da7faa4f77",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "e service says ok here's the actual what you wanted and his mind type and its status code of two hundred except it's everything 's ok now on the same tcp connection you can image it to say oh great thank you i've looked at the html and i've decided that i want to now request cat dot jpeg and we can get that as we",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9951a684-a841-47e6-8d48-035d4127b468",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "t the nice thing is it was very easy to specify and let's see how it works because it's got a very simple idea which is you want something you make a tcp connection you request it and if you want anything else you make a new tcp connection right so we know that the round trip time is ten milliseconds for for ease",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9951a684-a841-47e6-8d48-035d4127b468",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "because it's got a very simple idea which is you want something you make a tcp connection you request it and if you want anything else you make a new tcp connection right so we know that the round trip time is ten milliseconds for for ease of diagramming up working to just assume then that that is symmetrical but",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9951a684-a841-47e6-8d48-035d4127b468",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ing back so what's the minimum time required to display an image on this page ok so here's the key detail with play with one point oh which means one tcp connection per per request and in fact are probably we're going to have two requests were going to make a first request to say a homepage or web page and that w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a37986ec-bb69-4841-90b8-6c7f50b431f0",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " the other side right so let's have a look at some of the protocol magic with actually supports that first of all we know that when we start making a tcp connection we first initiate one the handshaking needs to occur meaning that we're going to send a few packets backwards and forwards just to initialize that co",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a37986ec-bb69-4841-90b8-6c7f50b431f0",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " be able to reassemble the packets into the correct order and also identify any missing packets so what will do is in talking to the other end of our tcp connection we will keep track of how many bytes we've sent down this stream so far right so we'll have a synchronization number and initially in our first desig",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a37986ec-bb69-4841-90b8-6c7f50b431f0",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "out who sent this to us remember the source port and the destination port are important they comprise part of the information that describes specific tcp connection right so if i want to send some bites back to you i better know which source port you were talking from ok and then we have this all important sequen",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a37986ec-bb69-4841-90b8-6c7f50b431f0",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "n instantaneous send an receipt we've got the network time and the latency is actually compounded when we're setting up this initial handshaking of a tcp connection right so let's return back to some questions here so we understand now the purpose of the sequence number that its main job is to protect us against ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a37986ec-bb69-4841-90b8-6c7f50b431f0",
        "lecture": "CS",
        "lecture_num": 36,
        "context": " fake the server servers reply to say yeah acknowledge your sequence number is zero so today as a security measure to buy to prevent hijacking of the tcp connection we actually randomize this initial sequence number so the the initial value is going to be some two to the one in two thirty two number so malicious ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b9161da0-95b9-41ea-9071-0d954a849a97",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "and there's a lunar console running some kind of tcp server on the lunar base so we'll assume that controlling the lunar base there were making a new tcp connection each time so our first problem is we want to save the astronaut having seconds elapsed between wanting to send a close air lock message and the serve",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11d312f-2dc3-4d38-893d-f28714ba089d",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "uldn't need to care about whether the whole javascript have another libi has been finished loading no we just want to be able to stuff bites into our tcp connection as fast as possible maybe they may not even be complete resources so if you like it's a bit like saying look i've got a kind of conveyor belt here an",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11d312f-2dc3-4d38-893d-f28714ba089d",
        "lecture": "CS",
        "lecture_num": 36,
        "context": "ds we've lifted it to a new level of abstraction as if there's multiple connections to the same server whereas in fact it's all running over a single tcp connection but we are hiding that from the higher part of the web browser so that is http you there's one last kind of really fun feature which is server side p",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7dec3665-e1bb-4bf2-a909-d43c2937b24b",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "imple protocol and it did not support a key feature which is keep alive meaning that if you want a second resource you're going to have to open a new tcp connection which as you know takes time because before we can send anything with tcp first of all you send over a packet with your synchronization number then t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7dec3665-e1bb-4bf2-a909-d43c2937b24b",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "pe now could behaves like walkway in a restaurant where i can have several waiters coming in bringing in different parts of my food all over the same tcp connection so i can ask for multiple things at the same time and they can be delivered piece meal as they ask the kitchen starts to prepare them ok what do we m",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "5bd8420a-ccee-4ff9-b38e-466d0cfca53a",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "lly we get back an ip address great so now we can try to make some different sockets like its ip six sockets so ip four sockets and then start making tcp connections to our web server we know that http runs on port eighty so we haven't specified reports we're going to use a default poor poor eighty so let's conne",
        "label": "Use"
      }
    ]
  },
  {
    "text": "p thread mutex",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "mplete case so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "an do in a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many parameters this was really easy we just take the address or mutex object ok so the definitio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " like eg update the data structure or read from the data structure but i can be sure that if all of my code follows this pattern so after this i call p thread mutex unlock right and then here's the address of my mutex i can be clear that that that only one thread at a time can be accessed in the data structure so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ples we've seen so far would have helped if we had this ability to pause or threats to implement synchronization now is a couple of limitations with rp thread mutex is which we will be able to relax when we look at other synchronization primitives but here's the big one we have to write these things in pairs we h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "to write these things in pairs we have to put the lock and unlock together on the same thread and when we finished we should clean up so we will call p thread mutex destroy right and here's the address of my lock so i want you to think of my variable here and it's not the actual mutex itself more is a bit like a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0f70d1df-7a51-4bea-9a39-589fd7c57802",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "nd that is going to be called a mutex alright so i'll see you in the next video when we start talking about mutex in particular p three music clocks rp thread mutex alright see you then",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "mplete case so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "an do in a detached state which i kind of skipped over condition variables so let's actually go and have a look now at but we care about which is the p thread mutex lock here we go and you'll see it doesn't take that many parameters this was really easy we just take the address or mutex object ok so the definitio",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " like eg update the data structure or read from the data structure but i can be sure that if all of my code follows this pattern so after this i call p thread mutex unlock right and then here's the address of my mutex i can be clear that that that only one thread at a time can be accessed in the data structure so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ples we've seen so far would have helped if we had this ability to pause or threats to implement synchronization now is a couple of limitations with rp thread mutex is which we will be able to relax when we look at other synchronization primitives but here's the big one we have to write these things in pairs we h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "to write these things in pairs we have to put the lock and unlock together on the same thread and when we finished we should clean up so we will call p thread mutex destroy right and here's the address of my lock so i want you to think of my variable here and it's not the actual mutex itself more is a bit like a ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "849095e8-a9e5-4467-8af4-be36e4991af6",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hat is going to be called a mutex alright so i'll see you in the next video when we start talking about new taxes in particular p three music clocks rp thread mutex alright see you then",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b60fb3d4-0600-4074-8432-449ea0067907",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "hat is going to be called a mutex alright so i'll see you in the next video when we start talking about new taxes in particular p three music clocks rp thread mutex alright see you then",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "mplete case so so we should fix that let's make sure that we are writing into two different two different variables right so i promise we start using p thread mutex locks so here we go let's figure out how we can fix this program alright so xm ideas we can try here first of all let's get our self lock will make i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " patriots and they come with four important course here they are initiate lock unlock and destroy right so remember that actually we can skip writing p thread mutex initiative we initialize are available to magic value first alright so my first question for you is which one of these calls will block in other word",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "here is that we forgot to initialize our mutex and so there we have variable is just like a file handle it doesn't actually refer to anything and so rp thread mutex lock call does nothing is a no op we could have discovered that if we'd actually check the return value of rp tape mutex lock so if we were waiting r",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": " key so i'll ok take my lines off key and till i use yeah let's use vim ok so how can do this remember we can do things like by saying ok my mutex is p thread mutex initializer here we go ok so compile it want it again and this time it gets stuck as we hoped it would alright so finally let's fix our code here let",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "nt this well you can see just like i could have p thread threads i can have a mutex thing here it is and here is a condition variable and just like a p thread mutex initializer lips will fix that actually must be an underscore i can initialize things using these magic constants ok so great i can now she start to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "o will put that in a little bit and now if two threads calling current at the same time one of them gets stuck waiting for that mutex so they'll call p thread mutex lock on my mute x variable and the first one to do that continues 'cause that no ones holding the duck great raptor duck releases it when they call u",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "cake how can we do that oh ok easy we will actually not lock there we actually want to lock before we test its value so let's put our mutex lock here p thread mutex lock as the very first thing we're going to do so pthread mutex lock ok grab that duck ok so now sleep sorry not sleep grab the mutex so we can't act",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ly hold on to them for just microseconds at a time just while we say test data structure and then maybe using so ok that looks pretty good we've got rp thread mutex and peter mutex on lock on mutex ok and now let's think about our asked what we doing inside a little loop here ok so we're sleeping will not peace i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "se it's actually not two things is going to do it does three things when you finally wake it up before it returns outta peter condition wait it calls p thread mutex lock ok so that means when it finally continues when it finally goes around in this code it has to meet ex again ok so what does this mean this means",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "that condition is now true so we need a mutex lock to ensure that we are the only person get there can be modified data structure so we end up biting p thread mutex lock cave right so there's the log and then later we unlock it right so the point then is to actually a threat can block and two places it might be b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "w then what if two threads called this is exactly the same time this is not thread safe so i will actually need some kind of lock here so i'll have a p thread mutex lock k right and what else do i want to do well if my counter has not yet reached eight then i want this to bed to go to sleep so let's do that so i'",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "o one else can change it then you better get the lock for the data structure right so up inside here before we do anything we read a kalpi threadlock p thread mutex lock on lock plus i and then when we finished with that we can release it so we might as well release it as soon as possible let's do it right here s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "n when we finished with that we can release it so we might as well release it as soon as possible let's do it right here so will now we can porp call p thread mutex unlock on that same locks are locked plus i ok right you'll notice that we are modifying a different data structure down here so before we do it befo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": " is calling peter condition wait so how can we ensure that the race condition is not a problem here let's let's also put this inside a mutex locks so p thread mutex lock an i want to look on my locks plus i plus one ok so now we can say strong statements about where the code must be in if we have if we are able t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "025c4079-6f2d-496a-bc87-51d078e15f66",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1a077e0a-fca4-4696-851e-cc0eb3ca149a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "eterek condition wait as a better implementation of a barrier alright so in the next video let's talk once more about how we could actually implement p thread mutex lock just by disabling interrupts on the cpu ok bye",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "27f7e6d9-2a1f-419b-b0c5-3ad8dc4064d3",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ally do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "al objects themselves you can think of them like file handles that they actually exist as part of the part of the kernel so that's why i need to call p thread mutex initiate please create an object for me based on store a reference to that inside this memory structure so i've got my two locks now let's see what h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "y structure so i've got my two locks now let's see what happens right so as part of the read i'm going to call read lock ok so i'm just going to call p thread mutex lock and then afterwards petered mutex unlock key and then the right i first of all i'm going to get the right lock then i'm going to get the read lo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ee433b-e79d-4957-9dbc-0d62b0785dbd",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "533db1aa-ad5e-40dd-b819-8b989c89b1f6",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ally do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ally do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "d4eaea6f-874c-4acc-a000-07cdfb9fa35b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ally do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ally do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ally do this in a text editor ok let's go right do i have so if i've got thread one imagine my thread first red make the coda bigger right has called p thread mutex lock k and we're going to say please lock on this first mutex and then after you've done that please lock on this other mutex right so it will do som",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fa389ce6-5fa6-4288-b2a2-949e66af677a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ok so we've kind of talked a little bit about this idea before so it could i implement p thread mutex lock just by disabling interrupts on on the cpu so the idea here is that if my code is running on the cpu if i disable interrupts then i cannot be st",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "s i hope you can see is that we've now we've actually got along way from when we first talked about a kind of a simple synchronization ideas of using p thread mutex lock and unlock ok so my advice to you is see if you can write this implementation from scratch starting with a blank piece of paper if you can congr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "hink of the following so how can we improve it and what's its purpose so it's called acquire and for gravity to fit onto this slide i've said pmt for p thread mutex if this truly was in the code i might say why we doing why do we have this typedef let's just stick with the regular types but anyway so we get two p",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "red ok so i better check that these things are initialized if they don't call patriot mutex initiate the very least we need to use the magic constant p thread mutex initializer ok so let's check that ok what else can we see in our little code review ok so we are using a pizza at mutex lock but we also have this i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": " still got work to do on the d q as well so let's get that sorted so what do we got so far right so looking back over nq yeah it's good that we use a p thread mutex lock we like that so that only one thread at a time can be working in this code but we actually want to stop when we discovered that the queue is fau",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecc913a8-cf8a-4205-b23c-530df9ebc4eb",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "st afterwards we can call our mutex unlock and as usual don't forget to initialize your mutex and you can do that with two ways you could either call p thread mutex initial or you can use that magic value the kind of piv it mutex initializer value either one of those will work ok so right so elastic with a produc",
        "label": "Use"
      }
    ]
  },
  {
    "text": "p thread exit",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "633f10ed-2038-4da2-9855-c3cad245559f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " id better go in the second slot so let's add one and address point arithmetic comes to the rescue rescue and i want to use that trick of just saying p thread exit here so i will never return from maine ok never returns so so exit never happens wait ok so put back around that to mean i'm talking about the c libr",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "662ac3ea-798b-43f9-bf91-290620d22337",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ok so for ways that thread can be terminated right so what do we got so we might have that the thread calls p thread exit we might have that the thread returns from its starting function ok what else so the other way is that a thread could be terminated as if we terminat",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " need to say i'd like to exit please so\u00a0 pthread_exit right so the peace road exit is the last thing your thread will ever do there is no return from p thread exit it's done your cpu causes ok i'm going to wash my hands of this thread i know that there's nothing else is going to happen so p thread exit is a one ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "turn from p thread exit it's done your cpu causes ok i'm going to wash my hands of this thread i know that there's nothing else is going to happen so p thread exit is a one way ticket do not try to execute anymore code after p calling p thread exit right so if i've got my little function let's call it say mine t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "is thread i know that there's nothing else is going to happen so p thread exit is a one way ticket do not try to execute anymore code after p calling p thread exit right so if i've got my little function let's call it say mine to continue that silly idea at some point i wanted to quit so i would call p thread ex",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "thread exit right so if i've got my little function let's call it say mine to continue that silly idea at some point i wanted to quit so i would call p thread exit by the way if you return from that function in other words if there's no more stack frames then that is equivalent of calling p thread exit so i migh",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ould call p thread exit by the way if you return from that function in other words if there's no more stack frames then that is equivalent of calling p thread exit so i might have some code in here this might call other functions called air from that cause g and that cause premier fanatic or something else etc i",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "tions called air from that cause g and that cause premier fanatic or something else etc it opens files whatever but eventually if any of these called p thread exit then all we return from here that thread is done ok so there's a bit of a kind of mind moment here that i want you to realize that now we write code ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "ever the one exciting piece of news is when you return from maine that kills that's the end of your process that's the equivalent to calling exit not p thread exit but process exit and when we do that everything disappears all of your other threads disappear ok so i think it's time for a demo soon but first of a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "read and detangle this ok so let's have a look at what the manpage tells us and we'll see the following kind of thing so let me for example take care p thread exit and type it into man page ok so man p thread x copy so it creates do that one ok and we see the following ok right and we can read about this and we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " so this is the value would like to pass in ok and the return value that is going to be the exit value from the function so if the thread never calls p thread exit its return value will be the threads exit value ok so let's go and actually kind of demos demonstrate this now right so i need a little bit of a prog",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " we do ok we got two options here they're both equivalent i can either return something from here so i could return say null alternatively i can call p thread exit now so they are equivalent statements nothing happens after this point and it's important to bear in mind that anything else any other threads that a",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7466bd20-538e-4aeb-b004-1fa8fb518f9f",
        "lecture": "CS",
        "lecture_num": 11,
        "context": " a different stack with ok so different part of memory that takes a different argument an runs to a different sort of execution is going to end up in p thread exit so just kind of prove that these variables are living in different places let's actually print out the address of my local variable here so my messag",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "83887d4e-f5b2-4f94-9e3f-4d3c19d88dd9",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "isappear as well because now we don't have any memory for them to run on versus a thread you seen how we create it and then destroy it through either p thread exit or by returning from the function i'll just say the starting starting function from returning from the starting function where basically where it ori",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aa01a980-f756-4c1c-87f6-abf1aed24f98",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "thread now is that thread happened to be the very last thread then then the process will finish uh ok so that gives us a reason sometimes for calling p thread exit inside your main method is a way to be lazy let's let's go have a look at this so if i had a program that started many many threads are case so imagi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "aa01a980-f756-4c1c-87f6-abf1aed24f98",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "tarted many many threads here i could write p thread join and wait for them all to finish i could put that inside a loop but an alternative is to say p thread exit are on the main thread right so now this return here will never happen sir we will never actually remember is equivalent to calling exit so given tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d80efb9d-96a2-4cc0-ad4f-a9049155313e",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "thread now is that thread happened to be the very last thread then then the process will finish uh ok so that gives us a reason sometimes for calling p thread exit inside your main method is a way to be lazy let's let's go have a look at this so if i had a program that started many many threads are case so imagi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d80efb9d-96a2-4cc0-ad4f-a9049155313e",
        "lecture": "CS",
        "lecture_num": 11,
        "context": "tarted many many threads here i could write p thread join and wait for them all to finish i could put that inside a loop but an alternative is to say p thread exit are on the main thread right so now this return here will never happen sir we will never actually remember is equivalent to calling exit so given tha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "74e03522-c6e8-4e59-84ba-95a62ce5f3fd",
        "lecture": "CS",
        "lecture_num": 12,
        "context": " variable again that void pointer would have taken that address ok so great we're starting three threads and then after that loop we're going to call p thread exit and as you know what does p thread exit do? it's the point of no return it's the one way ticket to oblivion for my poor little thread and in this cas",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "74e03522-c6e8-4e59-84ba-95a62ce5f3fd",
        "lecture": "CS",
        "lecture_num": 12,
        "context": "have taken that address ok so great we're starting three threads and then after that loop we're going to call p thread exit and as you know what does p thread exit do? it's the point of no return it's the one way ticket to oblivion for my poor little thread and in this case i'm doing it on the main thread which ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7515c79a-82da-4b96-90bc-a6cbb5ee3e36",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "for these stories to complete yeah the other way would be just in my main thread if that's the only thing i wanted this program to do is i could call p thread exit and the the words i'm asking my main thread to not do anymore work ok so i went to say pizza exit null and that's the end of it for my main thread ok",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "on all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "on all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "on all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "on all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "on all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "on all of my thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that we never returned from maine so i could call p thread exit here key right so great we've implemented that now actually let's have to think about how we can implement the firework right so what does r firework",
        "label": "Use"
      }
    ]
  },
  {
    "text": "p thread condition",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "right ok so great we've put thread to sleep by calling p thread condition wait and now is happily dozing inside that condition variable right at some point in the future on a different thread we now know that it's time to w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "of our our rooms that it sleeping in so we better pass the condition variable that our thread is sleeping in ok and there's one other option which is p thread conditioned broadcast so the difference is that sometimes i actually send a whole load of threads to sleep inside my condition variable and if i call condition",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": " of now sketch out how we can use this so rather than actually just saying sleep for a second let's use our condition variables so instead let's call p thread condition wait there we go and we know that does the same thing but others posted just sleeping for a second my thread is gonna sleep like sleeping beauty here",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "et we forgot to wake up any sleeping threads in here so we've modified the value of cakes so we could wake up all threats so for example we could say p thread condition forecast if we wanted to wake up all threats that might be sleeping inside the thread condition wait or we could call p thread conditions signal if w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "079e15d0-be66-4f0c-a3b4-bb9079ea8eea",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "we could say p thread condition forecast if we wanted to wake up all threats that might be sleeping inside the thread condition wait or we could call p thread conditions signal if we wanted to just wake up one of them and which one gets working up this arbitrary ok right what else can i say about this well it could b",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ible test because we're holding the lock if all of our code uses a lot no one else will be able to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "then maybe we could call pizza hut conditions signal as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "lright so what about the blocking all right so we need something like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code loo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hat code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ible test because we're holding the lock if all of our code uses a lot no one else will be able to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "then maybe we could call pizza hut conditions signal as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "lright so what about the blocking all right so we need something like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code loo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hat code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "55fa9033-494f-4ca8-a264-154a981f06db",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "on variable so it will create one of those a little bit but after you've got one or or you need to do is your thread should call p thread p for short p thread condition wait ok we're going to skip on some details that make it a little bit more complicated but i'm going to write it just like this for now there's pass ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ible test because we're holding the lock if all of our code uses a lot no one else will be able to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "then maybe we could call pizza hut conditions signal as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "lright so what about the blocking all right so we need something like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code loo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hat code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "ible test because we're holding the lock if all of our code uses a lot no one else will be able to do this fortunately for us we're going to be using p thread condition wait and that will release the lock whilst it's blocking ok so here's our condition variable that were going to sleep in and watched was sleeping unl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "then maybe we could call pizza hut conditions signal as well but i would have to be a lot more careful about reasoning about that so i'm going to use p thread condition broadcast just in case there were multiple threads gone to sleep we want to make sure that if we're only going to wake up in that transition that we ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "lright so what about the blocking all right so we need something like look if my value of n is zero then go to sleep ok right so i'm going to have my p thread conditioned wait ok did you do today and here is my condition variable i'd like to sleep in and don't forget that mutex lock ok what is the mutex lock code loo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "hat code in as well about this kind of dark published right so let's in here wake up any thread switch might be sleeping on the condition variable so p thread condition broadcast right and kate so here's a condition variable all right and again we could reason about this we could say if there's if there's any locks i",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ay ok so let's think about how we can now turn this into something which is thread safe we don't want to sleep for a bit this is where we should call p thread conditioned weight case so let's put that in there kay right and let's sleep on a particular condition variable associated with this particular data structure ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "ditional logic in here or i could just say hey bring the building the fire bell and let them go round there loop so the latest code i can write with bp thread condition broadcast and then if there's anybody sleeping inside this condition variable if they're blocked let's wake them up and send them around there while ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "re just wake up somebody who might care and simply we need to do that down here where after we've dated the i plus once data structure we better call p thread condition broadcast ok so enough of sketching this out let's actually have a look at some code ok and here is my code you'll see that it's actually littered wi",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "can see my right my poor little writer even though it arrives at nine o'clock in the morning here never gets a chance to run always stuck inside this p thread condition wait there's never a time when reading gets down down to zero so everybody continue because my website so popular continues to see yesterday's conten",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "63aafada-b118-41b8-a266-44bcb09d9eca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "at want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "66f7d2a0-017d-4176-a5b6-a307cc73a392",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "at want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ae276754-6e15-40ee-81f0-29994714b47a",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "at want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b933e096-b63b-4b20-8715-01984d323c7d",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "at want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "at want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "at want to run have to also require it so all of these lines of code can only be run by one thread at a time if the threads have gone to sleep inside p thread condition wait there only allowed to escape out of that after they reacquired the mutex log so that's the key idea that only one third of the time can be runni",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": " calling the writer so so that's i could do that but if i wanted to not think so hard and just make my code tiny bit less efficient i just could call p thread conditioned broadcast on all other writers so let's wake up all of those and one of those vitus will win and continue and the others will wake up but then they",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "equal to sixteen so let's fix this look if i've got sixteen items inside my queue right now then let me send this thread to sleep through our call my p thread condition there we go caper condition wait all right so we're only using one condition variable if i was to make this code more performance i would consider us",
        "label": "Use"
      }
    ]
  },
  {
    "text": "resource allocation graph",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "e that assume processes require locks in the order specified and really sources resources only when finished ok so we're going to use what's called a resource allocation graph to determine if and when there is deadlock so we could sketch out the order in which processes or obtain these locks and there's a possible order may",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "to up process is arbitrary right so it's not the same kind of well defined simply that it will get it at some point ok right so how do we write these resource allocation graphs well first of all let's write down our resources of different types so here we go right i've got different resources down here here's my resource of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ide looking at this box can i really want this but i'm being forced to wait because process one has exclusive access ok so that's the beginnings of a resource allocation graph or rag right and you can see the process to cannot continue right now it doesn't have everything it needs and we can actually say oh look it's stuck ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ecret source here's the most important part of this lecture because now i've shown you that we can simulate deadlock we could see it occur inside the resource allocation graph but we actually want to prevent it here's the secret let's make sure that our all of our threads or processes always require resources in the same or",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "214ce85d-efea-4e30-9831-390614fc2683",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ur resource be so it's stuck it's in deadlock and process for is also in deadlock because it's never going to get resource d as well ok so that's how resource allocation graphs can inform us as to why up machine is in deadlock we've simulated it just by kind of these kind of paper based examples but i hope you can imagine t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7fdcfa9d-8d8a-4615-9be7-3c2492321893",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "inue and there is no deadlock because of the ordering in which this occured an because we never set up a circle or wait in the wait for graph in this resource allocation graph right ok so what about the next one ok so his question is going to be a question full so i guess we look for should read a but this was a question fl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b7f1de1e-a1ea-4bb5-9459-de401bd7f1ab",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ck actually occur that's a great question sir to answer that we actually need to think about the weather we've actually got a circular wait inside of resource allocation graph and that's going to be the subject of our next next little video and ultimately i wanted to realize that even if you identify from the code that dead",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b7f1de1e-a1ea-4bb5-9459-de401bd7f1ab",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "eadlock canon can say one percent or point one or point zero one percent of the time right so in the next video and let's actually stand attention to resource allocation graphs by",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bfc28ac1-7f97-42f4-ae46-fb91930b68f6",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "inue and there is no deadlock because of the ordering in which this occured an because we never set up a circle or wait in the wait for graph in this resource allocation graph right ok so what about the next one ok so his question is going to be a question full so i guess we look for should read a but this was a question fl",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "e that assume processes require locks in the order specified and really sources resources only when finished ok so we're going to use what's called a resource allocation graph to determine if and when there is deadlock so we could sketch out the order in which processes or obtain these locks and there's a possible order may",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "to up process is arbitrary right so it's not the same kind of well defined simply that it will get it at some point ok right so how do we write these resource allocation graphs well first of all let's write down our resources of different types so here we go right i've got different resources down here here's my resource of",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ide looking at this box can i really want this but i'm being forced to wait because process one has exclusive access ok so that's the beginnings of a resource allocation graph or rag right and you can see the process to cannot continue right now it doesn't have everything it needs and we can actually say oh look it's stuck ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ecret source here's the most important part of this lecture because now i've shown you that we can simulate deadlock we could see it occur inside the resource allocation graph but we actually want to prevent it here's the secret let's make sure that our all of our threads or processes always require resources in the same or",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1440787d-bb97-4558-b85b-8aa384d86ede",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "il we get back to p r p one ok so this is our circular wait or cycle in the wait for graph and the process or thread wait for graph also known as the resource allocation graph so let me write that out carefully resource allocation graph ok right and the next one a resource can be released only voluntarily by the press is ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1440787d-bb97-4558-b85b-8aa384d86ede",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "r cycle in the wait for graph and the process or thread wait for graph also known as the resource allocation graph so let me write that out carefully resource allocation graph ok right and the next one a resource can be released only voluntarily by the press is holding it after that process is completed this task and in oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "714fd6aa-ef81-4bbb-bc38-fac32ba091c6",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ething up an what did we miss what was the last one that we need here ok so we i'll give you a clue right it's the cycle in the wait for graph or the resource allocation graph so how can we prevent this well i gave you a big general clue in a previous lecture we talked about the resource allocation graphs can remember what ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "714fd6aa-ef81-4bbb-bc38-fac32ba091c6",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "it for graph or the resource allocation graph so how can we prevent this well i gave you a big general clue in a previous lecture we talked about the resource allocation graphs can remember what what we did so here's the big idea let's let's i'll put it a little asterisk\u00a0this is an important one is involved here we go let's",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "84be7473-dcd6-496d-9ec9-c463acb081d2",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "il we get back to p r p one ok so this is our circular wait or cycle in the wait for graph and the process or thread wait for graph also known as the resource allocation graph so let me write that out carefully resource allocation graph ok right and the next one a resource can be released only voluntarily by the press is ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "84be7473-dcd6-496d-9ec9-c463acb081d2",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "r cycle in the wait for graph and the process or thread wait for graph also known as the resource allocation graph so let me write that out carefully resource allocation graph ok right and the next one a resource can be released only voluntarily by the press is holding it after that process is completed this task and in oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8f1b71ff-82be-442b-835a-49c8714f9776",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "il we get back to p r p one ok so this is our circular wait or cycle in the wait for graph and the process or thread wait for graph also known as the resource allocation graph so let me write that out carefully resource allocation graph ok right and the next one a resource can be released only voluntarily by the press is ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8f1b71ff-82be-442b-835a-49c8714f9776",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "r cycle in the wait for graph and the process or thread wait for graph also known as the resource allocation graph so let me write that out carefully resource allocation graph ok right and the next one a resource can be released only voluntarily by the press is holding it after that process is completed this task and in oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c62f6568-fa2b-4be3-9e27-5e119359489e",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "il we get back to p r p one ok so this is our circular wait or cycle in the wait for graph and the process or thread wait for graph also known as the resource allocation graph so let me write that out carefully resource allocation graph ok right and the next one a resource can be released only voluntarily by the press is ho",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "c62f6568-fa2b-4be3-9e27-5e119359489e",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "r cycle in the wait for graph and the process or thread wait for graph also known as the resource allocation graph so let me write that out carefully resource allocation graph ok right and the next one a resource can be released only voluntarily by the press is holding it after that process is completed this task and in oth",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "talked about deadlock we have those four necessary and sufficient conditions to coffman conditions and one of them was that if we have a cycle in the resource allocation graph then log is possible so this code is a stepping stone to making sure that we can't get cycles why because we are going to acquire mutex locks always ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f11e4d89-fc04-4700-9bde-fecbb79a9ada",
        "lecture": "CS",
        "lecture_num": 21,
        "context": "ee that deadlock is impossible right so providing always we get our mutex locks with the smallest first we here with impossible to get a cycle in the resource allocation graph alright so that's the purpose of this code you can invent a similar ideas but often if you got pointers just use the pointer value as as a way to ord",
        "label": "Use"
      }
    ]
  },
  {
    "text": "particular file descriptor",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "t when we call printf(), fprintf(), and fread(), fwrite(), etc... underneath it all we're \"talking to the kernel to say \"\"hey, i want to write to a\" \"particular file descriptor.\"\" ok so here's my file descriptor\" and that is typically a small number say 0, 1, or 2 for standard in, standard out, and standard error and then if",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7c19bcb8-2e74-423d-94b8-77b2b5ccb983",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "923b48d1-82c9-4c57-9d23-3c0a31dd37d0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": " read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from one particular file descriptor and then try to write those bytes somewhere else to another file descriptor fd two over here if i then check if errno zero or not then i can't actual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1020a6c-61f2-4b16-b8a8-b2f4b04242c5",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b96e8ea2-f596-4b5a-807e-4646d78cc7a0",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "bbb895a1-cba7-4548-8727-a436ca271b72",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "read the man pages to learn more about that but it's never reset back to zero so if i had a whole lot of calls let's say that i try to read from warm particular file descriptor and then try to write those bites somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can't actu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "wo ways two things to know about this first of all there's shutdown which we can use to say ok i don't want to send or receive any more bites on this particular file descriptor so i'm going to say ok here's my socket fd and then i can shut down that socket for either reading or writing or both so i got a choice there and wha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b113e839-a5aa-4be6-89f0-89eb1c0dff1a",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "wo ways two things to know about this first of all there's shutdown which we can use to say ok i don't want to send or receive any more bytes on this particular file descriptor so i'm going to say ok here's my socket fd and then i can shut down that socket for either reading or writing or both so i got a choice there and wha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e471cd5f-b9e7-4738-8b65-d975365f4c4c",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "wo ways two things to know about this first of all there's shutdown which we can use to say ok i don't want to send or receive any more bites on this particular file descriptor so i'm going to say ok here's my socket fd and then i can shut down that socket for either reading or writing or both so i got a choice there and wha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "51cddab2-570c-440f-8b14-9adb4a3cbf88",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "f our connections are we using this file descriptive number four why because we remember to close it down each time so the kernels able to reuse that particular file descriptor number if we forgot to close it down then eventually we would fail and accept would would not be able to give us a valid file script anymore so our w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8485219d-b168-4bd7-a966-b4688125a726",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "of our connections are reusing this file descriptive number four why because we remember to close it down each time so the kernels able to reuse that particular file descriptor number if we forgot to close it down then eventually we would fail and accept would would not be able to give us a valid file descriptor anymore so o",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e99e7c6d-cc07-4a0f-afd1-f6e775951990",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ut events where data has arrived by the way this data over here that is for user data for us to be able to easily associate a particular event with a particular file descriptor but we could also please set of pointers as well so we set this up for both file script awarded five script two and now we can start listing right so",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": " level has been filled up it's time to me to say crates and bites avoid for me let me pull them out so presumably when i do that the ability for that particular file descriptor to give me more bites it's going to drop down to zero again meaning i'm sorry there's no more bikes available right now ok but the way to epoll can w",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "use if we just ignored it if we didn't actually do anything about that far descriptor and then call epoll again it's not going to complain about that particular file descriptor is not going to include that in the result until the day that the bath is empty for some reason right it goes below goes back down to the uninteresti",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ut this event only once then you can ensure that a single thread that called epoll is assigned that duty is assigned the problem of working with that particular file descriptor because if other threads now call epoll they're not going to be told about it they're not going to be not decide this file descriptor a task because ",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "b37a29fd-55de-4893-bb2e-ef162944f9fd",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "hey i'm going to give you a file descriptor that i don't want you to care about anymore so don't wake up don't tell me events about something on that particular file descriptor right so why might that be ok here's some his some examples one it could simply be you finished talking to that client perhaps you have uploaded enou",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b37a29fd-55de-4893-bb2e-ef162944f9fd",
        "lecture": "CS",
        "lecture_num": 38,
        "context": "re scripters so again here's another kind of example of saying ok if i know how to write this code i can say stop listening for event changes on this particular file descriptor where you don't need to listen so intently in order to make sure we get everything done right so in the next video let's talk about traffic filtering",
        "label": "Use"
      }
    ]
  },
  {
    "text": "peter mutex lock",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "0313c4b8-b3cb-47c4-893c-bcb27ce990a3",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "value was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " same idea with this this mutex lock its represents a mutex but it's not the attribute x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ther thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to wait it's called preferred mutex lock is blocked so right so we know for sure that this coal here either continues if no one els",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1e783a67-b8be-40c2-9441-09e0f8e0a1f8",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "value was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": " same idea with this this mutex lock its represents a mutex but it's not the attribute x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "x itself ok see what else do you want to say right so you call peter mutex lock and we get to continue great what happens if another thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "34f5f15f-13e2-472c-a71d-7653231e61e9",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "ther thread now calls peter mutex lock on the same object on the same mutex right so we can imagine that we've got this global variable here it calls peter mutex lock guess what it has to wait it's called preferred mutex lock is blocked so right so we know for sure that this coal here either continues if no one els",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "fbf50bc7-ae3a-4768-be0b-502c42ec38cc",
        "lecture": "CS",
        "lecture_num": 13,
        "context": "value was cached or the good news actually is depleted mutex lock takes care of that as well for us that if this cpu supports some caching mechanisms peter mutex lock will ensure that that values are flushed out to main memory if any other cpu wants to read these magnets so technically it's called memory fence what",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "1df72ccf-c3d4-4939-945b-2a60fbbe7490",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ou grab that duck unless you have acquired the mutex right so i think we've answered nearly all of these questions what about this one why is it that peter mutex lock does not block ok this one should be easy for you to answer we've already seen it that was our case when thread one called lock and no one had the du",
        "label": "Intro"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "ame thread well let's imagine for a moment that thread two is started up ok so thread two gets his own value of i and very soon we'll get to the same peter mutex lock all right so what does it do it goes to grab the duck but the duck has been taken the mutex lock has already been acquired so it will be blocked righ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "798dfc68-4c27-4294-b5d2-be44d2f85516",
        "lecture": "CS",
        "lecture_num": 14,
        "context": "that because what destroyed one do well it carries on so it increments the global counter and then goes around the loop again at which point it calls peter mutex lock and blocks forever because that mutex has already been acquired now you and i know that that mutex ashley held by thread one but we haven't set we ha",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "itely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "itely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "itely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "itely going to need mutex lock soapy said mutex lock and as luck would have it i've already got my variables up here ready to go right so let me call peter mutex lock on my mutex there we go so that might block for a short while if someone else is currently acquired the lock which is why a later on we are going to ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": " multiple threats ok we're going to have two threads trying to eat cookies at the same time ok but will protect our data structure by the use of this peter mutex lock ok we need to weigh to add things to a data structure and so here is my little add cookie notice that i've got i protected my change the data structu",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "04829254-3696-4583-a42b-bd35a938c624",
        "lecture": "CS",
        "lecture_num": 16,
        "context": "ie so if you type nine or control d then we're going to stop ok how should we stop what do you think about the following so we will first of all call peter mutex lock and we do that to ensure that actually there's something special about peter text lock which is not only does it acquiring musics it ensures that if ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "ppear i'd actually like them to get stuck inside condition wait ok that we're actually going to send their thread to sleep so making threads block on peter mutex lock for extended periods of time will work but it's not best practices ok partly because it might spin the cpu for a little while which is in our case un",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "e that's looking at it and say ok great now process to has everything it needs it can continue so if we were writing code you can imagine our call to peter mutex lock has finally completed or access to the reader writer data structures finally given 's ability to read that so great we can continue right so eventual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1b746b25-23e0-4c94-9d7c-de89b9b30c5a",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "re resources in the same order so will have a meeting with all of our programmers and say look here's the things which you are saying a quiet calling peter mutex lock on abc and d we just need you to always acquire them in agreed apon order so for example if you're going to acquire a lock in order to access a then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ec98de0c-eb65-40d6-8b08-a77fdf9433ff",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "e that's looking at it and say ok great now process to has everything it needs it can continue so if we were writing code you can imagine our call to peter mutex lock has finally completed or access to the reader writer data structures finally given 's ability to read that so great we can continue right so eventual",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "ecbcb30c-3c7e-4d14-b443-7fe6e775c690",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "re resources in the same order so will have a meeting with all of our programmers and say look here's the things which you are saying a quiet calling peter mutex lock on abc and d we just need you to always acquire them in agreed apon order so for example if you're going to acquire a lock in order to access a then ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "cb9f0e61-d268-4cde-b498-ea76b68c9604",
        "lecture": "CS",
        "lecture_num": 22,
        "context": "'re going to change variables like count again the plus plus it's not thread safe so again that needs to be protected by a lock ok so let's move this peter mutex lock down ok will do that they're very end also we actually need to block we actually need to pause if my buffer is completely full so that seems to be th",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "0fe42c84-6a79-4581-94d8-ef1fae922e78",
        "lecture": "CS",
        "lecture_num": 39,
        "context": "all the performance characteristics of a modern system from the compiler to the cpu were working against you which is why the implementation of saint peter mutex lock not only has to kind of implement code like this or similar code like this it actually will have a special cpu primitives are instructions to say thi",
        "label": "Use"
      }
    ]
  },
  {
    "text": "p threat condition",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "he files and everything else for us ok so how do we wake up a threat it's easy you just need to call my other one of two things so you can say either p threat conditions signal kate and that will wake up a thread inside one of our our rooms that it sleeping in so we better pass the condition variable that our thread ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "160c1e41-f1c4-4ca1-9264-636d986cb0a1",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "to this onto my way it could be that there's another thread waiting to pop things from the data structure so after i've modified it i'm going to call p threat condition broadcast ok and say hey everybody wake up all right and there we go so if there happens to be someone sleeping in on this condition variable because",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "37ef3efe-3f33-4f02-bfee-552b68beac1b",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "to this onto my way it could be that there's another thread waiting to pop things from the data structure so after i've modified it i'm going to call p threat condition broadcast ok and say hey everybody wake up all right and there we go so if there happens to be someone sleeping in on this condition variable because",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "682ea22a-c797-434b-a768-f7e9a7769709",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "to this onto my way it could be that there's another thread waiting to pop things from the data structure so after i've modified it i'm going to call p threat condition broadcast ok and say hey everybody wake up all right and there we go so if there happens to be someone sleeping in on this condition variable because",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac",
        "lecture": "CS",
        "lecture_num": 15,
        "context": "to this onto my way it could be that there's another thread waiting to pop things from the data structure so after i've modified it i'm going to call p threat condition broadcast ok and say hey everybody wake up all right and there we go so if there happens to be someone sleeping in on this condition variable because",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "48e97dd2-4492-4527-bff9-3e3f957a074b",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "d here again i'm just going to use some constants i'm not going to make it a very general barrier because i just want to think about how we can use a p threat condition wait call to implement my barrier ok so the idea that look i've got this shared variable here is just a global variable an multiple threads are going",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2",
        "lecture": "CS",
        "lecture_num": 17,
        "context": "and send them around there while loop again so we would wake anybody up inside cvs plus index ok right so remember what that does we've always write rp threat condition wait inside a little while loop so they will eventually in the next few ns be able to escape out of there and when they escape they have the mutex lo",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2b24ffa8-c092-48c4-af51-3e0e88ff8792",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "f run its activity or run the code and of course debugging deadlock is tricky it's often there as pairs that i could a thread maybe it's stuck inside p threat condition wait and we don't know why why that event doesn't hasn't hasn't fired hasn't occured ok so we've got this general definition of deadlock now actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "a1ef4c45-f42c-44c7-9792-60bae135ff0e",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "f run its activity or run the code and of course debugging deadlock is tricky it's often there as pairs that i could a thread maybe it's stuck inside p threat condition wait and we don't know why why that event doesn't hasn't hasn't fired hasn't occured ok so we've got this general definition of deadlock now actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "f run its activity or run the code and of course debugging deadlock is tricky it's often there as pairs that i could a thread maybe it's stuck inside p threat condition wait and we don't know why why that event doesn't hasn't hasn't fired hasn't occured ok so we've got this general definition of deadlock now actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "d66b6d30-efd2-4f1e-976b-f89adad7606b",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "f run its activity or run the code and of course debugging deadlock is tricky it's often there as pairs that i could a thread maybe it's stuck inside p threat condition wait and we don't know why why that event doesn't hasn't hasn't fired hasn't occured ok so we've got this general definition of deadlock now actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e1d6897e-2542-433c-804f-21a23a9bd0ee",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "f run its activity or run the code and of course debugging deadlock is tricky it's often there as pairs that i could a thread maybe it's stuck inside p threat condition wait and we don't know why why that event doesn't hasn't hasn't fired hasn't occured ok so we've got this general definition of deadlock now actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "e50d3496-12be-490f-aada-1211850d9275",
        "lecture": "CS",
        "lecture_num": 18,
        "context": "f run its activity or run the code and of course debugging deadlock is tricky it's often there as pairs that i could a thread maybe it's stuck inside p threat condition wait and we don't know why why that event doesn't hasn't hasn't fired hasn't occured ok so we've got this general definition of deadlock now actually",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "excuse me will be when there's no one left actually using the data structure for either reading all writing ok otherwise my new thread goes into this p threat condition wait ok so knew writers yes they're going to get priority as students we have arrived on the scene the reed has to wait but only only one of them is ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "w dropped to zero notice i said writers not writing then it's time to wake up the all of the readers so if writers is now zero then i'm going to call p threat conditions signal ok and who do i want to signal the meters ok where are they there inside percent r c v ok otherwise if there is a writer that still around le",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "4cdc54a1-22f0-4dcc-b071-570ac31d7e39",
        "lecture": "CS",
        "lecture_num": 19,
        "context": "ers ok where are they there inside percent r c v ok otherwise if there is a writer that still around let me wake up just one writer ok so let me call p threat conditions signal and they can then continue and change the data structure so here is the coffee shop there working at waiting app so the writer condition avai",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "57935b87-3626-4a44-93bd-a923f9a0ba9d",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ccur for example because i really do have multiple cpus running on different pieces of silicon then what will happen is rather than blocking forever rp threat condition variable instead will suffer a spurious wake up to say i'm sorry maybe i missed a single maybe it just happened so that is why we always need to writ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "72f91574-339a-40e1-9278-a3dc18f62a35",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ccur for example because i really do have multiple cpus running on different pieces of silicon then what will happen is rather than blocking forever rp threat condition variable instead will suffer a spurious wake up to say i'm sorry maybe i missed a single maybe it just happened so that is why we always need to writ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9a9a10a2-6a75-46c5-b677-38e5d3684981",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ccur for example because i really do have multiple cpus running on different pieces of silicon then what will happen is rather than blocking forever rp threat condition variable instead will suffer a spurious wake up to say i'm sorry maybe i missed a single maybe it just happened so that is why we always need to writ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "f54b05e1-9f81-4fe4-a600-991b1977d3fc",
        "lecture": "CS",
        "lecture_num": 20,
        "context": "ccur for example because i really do have multiple cpus running on different pieces of silicon then what will happen is rather than blocking forever rp threat condition variable instead will suffer a spurious wake up to say i'm sorry maybe i missed a signal maybe it just happened so that is why we always need to writ",
        "label": "Use"
      }
    ]
  },
  {
    "text": "ip four address",
    "contexts": [
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "e set a network packet typically will have a source port and destination port as well so let me complete my little diagram in here ok so i've got the ip four address which is going to be made of eight octets for both the source and the destination and then i'm going to need a port number as well for the source and",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "729584e4-abeb-48b5-8aa2-e4cd25428f98",
        "lecture": "CS",
        "lecture_num": 24,
        "context": "o some basic ideas from udp we talked about ip four it's the most common kind of packet you'll see today on the internet we talked about this special ip four address and we talked about the fact that when a packet arrives we're going to need a port number to say where it should go we talked about privileged ports ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "2a2f8631-b18e-4323-90d0-8f71927323fc",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "nderscore inet six there's also i net any if you would say i don't care about which of these so today we're going to only care about trying to get an ip four address right and what kind of socket type well this is where we can say i actually want either udp or tcp and the constants here either d gram for for a dat",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "3f559120-de38-4bc0-bcf2-95f88505b2a5",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "et underscore six there's also inet_any if you want to say i don't care about which of these so today we're going to only care about trying to get an ip four address right and what kind of socket type well this is where we can say i actually want either udp or tcp and the constants here either d gram for a datagra",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "7c96669f-3968-4af3-b08d-c28d80ecf477",
        "lecture": "CS",
        "lecture_num": 25,
        "context": "ly ip four but ip six as well and you might do this because you actually want to start creating new servers and yeah you're unable to get an existing ip four address ok so that's a little bit about the open systems interconnection model or the osi model that we're not going to delve into this in detail inside cs t",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "t if you want to write robust code then realize that there may be more than one way to connect to the server for example perhaps the server offers an ip four address and an ip six address so you might try both you might try one after another or you might create a whole lot of threads and do it asynchronously and s",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "1aec58de-6b0d-4068-a042-acdc8954bcda",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "code how do we specify that i'd like an ip for ip six address answer just use this constant constant for the address family if you truly want just an ip four address then you can just say underscore on it for ip4 before ok that's colored out though because hey let's try ip six right now speak if ip six addresses h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": " network to host long as well so this is long which is thirty two bits back from the day when lungs were thirty two bits and this is used to describe ip four addresses as well so if you wanted a numeric version of an ip four address and needed to convert it from the network implementation to number which is unders",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "21a18c82-8c09-4c06-aa5a-1430e944cfd4",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "its back from the day when lungs were thirty two bits and this is used to describe ip four addresses as well so if you wanted a numeric version of an ip four address and needed to convert it from the network implementation to number which is understood why we assume you'll be using this as well ok so using these c",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "ou want to write robust code then realize that there may be more than one way to connect to the server for example perhaps the server upper offers an ip four address and an ip six address so you might try both you might try one after another all you might create a whole lot of threads and do it asynchronously and ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "fc1cbfed-4866-4545-9574-b49c350aa1aa",
        "lecture": "CS",
        "lecture_num": 26,
        "context": "e how do we specify that i'd like an ip for ip six address answer just use this constant constant for the address family if you truly want to just an ip four address then you can just say underscore on it for i p i before ok that's colored out there because he let's try ip six right now speak if ip six addresses h",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "00dd4389-2bac-4f00-8dcd-785c286c3d68",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "ach two and for a long were always four bytes and they integers varied between two bytes and four bytes\u00a0 so this was used for when we need to convert ip four addresses as well ok so right next review is what are the four calls we need to set up a server right so hopefully you didn't say get address info no that's ",
        "label": "Use"
      },
      {
        "course": "CS_241",
        "transcription": "9d6762ba-3f90-4302-bebe-53ad562322b2",
        "lecture": "CS",
        "lecture_num": 33,
        "context": "w i can write that as many clients as possible so we now know how to set up our socket remember we want a socket passive socket we're going to listen ip four address today and here's the new bit of code though just talking about we need set socket opt to be able to say you know what if i restart my process i want ",
        "label": "Use"
      }
    ]
  }
]