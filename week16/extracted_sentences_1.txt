sentence	source	start
this section is a short review of system architecture topics that you’ll need for system programming.	this section 	13
hyperthreading is a new technology and is in no way shape or form multithreading.	hyperthreading 	15
git is a version control system.	git 	4
so what do you need to know is a few things.	so what do you need to know 	28
git is a decentralized version control system, meaning that you’ll need to get a repository onto your vm.	git 	4
vim is a text editor and a unix-like utility.	vim 	4
a lot of people say that emacs is a powerful operating system lacking a decent text editor.	a lot of people say that emacs 	31
for example, if your data structure is a doubly-linked list, you can do something like assert(node == node->next->prev) to assert that the next node has a pointer to the current node.	for example, if your data structure 	36
valgrind is a suite of tools designed to provide debugging and profiling tools to make your programs more correct and detect some runtime issues [4].	valgrind 	9
valgrind is a effective tool to check for errors at runtime.	valgrind 	9
threadsanitizer is a tool from google, built into clang and gcc, to help you detect race conditions in your code [5].	threadsanitizer 	16
gdb is a program that helps you track down errors by interactively debugging them [6].	gdb 	4
setting breakpoints programmatically a breakpoint is a line of code where you want the execution to stop and give control back to the debugger.	setting breakpoints programmatically a breakpoint 	50
a shell is a programming language that is running inside your terminal.	a shell 	8
the undefined behavior sanitizer is a wonderful tool provided by the llvm project.	the undefined behavior sanitizer 	33
puts(" work things out on your own."); fprintf(stdout,"this homework is a stepping stone to all future assignments.\n"); char p[] = "so, you will want to clear up any confusions or misconceptions.\n"; write(1, p, strlen(p) ); char buffer[1024]; sprintf(buffer,"for grading purposes, this homework 0 will be graded as part of your lab %d work.\n", 1); write(1, buffer, strlen(buffer)); printf("press return to continue\n"); read(0, buffer, sizeof(buffer)); return 0; }	puts(" work things out on your own."); fprintf(stdout,"this homework 	69
preprocessing is a copy and paste operation that the compiler performs before actually compiling the program.	preprocessing 	14
(a + n)* where n is a number type and a is a pointer type.	(a + n)* where n 	17
if the left operand is a pointer and the right operand is an integer type, then only plus or minus may be used and the rules for pointer arithmetic are invoked.	if the left operand is a pointer and the right operand 	55
one posix mantra is that everything is a file.	one posix mantra is that everything 	36
what this statement means is that everything is a file descriptor, which is an integer.	what this statement means is that everything is a file descriptor, which 	73
a system call is an operation that the kernel carries out.	a system call 	14
next, the kernel executes the system call to the best of its ability in kernel space and is a privileged operation.	next, the kernel executes the system call to the best of its ability in kernel space and 	89
the first parameter is a format string that includes placeholders for the data to be printed.	the first parameter 	20
; printf("hello %s, your result is %d\n", name, score); printf("debug: the string and int are stored at: %p and %p\n", name, &score ); // name already is a char pointer and points to the start of the array.	; printf("hello %s, your result is %d\n", name, score); printf("debug: the string and int are stored at: %p and %p\n", name, &score ); // name already 	151
printf is a c library function, while write is a system call system.	printf 	7
the buffering semantics of printf is a little complicated.	the buffering semantics of printf 	34
usually, standard error will be unbuffered, standard input and output will be line buffered if the output is a terminal otherwise fully buffered.	usually, standard error will be unbuffered, standard input and output will be line buffered if the output 	106
a c-string is a series of bytes delimited by a nul character which is equal to the byte 0x00.	a c-string 	11
in low-level terms, a struct is a piece of contiguous memory, nothing more.	in low-level terms, a struct 	29
this means that pointers are more flexible than arrays, even though the name of an array is a pointer to its starting address.	this means that pointers are more flexible than arrays, even though the name of an array 	89
what c does is take the type of the pointer which is an int and write sizeof(int) bytes from the start of the pointer, meaning that bytes 0x1000, 0x1001, 0x1002, 0x1003 will all be zero.	what c does is take the type of the pointer which 	50
a void pointer is a pointer without a type.	a void pointer 	15
it increases the number of lines of code, which is a great productivity metric.	it increases the number of lines of code, which 	48
the following is a rapid fire section.	the following 	14
an operating system is a program that provides an interface between hardware and user software as well as providing a set of tools that the software can use.	an operating system 	20
kernel space is a power operating mode that allows the system to interact with the hardware and has the potential to destroy your machine.	kernel space 	13
a process is an instance of a computer program that may be running.	a process 	10
• a heap the heap is a contiguous, expanding region of memory [5].	• a heap the heap 	18
process forking is a powerful and dangerous tool.	process forking 	16
wait is a simpler version of waitpid.	wait 	5
the following is a snippet of how to use system.	the following 	14
this also means that system is a blocking call.	th	2
passing something along the lines of argv[1] = "; sudo su" is a huge security risk called privilege escalation.	passing something along the lines of argv[1] = "; sudo su" 	59
• malloc(size_t bytes) is a c library call and is used to reserve a contiguous block of memory that may be uninitialized [4, p. 348].	• malloc(size_t bytes) 	23
however, this detail is an unwanted complexity.	however, this detail 	21
the survey makes sure to note that memory allocation is a moving target.	the survey makes sure to note that memory allocation 	53
our heap memory is a list of blocks where each block is either allocated or unallocated.	our heap memory 	16
allocating memory is a worst-case linear time operation – search linked lists for a sufficiently large free block.	allocating memory 	18
the slub allocator is a slab allocator that serves different needs for the linux kernel slub.	the slub allocator 	19
the slub allocator is a segregated list allocator with minimal splitting and coalescing.	the slub allocator 	19
almost weirdly, a thread is a process, meaning that creating a thread is similar to fork, except there is no copying meaning no copy on write.	almost weirdly, a thread 	25
• the first is a pointer to a variable that will hold the id of the newly created thread.	• the first 	12
• the second is a pointer to attributes that we can use to tweak and tune some of the advanced features of pthreads.	• the second 	13
calling pthread_exit in the main thread is a common way for simple programs to ensure that all threads finish.	calling pthread_exit in the main thread 	40
but when compiled with -o2, assembly output is a single instruction.	but when compiled with -o2, assembly output 	44
however, the child process only has a single thread, which is a clone of the thread that called fork.	however, the child process only has a single thread, which 	59
a critical section is a section of code that can only be executed by one thread at a time if the program is to function correctly.	a critical section 	19
if the memory location is only accessible by one thread, for example the automatic variable i below, then there is no possibility of a race condition and no critical section associated with i. however, the sum variable is a global variable and accessed by two threads.	if the memory location is only accessible by one thread, for example the automatic variable i below, then there is no possibility of a race condition and no critical section associated with i. however, the sum variable 	219
a typical output of the above code is argggh sum is <some number less than expected> because there is a race condition.	a typical output of the above code 	35
a mutex is a simple data structure.	a mutex 	8
atomic compare and exchange is an instruction supported by most modern architectures (on x86 it’s lock cmpxchg).	atomic compare and exchange 	28
a mutex is a semaphore that always waits before it posts.	a mutex 	8
while push (and pop) is executing, the data structure is an inconsistent state, for example the count may not have been written to, so it may still contain the original value.	while push (and pop) is executing, the data structure 	54
though, it was in an unpublished paper, so it was not discovered until later [1] (this is an english transcribed version released in 1965).	though, it was in an unpublished paper, so it was not discovered until later [1] (this 	87
the other is the loop is a busy loop.	the other is the loop 	22
a ring buffer is a simple, usually fixed-sized, storage mechanism where contiguous memory is treated as if it is circular, and two index counters keep track of the current beginning and end of the queue.	a ring buffer 	14
a compact form is correct uses bit masking provided n is a power of two.	a compact form is correct uses bit masking provided n 	54
the following code is an incorrect implementation.	the following code 	19
the following code is an incorrect implementation.	the following code 	19
let assume that the system is a state at time t. let us assume that the state of the system is a tuple (h t , w t ) where there are two functions h t : r → p ∪ {unassigned} that maps resources to the processes that own them (this is a function, meaning that we have mutual exclusion) and or unassigned and w t : p → r ∪ {satisfied} that maps the requests that each process makes to a resource or if the process is satisfied.	let assume that the system 	27
the dining philosophers problem is a classic synchronization problem.	the dining philosophers problem 	32
a page is a block of virtual memory.	a page 	7
we also call this a frame or sometimes called a ‘page frame’ is a block of physical memory or ram – random access memory.	we also call th	15
a page table is a map from a number to a particular frame.	a page table 	13
remember our page table maps pages to frames, but each frame is a block of contiguous addresses.	remember our page table maps pages to frames, but each frame 	61
each table is a list of pointers that point to the next level of tables, som sub-tables may be omitted.	each table 	11
mmap is an interesting call because instead of tying each virtual address to a physical frame, it ties it to something else.	mmap 	5
mmap is a trick of virtual memory of instead of mapping a page to a frame, that frame can be backed by a file on disk, or the frame can be shared among processes.	mmap 	5
one of the big optimizations is a file may be lazily allocated to memory.	one of the big optimizations 	29
sharing anonymous memory is an efficient form of inter-process communication because there is no copying, system call, or disk-access overhead - the two processes share the same physical frame of main memory.	sharing anonymous memory 	25
a named pipe mkfifo is a pipe that a program calls open(2) on with read and/or write permissions.	a named pipe mkfifo 	20
for files less than the size of a long, using fseek and ftell is a simple way to accomplish this.	for files less than the size of a long, using fseek and ftell 	62
this only works on some architectures and compilers that quirk is that longs only need to be 4 bytes big meaning that the maximum size that ftell can return is a little under 2 gibibytes.	this only works on some architectures and compilers that quirk is that longs only need to be 4 bytes big meaning that the maximum size that ftell can return 	157
hadoop is a great example where processes will write to append-only tables and then other processes will read from those tables.	hadoop 	7
one is a linear or near-linear read through of the file.	one 	4
one advantage of fcfs is that scheduling algorithm is simple the ready queue is a fifo (first in first out) queue.	one advantage of fcfs is that scheduling algorithm is simple the ready queue 	77
a kilobyte is one thousand bytes, a megabyte is a thousand kilobytes and so on.	a kilobyte is one thousand bytes, a megabyte 	45
as for another definition, a protocol is a set of specifications put forward by the internet engineering task force that govern how implementers of a protocol have their program or circuit behave under specific circumstances.	as for another definition, a protocol 	38
tcp or transport control protocol is a connection-based protocol that is built on top of ipv4 and ipv6 and therefore can be described as “tcp/ip” or “tcp over ip”.	tcp or transport control protocol 	34
error handling with getaddrinfo is a little different.	error handling with getaddrinfo 	32
sockets are created with a domain af_inet for ipv4 or af_inet6 for ipv6, socket_type is whether to use udp, tcp, or other some other socket type, the protocol is an optional choice of protocol configuration for our examples this we can leave this as 0 for default.	sockets are created with a domain af_inet for ipv4 or af_inet6 for ipv6, socket_type is whether to use udp, tcp, or other some other socket type, the protocol 	159
void send_request(host_info *info) { int sock_fd = socket(af_inet, sock_stream, 0); // re-use address is a little overkill here because we are making a // listen only server and we don’t expect spoofed requests.	void send_request(host_info *info) { int sock_fd = socket(af_inet, sock_stream, 0); // re-use address 	102
• manual flow/congestion control you have to manually manage the flow and congestion control which is a double-edged sword.	• manual flow/congestion control you have to manually manage the flow and congestion control which 	99
google protocol buffers is an open-source efficient binary protocol that places a strong emphasis on high throughput with low cpu overhead and minimal memory copying.	google protocol buffers 	24
the last piece of background is an important one.	the last piece of background 	29
you may have encountered the old unix adage, "everything is a file".	you may have encountered the old unix adage, "everything 	57
a filesystem is an implementation of the file interface.	a filesystem 	13
a single indirect block is a block that stores pointers to more data blocks.	a single indirect block 	24
forgetting to release resources is a common c programming bug because there is no support in the c language to ensure resources are always released with all code paths.	forgetting to release resources 	32
the integrity of the file system assumes the directory structure is an acyclic tree that is reachable from the root directory.	the integrity of the file system assumes the directory structure 	65
lstat() is identical to stat(), except that if pathname is a symbolic link, then it returns information about the link itself, not the file that it refers to.	lstat() is identical to stat(), except that if pathname 	56
the iso9660 filesystem is a read-only filesystem originally designed for optical storage media (i.e. cdroms).	the iso9660 filesystem 	23
since we want to be able to read this block before we know anything else about the data on disk, this needs to be in a well-known location so the start of the disk is a good choice.	since we want to be able to read this block before we know anything else about the data on disk, this needs to be in a well-known location so the start of the disk 	164
if we pretend that the example above is a directory.	if we pretend that the example above 	37
if the inode is a directory, the filesystem checks if it is empty.	if the inode 	13
a signal disposition is a per-process attribute that determines how a signal is handled after it is delivered.	a signal disposition 	21
for example, the following is a program that slowly prints a dot every second, up to 59 dots.	for example, the following 	27
ps is an important utility that can help you find the pid of a process.	ps 	3
the mask is a temporary signal mask used during the signal handler execution.	the mask 	9
spectre is a bug where instructions that otherwise wouldn’t be executed are speculatively executed due to out-of-order instruction execution.	spectre 	8
the following snippet is a high-level proof of concept.	the following snippet 	22
openbsd is an arguably better system for security.	openbsd 	8
pledge is a powerful command that restricts system calls.	pledge 	7
chroot is a contrived way of creating a virtualization environment.	chroot 	7
a container is a lightweight environment that shares resources and a kernel with a host machine, while isolating itself from other containers or processes on the host.	a container 	12
the . expands to your current directory and your shell executes <current_dir>/exe which is a valid command.	the . expands to your current directory and your shell executes <current_dir>/exe which 	88
a terminal is an application that displays the output from the shell.	a terminal 	11
further classes will teach you about parsing and assembly – preprocessing is an extension of parsing.	further classes will teach you about parsing and assembly – preprocessing 	74
a static library is literally is an archive of object files.	a static library is literally 	30
the other type is a dynamic library.	the other type 	15
the sentence that sets the expectation is the following the result of function calls involving any one handle (the "active handle") is defined elsewhere in this volume of posix.1-2008, but if two or more handles are used, and any one of them is a stream, the application shall ensure that their actions are coordinated as described below.	the sentence that sets the expectation is the following the result of function calls involving any one handle (the "active handle") is defined elsewhere in this volume of posix.1-2008, but if two or more handles are used, and any one of them 	242
openmp is a standard that is an alternative to pthreads.	openmp 	7
static scheduling will divide the problem into fixed-size chunks dynamic scheduling will give a job once the loop is over guided scheduling is dynamic with chunks runtime is a whole bag of worms.	static scheduling will divide the problem into fixed-size chunks dynamic scheduling will give a job once the loop is over guided scheduling is dynamic with chunks runtime 	171
journalling is a simple invention where the file system writes an operation in a journal.	journalling 	12
storemi is a hardware microcontroller that analyzes how the operating system accesses files and moves files/blocks around to speed up the load time.	storemi 	8
although it may seem that the header is a constant size, you can include optional parameters to augment the path that is taken or other instructions.	although it may seem that the header 	37
kqueue is a system call that is exclusive the bsds and macos.	kqueue 	7
reallocarray() is a nonstandard extension that first appeared in openbsd 5.6 and freebsd 11.0.	reallocarray() 	15
each arena is a large region of memory that is internally allocated by the system (using brk(2) or mmap(2)), and managed with its own mutexes.	each arena 	11
someone who knows sleepsort is a bad idea but still dreams of an excuse to use it.	someone who knows sleepsort 	28
for example the above is a problem insofar as getting information back to the attackers if it is allowed to communicate with them.	for example the above 	22
privacy concerns aside, and believe me there are a lot of them, the big problem was that this rootkit is a backdoor for everyone’s systems if programmed incorrectly.	privacy concerns aside, and believe me there are a lot of them, the big problem was that this rootkit 	102
a rootkit is a piece of code usually installed kernel-side that keeps track of almost anything that a user does.	a rootkit 	10
if a hacker finds out about this and there is a way to access that api from the user space level, that means any program can find out important information about your device.	if a hacker finds out about th	30
