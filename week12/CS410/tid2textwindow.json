{
  "007a4c69-a949-4550-b450-ecb4cd7a8b1e": [
    "ok right so -pron- want to make a barrier out of the following and -pron- be only go to make a single use barrier right so let -pron- get start well each time thread call barrier -pron- definitely want to reduce -pron- count by one ok so let -pron- let -pron- do that now in order to make sure that -pron- behave as an atomic operation -pron- will first lock a mutex lock and so some point after that -pron- will be unlock -pron- as well now -pron- want most of all thread to wait -pron- want most of -pron- to to call sam wait another word to go to sleep ok so that be the only way that -pron- can actually stop -pron- thread right now so before this -pron- will need to initialize that variable and will initialize -pron- to zero in other word do -pron- know pizza slice ok so -pron- have do that previous to call the barrier right so be leave well -pron- have get this",
    "thread -pron- want to immediately call sam wait and get block but what about the last final thread ok so the last last thread -pron- do not want to block so here be -pron- plan that that for most thread where remain be non zero -pron- will get into call some weight and -pron- will go to sleep but the fifth thread will do what ok so here be actually -pron- be go to see be a chain of domino be here release one thread after another so the kind of sketch this out right so the five thread will call there still -pron- will each one at a time reduce reduce remain and the first four will go into same weight and then",
    "where when -pron- come through -pron- will not go into that if statement and instead will call sam post so great what be the fifth thread do -pron- put pizza slice back into the counting semaphore right so -pron- have get -pron- have call sam post right so the effect of that be that one of these hungry thread inside here get to continue get to steal that slice of pizza and so -pron- can a scape at asem weight and continue ok what do -pron- do equal sam post in other word -pron- add pizza slice back into the counting semaphore ok so now another thread be allow to escape so -pron- reduce the count back down to zero and out -pron- come what do -pron- do -pron- also put a slice of pizza back into the counting centreport ok so now another one can",
    "open the door far next prisoner to escape so -pron- have manage implement barrier just use a simple counterexample for and -pron- value will only ever be between zero and one right so there be a possibility of some interesting way condition here where if two thread at the very end the fourth and fifth read for example both come here and see a value of zero so in this case what would happen would be those two thread would both call sam post but that be ok -pron- just end up with a barrier where again all the thread will get stick until the very last thread have change that value of remain down to zero ok so here be a kind of q example"
  ],
  "009c9eb3-b71a-4571-8437-2a3fe5ce01e4": [
    "ok hi so -pron- have get a couple of question for -pron- first of all why do this implementation suffer from false fragmentation when should -pron- split block and be -pron- use explicit or implicit link list implementation here so let -pron- go for the first one what do -pron- mean by false fragmentation ok so this backtrack for moment and realize that -pron- be talk about -pron- heat which be just one large piece of memory but on top of that -pron- have layer a accounting system be use link list to say where -pron- can have this chunk or this chunk or this chunk this block be free that blogosphere that block not free etc so -pron- have put that as a perspective review on top of this really just a single large piece of memory so here be -pron- problem be that -pron- can end up with situation where -pron- link list say yes do amuse memory here that be available and some use memory right next door that be available but what -pron- do not do be consider these conceptually",
    "each of these say be ten kilobyte and request for twenty kb come in -pron- would not realize that -pron- could have actually use these two block if -pron- be both free now fix this week be a little bit of thought and -pron- have get to be very careful the pointer because remember that actually what -pron- have be come back have a different color be some area of memory that -pron- have decide -pron- be go to use to hold that metadata structure for little link list datum so -pron- have get one there an one there and if -pron- get more may have one just here as well etc and inside that yes -pron- have a little pointer that point to the beginning of the user datum come and simply for",
    "be first of all identify the two block next door to each other which be free ok so this book be free this one be free right and combine -pron- together ok so what do -pron- want to end up with -pron- want to end up with the next pointer on here point all the way over to this block here and the size of this new block that there could be allocate be more than just temper ten because actually there be a bit of extra memory inside here that -pron- no longer need so what about this metadata that -pron- be go to free up that -pron- do not care about anymore do -pron- need to call free on that well no there trick here be to realize that -pron- just walk away from those bit and byte those number inside -pron- -pron- happen to correspond to pointer and integer but -pron- be the one that be actually do the allocation here and so if -pron- do not",
    "in the middle here then that be fine and no one else care so -pron- have to all -pron- have to do be make sure that -pron- remove -pron- from all link list in order to kind of coalesce these so -pron- be go to end up with -pron- original metadata block still point at the beginning of this one but conceptually -pron- be go to update the size information inside here so that let -pron- say -pron- be -pron- be twenty thousand and say thirty two bite as the available slicer this ok so that be block coalesce sing and when be the good time to do -pron- answer inside free that be a great place to do -pron- because -pron- know that -pron- be free one block and in practice here be a couple of quick hint first of all -pron- may be that -pron- want to coalesce with a free block right next to",
    "in the future will need a way to be able to kind of investigate what be behind -pron- and afterwards and before -pron- think about doubly link list be actually go to be another trick -pron- be go to show -pron- later on in this set of lecture video ok so -pron- want to coalesce backwards when -pron- be implement this there be two way to get -pron- into trouble the first be to walk off the end of the world so -pron- keep go past the end link list and -pron- try to follow a null pointer so remember that -pron- link list do actually stop the other similar way of fall off the end of the world be -pron- may be actually at the very beginning of -pron- link list and try to walk backwards actually be not a valid operation because there be no more segment behind that so be very careful when -pron- implement this and the last quick comment be that -pron- coalesce sing may actually coalesce to the left and to the",
    "coalesce sing then -pron- end up with this problem of false fragmentation -pron- view of the world be that -pron- have lot of small space in -pron- apartment block but actually that be just where -pron- put the partition the false partition in really -pron- get ton of contiguous space ok so that be block splitting -pron- can also do the opposite which be cur lesse block so let -pron- go back in for a moment and have a look at -pron- code here where -pron- work remember through be link list find a viable entry here and if -pron- do -pron- decide to mark that particular entry as unavailable and -pron- return a pointer to that entry ok so i want -pron- to imagine the follow suppose -pron- have a a malloc of a large amount like let -pron- say hundred kb and then -pron- free",
    "to malloc there be be link list be empty so -pron- go to the system -pron- call ass break and -pron- get -pron- plenty of space enough space to hold the metadata and then immediately after that one hundred kilobyte then -pron- call free what do -pron- do at this point well -pron- do not call espec again -pron- just simply update -pron- metadata to say that hey the memory -pron- be point to be now available for free and then -pron- lock be call again with ask for one kilobyte so what do -pron- do -pron- simply change the free point to here to be zero what do that do to -pron- memory well the caller have only actually request to use one kilobyte of",
    "go to be unused and -pron- could have do a well job here -pron- could have actually put a link entry into -pron- link list to say actually not only how do i have this piece be in use -pron- have get a new entry of available apartment block here and there be another metadata entry that i could write in there and -pron- be pointer be go to point to the space that future caller of malloc actually actually use if -pron- want ninety nine kb or less ok so be there any gotcha in here yeah ok so here be the first gotcha that when -pron- decide to do this block splitting realize that the metadata entry",
    "tiny 's portion of that space let -pron- say thirty two bite -pron- could always use size off to actually determine exactly how much so if the remainder space the remain space be pretty small if for example that the new malloc call have be for ninety nine point nine kb then -pron- have to start to wonder what point do -pron- not bother to actually split this an conceptually record a new available space there go to be so small for example if the remain space be only sixteen byte that may not even be enough to be able to store the metadata so -pron- have to choose some kind of threshold for when to actually make another block and that be actually part of the mp that be be one of the thing that -pron- can tweak with -pron- own code be to decide when -pron- should make another block of the remain of the remain unused space and when -pron- be just go to ignore -pron- and say oh well that be",
    "the time to do that be when -pron- decide to reuse a block and that there be sufficient space so in other word -pron- be go to write thing like ok -pron- have god choose and let -pron- have a look at the choose size and see if that be much large than the size be request so will have some kind of tweaking there to decide some parameter in there to decide what point what be -pron- threshold go to be that -pron- want to create a new block ok right so let -pron- go back and see if -pron- have these question alright so -pron- talk about block splitting and false presentation and the last question for this little video be -pron- be -pron- implementation use an explicit or implicit link list so this implementation use",
    "memory address explicitly -pron- can talk about the memory address of p -pron- can not talk about member of choose -pron- could talk about the memory address turn to -pron- lock so -pron- have lot of memory dress and in particular link list when -pron- want to jump from one entry to another -pron- look at the entry code next and that be an explicit address -pron- be get a memory location all the other way to do this and the answer be yes so the alternative be to work with an implicit link list and with an implicit link list -pron- start talk about the size of thing and -pron- can then use those use pointer arithmetic to calculate a new address so for example if i have an integer pointer"
  ],
  "00dd4389-2bac-4f00-8dcd-785c286c3d68": [
    "hi welcome to lecture thirty three so -pron- be go to return to networking and -pron- be go to see a little bit far but how to make a web server and also start talk about epoll as well so all kind of great stuff cs two forty one so here -pron- go first of all let -pron- just refresh some basic idea right so do what h two n s be and what n two h s be and why -pron- need -pron- one of -pron- name stand for so hopefully remember that this stand for kind of host to network and the s stand for short ok meaning -pron- be talk about sixteen bit such for example as a port number and this one end to hs around so that would be network to host so -pron- use these to ensure that the bit pattern hold by that short variable that sixteen bit variable be in the correct format so for example if -pron- have to send -pron- down the wire to the network card to out onto the internet then -pron- better make sure that part number be actually represent correctly",
    "these call ensure that if there be a different with different representation between how be cpu represent number and how the network represent number that the correct representation be store or use ok so right so -pron- will see those a lot with port number and there be also the equivalent for four byte number as well so each two and for a long be always four byte and -pron- integer varied between two byte and four byte so this be use for when -pron- need to convert ip four address as well ok so right next review be what be the four call -pron- need to set up a server right so hopefully -pron- do not say get address info no that be just ice on the cake what -pron- do need however be a socket ok and of course -pron- be go to make a passive socket because that be how -pron- make server socket right what do -pron-",
    "by invite -pron- to a port number also bind -pron- to a particular network card as well right so great -pron- have now identify a particular passive port that be list on now -pron- can open up -pron- shop so -pron- say listen at this point when -pron- call listen the open for business meet that package can arrive on that port and the kernel will take care of -pron- for -pron- will start the tcp handshake for -pron- ok but at some point -pron- actually want to start talk to all of the client which be connect to -pron- so this be what -pron- call accept and except will block if there be no new client otherwise -pron- return a new file descriptor force an unused file descriptor number which be which be connect to one particular client one particular connection right so that be what -pron- need to kind of set up -pron- server",
    "some of the thing that -pron- may use as well of course be thing like shut down to declare that -pron- do not want to receive or send any more additional information down a particular client file descriptor then -pron- actually completely finish for descriptor -pron- can release -pron- by call close which mean that particular file number file script a number can be reuse ok in some of the comment be -pron- have talk about get use get a dresser inv and -pron- keep hire that be really really important to use -pron- m set to make sure that the unused field inside the hint struct be set to zero and the idea that -pron- be important to check -pron- -pron- return value otherwise if -pron- fail then the result struct will not have be change at all but in fact this result thing be not just destructive practice appoint to a strict and in fact remember -pron- be a link list so -pron- could write the"
  ],
  "0173c9a1-6ea6-40ab-b5d1-ccc145c2f251": [
    "hi so -pron- have always be a lot of jealous of the hardware people that be able to handle interrupt and change event from the outside world what can -pron- do with the software well in the software world -pron- actually have something very similar and -pron- call signal or posix signal to be precise the kind of event that -pron- be go to be look at here and the great thing about positive signal be that -pron- can actually interrupt -pron- code so perhaps -pron- have get deeply piece of nest recursive code perhaps -pron- have get whole lot of nest for loop -pron- be go to take another hour to complete process -pron- have get a while loop that run forever -pron- do not matter with a posix signal i can interrupt -pron- and ask -pron- function or -pron- process to run another piece of code right now so basically -pron- be a bit like say to a chef please stop run through -pron- current program and run through run through this other short function so think of positive signal as software interrupt",
    "the kernel which kind of software interruption which kind of positive signal -pron- want to handle so there be actually two source signal this be where -pron- can come from first of all the kernel -pron- may generate a signal and this will happen typically as result of some hardware event so for example the cpu notice that -pron- process be attempt to write into some invalid memory and the actual cpu catch that to attempt to read or write to an incorrect memory address and that cause an interrupt -pron- stop read -pron- stop read -pron- process code the kernel code run instead which ultimately generate segfault which by default kill -pron- process of course but -pron- can also generate posix signal -pron- when",
    "-pron- ok so -pron- use abuser process -pron- be go to look to see how to do that from the command line and also how -pron- can do -pron- form -pron- program as well ok so there be three very well know be signal and -pron- have come across -pron- before one be second so this -pron- see when -pron- press control c this be -pron- little hate please need to interrupt the program and by default of course that stop the process however -pron- can make program where -pron- do not start the process and -pron- can actually make -pron- do other thing as well then -pron- have see cr segfault where by default again -pron- stop process and that signal be generate",
    "memory and the last one ok so kill so the surprising thing about say kill be that be part of the process can not avoid -pron- -pron- can not run away from this event -pron- can not change this behavior no sick kill be when -pron- want to stop all process and -pron- do not have a choice about this so -pron- be nothing -pron- can do about sigkill -pron- will not get any prior notification be like an asteroid arrive at the speed of light that there be no prior warn no particulate go to simply stop -pron- process \" and -pron- will not be able to prevent that so that be sigkill -pron- be when -pron- want to terminate the process and -pron- want no other option so if -pron- have get a runaway chrome browser refuse to stop sigkill be go to be the answer ok so i think -pron- be time -pron- do a demo of this ok so for this demo -pron- be go to need some kind of little program to send signal to so here -pron-",
    "once the second here so -pron- can see that -pron- be call right and what be i go to write -pron- be send out to standard out here be the address -pron- be give -pron- dress with string literal and -pron- be ask right to say ok -pron- be give -pron- an address another address i want -pron- to take one bike to please and because -pron- be use the low level posit call rather than the c library that that bite be immediately go to be write out to standard out so -pron- will see -pron- straight away -pron- will not be any buffering and then -pron- say ok please sleep with one second now this be not some expensive for loop that burn up the cpu and keep -pron- house be warm at night no instead the cpu at that point be go to be reallocate to a different process that be ready to run and then the rest of -pron- -pron- could see -pron- a little loop and -pron- do this for sixty second and to help -pron- with the demo -pron- have also ask -pron- to print out -pron- process",
    "ok let -pron- put -pron- code here and clean that out so i have -pron- little dot writer where be -pron- ok that be yeah same as what -pron- just see ok so great will run the londot writer writer and -pron- will ok -pron- will call a little program dot waiter here ok so what be -pron- present directory pb copy i can not spill ok and i can stardew shall go into there ok make -pron- a little bit big right so what do -pron- do that because i want to do two thing at the same time i want two window over here ok so great let -pron- do that",
    "little bit later ok right so now let -pron- have some fun with -pron- little light of course i could just press ctrl c and -pron- stop nothing new there but how about -pron- want to start send out signal so from the command line -pron- can type kill and then -pron- can say which signal so i could may say alright send second and -pron- be go to send -pron- to process number four seven oh eight three ok and -pron- stop right so just like press ctrl c ok will -pron- will send -pron- a different signal this time and -pron- say send a kill ok oh and i give -pron- a long process number change for seven oh eight nine there -pron- go out and -pron- kill -pron- and notice the a bash shell actually be use for kid that weight and use those very wait macros -pron- look at like if exited if signal etc and -pron- can -pron- detect that -pron- be child be kill by a",
    "be actually sigkill and so sometimes -pron- will see on forum that -pron- know that -pron- really need to kind of minus nine that so let -pron- just do that again this time with a number of the case so will send -pron- with minus nine four seven oh -pron- would help if i type correctly alright by the way sick kill i think be the only signal number number nine i think -pron- be the only one that most people know ok so let -pron- now start change -pron- little signal item will make -pron- so that -pron- -pron- send a signal to -pron- ok so i need -pron- little writer program there -pron- go ok so how about after five second -pron- press ctrl c on -pron- so here be what -pron- will do be let -pron- see",
    "to send a signal to -pron- how do i do that well i can call kill sir let -pron- go have a look at that right so if i type man kill i get the wrong thing i get the thing that i can type on the command line so as -pron- can see in the top left and right hand corner that -pron- be actually in section one of the manual so that be great if -pron- be try to do something from -pron- shell not so great if -pron- will not actually program c code ok so let -pron- get out of that ok let -pron- have a look at section two ok this be more like -pron- so now -pron- can see -pron- need to process id and the signal that would lead to set ok and there be more stuff -pron- can do with -pron- alright so i will need hash include signature h so let -pron- go back to -pron- editor and",
    "include up here so let -pron- see where -pron- be go to kill this and -pron- want to send the process id so let -pron- get pid and which signal today so -pron- want to send equivalent of press ctrl c ok so let -pron- do that and run this so i need -pron- little dot lighter again off -pron- off -pron- go ok and after five second -pron- stop now the observant amongst -pron- may say well what happen at little kind of carrot and see that -pron- see up here -pron- be try to write on -pron- screen that do not work ok what about that go well that actually be not part of the signal handle the shell do that to save by the way -pron- be send a control c event so -pron- actually happen prior to the the signal be set ok so let -pron- have some other fun with this because",
    "thing with -pron- so this be where the fun begin ok i want to make what stop do that ok good right so i promise that -pron- have be able to handle some signal so how can -pron- do that well let -pron- write something that print something else will have something that say say control c press and -pron- take an integer and -pron- will take a number the signal number that happen ok and -pron- need to do something at this point so let -pron- have a little message let -pron- say do not do that and will print -pron- out directly so -pron- use right -pron- will send -pron- to say standard out and i want to send -pron- message how many character will have stroller and character to send ok i can not use size often the way that -pron- have write this",
    "a little newline ok wait so i somehow i need a way to say call this code when control c be press here be how -pron- be go to do -pron- there be a little thing call signal -pron- be go to show -pron- well way to do this later on in the course and -pron- can read online about sick action but this be the simple way to get start and for cigna action so -pron- be for signal all -pron- need be the function name and the signal that -pron- want to connect -pron- to i discover which -pron- want to use this so i guess what i want to use the manpage right so if i do signal discover something that look disgusting but that way that be just a function pointer today -pron- be just go to concentrate on disk that say oh look i just need a signal and the function after -pron- so let -pron- do that ok so i need the signal i want to say if a second happen do not do the default behavior which be to kill -pron- process",
    "put an ampersand in front of the fund function name or if -pron- just use the function then -pron- function name end cease oh -pron- must be talk about where this be in memory what -pron- should not do be put parenthesis after -pron- because now -pron- be say at this moment call this function that be not what -pron- need -pron- just want the actual function that -pron- be go to call ok so -pron- could all control c press little function here and i make sure that be the right type and so now let -pron- run this ok wait and compile and -pron- better get stroller and string on each ok ok off go dot later so now i have -pron- birth control see -pron- say do not do that and when -pron- cool when -pron- give",
    "so now -pron- have get a program that i can not stop all know actually between -pron- and main -pron- turn out -pron- can send another signal easily sigterm from the keyboard and if i press control and backslash haha so i can send -pron- say quit so that stop -pron- all -pron- can k -pron- can attempt to stop say kill but as -pron- will see in a moment and -pron- be not go to work ok so let -pron- just try this let -pron- just register -pron- control c with sorry -pron- control c press function with two signal and see what happen the other thing i be go to mention be -pron- can use kill but if -pron- just want to send a signal to -pron- then use raise so this be equivalent to call kill get pid raise just mean",
    "after another five second so when i be down to fifty -pron- will now call sick kill light so let -pron- run that now compile off -pron- go ok so after five second -pron- get -pron- sick see case do not do that and after ten second secure and -pron- get kill so -pron- could not install a single handle to stop sigkill ok that be go to the big message there right so i think that be everything -pron- talk about right now except that let -pron- do one last kind of quick thing here which be i show -pron- that -pron- can send signal from the terminal but just by type kill and then either a number like minus nine or something like sigint well how would -pron- implement this kill command and i want to impress upon -pron-",
    "in c in fact if -pron- do something like cat dot c -pron- can probably find the source code of capital see if -pron- type that into google anyway so -pron- want to write a little program that be call kill dot c which can take a process id and so that be that be a little challenge here how can -pron- how can -pron- write this very very simple program ok so here be if i want to write this in like a minute -pron- be work be kind of warm way that i could do this do i have little arrow i do use this function call a two i which take an ascii value and return an integer -pron- be not that great in sense if -pron- give -pron- garbage -pron- be go to return the value zero so there be no easy way to detect the difference between",
    "the signal -pron- want the process id and the last thing if -pron- look both valid what would -pron- put in here ok so now i need to write some code and see if -pron- have get -pron- little ok where do -pron- go i want a portul great then here i would call kill and -pron- 'd have to remember which way round -pron- go so -pron- be the process id first ok whoop go back ok right so the process an idea i want to to send the signal two be pid and the signal number -pron- have just read from argument ok so that be a very very interesting pple version of the kill command -pron- would smart this up by check to see if argv be correct actually if"
  ],
  "01850175-f9bd-4eba-a73b-9dc63940ee41": [
    "ok so -pron- be go to start head towards networking and for that -pron- really do not need to understand how to work with error and how to print out error and how to discover when thing do not work so network be tricky because with thing do not work where -pron- actually want to understand what -pron- problem with the client or the server be there a problem in set up the connection and so deal with error become quite important area can be because of code area -pron- have make but -pron- also can be say because the client have finish the connection before the server have finish say everything -pron- want to say unvoice versa ok so let -pron- start talk about error that right so -pron- want to put out some error ok so here be first way -pron- have probably see thing like ok i can use p error to print an error to standard error and i can include piece of text here which get include along with",
    "a way to get just a simple string and this be -pron- -pron- can say store error and i can ask for a the string associate with a particular error number like one two three four five etc etc etc ok but perhaps -pron- want to know what be actually just go wrong with -pron- program and so if -pron- want to find out the air associate with a recent system call guess what there be something call ever know urdu there -pron- go so i could say please tell -pron- the these string associate with the most recent system ever ok so in fact -pron- could re implement pm so if -pron- need to write kind of piero -pron- -pron- may do something like the following -pron- may say ok so peer error i just want to print out to standard error cater to do and now will have",
    "ok and then another string ok and then -pron- will need whatever use say so -pron- little message there follow by stewart ever of ever so ever know be this little global variable that -pron- never know that -pron- have -pron- be be there all along -pron- be be inside -pron- c program -pron- will be inside -pron- python and -pron- node program ok be just a standard part of the process so something like that maybe -pron- will put in new line there as well but as -pron- implementation of pierre right so there be a one big surprising gotcher however with string ever and if the follow if -pron- actually",
    "ok so video surprise right here -pron- be use this low function inside here and -pron- think -pron- could do everything -pron- want inside -pron- thread -pron- be not thread safe key and if -pron- instead -pron- actually want to write code that be two s dave then ok -pron- actually should use something else which be stewart ever underscore r and then -pron- pass in some integer like eleanor ok so the reason for that be that stre air -pron- may return just a hardcode string literal safe error number one two three four five six etc but if -pron- pass an arbitrary large number -pron- actually construct the string -pron- and how -pron- may do that well -pron- could",
    "a pointer so instead internally have some static static memory that -pron- reuse from one call to the next ok so that be -pron- problem that if -pron- be go to use this in multiple thread i could have one call to store arribe be enter by another call to stuart error on a different thread an oh dear both of -pron- be now try to use the same piece of static memory so one hour be go to override the other one right so this kind of common with some of the early call inside posix that -pron- be not build with with thread in mind and so threat support the ability to work with multiple thread have kind of be reverse engineer back into some of these api call so stroit error -pron-",
    "the integer or no instead -pron- also pass in a pointer to -pron- memory that -pron- would like -pron- to use so here be some memory and typically as well -pron- impasse in how much many as well so -pron- could pull up a terminal window to see the exact order of these thing but what i want -pron- to learn yeah there be quite a few of these kind of underscore be variation or variant of exist course and -pron- be add later to posix in order to make -pron- more thread safe now the last thing -pron- may have be think about when i be talk about this be hold on a moment what about earner what be this other thing and win -pron- set ok so oh no be set by most system call that can fail",
    "go wrong so if -pron- call right and -pron- do not work then oh dear -pron- will return negative one but -pron- want to find out more about what go wrong so that information be encode inside this global variable but wait a moment if -pron- have get a multithreade program surely -pron- be go to be really hard to figure out which particular thread on which system call cause evernote change yes -pron- be correct and now -pron- be force to tell -pron- that actually ok that ever know actually for multithreade program be a very special variably behave like a global variable but actually -pron- be three use thread local storage which mean that each thread get -pron- own copy thread local storage each thread get -pron- own copy of error -pron- still behave like a global variable but the value"
  ],
  "025c4079-6f2d-496a-bc87-51d078e15f66": [
    "ok so -pron- have kind of talk a little bit about this idea before so -pron- could i implement p thread mutex lock just by disable interrupt on on the cpu so the idea here be that if -pron- code be run on the cpu if i disable interrupt then i can not be stop become agent smith out of the matrix that now i own the cpu so no one else can can take -pron- for -pron- so one of the limitation of this first of all that yes -pron- can ensure that -pron- be the only one go into the critical section if one there be only one cpu ok so if i control the one and only cpu and i can not be interrupt then i get to do everything inside the critical section until i give up the cpu ok so provide",
    "-pron- data structure no one can stop -pron- because i disable into app ok the second be that i require an here be a big problem here be that actually require sufficient privilege to disable the interrupt and because this be such a powerful operation by default that be disabled for normal user program -pron- need interrupt in order to make a cpu stop run one thread and start run another in order to handle hardware interrupt -pron- too do to device iot device be ready to either take datum from the system or give datum from the system for example the network card may report that -pron- new package arrive and here be some datum or a disk or solid state disk may report hey -pron- have now finally get the datum -pron- can now read this into memory or gpu",
    "of reason why -pron- in over a normal complex system -pron- can not just disable disable interrupt ok so this be one solution to the critical section but like i say -pron- be not a generally useful solution to the critical section -pron- need to find a way to be able to kind of implement these correctly and will talk about some algorithmic concern about that in the future instead now be what -pron- have get a real challenge for -pron- which be i want to implement a barrier in fact -pron- be go to give -pron- all the code that -pron- need here -pron- be i just want to implement a barrier that will wait until five thread call this method call this function and -pron- have get to keep track of how many there -pron- go and all -pron- be go to give -pron- be the follow code which use a counting semaphore so -pron- get to choose how what -pron- would like to implement what -pron- 'd like to"
  ],
  "0313c4b8-b3cb-47c4-893c-bcb27ce990a3": [
    "ok so let -pron- play with race condition and then fix with block right so what do -pron- think the following code be go to print here -pron- have a counter variable which be global as -pron- can see anybody can reach into -pron- and read -pron- or write -pron- and in fact like a little function here that be go to loop look like a million time and each time around the loop -pron- be go to implement that counter now the value of eye a stack variable which mean i can create a whole load of thread and each one be go to get -pron- own value of i but -pron- be all pick at this global variable this counter so -pron- be go to share access to that that variable right and then -pron- have get some code on here peter create peter create and then two p thread join so out of the two p thread join -pron- print out the value of counter right so what do -pron- think about this code what be -pron- go to print let -pron- give -pron- ago so i need to compile -pron- ok -pron- have compile -pron- off -pron- go right -pron- do not print out of course",
    "value each and every time so why do -pron- think that be a key so actually there be two reason the first one be because -pron- the value that -pron- get depend upon the actual interleaving of -pron- two thread to how -pron- do this increment so even though -pron- plus plus hear the big news flash be that this be not an atomic operation so what -pron- mean by atomic well -pron- enough uranium together no -pron- do not mean that what -pron- mean by atomic here be -pron- be that an atomic operation -pron- behave as if -pron- complete as one complete operation but that be not true not for plus plus here so instead what be go on -pron- be say ok read the value of counter add one to -pron- and then right back into memory so there be three distinct stage here",
    "need to read the following four byte please ok -pron- pull that into a cpu register then -pron- invoke the arithmetic logic unit to add one to -pron- register ok so -pron- have recalculate new value and then -pron- take that bit pattern and -pron- throw -pron- back towards memory here -pron- go memory have a new value the add one be extremely fast writing to main memory be extremely slow compare to what the cpu can do so of course practice -pron- have level of cash operating but let -pron- not worry about that model complexity today i just want to point out that be actually kind of three step read and add one and a right so even though -pron- be write this plus plus -pron- actually take three distinct step alright so that be the kind of first idea be that -pron- have get two chef two thread run as fast as possible really from memory add on write -pron- back",
    "go over and read the same value and then -pron- add one at about the same time and then -pron- write back -pron- new value so instead of increase the value by two -pron- have only increase -pron- by one -pron- can imagine more extreme variation where one thread be run a bit slow perhaps -pron- cpu keep on be interrupt because -pron- be be ask to transcode some video as as i as -pron- be talk to -pron- and so now the other thread be able to run forward a bit so imagine the follow one thread reach in grab the number i know -pron- be do the calculation or at least -pron- be go to get to the calculation soon meanwhile the other thread reach in grab the number add one send -pron- back breach in addison number as well and send -pron- back which anson do like like a million time then -pron- first red wake up again a few i get cpu again",
    "one right -pron- back so -pron- be just manage to write over all of those result take year back to a really low number so that be kind of the problem of just let -pron- thread run without any kind of proper synchronization so i mention there be two bug the other one actually be just an insidious copy paste bug do -pron- spot -pron- ok so -pron- call pthread create here or with the same id address here which mean that -pron- second thread id here be actually be never initialize so -pron- never actually truly go to wait for that second thread to actually complete case so so -pron- should fix that let -pron- make sure that -pron- be write into two different two different variable right so i promise -pron- start use p thread mutex lock so here -pron- go let -pron- figure out how -pron- can fix this program",
    "get -pron- self lock will make -pron- a global so all -pron- program can see -pron- if i do not use global -pron- 'd have to pass -pron- around or least pass a pointer around to -pron- right so p three edit music type -pron- be go to call -pron- a duck i want to imagine little duck quack quack that be very important little lock and today -pron- will use the the magic value piece red mutex initializer initial lie be ok wait so how can -pron- use this doctor to make -pron- program more deterministic ok some various way -pron- could do this let -pron- let -pron- first -pron- will come up with a new function here ok how do -pron- feel about this so before do any work in -pron- data structure -pron- be go to grab the duck here so how do i do that as a pthread mutex lock and here be the address of -pron- variable",
    "this compile run -pron- oh -pron- never finish can -pron- see why ok so -pron- problem be that -pron- acquire the lock but -pron- never let -pron- go so when the second thread start and call preferred mutex lock -pron- be go to be wait for a very long time an infinite amount of time -pron- never get that duck that duck have be steal by the first red and never return so as a result the second thread will never finish so as a result rp so join in maine will never complete so as a result will never put the counter ok i think -pron- well fix that let -pron- put in -pron- pthread mutex unlock there -pron- go after i finish in -pron- surgery",
    "at which point be this anybody else wait for the duck -pron- too can grab the duck and then carry on so now let -pron- run this ok and ha who have be yes guess gratulation 's -pron- have manage to make another finished lee complicate program to add up to two million by use now kind of three for thread the main thread which do not do much -pron- just delegate like a manager do not actually do any work and then two thread which be independently add up a million but -pron- do notice that actually -pron- do not actually do any of the work in parallel first a thread probably the probably thread one but who know actual add a million and then when -pron- be finish -pron- release the duck and so the other thread get to continue -pron- require a duck carry on add a million to -pron- and then unlock the duck ok so maybe -pron- should allow -pron- thread to work in small",
    "a version three right well now -pron- be go to only acquire -pron- doc for a very short period of time case so now -pron- be go to rap each call to before i change the counter -pron- be go to acquire -pron- mutex lock so now right -pron- will k von function three so for a million time -pron- acquire the lock -pron- have want to counter and then -pron- unlock the duck ok so let -pron- compile this run -pron- ok -pron- give -pron- a correct answer and will always give -pron- a correct answer but be now actually a little bit slow do -pron- know why well in this contrived example add one to a variable be an extremely fast operation compare to a typical",
    "datum structure this share datum structure occasionally so -pron- have just manage to modify -pron- original program which would just increment the counter to now access the mutex change the counter unlock the mutex so -pron- have actually add a lot more complexity in term of number of structure that have to be execute for each iteration vanderloop ok so that be not do not make a program any fast and in fact -pron- slow -pron- down a bit just because -pron- be use -pron- lock in such a fine grain manner but -pron- do not sure that be two thread could actually carry carry on now and finish -pron- about the same time so now -pron- have get an interleaving of -pron- two thread but -pron- have ensure that the actual change of the datum structure only happen in one thread or the other thread at a time",
    "-pron- have get two thread two cpus actually try to read a right to the same piece piece of memory what if that value be cache or the good news actually be deplete mutex lock take care of that as well for -pron- that if this cpu support some caching mechanism peter mutex lock will ensure that that value be flush out to main memory if any other cpu want to read these magnet so technically -pron- be call memory fence what memory barrier -pron- be not go to write code that do not explicitly instead -pron- be just kind of allow the factor period mutex lock make -pron- world say again make -pron- program be equal to all the process be -pron- have actually run at least that be what -pron- appear to be like"
  ],
  "031c882d-0a19-4489-b1ef-d9328844d378": [
    "ok so let -pron- get a server run right so if i have python two instal i could say python simple http server something like that but maybe the ttp be actually capitalize but a lot of python sweet so i can say right python http dot server ok and circle server -pron- be go to guess server ok great so this be now listen for http request on port eight thousand great let -pron- give -pron- one k so here -pron- go home fire fox -pron- be go to connect to localhost colon and then the port number so if -pron- get and what what do -pron- see -pron- actually see that this little module by by python give -pron- a directory listing and then i can click on a link here ok and actually see the code that -pron- just write today which be kind of fun ok and if i want i could have a little website here",
    "here -pron- go one of the same thing now from rc code ok so -pron- need to make sure connect to port eight thousand on localhost and i want to make sure -pron- be request the homepage ok so that look pretty good right let -pron- try this so -pron- will see that -pron- python server be happily report all the thing that fire fox have be request so let -pron- break out of that now an run -pron- in the background ok so alf -pron- go because now i want to start compile -pron- code right so compile the client and run -pron- and -pron- see the beginning of this yes -pron- connect -pron- see a status message of two hundred which mean",
    "reason -pron- do not see the content -pron- problem right now be that -pron- just call read once and so -pron- get back the head up but that be not enough to see the rest of the information so time to wrap this inside a loop ok so let -pron- keep on reading read until -pron- do not want to case so let -pron- think about first of all -pron- want to escape this if if reed return a zero or negative value so zero remember for read mean that there be no more bite so zero would mean the end -pron- be the end of the line no more bite for -pron- negative one would be failure so in either case will will stop so ok and that look like -pron- be go to be enough to read all of -pron- byte ok so let -pron- go",
    "the status information so this head of information at the top here -pron- would not normally display to the user -pron- can see that now be be serve by python and here be a stuff here be the html document that -pron- can now pause and turn into a nice look web page and look here be all of the the link that -pron- may want to follow so for example here be client dot c and -pron- aide out etc so the last thing i would do be let -pron- actually request the bite of client dot c and then -pron- have get a self aware client program so all -pron- have to do be just change the thing that -pron- be request ok so let -pron-"
  ],
  "040bf74d-c21b-4d61-a0f9-38e3b2cc4d67": [
    "ok right so -pron- have get this object that -pron- want to create that allow -pron- to put a block on other thread so how be -pron- go to work ok so here -pron- be i will do -pron- over here right so -pron- see so already the idea i could make these type thread thing which represent a running thread of execution now what else do posix give -pron- when i say posix this be posix standard part of unix be the standard which write all the code ok so -pron- be go to make one of these mutex object let -pron- call -pron- say lock and what can i do with -pron- ok so a lot do not support that many operation -pron- can lock -pron- and unlock -pron- so let -pron- have a look at that code and big important idea be before -pron- be out allow to lock and unlock the mutex i have to initialize -pron- so there be a couple of",
    "mutex iniciat and pass in a lock and one of the great thing about pizza -pron- be implementation of mutex lock be that -pron- can actually pass in a few attribute like -pron- can set -pron- up to debug -pron- can actually create recursive lock but -pron- be go to anyway -pron- be go to stick with this vanilla log today again this be kind of one of the example where where the posix implementation the positive definition of mutex logs go a little bit far than what the new c standard do ok so i want to initialize -pron- lock and -pron- be not go to pass in any special attribute today right so that be one way of do -pron- another way be to use a special constant so -pron- be possible to say let -pron- make a static variable here -pron- do a key right so i just want to clear that -pron- be not -pron- be not actually on the stack but still some global variable here right so i can say p threat mutex initializer",
    "so that in the future when i call the loc method on -pron- mutex -pron- will automatically initialize at that point so -pron- can choose one of these but do not choose both particular mutex right so how can i find out more about these mutex lock well guess what the -pron- have get a lot of information inside -pron- manual for example i could all this stuff about the p thread and what i can do in a detached state which i kind of skip over condition variable so let -pron- actually go and have a look now at but -pron- care about which be the p thread mutex lock here -pron- go and -pron- will see -pron- do not take that many parameter this be really easy -pron- just take the address or mutex",
    "the mutex become available ok so let -pron- write this out as an example so -pron- have get -pron- pthread mutex lock here and i pass in the address of -pron- little object here call lock right and then i go off and do -pron- critical section stuff so do critical section stuff here do critical section stuff like eg update the data structure or read from the data structure but i can be sure that if all of -pron- code follow this pattern so after this i call p thread mutex unlock right and then here be the address of -pron- mutex i can be clear that that that only one thread at a time can be access in the data structure so that sound like",
    "in real program ninety nine percent of the time -pron- thread be work on something else -pron- be only when -pron- be actually get a result or once more datum that would actually go to this share datum structure ok so that be all basic pattern this be how -pron- bring order to -pron- madness all the example -pron- have see so far would have help if -pron- have this ability to pause or threat to implement synchronization now be a couple of limitation with rp thread mutex be which -pron- will be able to relax when -pron- look at other synchronization primitive but here be the big one -pron- have to write these thing in pair -pron- have to put the lock and unlock together on the same thread and when -pron- finish -pron- should clean up so -pron- will call p thread mutex destroy right and here be the address",
    "the actual mutex -pron- more be a bit like a file handle so when -pron- have do thing like f open to open a file handle or passive call open the kind of posix the low level version to open a file descriptor the thing -pron- get back word maybe just a little integer or one of these see object right so file f open this be not actual father spain store on disk -pron- be just the variable and -pron- be the same idea with this this mutex lock -pron- represent a mutex but -pron- be not the attribute x -pron- ok see what else do -pron- want to say right so -pron- call peter mutex lock and -pron- get to continue great what happen if another thread now call peter mutex lock on the same object on the same mutex",
    "-pron- have to wait -pron- be call preferred mutex lock be block so right so -pron- know for sure that this coal here either continue if no one else have the log right now and if -pron- continue then -pron- have acquire that look -pron- get to play ball right the rock be yours otherwise -pron- have to wait and at this point -pron- may block mean -pron- poor cpu be not allow to pass go and not allow to execute a single more instruction of -pron- code -pron- be stick inside here wait so great now what happen if -pron- have get ten thread or pile together all call petere mutex log at exactly the same nanosecond what this mutex log guarantee be be that one of -pron- will win",
    "continue the other nine or however many -pron- be day or block -pron- have to wait at some point in the future -pron- release the lock -pron- -pron- be no long -pron- and out of those nine thread that be call mutex look one of -pron- be go to win the other will remain block ok so -pron- guarantee -pron- that there be only one thread at a time that can acquire the lock so only zero thread be one third of the time now the piece that mutex lock do not do anything special other than that -pron- do not bless -pron- code in the middle -pron- do not declare to the compiler that something wonderful be about to happen no -pron- be basic mechanism be very simple -pron- either block or allow -pron- to continue if no one else have acquire that look and only one thread"
  ],
  "04137246-bc7c-420a-966b-5b8d482d352c": [
    "ok right so let -pron- talk about what what be a mutex mutex be the key thing that -pron- need in order to implement critical section if -pron- think about -pron- code from moment where -pron- critic section be basically where -pron- want to do surgery on a data structure that moment -pron- only want one surgeon in the room most of the time -pron- thread can be busy say work on the sound another one could be work on the ui another one could be talk to the web but at some point -pron- need to come together and say send message over datum bus or some other kind of event structure so when -pron- manipulate that structure only one of -pron- should be change at a time ok so that -pron- have identify a critical section and now -pron- need to make sure that if one thread be currently do that then other thread get temporarily block put on pause if -pron- like whilst -pron- be in that critical piece of code and the key to do that then be this mutex add a mutex be actually go back there right actually"
  ],
  "04149e23-3b12-41fe-bb0f-f717c1d17865": [
    "hi great so let -pron- welcome to virtual memory ok so the story so far -pron- have be design process be and each process have -pron- own address space as -pron- have this idea of virtual memory ok and so the address number that -pron- and i talk about inside -pron- code only make sense inside one particular process meanwhile -pron- have actually go out and buy some expensive ram and ram be really precious commodity for -pron- machine -pron- be the limit factor for when -pron- want to run multiple virtual machine on a host -pron- can never seem to get enough of -pron- -pron- be nice and fast compare to other storage mechanism so -pron- want to use -pron- efficiently ok so here be one idea -pron- could say well let -pron- assign -pron- process to use the follow chunk of memory ok so this can be -pron- -pron- can say process one or let -pron- say process eleven at meanwhile -pron- be run as well so here be",
    "-pron- process may be process twelve ok so some problem with this first of all -pron- could imagine that overtime when i stop process and end process be -pron- memory go to look very fragmented and -pron- be go to look exactly like problem -pron- face with -pron- heap that be actual physical memory ok will have bit of memory that be in use -pron- over here ok but the free space free place in memory be be separate ok so what can -pron- do to fix that well -pron- could start copy bite down but these process be pretty big ass a lot of byte to copy so that be go to be pretty inefficient and slow and take up a lot of time use the memory bus to do that copy so this do not seem like a great solution the solution -pron- actually describe all the way be call like the base and bind where there be a mapping simple mapping from -pron- virtual memory address -pron- add some kind of offset",
    "address or inside -pron- ram and then -pron- also put some kind of bind to make sure that address inside -pron- process contract piece of memory that do not do not do not that not -pron- concern not sort of -pron- process alright so this be not a great -pron- be only advantage that be simple describe and also simple to implement in silicon and give -pron- a little bit of protection between each processor -pron- process can not overwrite -pron- memory well maybe -pron- can do well than that ok so one thing to notice be that actually in -pron- address space over here -pron- have get ton of address load of address number which i just do not care about -pron- be not be use right now -pron- be not part of the stack not part of the heap be never need to refer to -pron- and in fact -pron- could even go far and say look this part of -pron- program code like the initialization code that i really do not even need in memory right now or pass -pron- heap i have not touch since yesterday ok so maybe",
    "let -pron- scrap that and come up with a new design so here be -pron- idea i i idea every time that -pron- process actually want to read or write something for memory so imagine -pron- be go to really character safe on the heap -pron- need to map that to an actual piece of silicon somewhere inside -pron- ram ok so -pron- will have a magic piece of machinery -pron- memory management unit here which be actually part of the cpu and -pron- be go to magically map that to an arbitrary piece of memory ok so any bite can be map to any other bite ok so here be the follow bite over here that can go to somewhere else alright so now -pron- have solve the fragmentation cost alright so this be obvious strawman argument let -pron- tear -pron- down and show why -pron- be not a very good",
    "two bit machine ok so -pron- have get that mean that -pron- address space be thirty two bit meaning that be actually kind of thirty two physical wire also mean that the total number of address be two to the thirty two also mean that if i actually want to write down an address i need for the debit or in the word four byte so -pron- be go to work between these three idea continuously either the idea that -pron- have get thirty bit and -pron- physical bit separate and -pron- know physical wire or this be the total number or this be the number of byte need to hold that number ok right so -pron- just start with the idea that any address here inside -pron- virtual machine can be map to any physical piece of -pron- rab",
    "i need to store number i need to store what i need to store four byte so if -pron- address space over here for -pron- process be habig thirty two bit in other word -pron- have get say two to the thirty two entry right but each entry now -pron- be go to take some storage somewhere -pron- be go to store for each one of those four byte number to say where inside -pron- physical memory ok so how big be this how how many byte -pron- actually need to store this giant look up table case so first of all let -pron- just work this out this be of course two to the thirty four byte right now that do not mean much to -pron- thirty thirty four but i know how to work -pron- out quickly right and the computer scientist know -pron- too to the is two fifty six but -pron- be more useful to know that two to the ten be about a thousand in fact of course be a thousand twenty four so two to the twenty be about a million",
    "two to the thirty be go to be a gigabyte ok so what about -pron- two to the thirty four this mean -pron- have just come up with an address scheme that take drum wall sixteen gigabyte to store ok so i just need to go out and buy sixteen gigabyte of memory just to store this look up table right hold on a moment how much memory go to actually buy and put into this machine well -pron- have thirty two bit address space so in other word -pron- memory be limit to two to the thirty two bite ok so -pron- have get a total of four gigabyte of memory i could actually put into -pron- machine ok so this be not a great idea this be definitely kind of",
    "because -pron- have just waste -pron- time memory build a giant look up table -pron- better do well than that ok so time for plan c here -pron- go and this time -pron- be go to divide on memory conceptually up into not just an arbitrary number between zero to thirty two minu one but instead let -pron- think about all of -pron- dress chunk be chunk up each chunk i would arbitrarily pick four thousand ninety six so this will be zero to four thousand ninety five and then -pron- be four thousand ninety six to eight thousand one hundred and ninety one etc right so -pron- be take -pron- address base now and -pron- be say -pron- have get this block of memory and in fact -pron- be go to call these block of memory page ok so i get to pay zero page one and page two and so on and so on and so on and when i talk about that all i mean be just -pron- be take the address and divide up into",
    "thousand ninety six well remember how i say that two to the ted be a very useful thing to note well -pron- turn out the four thousand and ninety six be this time four so this actually be equal to two to the twelve what do that mean in term of the wire ok so think about when -pron- actually want to talk about a specific address -pron- have get in -pron- little machine thirty two wire do do do do do do do do do here -pron- all go right do a few more ok well imagine that thirty two -pron- mean that the low twelve bit so the low first twelve wire so -pron- be that one two three four five six seven eight nine ten eleven twelve ok these twelve wire right here uh not necessary to tell -pron- about which page i mean -pron- be all the remain wise ok so -pron- have get twelve wire on this site and then click the stupid calculation",
    "to tell -pron- what -pron- page and if at these twenty bit here refer -pron- to the page number case all like that as a hash there so page number and what about the low twelve bit that -pron- just be ignore to this point this be call the page offset and so literally -pron- could talk about a bite now in term of a particular page ok so let -pron- imagine -pron- have get a pp zero down here that -pron- be not use one two three four right service page four for example and so if -pron- want to wait a particular bite inside here -pron- may say that be on page four where then offset would say three thousand two ok so there be -pron- offset down",
    "address space -pron- can divide up -pron- physical memory the stuff -pron- physically go out and bring and put inside -pron- machine into these same block into these same frame again these same page except that if -pron- want to be accurate but -pron- talk about -pron- in term of physical memory -pron- talk about -pron- in term of physical frame and -pron- physical frame be go to be the same size as -pron- virtual friend as -pron- virtual page and again -pron- can now talk about a particular button here in term of a particular frame number ok so maybe this be frame say forty one forty two forty three will make that one forty four forty five so -pron- could talk about a particular frame number plus an offset so -pron- get to change -pron- first stroman idea to now a mapping between a page",
    "to map that somehow -pron- want to do -pron- quickly to a particular place inside -pron- actual memory -pron- actual ram in other word be particular physical frame and ask for the offset so for example offset three thousand two -pron- be go to leave that alone so -pron- be just go to say that hey once -pron- have decide on a particular physical frame that -pron- want to use then when -pron- come to read a particular byte use the same offset so go into this particular frame and will have an offset of three thousand two so if -pron- do this mapping some great thing immediately happen to -pron- there be one be -pron- do not need to worry about fragmentation anymore fragmentation be less of an issue because as -pron- process",
    "memory if i can do an arbitrary mapping from any one of these spare space like say that this guy be currently completely free then i could map that to say that this stack be get deep large here this mapping could be completely arbitrary -pron- do matter the ordering and where the space inside -pron- physical memory right so how can -pron- do this mapping right -pron- be go to need a look up table that be go to be -pron- first idea -pron- need a way to go from page number so this be -pron- page number these twenty bit just just here to a frame number so let -pron- have a giant look up table and -pron- will store that where in memory -pron- be go to actually use -pron- ram for this so -pron- process will never see -pron- so here be -pron- cs two twenty five student over here all happy right in -pron- code scratching"
  ],
  "04829254-3696-4583-a42b-bd35a938c624": [
    "hi ok so let -pron- use a condition variable to implement a cookie eater and here be the idea so -pron- have get a data structure be actually just an integer but -pron- could imagine -pron- could be a link list -pron- could be some other more interesting data structure and -pron- be go to add thing to this and remove thing from this and i want to make sure that i do not try to remove thing if there be nothing there for example ok so here be -pron- logic then -pron- have get some code here that -pron- can see -pron- be go to use pthread condition soapy thread to run and -pron- be go to pull out a name from this and inside -pron- little loop here be -pron- game be run a lot the mutex and then i want to check to see if there be actually anything inside -pron- data structure so if -pron- data structure be empty then let -pron- go for a nap this block this comment thread so -pron- will see that because will print out a little message with the name and will say ok go for a nap there -pron- go then",
    "must be true that there be something in -pron- data structure and because -pron- be hold the mutex lock -pron- be go to make sure that no one else can actually modify -pron- so between test -pron- and use -pron- -pron- know that be value can not be change because -pron- be hold the mutex lock and so what do -pron- do -pron- take something out of the datum structure and then will print this thread manage to eat this and in fact this code be go to be run by multiple threat ok -pron- be go to have two thread try to eat cookie at the same time ok but will protect -pron- datum structure by the use of this peter mutex lock ok -pron- need to weigh to add thing to a data structure and so here be -pron- little add cookie notice that -pron- have get i protect -pron- change the datum structure use use the lock and after modify the data structure -pron- be also go to broadcast so anybody any thread",
    "wait i promise -pron- that -pron- have multiple multiple thread so here -pron- be -pron- have get two thread which be go to be cookie eater and one could be all angry even one could be agent smith ok and then -pron- will just use scan f to see how many cookie should be add to the jar so each time that i successfully read one integer so scan app please read into -pron- interview here then -pron- will add a cookie so if -pron- type nine or control d then -pron- be go to stop ok how should -pron- stop what do -pron- think about the follow so -pron- will first of all call peter mutex lock and -pron- do that to ensure that actually there be something special about peter text lock which be not only do",
    "on the cpu actually represent what should be in memory so -pron- behave as if there be no cash meaning if i get two thread run on two different piece of silicon -pron- will see the correct value run inside the sword inside main memory ok so -pron- have set game_runne to zero and let -pron- wake up -pron- thread ok so now will just wait until -pron- both exit and then will print finish ok so let -pron- try this and see how well -pron- work ok so -pron- be clear that which code be this cookie solution ok so let -pron- compile that and run -pron- ok so -pron- will see that i main thread be wait for some input meanwhile the angry even agent smith be go for a nap so -pron- call pizza condition wait ok so let -pron-",
    "call broadcast so angry work up and -pron- eat so now there be four cookie leave and then agent smith be also work up so smith -pron- be another cookie and then -pron- can have both go round as fast as possible try to acquire that mutex lock so in this case -pron- both manage to -pron- eat some cookie but now -pron- notice one at a time that that there be no cookie leave so -pron- call pizza hut condition condition wait -pron- release a mutex lock and so the other thread acquire mutex lock and also notice be -pron- so let -pron- just add some more cookie here this time look like angry -pron- have manage to eat quite a few cookie ok this time look at this smith wake up and munch down on those cookie there right so ok -pron- have four cookie and interesting word from three to one what happen to to there ok",
    "ok oh yes right so -pron- put the number of cookie that -pron- remain -pron- just read the value of jaw out outside of any pthread mutex lock so the value of this jaw could be change between -pron- decrement in -pron- and as print something out i think in this case that be exactly what happen so in this case angry have manage to eat a cookie and -pron- never see that value to because angry would already eat a cookie but the time by the time -pron- be angry with actually -pron- actually eat cookie number",
    "-pron- end up print out a value of zero and this confusing logic be all because -pron- let go the mutex lock early -pron- let go of -pron- before -pron- use to value of jar so if i be to make this less confusing i would actually have to say how temper variable here be a current jaw and then print that out afterwards and the reason that i do -pron- this way well then put the print f inside the mutex lock be simply so that simply for performance that i do not want to hold the mutex lock whilst -pron- be print something out because that be potentially along time and all of -pron- cookie to be eat as fast as possible ok right so let -pron- now let -pron- try and quit -pron- program here so ok so",
    "can see that -pron- two two thread still sleep ok so what be the problem here -pron- do actually wake -pron- up look -pron- work up after -pron- tell -pron- to finish but -pron- do not escape why not the problem here be that yes -pron- call broadcast but then each thread notice that the java store zero so -pron- exit each thread exit pizza condition wait but then when around the while loop and say oh look jar be zero what should i do -pron- will go back into -pron- water loop and wait again ok so what be the fix here be fix be to set to check that -pron- should be run so -pron- lose game run ok be true then -pron- can go into this otherwise -pron- want to",
    "and compile ok so now when i exit great -pron- finish and p thread join be able to exit as well but look at this -pron- manage to get negative two cookie ok so the lesson here be that after exit this loop -pron- actually carry on -pron- actually code on pull thing from -pron- data structure and so well code here would actually also break out of this so if the game be not run do not collect two hundred dollar do not pass go but instead break out of this loop as well because -pron- want to quit the game right so now if i compile this ok and yeah i can eat cookie happily right and now -pron- will see that i actually always have always identify",
    "some as well ok right now when i quit ok will see that out finish smith be work up smith finish but what happen to angrave k -pron- never -pron- never see angry for wake up why be that so -pron- call preacher condition broadcast on both thread but -pron- never finish why not ok so good question oh yes so now what do -pron- do -pron- break out of this loop but -pron- never actually release the mutex log ok so now let -pron- well at least the mutex lock soapy thread mutex"
  ],
  "056e04b9-e004-4e05-af4b-dee1b2888806": [
    "hi so the last still a video one this one be go to be how can i write a fast memory pool and the last will be tip for the malloc mp so here -pron- go how can i write a really fast malloc memory pool so let -pron- imagine -pron- want to do the following so -pron- be go to write a very quick version of malloc and the idea here be that with the memory pool all the object that -pron- be go to allocate inside this memory pool go to be free at the same time so let -pron- kind of sketch this out -pron- have get a buffer some memory here -pron- be go to use some static make this large there -pron- go right -pron- have get ten thousand byte and that will be -pron- memory pool for today -pron- be go to keep track of how much -pron- have use so i can do the follow wait so -pron- want so many",
    "make a note of that will have this device -pron- be go to return to -pron- will be at buffer plus how many use ok and then -pron- will just make a note that -pron- have use some ok so let -pron- implement -pron- use here by bite so each request get a brand new piece of memory there be no attempt as -pron- see to reuse memory the -pron- bookkeeping be very simple with -pron- in many way -pron- be very similar to the ecb rate version -pron- see the very beginning right and then one day when -pron- finish use all of these object -pron- just want to say ok -pron- be do with -pron- how can i freedom all alright well easy -pron- can just reset -pron- use flag back to zero perhaps if there be a security concern or -pron- be try to debug code -pron- could call memset and wipe out all the value in that array but if -pron- just care about performance there be nothing else",
    "so -pron- see this in thing like say game where huge -pron- know that -pron- just want to create object and -pron- be only go to disappear when the user die or which be the end of the level -pron- see this in high performance web server where say or -pron- string manipulation whereas -pron- try to take the request and extract the head of information and exactly what -pron- want or that string stuff -pron- could call new and delete or malloc and free but why do not -pron- just put -pron- into a pool because -pron- know that -pron- have a very temporary lifespan and once -pron- satisfy this request once -pron- have decode -pron- -pron- can throw all those away in just one go so that be memory pool for -pron- very simple concept here be a very simple implementation"
  ],
  "068de9f9-f0f5-4140-8da8-7ba0ac3aa5c3": [
    "right ok so great -pron- have put thread to sleep by call p thread condition wait and now be happily doze inside that condition variable right at some point in the future on a different thread -pron- now know that -pron- be time to wake up that thread so for example perhaps -pron- finish download something perhaps the sound sample be ready to play or perhaps -pron- know that the user quit and -pron- be time to run that clean up thread which be go to -pron- move the file and everything else for -pron- ok so how do -pron- wake up a threat -pron- be easy -pron- just need to call -pron- other one of two thing so -pron- can say either p threat condition signal kate and that will wake up a thread inside one of -pron- -pron- room that -pron- sleep in so -pron- better pass the condition variable that -pron- thread be sleep in ok and there be one other option which be p thread condition broadcast",
    "variable and if i call condition broadcast -pron- be go to wake -pron- all up if i just call signal then -pron- be ask the system to wake up just one of -pron- and i do not get to say which one i just simply ask to say find -pron- one and wake wake -pron- up for -pron- ok right so quick comment on these if -pron- turn out that right now no one be sleep inside -pron- condition variable then these two call have no effect so just as an analogy -pron- could imagine p three condition signal be run up to i hotel and randomly knock on a door where one person -pron- be sleep versus broadcast -pron- wave -pron- sort of pull the fire alarm on wake everybody",
    "pretty simple right say the threat to sleep later when -pron- know condition have change -pron- have add money to the wallet -pron- find that favorite sweater now -pron- can wake up that other thread so -pron- can continue alright so let -pron- actually have a look that use this and for this -pron- be go to have some multithreade code that implement some cake ok so let -pron- have some cake that be -pron- resource here or -pron- data structure and as -pron- can see initially i do not have any cake ok but soon -pron- be go to be create cake and -pron- be go to use this because i want to talk about create resource and then consume those resource ok -pron- be kind of very standard problem that -pron- be go to have when -pron- start write large piece of code that now -pron- have get bit of code process and thread which be put thing into -pron- data structure or",
    "as -pron- have these thing i want now consume these and act upon -pron- right so what do i have in order to implement this well -pron- can see just like i could have p thread thread i can have a mutex thing here -pron- be and here be a condition variable and just like a p thread mutex initializer lip will fix that actually must be an underscore i can initialize thing use these magic constant ok so great i can now -pron- start to use these ok so let -pron- have a look at the code what have -pron- get right -pron- have get two little method here and i want to make -pron- thread safe and i want to make sure that -pron- cake never go negative ok so if -pron- call -pron- decrement function i want to block and that be where -pron- condition variable be go to be useful in other word -pron- can only remove cake",
    "of cake again so right so add thing to -pron- cake be easy all i need to do be just come back come back come back there -pron- go add one to -pron- cake and -pron- be go to ignore overflow issue today ok so right let -pron- think about how -pron- can do this well first of all i need to make -pron- code thread safe so on -pron- increment i want to make sure that only one thread at a time can change the value of cake so let -pron- call lock in there and then after i finish let -pron- call unlock ok right so will put that in a little bit and now if two thread call current at the same time one of -pron- get stuck wait for that mutex so -pron- will call p thread mutex lock on -pron- mute x variable and the first one to do that continue because that no one hold the duck great raptor duck release -pron- when -pron- call",
    "because -pron- be hold -pron- right now so -pron- have to wait -pron- get block inside the local right so -pron- have get over there before should be obvious now let -pron- go back to think about what -pron- be go to do for this this decrement better right so here be the plan ok -pron- would like to call just cake decrement value but let -pron- imagine -pron- have not take cs two forty one so how would -pron- make -pron- so that -pron- can only consume this resource -pron- can only take one away from the cake when there be a piece of cake present well if -pron- do not do any well -pron- write a loop so here be -pron- really naive little lupe look whilst there be no cake just sleep for a second and try again ok so this be the non cs two forty one version of this code -pron- do not understand synchronization primitive so just do under loop and every second -pron- be poll",
    "because what -pron- have do be -pron- have define a condition for when -pron- can not continue and that be actually the secret of use condition variable and that be why -pron- be call condition variable so yes in practice -pron- have see the behavior alot like hypnotise someone to sleep for a moment and then wake up later but the trick or the key part be to say what be go to be -pron- condition that i should sleep and -pron- be go to use -pron- condition variable inside that kind of loop ok so let -pron- actually kind of now sketch out how -pron- can use this so rather than actually just say sleep for a second let -pron- use -pron- condition variable so instead let -pron- call p thread condition wait there -pron- go and -pron- know that do the same thing but other post",
    "right condition variable or few go please sleep inside -pron- condition variable ok right and later inside -pron- increment method will call that pta condition broadcaster wake anybody up that be call the decrement method and be sleep inside here right be that the full story no because -pron- have to think about thread safety so here be the here be what -pron- will have to think about first of all yeah -pron- can not just call minus minus here that be not a thread safe operation so -pron- be also go to need to put in some unlock and lock course so -pron- would like to put in say p thread lock here",
    "right but that be not quite the whole story ok -pron- have some problem here that the time that -pron- test the value of cake if -pron- be versus the time that -pron- use -pron- -pron- do not want another thread to quickly run in front of -pron- and eat up a piece of cake because then that would mean that -pron- have erroneously manage to make the value of cake go negative and as -pron- say the beginning -pron- be not go to allow that so somehow -pron- need to make sure that -pron- be between when -pron- check the value of cake here be part of -pron- while loop that no one can can come through and change the value of cake how can -pron- do that oh ok easy -pron- will actually not lock there -pron- actually want to lock before -pron- test -pron- value so let -pron- put -pron- mutex lock here p thread mutex lock",
    "ok so now sleep sorry not sleep grab the mutex so -pron- can not actually continue until the mutex lock have be release and here be a big idea with mutex lock be that if -pron- use -pron- correctly -pron- actually only hold on to -pron- for just microsecond at a time just while -pron- say test datum structure and then maybe use so ok that look pretty good -pron- have get rp thread mutex and peter mutex on lock on mutex ok and now let -pron- think about -pron- ask what -pron- do inside a little loop here ok so -pron- be sleep will not peace -pron- condition wait but -pron- be no problem here if i ask -pron- thread to go to sleep -pron- go to sleep hold the duck no one will be able",
    "a little like while i here here be -pron- little lie that i i ok i want -pron- scissor that i put a parenthesis there let -pron- drop -pron- off there -pron- go so -pron- actually that be not the whole story for pizza at condition variable when -pron- go to sleep -pron- actually pass in the address or a mutex so -pron- be -pron- mutex i call -pron- ok -pron- have be write mutex i should have be dis writing -pron- up here ok so here be here be -pron- new text that -pron- 'd like to be release so p three condition wait actually do two thing -pron- unlock the mutex and then go to sleep so -pron- have all not the near text to stay right anybody else now that need that mutex that need this dark can acquire -pron- and continue so the very important",
    "two thing be go to do -pron- do three thing when -pron- finally wake -pron- up before -pron- return outta peter condition wait -pron- call p thread mutex lock ok so that mean when -pron- finally continue when -pron- finally go around in this code -pron- have to meet ex again ok so what do this mean this mean all the code -pron- write in here -pron- can definitively say that -pron- be hold that mutex that -pron- have acquire -pron- that no one can change the value of cake while square inside this code because -pron- have the mutex and that be a condition in all of the code that -pron- be write the first -pron- must call pizza admin take log and if that lock be currently take sorry -pron- be go to have to wait millisecond or so until -pron- be release until whoever be modify or read the datum structure have finish so that be ever critical critical idea alright so will stress out again in a moment but now -pron- have sketch"
  ],
  "079e15d0-be66-4f0c-a3b4-bb9079ea8eea": [
    "ok so let -pron- have a look at this example one more time but actually the text editor and then -pron- will talk specifically about how pthread condition wait actually work so here -pron- go remember the story so far be -pron- want to modify some datum structure which will just be a little integer here and in particular -pron- have get a certain condition where -pron- have to wait so for example -pron- do not want the amount of cake to go negative because that do not make sense right so rather than star than make cake and negative will just block until more cake arrive ok so -pron- be -pron- plan -pron- say as a stepping stone to understand use condition variable let -pron- pretend -pron- have not take cs two forty ward and will just kind of keep polling will just keep keep beat luke bloope so look well say cake who be get down to zero just discover a loop and will just keep testing but rather than just do that every nanosecond let -pron- put in a little delay here so maybe -pron- be like in sleep for a hundred year or something",
    "-pron- do need a loop -pron- will tell -pron- one big reason why in a moment and what do -pron- need to do -pron- replace the sleep where -pron- pee thread condition weight and here be a condition variable -pron- be go to ask a threat to sleep in and -pron- also go to release a mutex so -pron- be -pron- discover -pron- be always necessary to use a mutex because -pron- be go to write code in here where -pron- want to test some condition and then later use that the assumption that condition be now true so -pron- need a mutex lock to ensure that -pron- be the only person get there can be modify datum structure so -pron- end up bite p thread mutex lock cave right so there be the log and then later -pron- unlock -pron- right so the point then be to actually a threat can block and two place -pron- may be block temporarily",
    "idea be that -pron- only hold mutex lock for a few nanosecond -pron- be modify something for example ok so reminder this code actually do three thing first of all -pron- unlock the mutex and then -pron- sleep literally -pron- ask the cpu to go and work on a different thread right so -pron- be not go to execute anymore code but later when -pron- work -pron- up before return -pron- will re lock which mutex so -pron- will reacquire the mutex so if there happen to be another thread that be temporarily hold that mutex say be also be also college document or those will see in a moment also call equipment then this thread have to wait so there be lot of place where thread be block port have to wait till -pron- can continue ok right so what about -pron- increment method -pron- see that before -pron- change the",
    "and then afterwards -pron- unlock the mutex ok right so what do -pron- forget -pron- forgot to wake up any sleeping thread in here so -pron- have modify the value of cake so -pron- could wake up all threat so for example -pron- could say p thread condition forecast if -pron- want to wake up all threat that may be sleep inside the thread condition wait or -pron- could call p thread condition signal if -pron- want to just wake up one of -pron- and which one get work up this arbitrary ok right what else can i say about this well -pron- could be that there be no thread wait inside the condition variable so in which case -pron- signal or broadcast call here be a no op be not worth call so if i truly care about maximum performance i could actually reason about when i actually need to do this i remember that because of the mutex lock only one third of the time can be operate so at this moment -pron- could say",
    "then that be the only time that there may be sleep through -pron- otherwise if there be piece of kate lie about no one be go to be sleep when -pron- call decrement so let -pron- test that if cake be now on let -pron- call peter condition signal now some of -pron- may ask be -pron- good to call peter condition signal or broadcast before or after -pron- be not the mutex surely -pron- be well to call -pron- afterwards but the surprising thing be that actually good practice be to call signal podcast before here be just a annoying reason why and -pron- can follow the rabbit hole start off on stack overflow and the long discussion about this but the headline be that if -pron- have thread with different priority then this ensure that the thread with the high priority will be wake up by this signal so that be",
    "follow good practice will do -pron- in that order ok so be -pron- do here let -pron- have a look -pron- have get some code i prepare early here -pron- be -pron- look markedly similar but actually -pron- have do well than that -pron- have get some code i make early that actually kind of print some thing out and do -pron- wood colour as well so -pron- will see that -pron- have get the same method the same increment in document method but now -pron- have get some some project statement here so -pron- can follow along and nothing have change there but -pron- have also get these other method which be go to call increment and decrement so -pron- have get a cake maker at a cake eater alright so let -pron- have a go let -pron- run this right and off -pron- go right so first of all -pron- cake eater be call decrement but -pron- be block but -pron- be get block on p three condition wait and then after a few second -pron- think -pron- call implement",
    "now -pron- be go to wake up the document method so peter condition weight return and be able to eat cake right so in fact -pron- can follow this pattern for a few few time the producer make more cake each time -pron- increment -pron- change the data structure but call beat condition broadcast and then the decrement method be able to continue and -pron- can see -pron- be -pron- be consume cake so this be great -pron- have get basically like a cue base structural or the idea of a producer can 's beginning of a producer in a consumer and the consumer can block until resource be available and -pron- have implement this with just a single test like be the value of cake 0 or not but now -pron- could realize that -pron- can write any application condition like only start the countdown thread if -pron- walk -pron- have fuel and the astronaut be in the rocket ok",
    "stop so -pron- will see here that -pron- have get this please please stop variable here inside -pron- producer and consumer method here and how do i set that i use to signal so if -pron- press ctrl see all that -pron- signal handle be go to do be change this change this variable ok so quick comment about this be that how do -pron- ensure that the compiler do not optimize this away so for example the compiler may say oh look at this nothing be this code change please stop maybe i should just turn that into an infinite loop so one thing -pron- can do be -pron- can declare -pron- volatile which mean which be a hint to the compiler but no more simply that this variable do not trust -pron- do not make assumption about -pron- state always go back to main",
    "mean that someone else may so -pron- be -pron- be a hint to the optimizer right the last thing -pron- want to say about peter condition wait be -pron- have two important idea first of all the unlocking the mutex and sleeping actually occur as if -pron- be an atomic operation so there be no opportunity between unlock boot x and go to sleep where another threat may call peace road condition signal -pron- do not want accidentally to allow another thread to continue call peter condition broadcast or signal send out a signal when there be no one sleep and then -pron- go to sleep that would be bad like -pron- would never wake up so those two operation actually occur as one as if -pron- atomic and secondly actually peter condition wait can suffer from something call experience wake up let -pron- spell that correctly spurious weekend",
    "ok because -pron- have get a test in here and so if -pron- be suppose to go back to sleep because there be still no cake then -pron- go once around the while loop and -pron- call peter condition wait again ok so why do spear wakeup occur -pron- occur because -pron- be incredibly hard to actually say for sure that -pron- unlock the mutex and go to sleep block as truly as an atomic operation when -pron- have machine with multiple cpus especially when those cpus on physically different physical chip on different different dice so rather than slow down the performance of -pron- chip -pron- in this case say that well if -pron- can not guarantee that -pron- do not miss a signal instead -pron- will allow a spurious wake up to occur so that be why"
  ],
  "084ced83-e9fe-4139-9d64-86f4824864cf": [
    "hi so let -pron- review some idea from c code first of all what do -pron- think the size of char be \uff1f at this point -pron- say oh now i know this one easy the size of chart be define to be one yes the character in c be actually a fundamental way of how -pron- talk about addressable memory and so that be kind of the fundamental unit of one item that -pron- can read or write so that be define to be one in c code and have a look at -pron- suppose one someone say the follow -pron- have get x what be x -pron- be a pointer to in -pron- and -pron- have initialize -pron- to hold the follow value now -pron- choose today to write that as a hexadecimal value but -pron- could have also just use integer just a regular decimal integer as well and then someone say ok so what do -pron- think the value of x plus one be at this point -pron- need to say oh ok hold on a moment i know about pointer arithmetic and x be a pointer so when i try to move leave to right by use point arithmetic",
    "so what do i have -pron- be on a thirty two bit machine what can i say about the size of -pron- integer well actually -pron- do not know -pron- can not say for certain in this case because -pron- be not talk about look at pointer which -pron- can make a particular diction about -pron- size -pron- actually talk about just a simple scalar simple value type here so how big be an int so let -pron- see one or thirty two bit machine but that be not enough to narrow -pron- down now -pron- do know that the c specification give -pron- a minimum size for at into type and that be just two bite so -pron- be probably go to be somewhere between two bite and four byte now today if -pron- be to run this on a thirty two bit machine that -pron- can get -pron- hand on maybe a small cell phone may be really old laptop i bet -pron- fair money that on a thirty two bit machine",
    "a good chance but not certainty that the value of this expression be go to be the hexadecimal value one two three four plus four byte but like i say because -pron- be deal with vince and not pointer -pron- can not say that for certain all right now the last thing will talk about be the follow code let -pron- see if -pron- can spot some error in this code ok so anytime -pron- use malloc -pron- should slow down and check -pron- actually get the minor mattix number right number of byte so today -pron- be try to store inside this variable a what be a -pron- be a pointer to a double so i need enough space to hold at least a double floating point number which will be eight bite what do -pron- ask for -pron- say hey malloc this be number why -pron- be tell about the size of a double pointer ok will that work huh maybe maybe not so first of all",
    "i want to store on -pron- hip instead -pron- ask for the size of a pointer now on a sixty four bit machine -pron- be in luck that will be eight byte which will be the amount of memory -pron- want on a thirty two bit machine be not so lucky because -pron- point be only need four byte so an easy -pron- have actually now request an insufficient number of byte or because of this sneaky aspect down here so do not fall for the kind of visual trap of make the type here the same as the type inside -pron- the size of so that be kind of a big gotcha right then what do -pron- do -pron- say ok let -pron- have another variable call be -pron- be go to be appoint to do a double as well and so -pron- have assign -pron- away in other word at this point -pron- have get a and b both hold the address that be both look at -pron- both get -pron- own kind of little bit pattern somewhere inside memory",
    "which be the address of -pron- four bite on the heap well -pron- have get -pron- value ok so now -pron- say freebie in other word use be to say hey heap i do not need this memory anymore and as a good citizen -pron- have change be now to look at nothing so hopefully if someone try to use -pron- b code in the future the program will crash immediately as oppose to overwrite some memory that -pron- be no long use to hold a value but then i say oh use a follow a dereference a to hold the follow double value and -pron- be pass in this file integer call bad food and there be like a sheep this unhappy with this grass so at this point if -pron- be lucky -pron- program will crash if -pron- be unlucky -pron- will crash in an exciting and mysterious mysterious way later if -pron- really lucky -pron- will not crash and instead give erroneous result and do arbitrary behavior",
    "free up ok let -pron- have a look at the different example so what do -pron- think about the follow -pron- have get little variable call result what be -pron- -pron- point to character so -pron- be a pointer -pron- hold memory dress and then -pron- say stroke copy another word copy the following and -pron- be go to pass in to store copy the address of crash maybe and also pass in the address hold by result and what be that and the answer be -pron- could be anything result look like -pron- be just a piece of code here so -pron- be go to be just a stack variable so result be go to hold some arbitrary bit pattern in other word line five and six be go to copy a whole sequence of byte into some arbitrary piece of memory that result be point to so again if -pron- be lucky instantly if -pron- be not so lucky -pron- will crash later if -pron- really",
    "this last one this be mean to be an append function which take a available ptr and what be mean to be -pron- be mean to be a pointer to a character pointer and also another variable call parameter call message which be a pointer to a cosmic set of character in other word -pron- promise not to change what message point to so let -pron- just remind -pron- what this actually mean -pron- mean that -pron- be ptr be go to hold a value which -pron- be a pointer so -pron- be look over here but -pron- will not actually find any character there instead -pron- be a pointer -pron- so -pron- also be go to be four byte or eight byte hold a memory address and if -pron- follow that that be where -pron- will find the beginning of some string ok so this function be mean to append thing but -pron- have several error so to fix -pron- -pron- be actually go",
    "a text editor ok so little bit large alright so -pron- be flight and thing to format here right so the first thing that jump out to -pron- be a pattern stroll end of of malaquais hold a moment that be not go to be the night right number of byte to hold a string i would at least expect this to be ok take the string message and add add one to -pron- ok so what do this code attempt to do here -pron- say hey -pron- have get a pointer to someone else pointer so let -pron- look at that let -pron- look at that point and if -pron- be not initialize to anything in other word -pron- be just look at null then -pron- plan will be to change -pron- pointer to look at some knew heat memory right so the idea be if there be nothing there hey let -pron-",
    "-pron- be big enough to actually copy too so that be the purpose of this store cat line be hey again -pron- be look at -pron- pointer so i want to know -pron- value and -pron- be go to use that copy the message across and will have to assume that maybe there be go to be sufficient now one common gotcha here be that be true kattenstoet copy look really similar visually so today -pron- be use stroke at meaning -pron- be go to append this new message on the end ok so -pron- could require that -pron- give -pron- sufficient memory but what about the case where -pron- just call malac well what be go to be inside that heat memory and the answer be anything -pron- could be an arbitrary",
    "of that well i could write code to now let -pron- see do malloc and then in the case of mark use store copy but instead let -pron- show -pron- another alternative which be let -pron- let -pron- deliberately set the very first bite of that heat memory to zero so in other word right how do i do that i need to dereference twice -pron- variable to finally get to that very first character of -pron- heap so let -pron- set that to zero and i can do that by type the integer zero or i can type the ascii nul byte right so this be the ascii nul byte which be not the same be write know with two ls anytime -pron- see 2 ls tell -pron- know -pron- be actually talk",
    "down to strcat , strcat be immediately go to find that nul byte and say ah - ha that be where i should start from the last thing i notice be that return a type of void pointer a void pointer be not be not scary -pron- just mean i want to point to some memory but -pron- be not go to tell -pron- what be there i just actually really only care about the address the actual piece of memory that i want to read or write to later right now -pron- be not go to declare a type ok so let -pron- return something there and will return say this be the piece of heap memory that may be allocate or the memory that -pron- give -pron- that be there so the code be write assume that if -pron- be give valid piece of memory that be large enough -pron- could now modify this code to actually calculate the new length of of the old message there plus whatever pende and possibly create large piece of memory for that"
  ],
  "08a28266-820e-4f7f-8326-7c8c3f53dc2b": [
    "ok right now -pron- be time to start talk about some deep gnarly bit of system programming and in particular what happen when system call get interrupt ok so many system call a very fast for example if -pron- want to find -pron- pid that will return immediately but some thing may be slow for example if -pron- call write and -pron- be to something which may block like a network socket or a pipe then -pron- be possible that this write call may be interrupt before -pron- complete so positive have the idea of fast and slow device local disk be consider fast but for slow device possible than not little bite maybe actually be write so -pron- be important that -pron- find out what actually happen ok so -pron- be important that -pron- actually get and store the result of -pron- write call and then check to see what happen ok so let -pron- just",
    "to the white call here -pron- be and -pron- will see that k -pron- have get -pron- standard right -pron- have get p right -pron- talk about a little bit which allow -pron- to include an offset there be even another version which allow -pron- to assemble right use different bit of memory so rather than require all of -pron- datum to be in one contiguous area -pron- can use this more complicated version to say ok take these bit over there and those bit over there but -pron- will not -pron- will not leave that for cs two forty one instead let -pron- scroll down and will just 's notice a few thing so first of all light that -pron- see the right mac great right few bytes then request ok so -pron- have get to look at the return value and also if -pron- fail then if -pron- succeed then -pron- get the number of byte write or -pron- get a negative",
    "be talk about early to say what actually happen so what value of i do not know may -pron- see ok and here -pron- be right so all of these be actually actually just constant define integer refer to the value of earner ok so -pron- fault -pron- give an invalid file descriptor negative number -pron- have get thing like ok -pron- give about a file descriptor which do not actually refer to any active fire scripture -pron- can use for writing and -pron- one that -pron- be go to talk about in a little bit more so here be the into after want to say alright that -pron- attempt to do some -pron- attempt to write but a signal interrupt",
    "really lazy if -pron- get interrupt by signal so for example suppose an alarm signal go off suppose a sigpipe happen suppose a child process finish then -pron- will just return do not actually do any write force ok what a lazy kernel that be so ok will keep scroll down and -pron- can see here there be more and more stuff there be other one as well for when -pron- start talk about asynchronous right so -pron- probably hear of node dot js which be kind of take the server world by storm but -pron- can make javascript on the server that use asynchronous io and so -pron- use epoll to figure out which file descriptor ready and -pron- use thing like these e again and -pron- would block to figure out which file descriptor ready for more bite so as -pron- can see there be plenty and",
    "some point or gate right but -pron- be just go to think about this what this idea about oh i be interrupt key so if -pron- do not handle this then exciting thing may happen so perhaps -pron- have write code that use same weight right so same way be suppose to actually wait until there be a piece of pizza available in the pizza box for as to eat but -pron- just get interrupt and just return as -pron- off so i can be bother to wait anymore right and so then -pron- let -pron- code continue oh idea so -pron- have be oversimplify thing at this point -pron- have not be write high quality code instead what -pron- need to do be -pron- need to check the return value of some weight and read and",
    "worthy code because some weight may be say oh i fail and -pron- may fail simply because -pron- get into up to do to a signal so -pron- can check this and then -pron- can just re run -pron- again so typically -pron- will see the follow kind of code that -pron- can do thing like like -pron- 'd like to call some weight ok and -pron- be go to call some way on a particular counting semaphore ok like ok here be a pointer to -pron- structure there but -pron- could be that that return a negative one mean -pron- fail ok so -pron- could store that inside a little variable here -pron- be but -pron- could also put this directly inside some kind of conditional test right so let -pron- put this inside",
    "let -pron- see if -pron- correspond to a failure in other word -pron- get to negative one right so if that be true should -pron- repeat this or not -pron- only want to repeat if -pron- actually see that -pron- just get interrupt so i can do this in one go i can say all right and if ever know k be equal to ok -pron- just interrupt then go round the loop again so here be -pron- trick that be all big expression for awhile and notice -pron- as a side effect of evaluate this while -pron- actually call sam wait ok so put all that inside there and drop a t t inside and for the actual body of the while loop do not do anything ok right so that would be more production quality code -pron- may as well log any other error as well so",
    "get zero value here then maybe -pron- actually want to exit or log -pron- somewhere so for example that would that would help -pron- catch if the county center be not properly initialize ok so this be a lot of annoying code to write each time and actually make -pron- hard for -pron- to generally read -pron- code so also people tend to kind of put this code inside a little function call so -pron- may want something call say same way reentrant or -pron- same weight which kind of do this error check as well and do this check for interrupt right that will send wait what about really right i guess a little bit more tricky and -pron- will so let -pron- do sleep and then -pron- will do read and write ok so with read and white -pron- be tricky because this can return in complete set of byte so really so let -pron- do let -pron-",
    "interrupt -pron- just go to go round again right and retry -pron- may return negative one and some other error in which case let -pron- just kind of quit to say -pron- be sorry maybe someone pull out the usb or the network connection be close but -pron- need to handle that differently maybe the driver become corrupted or something like that or maybe -pron- do not have write access anymore what else may happen -pron- may have some number like oh i must have right to thirty seven byte but that be not enough so let -pron- keep account of the true number of bite that -pron- have actually send so far and then go round the loop to try to send the remainder obviously -pron- do not start from the beginning -pron- want to start from whatever offset that -pron- have count up so far or maybe -pron- have now get to the point where total byte",
    "say yeah -pron- send all the byte ok -pron- be do -pron- be do with this return so -pron- have actually get to write code that cope correctly with all four of these situation for read -pron- also have the possibility that -pron- would return zero which mean ok that be -pron- -pron- have read anything and there be no more bite come through this pipe be now closed for business i can tell -pron- no one be go to read anymore or this stream safe the terminal be not get any more bite or this file -pron- have reach the end of -pron- ok so again -pron- have to write sophisticated code to think about these possible different state right i finally be sleep so -pron- sleep -pron- say please sleep for so many second but -pron- be possible to be interrupt so let -pron- have a quick look at sleep this one be go to be a little bit easier so -pron- see -pron- probably want section two let -pron- try that section three ten",
    "value return because so zero if this sleep the require amount otherwise return the amount of une sleep ok so -pron- could keep track of that in fact this be a good way to start think about how -pron- may implement white as well so let -pron- sketch this out and that will be enough for this video ok so with sleep here be what -pron- could do in fact do i have that go ahead today ok so so -pron- interruptible sleep here ok so -pron- sleep ok -pron- be go to have the number of second that -pron- like to sleep so let -pron- keep track of the",
    "like be go to be an analogy for the number of byte that -pron- have manage to successfully send with -pron- right call as well ok so -pron- will have a like a do here that can be initially zero and now -pron- will just say ok sleep right so well ok so i need a after available in here like ok sleep and how many sleep do i how many second i want well this be total number of that -pron- want to have but -pron- have do so many second so far gay right k so will put that in there and will know that sleep return zero if the if -pron- be actually manage to sleep number of second otherwise for sleep -pron- will never"
  ],
  "0c22ed5a-99c0-4ba5-9ac9-c56c5e3911ca": [
    "ok right so let -pron- run through some simulation of purpose obtain some resource case so what do -pron- have here right so first of all let -pron- not confuse deadlock with dreadlock ok both of those can get -pron- into trouble on the high sea so but -pron- be look at c code today but just a simulation of process be request obtain resource and release -pron- ok so what do -pron- get right ok so here be the here be the game that assume process require lock in the order specify and really source resource only when finish ok so -pron- be go to use what be call a resource allocation graph to determine if and when there be deadlock so -pron- could sketch out the order in which process or obtain these lock and there be a possible order maybe that will lead to deadlock ok so",
    "then and then -pron- will then -pron- will continue ok so i go to process wait for resource will quite an exclusive lock call resource as soon as no other process have text message block ok and will assume the lock affair so in the general case with the period mutex lock -pron- could set oarlock up to a give process with the high priority access to exclusive lock but in general the sequence of which the lock be assign to up process be arbitrary right so -pron- be not the same kind of well define simply that -pron- will get -pron- at some point ok right so how do -pron- write these resource allocation graph well first of all let -pron- write down -pron- resource of different type so here -pron- go right -pron- have get different resource down",
    "imagine for example these be piece of hardware maybe -pron- be exclusive access to the screen i want to go and put -pron- computer into a kind of full screen mode so only i can actually kind of right to the screen or maybe -pron- be a piece of hardware maybe i want exclusive access to the firmware or to storage device or maybe -pron- be a database table and i now need to make sure that only i can access -pron- or maybe -pron- be some datum structure but whatever -pron- be -pron- have this idea that only one process or thread at a time can access -pron- now -pron- be go to use the word process that be kind of historical reference in the sense that -pron- think about these thing even with four thread exist but -pron- could imagine how -pron- could set up identical situation to multiple thread run inside just one process so -pron- be the concept be the theory which be the most important idea here",
    "process p one request and obtain resource a and then resource be ok so let -pron- set up process one here ok process one and in a little bit -pron- be go to need process too as well ok so -pron- request a so be anybody hold on to a right no so -pron- get to eat the chocolate right here be the chocolate here be that lovely resource that -pron- would like ok so let -pron- do an hour from the from the chocolate bar be high - quality of resource -pron- would like directly to process one and that also show be that this resource be be hold by process one so -pron- obtain that resource but -pron- be not do yet be also go to get exclusive access to be as well ok so how may this be implement well for example",
    "right -pron- do no so the next thing and in -pron- timeline here be process two request see ok so let -pron- choose a different color for a process to ok right so process two first request see ok so -pron- get see fine -pron- be hold on to that get screw have access to that resource but then -pron- would like be unfortunately -pron- can not right now be be currently be hold by process one so -pron- be go to look longingly be hand be outstretche want to touch be but no -pron- be stick on the outside look at this box can i really want this but -pron- be be force to wait because process one have exclusive access ok so that be the beginning of a resource allocation graph or rag right and -pron- can see the process to can not continue right now -pron- do not have everything -pron-",
    "resource be and the reason -pron- can not get -pron- be because process one be still run right so do -pron- have deadlock well no -pron- do not because -pron- can see that process one be not actually wait for any resource yeah sure -pron- be be a bit slow and finish up but there be no reason for -pron- to actually run forever so at some point -pron- be go to finish and when -pron- do so -pron- can release these resource ok so delete that line and -pron- delete that line so -pron- can now see that process too and no long need to be wait for the mystery source be and so -pron- could raise the at and turn that back into a line that be look at -pron- and say ok great now process to have everything -pron- need -pron- can continue so if -pron- be write code -pron- can imagine -pron- call to peter mutex lock have finally complete or access to the"
  ],
  "0cebe85c-2283-48d7-bb48-045052e80cae": [
    "ok so let -pron- get a server run right so if i have python two instal i could say python simple http server something like that but maybe the ttp be actually capitalize but -pron- have python three so i can say right python http dot server ok and serve or server ? -pron- be go to guess server ok great so this be now listen for http request on port eight thousand great let -pron- give -pron- one k so here -pron- go in fire fox -pron- be go to connect to localhost colon and then the port number so off -pron- get and whohoo what do -pron- see -pron- actually see that this little module by by python give -pron- a directory listing and then i can click on a link here ok and actually see the code that -pron- just write today which be kind of fun ok and if i want i could have a little website here",
    "here -pron- go one of the same thing now from -pron- c code ok so -pron- need to make sure connect to port eight thousand on localhost and i want to make sure -pron- be request the homepage ok so that look pretty good right let -pron- try this so -pron- will see that -pron- python server be happily report all the thing that fire fox have be request so let -pron- break out of that now an run -pron- in the background ok so off -pron- go because now i want to start compile -pron- code right so -pron- will compile the client and run -pron- and -pron- see the beginning of this yes -pron- connect -pron- see a status message of two hundred which mean",
    "reason -pron- do not see the content -pron- problem right now be that -pron- just call read once and so -pron- get back the head up but that be not enough to see the rest of the information so time to wrap this inside a loop ok so let -pron- keep on reading read until -pron- do not want to case so let -pron- think about first of all -pron- want to escape this if if reed return a zero or negative value so zero remember for read mean that there be no more bite so zero would mean the end -pron- be the end of the line no more bite for -pron- negative one would be failure so in either case will will stop so ok and that look like -pron- be go to be enough to read all of -pron- bite ok so let -pron- go",
    "the status information so this head of information at the top here -pron- would not normally display to the user -pron- can see that now be be serve by python and here be a stuff here be the html document that -pron- can now parse and turn into a nice look web page and look here be all of the the link that -pron- may want to follow so for example here be client dot c and -pron- aide out etc so the last thing i would do be let -pron- actually request the bite of client dot c and then -pron- have get a self aware client program so all -pron- have to do be just change the thing that -pron- be request ok so let -pron-"
  ],
  "0dfe3fc6-d54e-41af-b8c0-14d77999a05c": [
    "ok hi welcome to lecture thirty five so let -pron- get start -pron- be go to be look at signal and work with the machine from cool thing -pron- can do -pron- but first alkaline kind of puzzle for -pron- alright let -pron- take a look at the follow code and workout what will -pron- print so -pron- initialize be use this odd looking smiley ok -pron- print out -pron- value and look like -pron- should put another i in here because -pron- be actually go into decimal value and a hexadecimal value so will fix that to have two eye but then -pron- calculate -pron- following so one plus two y and then -pron- use another one of these tilder here finally -pron- print out the value of j ok so what will that actually print so let -pron- go and turn to some code -pron- have get let -pron- see -pron- bit puzzle here right so there -pron- be with the fix up two version of right there right so what be this go to print",
    "alright so let -pron- pull -pron- over here ok right off -pron- go right so be that nearly one and f ever have f and thirteen let -pron- see if -pron- can understand why ok so what be this thing here be tilt do here so this be a bitwise operator and what -pron- do be -pron- flip every bit so -pron- be pass in a value of zero which -pron- know as an issue be represent with this all zero or zero bit and so -pron- have turn everyone of those on so that be why -pron- see on this machine this text decimal value of fff fff fff because -pron- -pron- -pron- integer be thirty two bit ok so what about the following though what about this",
    "and then do a bit wise and as just a single am percent but with the value of tilda two what be that do ok so if -pron- be to add up one plus two plus four plus eight -pron- 'd get to fifteen so why be -pron- that -pron- print out thirteen what be this code do ok so what -pron- be look at here be a concrete example of mask and turn out turn off bit so in other word if -pron- have some expression or some variable and all -pron- want to do be to turn off a particular bit here be how -pron- can do -pron- -pron- can use a bitwise and to say i only want to let a certain number of -pron- bit survive and then -pron- be go to give an expression to say which bit i want to allow through the gate and which one should be mask out so by say tilde two be say please generate the bit pattern in base two this would be one more one ala jolla one about thirty of -pron- and then a zero",
    "end with that -pron- be do a lot of very good and that be why i write -pron- well and there -pron- go -pron- be end -pron- with this number meaning that any bit which originally set in -pron- left hand expression will survive apart from the bit cost the second bit because -pron- be add that with zero so what this expression effectively do be to say give -pron- the original number but if bit two be on then turn -pron- off ok and by bit two i mean the so the second bit if i want to turn off a different bit i could choose a different number for example like tilda four to turn off the next bit till -pron- turn off the next bit so what do -pron- think -pron- will print if -pron- say let -pron- say tilde sixteen",
    "compile this run -pron- again and this time -pron- see fifteen ok why right because -pron- be end here come -pron- original value one plus two plus four plus eight so that be k this bitwise pattern and then -pron- be end -pron- with not sixteen here so in other word -pron- have get a whole load of one up here and then zero and then a whole load of once add that together here -pron- go right so these end obviously do not do anything then there be a whole load of -pron- let -pron- say about twenty five or salem ok -pron- -pron- of course be just go to see holder to zero for -pron- left hand expression so zero under one give -pron- nothing this zero in here do not actually have any effect today because -pron- value of -pron- left hand side be actually zero here and"
  ],
  "0e5047cd-7d46-49d0-a2ab-8ee74d7a774b": [
    "hi so the c library actually have quite a few function to work with string when be go to look at a few of -pron- and realize that -pron- be actually really really simple and be actually really really easy to write but the one inside the c library be probably much well debug and more performant and run fast and quick than anything -pron- may write for example perhaps -pron- use specialize assembly instruction but let -pron- have a good look at kind of four very common one that be very useful : str copy , str cat , str len , str cmp or str compare so what do these do the wrong button let -pron- try -pron- up ok great so -pron- have str copy allow -pron- to write from a destination address to ; sorry ; allow -pron- to write from a source address to a destination address and -pron- will keep go until -pron- copy that zero byte . str cat do a similar idea except -pron- will concatenate after the end of the string that s already at the destination in other word",
    "zero byte and that be where -pron- be go to put the ; copy the content of the new one str len , -pron- be an order n operation to find out how long a string be in c -pron- actually have to keep walk until -pron- find that last one and then finally str cmp to compare two string and that will return zero if the two string be the same so -pron- be not unusual to write thing like let get rid of -pron- line ; make that large ; -pron- ok right not unusual to see thing like if str compare some string like s if that be the same as like yes then -pron- actually need to check to see if that be zero to know that equal -pron- will even see code that actually use the not operator so realize that this not operator be actually flip in the way that -pron- want to so so because -pron- return zero if -pron- be the same let -pron-",
    "how can -pron- find out more about how this work and so use demand page so if -pron- use man str cmp , for example -pron- will find out thing like where be -pron- and also what be -pron- declaration so -pron- will see that -pron- take two pointer to ; two const character pointer ; there be a promise here that -pron- will not modify the string in memory and -pron- return an int so could -pron- write a similar function let -pron- have a go very quickly right so -pron- want to compare one character at a time at both s1 and s2 ok so -pron- could write the following right let -pron- just keep go round in the loop and -pron- will figure out when to exit a little bit right but let -pron- have a look so if the content of s1 be not equal to \" the content of s2 , \" \" oh , -pron- have get a problem , time to quit \" \" \" so -pron- need to return some non zero value . now the real version of str cmp actually return the difference",
    "to do fix -pron- right now the next thing -pron- should do be move on to the next character right so -pron- should increment both pointer . ok , and pointer arithmetic but -pron- be look at character so -pron- be only go to move one byte at a time now -pron- better think about when to stop so -pron- have -pron- actually have to be careful here because if either string if -pron- get to the end of either string then -pron- know -pron- should break out ok so let -pron- check here that -pron- be still look at valid string so while s1 be valid right so whilst that be not equal to zero and also while -pron- other string the content of that pointer -pron- be also not equal to zero",
    "proceed so -pron- be go to keep go around and either -pron- will both get to the end of the string together or -pron- will find a difference or will get to a point where one string have finish and the other one have not so if -pron- escape out of this loop -pron- know that -pron- have reach the end of one of those string so if both string have finish then great -pron- know that actually -pron- be equal right , so if the first string have finish and the second string be finish then -pron- know -pron- be in good shape now ok let -pron- , let -pron- , do -pron- know thy're equal so -pron- should be return zero at this point if not -pron- will return one . now could -pron- do well than this code ? yes absolutely -pron- -pron- could simplify this last part"
  ],
  "0e632880-1c9f-491d-b02d-a61aa58f2639": [],
  "0e904504-e9c5-4ef5-9739-b762f6053521": [
    "hi so welcome to a bit of a challenge here what be this madness what do this code possibly do so -pron- be write in a very kind of bizarre way -pron- want to see if c be great than one and if -pron- be then fork so how can -pron- describe this possible code well remember every time -pron- call fork the college process continue but -pron- get a new one as well the only difference between -pron- be at that point be that one of -pron- return zero if -pron- be a child and the other one get to know the id of the child but the process id so what do -pron- have here -pron- have while not fork so -pron- for crit earn zero what be go to happen here so if oacr turn zero -pron- evaluate the right hand part of this expression to be true so in other word whilst c be still a large integer go around the loop again",
    "will evaluate to false so do not go around anymore ok so let -pron- think about that for a moment imagine that -pron- initial value be for c be five then in this loop the first thing -pron- do be -pron- pre decrement see another word before use -pron- value change the value of the variable so c be now full which be great than one and then -pron- say ok and not fork so in child process ok so here be the original power to poopy doopy doopy doopy do and then -pron- make the child process in the child process fork return zero and otherwise -pron- be true so -pron- get to kyon round the loop so around -pron- go and that",
    "change to three and the next -pron- be go to make another child and -pron- be go to keep make a child of a child and keep go to make any kind of a child etc until at some point of value of c be no long great than one right so -pron- get all these different process that have that be independent and when -pron- escape that while loop have different value of c and then -pron- say ok ask -pron- to integer and -pron- pass in a street so right so take a look at that string for specific process -pron- expect to turn that string into a simple integer eight why be not particular bust will return zero if -pron- do not like the look of the string that -pron- pass in other word if -pron- can not pass a simple integer and then -pron- could sleep after sleep for that many second -pron- print out that value so let -pron- actually run this and now -pron- can",
    "and kate great and now will will give -pron- some value let -pron- for example say six two six two four one k and off -pron- go so the first value printer dell be warm the next value with two next value for the next value of six yes lady and gentleman this be the world 's bad sort algorithm with actually publish on four chan commonly know as the backside of the internet which seem a very appropriate for this particular algorithm here -pron- be sort algorithm for system programmer -pron- be -pron- be incredibly awful -pron- say hey process",
    "-pron- in order and sleeping source simple order end algorithm to do sort but -pron- be rely of course on the operating system to properly schedule -pron- process and do not return from sleep until that time be up to that time be expire so that be what -pron- have get -pron- create all of these process -pron- do that very quickly hopefully under far under this one second and then each process be sleep with when -pron- be at a time and be responsible for print one number ok so yes that be call sleep sort and let -pron- know if -pron- have a fighter real reason to use -pron- but -pron- do illustrate a couple thing first of all that tail anybody can call fork can -pron- can get this whole hierarchy"
  ],
  "0f5acc21-05fe-4694-921a-f38f2fb0134e": [
    "ok so posix signal right there be quite a bit to this and so far -pron- have gloss over a lot of detail when -pron- just simply say hey call signal and install -pron- own signal handler now this surprisingly be actually one area where the linux man page be actually quite useful and there be a lot of detail so in section seven -pron- can find a whole kind of little mini manual on on posix signal so i code -pron- if -pron- wish to go and have a look at that and to learn more about this ok so -pron- intent here the learning objective here be that -pron- should be able to kind of be comfortable with a standard kind of terminology of signal so -pron- be kind of go over there right and also understand about kind of have some of the implementation of signal work so first of all here be a here be a surprising idea can signal be queue where -pron- may have say yes but actually technically there be a reason here to say no",
    "for example sig child right to say hey one of -pron- child one of -pron- child process have just finish just terminate then actually if multiple signal signal occur then -pron- process -pron- may see only one single sick child event may see only one particular signal deliver ok so that be surprised and be careful about that bite -pron- when -pron- actually right signal handler do not assume that there be a simple one to one correspondence for example suppose i press control c multiple time very very quickly -pron- be quite possible that -pron- process -pron- only see one sigint event the way to imagine this be to imagine that there be a bit field of all the signal",
    "be be set then signal of the same type would fall underneath that same same category or that same signal type ok so in that sense -pron- be not queue right so let -pron- go through some of this terminology first of all in term of create signal -pron- say -pron- be generate and signal can be generate in two different way uh user process can generate -pron- so for example perhaps -pron- may call kill for example and say here be a particular signal number that i want to be create or the kernel -pron- can generate signal for example -pron- have already see sick child which the kernel will generate when one of the child 's finish -pron- have see sigpipe -pron- have also see thing like segfault as well with the kernel would generate if -pron- program try to read or write to an invalid memory location right before that signal aggregate deliver to",
    "word -pron- be hang over process want to send -pron- to to process so why be -pron- not yet be deliver the answer be because actually process come lock signal so -pron- can temporarily stop the signal from be deliver this be useful for example perhaps -pron- want some critical code to complete before -pron- allow the user to interrupt -pron- or perhaps -pron- want to set up some communication device before for example -pron- want to deal with any sink pipe or other kind of signal that may have happen so if -pron- one way to consider this be to imagine like a raise shield -pron- will prevent any arrow from arrive right now and any exist signal then will remain in a pende state ok so -pron- will just losse know -pron- stay in a pending state and the kernel be ready to deliver -pron- as soon as -pron- can",
    "-pron- to a process here -pron- go ok and -pron- say that by be -pron- to leverage that the process can catch or the signal be catch so -pron- have see that in term of signal handler and that describe what -pron- process be go to do when the signal be deliver to do -pron- when -pron- be catch by the process and in fact -pron- be a lovely word tell -pron- what be -pron- disposition this position to banana sandwich what be -pron- disposition to say orange sandwich how about be not disposition to talk before coffee right -pron- have get a view on this ok -pron- have get an idea about about how -pron- feel about say banana sandwich well -pron- can also describe the disposition of -pron- process or to a particular signal -pron- could describe what what will happen when a particular signal like sigint"
  ],
  "0f70d1df-7a51-4bea-9a39-589fd7c57802": [
    "ok so yeah -pron- talk about race condition what i mean to say be let -pron- talk about a critical section so here be here be an important idea that there be possible code that be necessary that only one thread at a time should be execute because in that moment inside part of that code be where -pron- be update some resource for example update some datum structure or update a file in a critical way and -pron- be important that no be the process or thread update at resource at the same time so -pron- be critical that -pron- prevent other thread or process from also be inside a critical section at the same time so lot of kind of example and in the real world where there be there be moment in time where -pron- only want kind of one person to be work on something at a time or save as a database -pron- may implement a database so -pron- be critical that only one process update",
    "if -pron- be do code review -pron- may say hold on a moment there -pron- have get a race condition here between say -pron- implement incrementing i and when -pron- actually read the value of -pron- in -pron- previous code when -pron- be take the value of this pointer so -pron- have synchronization bug and -pron- would have be solve if -pron- identify a critical section and say ok -pron- need to divide a moment in time so that define a moment in time so that the value can be read independently of the update ok so -pron- will talk more about critical section in the future but like i say the big idea be that only one thread at a time should be inside a critical section if -pron- program be to behave correctly so how can -pron- identify what can -pron- do to ensure this",
    "section code for example suppose -pron- have some code from cs two twenty five that be go to say insert a link right on a data structure and this price be go to work in the link list price be go to work on a vector and inside that code -pron- realize that there be a moment in time where -pron- be go to say of mess with the pointer or -pron- be go to copy the entire data structure from -pron- one sized piece of resource to say a doubling of the resource some other piece of memory over there ok so that be a critical section what -pron- need to do then be to block any other thread that want to do a similar operation -pron- want to somehow say right i want to give -pron- exclusive access to this right now so the only -pron- this comment thread be execute in this code get too get to modify this data structure anybody else that want to insert something into -pron- data structure"
  ],
  "0fe42c84-6a79-4581-94d8-ef1fae922e78": [
    "ok so i want to review the critical section problem here be the idea that -pron- do not just say oh -pron- have get a piece that mutex lock that actually be the very problem -pron- be try to solve be that -pron- have get a critical section and i want to make sure that if i have say two thread or two process that only one of -pron- at a time can actually be inside the critical section if two of -pron- be inside the critical section same time then -pron- have probably destroy the integrity of the datum structure that -pron- have get -pron- be try to modify so the critical section problem become really important in the nineteen sixty when -pron- be try to figure out how to write good operating system because with operate system there be lot of thing go on concurrently -pron- have get lot of process to an update thing -pron- have get bits of hardware interrupt -pron- try to get -pron- datum structure fix so i need to work out very carefully how to implement a good critical section so today -pron- be not go to ask people to go to arrive this",
    "of solution and decker solution peterson solution be simple but actually be about ten year after dec 's original solution so i want to have a look at both an understand why -pron- solve the critical section problem so -pron- have talk about this c s b a couple of time be this idea -pron- only want one process will thread to be inside the critical section in fact -pron- have a couple of quality -pron- 'd like to see so one of these be mutual exclusion right so this be the basic idea that if wear thread or process be inside the critical section the other one must wait ok the other one be progress so if -pron- be the process that want to be inside the critical section then i should not",
    "if there be a four way stop at a junction i should not have to wait for another car to come in traverse the four way stop i should be able to just enter that four way stop area if no one else be around and the last one be kind of bounded weight that i should only have to wait a fix number of time for another process in other word if there be a lot of kind of little tiny kid run in front of -pron- i do not always kind of q jump and get in front of -pron- eventually there should only be a fixed number of of other participant that can be in front of -pron- at some point -pron- have to be -pron- turn i do not want to have to end up wait forever ever so let -pron- have a look at pizza and solution to see how peterson solve this so here be some code about early and hopefully have actually",
    "book and i just want to go over -pron- and see if -pron- can kind of understand how -pron- work so the first thing to realize be with peterson solution be -pron- be actually surprisingly simple and here be here be what be base on first of all -pron- need a couple of variable in a very simple variable one of -pron- this kind of turn base thing -pron- be actually go to share between -pron- two thread or two process or whatever -pron- be and that be -pron- be go to use as a kind of a tiebreaker to ensure that -pron- always have abound wait and that if -pron- both arrive at the same time then one of -pron- gun be go to defer and the other word in person be go to continue and then the other thing -pron- be go to need be each process be go to need a little binary flag a little boolean flag here to say whether",
    "here -pron- be notice that just before -pron- go into the critical section be go to raise -pron- flag so -pron- and i be go to agree to do both of these thing and if -pron- do then -pron- have solve the critical section problem let -pron- see how -pron- work in ok so i want -pron- to imagine right now that both of -pron- have decide -pron- want to update say the same data structure so let -pron- see if this be go to work so -pron- raise -pron- flag always -pron- flag right but -pron- both share this turn base variable so if i call -pron- one and -pron- be too then there be go to be a bit of a racist who end up set turn first and who be end up set -pron- last but -pron- do not matter let -pron- find out what happen so maybe this be value of one maybe would be a value of two maybe -pron- be indeterminate but but the idea be that ok somebody will be will be set -pron- last and",
    "id then just keep go around this loop in other word one of -pron- will wait and the other person continue ok so -pron- can ensure that because -pron- both raise the flag before -pron- enter the critical section that -pron- have guarantee that medical exclusion be ok that that be not possible for both of -pron- to be inside the inside the critical section the second thing be that -pron- have get bound bound wait because i defer to -pron- only if i arrive arrive early but then after that -pron- be -pron- turn so at some point i will enter the critical section and the last property -pron- want be progress so -pron- be only",
    "ok so if i wife first -pron- be go to go straight into the critical section but what happen if -pron- know arrive or where -pron- be go to see -pron- flag be already up so -pron- will wait ok so again mutual exclusion be satisfy now realize that this be a verbal argument -pron- be try to think about all of the possible interleaving that may happen and -pron- have only sketch out reason as device correct this be not a formal proof in fact there be actual paper submit and accept for publication that claim to solve the critical section problem which actually have error -pron- have race condition so this stuff be hard to think about and even though -pron- have basically only get three variable in this case actually formally analyze this be difficult so be very very careful with race condition",
    "that that in modern process -pron- can not just simply write this code the main reason be be that a modern processor be a super scaler structure and the compiler as well care about performance and so both the cpu and the compiler will do thing like instruction reorder so -pron- may change the ordering of these statement -pron- may do lazy writing back to main memory so the other process may not see the flag have be change immediately so -pron- can not just naively write this code in c or rust or python or whatever language -pron- want and just assume -pron- be go to work instead all the performance characteristic of a modern system from the compiler to the cpu be work against -pron- which be why the implementation of saint peter mutex lock not only have to kind of implement code like this or similar"
  ],
  "111f8779-d189-4a26-9857-42833718e44a": [
    "ok so i want -pron- to imagine that -pron- actually write these call ok the ability to say initialize that that signal type to be to be an empty set how ok so -pron- be go to make a design decision that the signal set here be really just a typedef to along and now -pron- want to manipulate the bit pattern within that long hence the little puzzle at the beginning of this letter video ok so here be what -pron- will do then so if -pron- just want to initialize -pron- long to be equivalent to the empty set and -pron- have give -pron- a pointer to some memory wear long be to be find all -pron- be go to do be dereference -pron- pointer and initialize -pron- to zero ok right what about if i want to fill -pron- i want to enable all signal ok so i need a way to actually say ok or the bit pattern that correspond to all",
    "of idea here maybe -pron- have get two idea ok here be two idea and -pron- will say well -pron- be not quite right first of all perhaps -pron- know about two bit there -pron- go two bit compliment in mathematic -pron- may say negative one i know happen to know correspond to on -pron- machine the bit pattern one more more more more one ok so -pron- could say that but also -pron- could say hey i just see the first lecture and i remember that i can flip all the bit so let -pron- do that let -pron- use -pron- expression now which be tilda zero in other word the opposite of zero let -pron- find the bit pattern where all those bit have be change ok and i say that be pretty good there be just one little short come here which be the value that -pron- be use be just regular in 's just to see -pron- and -pron- may not be as large as a long on some system so well code would actually say",
    "bit and so then this operator will not just work on the low bit but all of all of the bit and so if along be twice as large as as an int then -pron- would actually modify give -pron- back an expression where where all of those bit be set simile here -pron- actually want to make sure that -pron- tell the compiler that i really do care about long ok right so that be kind of what -pron- find code here -pron- could argue that with the first expression that -pron- may property the copper casting from the into to log but so i personally i find this code to get a lot more satisfying and concrete there be actually work in the same type as -pron- pointer value expl -pron- be very explicitly not that besides -pron- get a hard problem to think about here how do i set a particular bit inside now -pron- long",
    "bit which be be hold by this long at some point be how -pron- be go to do that ok well -pron- start this code -pron- have say well i want to modify the value app style pointer at the address appoint by the pointer -pron- be go to take the original value and -pron- be go to bitwise all of -pron- with something so what do i want -pron- all -pron- with well i want to with something like one or two or four or eight depending on which signal -pron- choose now if -pron- actually have a look to see what signal number look like -pron- be indeed small integer -pron- be thing like value one two three four five etc so -pron- need to convert this number this small engine number into two to the n number because -pron- want to use this sorry this bitwise or in order to set one particular bit",
    "be -pron- want to be able to say let -pron- take one bit set who -pron- be and shift -pron- leave queso which way be leave let -pron- go that way right and how many place do -pron- want to shift left will shift leave by say ok so now provide the value of seagull not too large great -pron- can end up with a two to the n value that be pretty good i would make one change here however i would actually explicitly tell the compiler that hey -pron- be work with long 's or whatever type be over here otherwise if -pron- be only work with say a thirty two bit value then if -pron- signal number happen to be great than thirty one but all -pron- have shift -pron- off the end like a little lemming -pron- have lose that bit information so -pron- want to make sure that any shift operation use the full width the full width that -pron- have here be a long",
    "right so calculate a bit number and then use the bitwise or to make sure that that bit be set ok and now the tricky will on the how well -pron- do this one so i now i want to delete a particular signal so one particular segment here what be -pron- go to do here so -pron- will make a note that this be the expression that i use in the previous one so what expression will -pron- write just here and let -pron- give -pron- a hint -pron- be very similar to the one -pron- have just write -pron- only need a couple of change the first one that -pron- have already do -pron- be go to use bitwise and and so there be something miss here but what can -pron- right here to complete this puzzle ok great yes the correct answer be well why do not -pron- use -pron- little tilde to say take the flip all the bit so that if for example -pron- cig be say three then this crevice expression would calculate zuazua hollow",
    "shift leave three time so this would -pron- get right this would be this expression here on in in base two write a whole lot of zero here but that be not what -pron- want to end with this be actually the very bit that -pron- want to turn off so if -pron- take the not of this to bitwise not will end up with the value one one more more more one whole at once ok then the zero and then one more month so great now -pron- have calculate a number that -pron- can use to turn off particular bit right so what -pron- learn hopefully -pron- have learn a little bit about twiddling bit as -pron- be call and also this idea that these function -pron- really do not do much -pron- just provide a level of abstraction or an abstraction layer so that -pron-"
  ],
  "117f0f11-cc38-4a40-b359-8f1ba81655e1": [
    "hi so let -pron- build a very very simple in -pron- memory allocator ok let -pron- actually think about how -pron- could actually write malloc if all -pron- have be s break in five minute ok so here be what -pron- will do ok right now i have a little pointer right so when -pron- call s break -pron- tell -pron- the old water mock so here be a simple thing -pron- could do with aspiration be to say hey tell -pron- exactly where the current data segment end so this will be -pron- original top of the heap have move -pron- yet and ok and will print that out as a pointer ok let -pron- come back to this question about whether -pron- be safe not in a moment instead let -pron- look at the rest of the curry so -pron- call malac say hey man i need space for -pron- nice double array or some other datum structure and the number of contiguous bite that i need allocate",
    "hey system i need to increase -pron- data segment by that many byte ok so -pron- will call -pron- s break with say four thousand ninety six byte over many -pron- need ok add will wait for that to return system call can be slow so this may not be the fast memory allocator but certainly be the simple ok so will wait for that to return to give -pron- some more valid memory location and then when -pron- return like i say -pron- return the old address so great that mean that if -pron- have just increase -pron- watermark here -pron- go up to valid high value that mean that all of these previous address be now mind right into so and since there be break give -pron- the old value of datum segment",
    "ok so i will just however just check to see if if -pron- fail esperat return negative one when cast -pron- as a void pointer if -pron- fail if -pron- refuse to give -pron- any more memory case so in that case -pron- should return null because that be part of the malloc specification wait just a reminder what do void pointer mean -pron- mean -pron- be a pointer but -pron- be not go to declare or i do not care i want to keep secret exactly what -pron- be go to store at that location and void pointer can be cast to other kind of pointer implicitly so -pron- do not need to explicitly say cast that to another type ok so yeah -pron- do not care about what this pointer be just simply or what be go to be store there just simply that if i want to compare -pron- to get negative one i should cast out first",
    "-pron- have some memory at that location so let -pron- print out this variable as a pointer -pron- be not use percent s -pron- be not attempt to read any memory at that location -pron- be simply say take this value and display -pron- as a hexadecimal value ok so -pron- be turn right now there be one last thing -pron- should do with a little memory allocator which be remember program be polite -pron- should call free when -pron- have finish with some heat memory and what be -pron- go to do well -pron- have the world 's fast implementation of free just hear -pron- do nothing -pron- say hey i finish with this piece of memory -pron- need ok great good for -pron- kate so will -pron- memory allocator work actually ironically -pron- would work if -pron- remove the debug information let -pron- go and see what the problem be so this be a pretty good alligator at least hey -pron- work but -pron- have a problem",
    "and why be that problem why do -pron- think ok good good idea yes print f -pron- may call malloc so if -pron- be run at -pron- if -pron- need more memory when assemble a string be go to malloc oh dear so potentially -pron- have in kind of infinite recursion and that may make -pron- malloc rather slow so when write -pron- version of malloc do not use print f use thing like right which be a low level remember right talk directly to the kernel and wet -pron- own little function to print out hexadecimal value -pron- be not hard -pron- could probably find something on stackoverflow for that if -pron- do use another code like that however please be sure to reference insight today with the original author -pron- be however be a pretty easy function to figure",
    "ok but -pron- have some limitation ok sir off first limit do i have another question so limitation be that -pron- do not reuse any let -pron- come back right ok so -pron- do not re - use any memory so there be no re use of any memory that -pron- be always ask for more memory and memory be actually one of the most precious resource -pron- have on a system if -pron- run a set of virtual machine on a real physical host actually -pron- be the memory that -pron- need to allocate to each virtual machine which be go to limit the number of vms that -pron- can run the second thing be that",
    "-pron- be slow because -pron- be use s break -pron- be use a kernel core so these be actually go to connect -pron- right if -pron- be actually actually actually be able to reuse memory pass -pron- would need to go back to the kernel so many time -pron- could have also improve -pron- if -pron- instead of always go back to the kernel for every single request perhaps -pron- should have ask for say just another four thousand byte or so so that all the feature small request do not need 's to keep keep call aspect to keep ask the kernel for more memory also -pron- be not particular performance because -pron- be write thing out and -pron- actually end up call s break twice ok so i could probably make -pron- fast if i just delete -pron- debugging information here right so that be pretty exciting -pron- should think about how to develop this and write a memory allocator get hard and get challenging",
    "be debug information on and off and for that why not use the preprocessor by put be debug information say inside a hash if and other trick so that when -pron- want -pron- program to run at full speed -pron- can turn or disable these additional line of code but when -pron- be fix and chase thing maybe -pron- want to turn the backup simply remember thing like assert as well be a kind of good chance to check that belief about the code and how -pron- operate be correct ok the other thing that -pron- could do be improve the way that -pron- just -pron- just ignore any free memory so perhaps -pron- need some kind of datum structure to keep track of memory that be allocate and then free because"
  ],
  "1260cf03-e3d2-405c-8846-79c5af487b4d": [
    "ok -pron- be a dns so -pron- have already have to play with dns -pron- have leave the lab possibly at least this semester -pron- be record -pron- and -pron- know that dns be base on udp so that let -pron- say that i type into -pron- web browser hey i want to load say a page from bbc dot com -pron- need to turn that into an ip address maybe like before ip six address and that be where domain the domain name system come in -pron- need an authorative way to say ok in order to actually talk to this server there be an ip address somewhere and that mapping be part of the domain name system so when -pron- type that type that in the second thing that -pron- machine do in order to actually convert this be to send out some udp packet and in fact dns be design such that -pron- can talk to",
    "look -pron- be do a query do -pron- have a for example and a record in other word in ip record associate with this host name like bbc dot com ok and oop actually -pron- see the exciting part be that uh -pron- do not know if this be go to succeed or not this second exciting part of this be that -pron- may succeed in that sense that -pron- could be that more than one server react to this and say yes -pron- have get an ip address for -pron- and the way that dns work be to say whoever give -pron- the fast answer win so if -pron- be malicious coffee shop of if -pron- have have to work for government agency -pron- can do some exciting thing",
    "give -pron- an answer to that here be an ip address largely bloody bloody blah there -pron- go and -pron- control then that ip address mean that the server will now decide to go over to that ip address and display content from that machine rather than the real bbc dot com right so that sound pretty scary do this happen yes absolutely -pron- be be use to inject a malicious javascript into web page in order to take over machine the however there be start to be some defense against be in that for for web page which of for https connection then -pron- be possible to actually detect whether the certificate for web server be valid so -pron- hopefully that that be a second",
    "of dns call dns sack which be start to implement some security protocol around dns but i want to kind of come back to a couple of point about the actual dns system first of all i say ok -pron- send out three udp packet to -pron- neighboring server where do -pron- get -pron- answer form and the answer be that dns be interesting because -pron- be a completely distribute key value system uh and ultimately there be about seven large machine that be the authorative truth about all host name look up so if -pron- really want to takedown the internet simply takedown all machine that correspond to those seven root name server so the root name server be a critical part of the internet because -pron- represent",
    "machine directly instead -pron- talk to this distributed system and if -pron- do not know the answer -pron- will ask -pron- neighbor and if -pron- do not know the answer -pron- lose -pron- neighbor etc etc and ultimately -pron- request may end up at one of these root name server but i want to get back to something i say at the beginning which be this be the second thing that -pron- do yes actually so there be time when -pron- do a dns look up and no network traffic be generate -pron- do not see any udp packet ok so one answer to that be as trivial answer which be simply that hey -pron- process be already cash in answer so if -pron- web browser have already go to the bbc dot com then -pron- do not necessarily need to look up that answer again and in fact dns record have a timeout parameter to say how good a piece of information be available for though be consider",
    "and that be inside there -pron- go that be clear that ok inside a special file let -pron- have a look at say the to look at but i will not do tail there -pron- go look at the top so what will do less ok let -pron- let -pron- look at etc host and -pron- can see that -pron- can have some basic entry like localhost etc and some ip six version of this but as -pron- scroll down -pron- see -pron- have get many many other entry so that if i attempt to go to -pron- machine want to divide to get to this machine to this host name in fact -pron- be not go to be get be not go to get a valid ip address so this be kind of fun of perhaps",
    "want to be more productive great let -pron- show -pron- how so -pron- can do a case sue do let -pron- edit vm etc host ok so i need -pron- password ok now i can for example i can enter zero point zero point zero point zero and -pron- can say for example reddit dot com so now when i try to open reddit and in new browser be not go to connect let -pron- just have a quick go with that right so let -pron- try chrome and go to reddit ok and -pron- be go to work well -pron- be go to work because -pron- have get www so let -pron- put that in there as well k right so -pron- also want zero point zero point zero point zero ok and",
    "to read -pron- so let -pron- quit chrome there -pron- go and this time try open -pron- inside a new browser cape and will try firefox now great i can no longer connect to read -pron- ok so -pron- could do this with whatever -pron- favorite waste of time be and now now get a kind of spend all -pron- time hack on cs two forty one and in fact there be these so call black list of host where -pron- can reduce the amount of tracker that be able to track -pron- on the on the internet because now with web page that have a whole lot of javascript and other mechanism to track or what -pron- be do those will no longer resolve to valid host and in"
  ],
  "12682bb1-804f-4939-a519-445af7451475": [
    "ok so last two thing be go to talk about in this lecture or remote procedure call and also when protocol go wrong with look at a security problem so let -pron- talk about remote procedure call here be the idea i can actually split up -pron- code into a local portion and remote portion and so -pron- be a bit like say look -pron- have get a function here call say update scoreboard and this may be save for game or something where for a particular name -pron- have get to score to set but rather than do this kind of locally within -pron- process i be actually go to run this on a completely different process and typically this process may be in a different server but the idea be that -pron- have to do this of course -pron- be go to actually send something down a file descriptor public send something down a socket possibly likely a tcp socket right so to do that -pron- actually have to construct a message that request this and the y why may -pron- do this well perhaps -pron- have get a distribute",
    "different process be have different security model so for example the update scoreboard may be the only portion of -pron- code that be allow to talk to a central database so that may have special privilege but there for that same code may also have lot of check to make sure that the name be valid and the score be valid for example ok so let -pron- think about kind of a minimum implementation of what be this code may look like from the outside hey -pron- just look like a regular call but from the inside -pron- actually need to construct a message so how could -pron- do that well here be one way there be a call call ass print f which will get some heat memory for -pron- automatically so -pron- be a bit like sprint f meaning that -pron- will write the output to some memory but in",
    "and then tell -pron- where that be so -pron- just need to give -pron- the address of a pointer and -pron- will update that pointer force ok so -pron- be go to send a little message to say hey this new score here be a name here be the score right and let -pron- send that off and -pron- better hope that the name do not contain a calmer because -pron- be use comma to separate the field here right so will call right in practice of course this would actually have to have some error check in here here be a message and -pron- want to send the entire message ok what do -pron- think about this message plus one well that would mean ok start send the message from the e so this be incorrect -pron- actually want to send message but why why do this code say send everything plus one well if -pron- be go to send message -pron- need a way to say hey at the message have finish and be typically two way to do that either",
    "break some kind of special character or marker to say right that be the end of one message so that i know that a second message can start the third way of course -pron- would just be only one say one one message per connection but that would be very inefficient right so -pron- send a note by in order to say hey that be the end of this message any future bite after that must be a second second message right so this be kind of a one way one way to do -pron- the couple of comment on this however be that -pron- be convert the score into an integer representation so -pron- know say four thousand and ninety six or something and that mean that -pron- be waste a lot of potentially waste a lot of network bandwidth -pron- have get many byte to send here i mean this value -pron- can encode in just a few bite but now -pron-",
    "of cpu time to turn this number back into an actual integer value so perhaps rather than use a text base protocol -pron- could actually choose a binary base protocol if -pron- do that then -pron- well specify exactly how -pron- represent string and integer and booleans etc so to realize that the code the server at the other end may not be on the same cpu so how can -pron- how can -pron- ensure -pron- can write portable code ok so with that -pron- can turn back to some of -pron- favorite function from the networking code which can be use to convert two bite or fullback value of host to network shorten hosted network",
    "ok -pron- be go to include despite -pron- message how long -pron- message -pron- may do the follow let -pron- find out how long the message string be that give -pron- an integer but rather than just simply write -pron- integer and say i have no idea where -pron- be go to be a little endian or big indian let -pron- deliberately convert -pron- into a big endian format no matter what -pron- cpu be -pron- cpu happen to be big endian then this be a new operation and then -pron- will -pron- have get that -pron- know that -pron- be go to be a two byte or sixteen bit value so let -pron- actually put -pron- into a type that be specifically sixteen bit so that -pron- do not matter what the compiler 's idea of what an integer be because i want to send specifically those bite so then i can say right send that size of message that will definitely be two bite and send the content of that variable",
    "so that be kind of a basic introduction to remote procedure call i want -pron- to appreciate that -pron- be go to be much slow than regular core a normal call will just move the stack pointer possibly put a few value on the stack maybe not if -pron- can discuss further on register and so -pron- can do a normal call in the matter of ns just ten of clock cycle to change stack pointer and change program counter when -pron- get back etc so normal procedure call be very lightweight this be the opposite of lightweight in fact in -pron- version -pron- be -pron- be get stack memory and so inside here so heat memory so -pron- know inside here there be go to be a call to malloc so now -pron- be already talk micro hundred of microsecond maybe ten microsecond if -pron- be lucky so so the remote procedure call even if -pron- be on the same server"
  ],
  "13ca4430-73f8-429a-b935-c642a8be526e": [
    "ok so this be actually a tricky tricky tricky problem to think about even though -pron- be just four line of code and the trickiness come because -pron- have get to think about all possible interleaving of code here and there be quite a few of -pron- and the one that can bite -pron- be in between when -pron- check the value of please stop and then when -pron- actually go to sleep so there be a moment in time let -pron- call -pron- just a few nanosecond maybe a microsecond most between when -pron- code have decide that the value of please stop be one and then let -pron- say one hundred nanosecond later where inside pthread condition wait and -pron- be actually block right so within that small window imagine the follow happen imagine that between check this and actually block that just with one hundred nanosecond window -pron- do both of these two thing",
    "broadcast but there be no one inside that condition available right now -pron- have not yet actually finish run pizza condition wait inside -pron- other thread ok so -pron- have run the fire bell but there be no one there ok so now what happen in -pron- right hand thread now -pron- finish execute pta condition wait and so -pron- block and -pron- block forever because there be attempt to call broadcast have already go by already happen ok so how can -pron- fix this -pron- problem be there -pron- like these actually behave as atomic operation -pron- like to ensure that between check for stopping and actually go to sleep behave as one interruptible operation so how can -pron- ensure that as true and the",
    "if -pron- have a mutex lock set if -pron- require the mutex log then only once bit of code can be run -pron- at a time so there be no long any opportunity to quick to say oh and then quick imagine these two line execute between these two so so or fix be on this side be to make sure that -pron- have actually call pthread mutex lock before -pron- start change these variable so lock on the same mutex lock and then afterwards -pron- unlock -pron- ok right and on the right hand side -pron- can assume that -pron- have already lock -pron- because -pron- be go to unlock -pron- anyway be part of the p three condition wait call so now -pron- have do that even if -pron- want to quit -pron- be",
    "on the left hand side be go to get stick waiting to acquire the lock first so that have to complete first and that will complete either -pron- will complete here after the second thread ask have go to sleep so there be no race condition -pron- prevent the race condition ok so the big learning point here be that mutex lock be -pron- friend -pron- do lot of useful thing for -pron- and actually what -pron- do be -pron- bring order to -pron- madness -pron- prevent unwanted interleaving of instruction -pron- synchronize -pron- instruction -pron- bring -pron- back down to run one thread of the time but wait -pron- say i take this course in order to understand multithreade yes and multi thing be great however there be key point in -pron- program where -pron- do not want -pron- where -pron- want to make sure that -pron- strictly control the ordering"
  ],
  "1440787d-bb97-4558-b85b-8aa384d86ede": [
    "hi so let -pron- look at the four condition of deadlock an as -pron- know these -pron- call the coffman condition ok right who originally identify -pron- and as -pron- know -pron- be necessary and sufficient -pron- need all fall to be true and exactly or for -pron- to be true and then -pron- know that -pron- have meet the condition for deadlock so what be -pron- let -pron- actually look at some definition here so here be the first wanna process be currently hold at least one resource and request additional resource which be be hold by other process ok so -pron- be hold and wait so that be a hold and wait condition ok if -pron- process be all thread only need to actually hold on to say just one mutex lock at a time that deadlock would be impossible ok so that be how hold and wait right there be a set of wait process be such that",
    "wait right p three and so on until -pron- get back to p r p one ok so this be -pron- circular wait or cycle in the wait for graph and the process or thread wait for graph also know as the resource allocation graph so let -pron- write that out carefully resource allocation graph ok right and the next one a resource can be release only voluntarily by the press be hold -pron- after that process be complete this task and in other word -pron- can not say hey little johnny pull down that those pencil put down that paper ok so this be no pre emption"
  ],
  "14544fe6-66a5-40d6-988b-0d22aa081150": [
    "hi so there be many exact time when -pron- want to be able to read datum text datum in one line at a time so let -pron- see how -pron- can do that -pron- need a way to be able to cope with line which could be very small but could be arbitrarily large and the only way -pron- know -pron- have get to the end of the line be either -pron- have get to the last line of a file or -pron- see a new line character so the great news be that there be actually a c library function to do this for -pron- -pron- be go to wrap those low level call and make sure that -pron- give -pron- back one line set a time let -pron- see this action ok so let -pron- do this and let -pron- do that right and the thing -pron- be go to play with and -pron- be go to use -pron- in the assignment be this magical thing call get line now first of all do not panic let -pron- pull this apart and see how -pron- work the exciting part -pron- seem to take a pointer to a pointer to a character and a pointer to one of these variable cause a size under course t -pron- goodness and the last thing be where should",
    "handle which -pron- have either get from call f open or which could use standard in if -pron- want to read just from the standard input and -pron- return the number of byte that -pron- actually read as a s size underscore t the extra s be deliberate -pron- stand for sign -pron- why get line will return negative one if an error occur or if -pron- get to the end of the file in this down one nothing else to eat right so -pron- be not use an integer to represent -pron- end here instead size t can represent number which much large or potentially much large than just a regular int but -pron- can think of -pron- be just a mathematical integer but -pron- have a potentially great range of value than just normal c int type right so how do get light work be actually go",
    "and for performance reason each time -pron- call get line -pron- will pull in a new line of datum and store -pron- and overwrite the original area in memory in heap memo so -pron- need to be able to get a process that line before -pron- call get line again so -pron- do this for for performance because -pron- do not want to have each time go back to the heap and say hey heap i need some more memory for another line instead could be a lot more quick to run if -pron- can actually just overwrite the heap memory that -pron- already request in the case however that the line -pron- be go to read be much long than before then oh -pron- have a problem -pron- do not have enough space in the heat for -pron- fortunately get line will then free up the old memory allocate some new memory force and -pron- do this all automatically the only thing -pron- need from -pron- be to",
    "line pointer and this size pointer the first one be go to be useful to remember where -pron- be store the current line inside the heap the second one be how big be that buffer so so if potentially exceed that size -pron- can get a new one right but why be -pron- the case that both of these be pointer here be the trick get line actually go to change -pron- variable from one call to the next so -pron- actually again to give -pron- the address of -pron- variable so let -pron- do this actually write some code here so -pron- will get line demo here and the variable -pron- be go to need then be go to be a pointer to a character but -pron- and i know -pron- do not care just that single character actually go to treat this as a c string so all the character after",
    "so -pron- will call -pron- say buffer capacity and ok but -pron- be go to do one important thing here which be that -pron- be go to set these explicitly to be nothing so the buffer be point at nothing and the capacity be definitely zero because now -pron- be go to start process -pron- input i need to say to say while true i can pick any nonzero value i guess i could use while true if i include standard bool but to any non zero integer value will do so let -pron- pick one and now that be call get line getline be go to tell -pron- -pron- be result and like a good system a programmer -pron- be important to check -pron- result value so -pron- need a sign type of s size t",
    "address of -pron- buffer and here be the address of -pron- capacity available and something call i want to kind of point out at this moment be take a look at the type of -pron- variable i have point a character and size two but -pron- take the address of those thing now let -pron- take a look at the declaration of get line and -pron- see -pron- have a pointer to a pointer to a character and a pointer to a size t i hope that make sense that in take the address of these variable -pron- have add basically just another pointer in front of what -pron- already be in term of -pron- type ok if -pron- do not knock -pron- just only have a few time until -pron- start to be at least believable ok so let -pron- carry on -pron- want to read from standard in i could have choose a different file handle if -pron- have use f open right so",
    "-pron- complete line or an error occur and -pron- can not continuous so -pron- well now the first thing be to check that result let -pron- see if result be negative one then -pron- be time to get outside of -pron- wire loop so let -pron- break out of that there be no line to be protest ok otherwise let -pron- do a few thing here let -pron- for debug purpose and demo purpose let -pron- print out the where in memory -pron- be so i can say right -pron- buffer be at an i want to print something as a pointer so -pron- will do percent p and capacity be alright and -pron- will just use simple integer today and the result be something else ok right so for this i need the buffer buffer capacity -pron- be go to cast to a simple int buff capacity and -pron- result be cast with simple enter",
    "get line actually give -pron- a c string include the null byte so i could print -pron- out i could say right kind of buffer content and will say percent s k and -pron- have a buffer at ok alright so now will say go round the loop again key like when -pron- get out of here -pron- know -pron- be because getline return negative one what -pron- do here well get line have allocate some memory on the heap be -pron- responsibility to free that memory up so let -pron- remember",
    "will still be point to null that be ok call free of null be an o operation will not do anything if get line have to extend the buffer then -pron- will automatically call free on the old buffer so there be only ever one buffer in existence so -pron- have get free there let -pron- exit and do that by return from maine ok so let -pron- try compile this off -pron- go alright gcc ok what about a miss double quote alright and i do not do not declare free -pron- be miss and include so let -pron- for example -pron- can look at to see what -pron- need and of course -pron- need standard lib ok so let -pron- fix this right i need to go to line thirteen and where be -pron- miss kayla 's and at the end of the line -pron- do",
    "-pron- have run -pron- and notice wait get line be block because -pron- deep inside the implement vegetation at some point rc library be call read and read -pron- be block or process be not do anything right now -pron- be stuck and -pron- only get to continue when read return so let -pron- give -pron- some datum let -pron- say abcd ok and now look be variable have change the buffer now not point at null be point -pron- be invalid memory -pron- be be initialize to -pron- capacity of eight and -pron- get five bite back and what do -pron- see abcd and something else in fact -pron- get back in this case be abc d and the new line that be right get line not strip that new line force automatically include -pron-",
    "where read form so if -pron- do not want that new line -pron- be up to -pron- to actually get rid of -pron- but before -pron- do that let -pron- do some more entry let -pron- do d e f ok seem to be work let -pron- -pron- will notice -pron- use the same buffer location -pron- will do one more do something small -pron- keep use that same buffer now let -pron- start wait long line and -pron- will see that the -pron- still inside location the capacity however be increase now let -pron- have a really long line and see if the buffer location change there be a nice long line and -pron- will see if the buff a location be go to still be at c oh two eight six oh ok and now -pron- see that buffer buffer position move to a new location right so in call get line exhaust that current buffer work with reading in the input and now -pron- be ready to read line up to size",
    "increase that capacity if -pron- now have really huge line great than a thousand and twenty four character ok so -pron- be a common error in use getline to accidentally use the capacity versus the result between -pron- and -pron- i actually restart this video because i do exactly that error so let -pron- go back to -pron- code and fix up the fact that -pron- be see in new line character so i have -pron- get line demo print buffer content ok so -pron- be pretty good out here i actually want to strip off that new line because look -pron- be see a new line even though i do not put slash n inside -pron- print out here ok so how can -pron- do that what do -pron- think about the following i know that result tell -pron- about the number of character that be see do -pron- include the zero night zero at the end good question one way to answer that be to read the man page so let -pron- do that",
    "on -pron- mac system here will go scroll down till -pron- find the return value here so -pron- return the number of character write exclude the null character so that be important information to know -pron- can write correct code if -pron- be accurate ok so i want to overlay that that that new line so i need something in here to say right go to the end of this so i could say put stroller learn of buffer that would find other white location that would be the near the end but i already have the result so what do -pron- think about take result and that should be a new line character well hold on a moment imagine for a moment that the all -pron- have be a single newline",
    "have enough by one right now so -pron- need result minus one ok so that will be -pron- new line -pron- want to kate the string at that point -pron- want to chop off that that new line so -pron- be go to overwrite -pron- with something if i overwrote -pron- with an x great -pron- would see the x will just do that as a quick demo -pron- case so off -pron- go will learn -pron- and -pron- will have abc and now -pron- will see -pron- print out abc anna next -pron- get rid of that new line and -pron- be still on the same line so now if i type say bbc notice -pron- do actually print out any new line anymore ok but i do not want to print out an ex actually want to stop the string there how can i do that should i make a new string no here be what -pron- need to do to truncate the string let -pron- just put in an extra zero at that point so -pron- be just go to put in a zero byte because -pron- now",
    "to read all the byte until ex the zero bite and what about the other zero by after the end of this who care -pron- be never go to see -pron- ok so this be pretty good but -pron- have get a couple of issue with this there be actually two issue the first one be that what if result be zero ok the second be what if there be no newline this could occur if -pron- be read the very last line of a file and that last file do not have a new line so get line will give -pron- exactly what be in the file and do not have to be new line at the very last line so let -pron- only do this if -pron- be sure that -pron- be write into a valid location so -pron- need result to be at least one and -pron- need to make sure that -pron- be not overwrite actual character datum so -pron- will do -pron- if result that minus one actually be a newline ok so if that be true",
    "ok all manually format this for now cape i could use indent or some other program later to format -pron- ok so now -pron- have get a more secure test k so let -pron- compile this will run -pron- ok and -pron- will type something like one two three and -pron- will see that great -pron- have actually script off the new line an only printing that so and -pron- can now use -pron- as a c string so abc and -pron- have abc and -pron- have a long string and -pron- change capacity and potentially the address of a buffer ok so what do -pron- get little get line demo so that be if -pron- get line lot of kind of move past -pron- be to think carefully about but -pron- be actually a very powerful utility that give -pron- a great performance because -pron- can reuse the same",
    "into different part of memory then one trick -pron- could do would be to reset buffer and reset buffer capacity back to -pron- zero value and get line when -pron- call -pron- again would never know about those those early memory allocation that would be a little bit strange but -pron- could do that so have -pron- get great code yes not bad but remember -pron- can actually improve thing a little bit by after call free -pron- be good practice whoop there -pron- go to reset -pron- variable to to to null so -pron- call accidentally use -pron- in the future be this necessary in this tiny demo no of course not because -pron- be immediately exit but -pron- be good engineering practice secondly what would happen if -pron- have never free this would machine get really slow if i keep on run this little demo a hundred time well know the good news be that the kernel know"
  ],
  "14984eb1-a900-473a-816e-4e304fedc041": [
    "hi welcome to lecture eight -pron- be go to spend -pron- mostly fletcher talk about memory allocation but before -pron- do that let -pron- have a look at little puzzle ok so first question for -pron- why be -pron- that -pron- put the heap so far away from this stack why be -pron- that -pron- organize -pron- memory this way so to try to answer this and let -pron- think about how these structure can grow in time both the heap and the stack can dynamic dynamic in the sense that -pron- can get significantly large so heat get large when -pron- call malloc for example and stack get large when -pron- recurse so every time -pron- make another function call -pron- be go to need to extend -pron- -pron- stack space so for for architecture that only have a limited address space so particularly true on say sixteen bit and thirty two bit architecture let -pron- put these two structure as far away as possible so that the likelihood of -pron- collide be small",
    "some really text segment down here for -pron- code and constant -pron- have get little space for -pron- global variable and then -pron- have get the heap above that -pron- question be above the heap and simply if at the very top of memory -pron- have get thing like argv argc value -pron- have get environment variable and then -pron- have get the stack here here be a stack let -pron- label these thing as for stack a little hv heap what be immediately above the heap here and what be immediately below the stack ok so the answer surprisingly be nothing these area of memory these page of memory and not actually map to any memory if -pron- try to write to an arbitrary address in here that do not correspond to any particular",
    "that interrupt and eventually will generate a segfault ok this be the whole story now there be a few little lie inside this story ok so what be the lie first of all that when -pron- load library like the c library or if -pron- be do open gl sound library -pron- need to put those in memory as well so in practice -pron- will actually live between these where -pron- dynamically load library so -pron- may put other stuff in the side there also the idea that the heap be actually just one contiguous block of memory later on will axe that model and if -pron- say to malloc hey malloc -pron- 'd like four gigabyte of memory actually -pron- be go on a modern machine go to find a different space for such a large allocation ok but more little other light be that in the future -pron- will talk about threat and each",
    "world right now where -pron- just get a single stack a single heap area and as -pron- make more complicated program these be go to expand -pron- heap expand as i keep call malik and i never call free -pron- stack expand downwards as eye for example keep make lot of recursive call right so -pron- will learn more about stack and how -pron- represent thing on the stack in cs two thirty three for now let -pron- just realize that -pron- need a space for the argument for the return value for -pron- original program counter so the cpu can go back to do whatever -pron- be do before and anything else argument maybe return value as well ok so ok so immediately above -pron- have nothing in practice the the operating system may include what be call",
    "into some memory so for example i can have a value a hexadecimal value like the follow bad food then later i could check to see if that value have be change so -pron- could write that to the few bite immediately above where be heap and stack finish to check for overrun but -pron- be go to do that for the entire memory between the heap and stack ok so the next video -pron- have get a little challenge for -pron- let -pron- start play with fork and -pron- will see that i set a variable a here to ten that take the address of ten and then i call fork right and that as -pron- know that at that moment be single universe become two be single process now be two independent process -pron- have clone -pron- right with the second process return from fork right"
  ],
  "160c1e41-f1c4-4ca1-9264-636d986cb0a1": [
    "right great ok so unless some implement a stack and will implement stack but be bound by two thing first of all -pron- will see that i data store here -pron- little array here can only handle ten item also -pron- can not pull anything from the stack if -pron- stack be empty so now push and pop method need to block if -pron- be unable to continue right so let -pron- let -pron- have a good figure out how -pron- be go to implement this first of all let -pron- just pretend that with i cs two twenty five or some other course right and right than on the single threaded version ok so what be -pron- go to have -pron- be go to have thing like the push method will be take -pron- datum structure -pron- ray and after -pron- have use the value of n increment -pron- and density equal to be ok right what else -pron- want to do so for multithreade",
    "end otherwise two thread may call this code at the same time and both right into the same slot the same entry inside the away so less use mutex lock for that so -pron- be definitely go to need mutex lock soapy say mutex lock and as luck would have -pron- -pron- have already get -pron- variable up here ready to go right so let -pron- call peter mutex lock on -pron- mutex there -pron- go so that may block for a short while if someone else be currently acquire the lock which be why a later on -pron- be go to release -pron- ok so thank -pron- very much luck -pron- be do with -pron- anybody else that be wait can now continue right so great so now -pron- have get code which where only one third of the time can push thing what about if -pron- array be full of what if i stack be full so remember step",
    "busy check this right so while while n be equal to the maximum number go round the loop now -pron- know -pron- could put a sleeping here if -pron- want to -pron- know that right now this be a terrible test because -pron- be hold the lock if all of -pron- code use a lot no one else will be able to do this fortunately for -pron- -pron- be go to be use p thread condition wait and that will release the lock whilst -pron- be block ok so here be -pron- condition variable that be go to sleep in and watch be sleep unlock that mutex and then before return lock -pron- again so the big idea here be that in all the code that -pron- write let -pron- do i make a highlighter well let -pron- do -pron- like like a",
    "that -pron- be in the matrix log so -pron- could reason that -pron- be the only thread that continue to run so great -pron- have get all these other thread run at the same time but -pron- head do not need to explode thinking about the possible interleaving of all of these expression from this thread and another third because -pron- own the mutex lock right and anybody else have to wait until -pron- finish so -pron- simplify reason about this back down to just simple single thread code again alright so great -pron- have get -pron- push method to work ok let -pron- go back to -pron- kind of blueish color right so if anything else -pron- need to do yeah well -pron- be write a method which both to push and pop can can block so if i just put something onto this onto -pron- way -pron- could",
    "-pron- be go to call p threat condition broadcast ok and say hey everybody wake up all right and there -pron- go so if there happen to be someone sleep in on this condition variable because that waiting to pop then now -pron- can wake up so -pron- could for performance reason a little bit more about this and say the only time -pron- need to do this the only possible time that someone could be block while pop from this away would be if the value of n be zero so in other word -pron- have just increase -pron- up to one otherwise there be no way that anyone could be sleep right now so -pron- could weight use about that and -pron- could also reason that -pron- have",
    "as well but i would have to be a lot more careful about reason about that so -pron- be go to use p thread condition broadcast just in case there be multiple thread go to sleep -pron- want to make sure that if -pron- be only go to wake up in that transition that -pron- work -pron- all up so right i i think -pron- can now continue and will write to the next one so the pop ok so what should -pron- pop method look like ok so first of all let -pron- write the code which be go to return value k so -pron- turn -pron- v where do become from -pron- be go to have something like double v equal so i go to -pron- way now i want to pre decrement -pron- value of n there -pron-",
    "-pron- need something like look if -pron- value of n be zero then go to sleep ok right so -pron- be go to have -pron- p thread condition wait ok do -pron- do today and here be -pron- condition variable -pron- 'd like to sleep in and do not forget that mutex lock ok what be the mutex lock code look like be right so -pron- have see this before that be just annotate -pron- in a different color -pron- be go to obviously have a lock here k and unlock at the end ok right be -pron- do no -pron- may need to wake up some thread so let -pron- put that code in as well about this kind of dark publish right so let -pron- in here wake up any thread switch may be sleep on the condition variable",
    "all right and again -pron- could reason about this -pron- could say if there be if there be any lock if there be any thread sleep on this waiting to push the only time that that can occur be if the reach the maximum number so if any be equal to now nine then i know that -pron- have just decrement -pron- off the off the very top so time to pee time to broadcast however this be kind of a optimization -pron- be very easy to get these wrong -pron- be very tricky to start model think about this when -pron- have get multiple thread which may call pop of multiple thread which may call push get a little bit easy to think about if -pron- have only get one thread of each kind so -pron- advice be treat these optimization with",
    "if -pron- do not care about absolute performance just call prefect ingram forecast that performance head be not that great ok so -pron- have get some working code -pron- think let -pron- actually have a go at testing this ok so here be -pron- code that be go to actually run this and -pron- have get some test code where -pron- producer be go to call the push say ten thousand time but -pron- be actually go to do that with two thread and then -pron- have get a consumer method that be go to call pop twenty thousand time be just one of those today so let -pron- check that -pron- actually get all value",
    "that -pron- know that -pron- be go to push in the help for help in the background ok great so -pron- know -pron- be go to push in the value zero up to nine hundred and ninety nine nine have enough ninth ok right and so if -pron- be just go to some these so -pron- have the sum of value from zero up to that number there ok but in fact -pron- be have two thread actually push all those value in so -pron- be go to sum up the integer and if -pron- know -pron- be sure -pron- have see this inside once every three right or -pron- can do -pron- recursively -pron- can do this inductively or -pron- can do -pron- with lego as well -pron- know that the sum",
    "word -pron- expect a total of that right by the way i say -pron- could do -pron- with lego block here be the reasoning with lego block if -pron- still some lego block from -pron- young sibling -pron- can build something that look a bit like this ok that be ok that be -pron- integer one two three four five and then just to make -pron- mad -pron- build that again so right want a different color all right there -pron- go -pron- have to do to do right so -pron- build this again great so what do -pron- get -pron- get now -pron- have get a rectangle of size n times n plus one ok and the area of that be exactly",
    "integers be go to be end time n plus one over two there -pron- go i actually use this mentally to remember whether -pron- be end time n plus one or n times n minus one etc so that be kind of cute little lego block prove there right so let -pron- let -pron- actually have a go at run this ok so do -pron- have code right so -pron- call -pron- block and let -pron- let -pron- run this thing ok -pron- will notice that -pron- only exit after -pron- manage to join all three threat so will compile -pron- stop the cake monster stop consume cake ok wait finally -pron- be finish ok good so -pron- want to compile ok block right so let -pron- do that",
    "k alright and great -pron- get the correct some who be so be -pron- convinced that -pron- code work or like i say -pron- have firm give -pron- a fair shake -pron- call the push and pop in a tight loop and -pron- call -pron- for ten thousand time so empirically -pron- have show that maybe if there be a likelihood of -pron- fail -pron- have at least test -pron- to the kind of point one percent level but be that be that be that do that give -pron- confidence to put this into production no -pron- 'd actually want to kind of actually do a code review and think carefully about how -pron- code work so so in multithreade code -pron- be a very important -pron- have strong understanding about how -pron- code work and rather than just simple go to lightweight testing and say oh yeah great"
  ],
  "16e62b2f-2875-432e-af0d-583257d7723a": [
    "ok right so what have -pron- see what can -pron- what can -pron- conclude from from -pron- little paper demo well let -pron- try to think a little bit more general than just the example -pron- have see and also maybe -pron- can understand why what happen when -pron- actually use this ok so first of all -pron- be actually really hard to prove anything from these be often the case that -pron- actually want to run real simulation on real example so for example -pron- may actually run -pron- memory allocator as part of a web server or database or a chat client or chat server or some other large piece of software that need to run very quickly or even a game so something which need to run well have good performance for extended period of time ok so uh would be concern about well -pron- big problem be -pron- be concern about fragmentation and there be several reason -pron- care about fragmentation there be the obvious one which be that now -pron- have get piece of memory that i can not use very well because -pron- will sparsely separate",
    "say -pron- link list or whatever date other datum structure i want to use which be useless to -pron- or i have to keep iterate over -pron- in order to find a useful piece of memory that be go to work for the next malik request right so what be the outcome of the three placement strategy that -pron- have see so surprisingly good fit be not the good ok what do that mean let -pron- give -pron- an unhappy smiley face here ok so good fit should -pron- sound google the beginning here be -pron- unhappy smiley face right but what be the problem of always actually try to find the fit that be -pron- close well something that be not quite obvious from -pron- very simple kind of little integer example that -pron- just do here be that real memory allocation can differ just by a small number of byte so for example imagine -pron- have get a piece",
    "so now -pron- have get a small piece of just six six byte that no one be ever go to be able to use effectively and -pron- be very deep inside -pron- link list etc right so -pron- be go to take a long time to find and -pron- be go to slow -pron- performance down so because memory allocation tend to be scatter or many different size -pron- end up with lot of tiny hole because invariably will find something which be pretty good but just a little bit big than what -pron- need and so -pron- end up with this additional entry which be no use to anybody because -pron- be so small so just a simple good fit actually do not have the good performance because now -pron- have a very long list link list and -pron- end up with lot of micro hole which will never use -pron- have to keep iterate through -pron- ok so sorry best fit -pron- will good idea but -pron- turn out in practice -pron- do not actually perform that well ok what about bad fit case so worth -pron- do not suffer from this",
    "space so that mean if -pron- run this over a significant amount of time say on a real web server or something which create a lot of object and then freeze -pron- will delete stub then very quickly -pron- eat into -pron- large space and so -pron- know if -pron- 'd kind of just sketch this out here if this be all of -pron- memory if -pron- have divide -pron- memory up into two area for some reason because -pron- have get an object say in the middle here then very quickly -pron- be go to start eat into this space so this space be go to get small but so be this space whichever one happen to be large at the time will be eat away will be use to assign more object so with bad fear -pron- tend to see be lot of medium size hole lot of medium",
    "because -pron- be go to be nibble away from the next allocation so lot of kind of medium space which be all about approximately the same size so that sound great until -pron- need to run -pron- with an application that actually need occasionally to allocate lot of space because now if -pron- be to look at -pron- memory -pron- would find ok i get some free space here i get a bit of free space here -pron- have get a bit of free space here -pron- have get some free space tear operator right be that um now i can not do large allocation request so sorry for bad fit -pron- turn out to be maybe a little bit well than good fit for some application but maybe -pron- can do well and surprisingly then the one which -pron- just think be just the scrappy dog of hagia system -pron- find something that surprise -pron- actually work surprisingly well ok so why do -pron- why be -pron- a first fit work surprisingly well ok so first of all -pron-",
    "to keep look through -pron- link list jump through a link list be actually kind of slow -pron- be not do memory any favor because quite often now -pron- be bust -pron- cache -pron- keep go back to different part that make memory to say oh i need to follow this link over there so -pron- be not cache friendly which mean i often -pron- be talk to main memory which be so slow right so -pron- have get -pron- have get a performance issue there and then secondly with good fit -pron- tend to organize thing so that what let -pron- have a think about this that if -pron- have get some some fragment case so -pron- be go to kind of mark this that i put a bit of space there a bitter taste bitter space there ok if i have regular sized request early on inside -pron-",
    "with first fit be that the small fragment be at the beginning and -pron- get kind of increasingly the large so for very small fragment -pron- can find find very quickly and if there be large fragment here -pron- would be immediately go to be go to be use up of course for -pron- and so the large space happen tend to happen later on in the link list ok this so link -pron- first with first fit be limitless do team seem to have some kind of some pseudo structure that -pron- do not necessarily expect which -pron- actually discover through simulation and a little bit of reasoning -pron- can kind of say oh ok i can kind of see that i can kind of see how the size of the space tend to increase over iterate through the link list but maybe -pron- be not obvious",
    "-pron- can see how -pron- have different fragmentation pattern all the other yeah sure ok so -pron- be not go to talk about -pron- today but if -pron- would implement a fast memory allocator i personally think nextfit be kind of fun where rather than always start at the beginning of -pron- link list -pron- have some other pointer that allow -pron- to start from a different spot inside be link list that would also have a different fragmentation pattern -pron- be go to put this in parenthesis though because write a memory allocator be tricky and so -pron- advice be always start start with something simple and only add complexity when -pron- have something work and only add complexity after -pron- have do a git commit that -pron- have actually get some work code so that"
  ],
  "1853bd34-e9ca-43fa-91f5-250a9abc155b": [
    "hi welcome to lecture ten where -pron- be go to start look at how to build a memory allocator and today -pron- be go to start by think about how -pron- can build a well version of realloc ok so here be the story so far i have get ok there -pron- go wait -pron- little link list which be go to represent all of the allocation that i have and for each entry -pron- be go to make a note of whether that -pron- correspond to piece of memory that be free and other word available for future allocation -pron- need to make a note of -pron- size in other word how many byte the user could actually store a certain location and also i have a pointer to where the user area actually go to start which typically be go to be just after the end of each one of these entry but -pron- do not have to be so that be one advantage of have this little point here ok so what do -pron- need -pron- also need a way to make a note of where -pron- link list start so now -pron- have do this typedef"
  ],
  "1950b119-9d1c-4760-aafa-f10604e9d6cd": [
    "ok let -pron- round out this lecture with two little non virtual memory idea first of all -pron- have hint at this i think of ipc so when -pron- hear ipc in a interview -pron- be probably talk about inter process communication and -pron- have just see one today ok so inter process communication and where -pron- use communication ok where -pron- use a shared memory use the virtual memory mechanism some more that -pron- be go to look at in the future again -pron- be pipe where -pron- can treat pipe a bit like file or at least stream where i can stream in some bite and then another process constrain -pron- out in the same order and then -pron- be go to talk about networking as well so the idea that i can create tcp and udp socket so that",
    "so great -pron- have learn a lot about thread and process and concurrency let -pron- actually kind of take a different tack and say just how much speed up could -pron- actually get so on those law yes there be a formula but -pron- never need to memorize that that formula instead -pron- be very easy to workout from first principle what kind of speed up -pron- can actually get so let -pron- take a look at this as a kind of worked example right so here be here be -pron- little problem so -pron- be go to have a process which right now take or single thread program something that take one hundred second ok and all of that code there be go to be part of -pron- that -pron- be go to work on and then the other part that -pron- be not go to work on so -pron- be go to try to make -pron-",
    "and if -pron- have do some performance test -pron- will know what percentage of -pron- time be actually spend do something else in other word the part that -pron- be not go to try to speed up right so -pron- can see -pron- be just twenty five percent ok so most of the time -pron- spend say debit for loop and then twenty five twenty five second spend say during the initial reading in the file app put the code which i return i change so let -pron- let -pron- sketch this out ok so in term of time ok -pron- can imagine -pron- have get say twelve and a half second here and twelve and a half second here for the non parallelizable task the bit that -pron- be not go to work on but the good news be that -pron- have get -pron- seventy five second in the middle which",
    "i need to work to get -pron- paycheck and happiness great so right now -pron- take a hundred second so -pron- want to get twice as fast ok so now -pron- be go to make -pron- run in fifty second right but so -pron- get fifty second total to game plan that -pron- want to ok but before -pron- get start -pron- know that ok -pron- have get twelve second there in twelve and a half second there to play with -pron- father that -pron- be not play with which be -pron- startup and save time the word twenty five second be currently be use which -pron- be not go to touch so -pron- diagram be not very accurate actually let -pron- cut out the net pot actually",
    "ok there -pron- go right so i get about a third of this right so i get to scrunch down there -pron- go alright -pron- be go to scrunch down -pron- seventy five second down to twenty five second in other word i actually get to work to make -pron- code three time fast just to see an actual twice as fast speed up so -pron- call window at least -pron- never get as much bang for -pron- buck as -pron- hope so as an example suppose -pron- now go from a single cpu two three cpu ok that be go to benefit a lot of -pron- code let -pron- say seventy five percent which be go back to -pron- original number here",
    "cpus i still only see performance which be twice as fast so even if i have say four cpus well -pron- could do the math -pron- would only see still a modest speed up so -pron- be do law say that -pron- will never get as much speed up as -pron- hope because there be usually a significant fraction of the code that be not parallelizable either because -pron- be inherently parallelizable or simply because that be just not the code that -pron- be work on today so as a goodwill of firm be make sure that before -pron- spend time try to parallelize part of -pron- code make sure -pron- actually represent a significant portion of the runtime in other word benchmarke be be important and secondly do not bother to expect a big massive",
    "at least three or four cpus before -pron- start to see a significant improvement and even then -pron- will not get the full fold difference so if i run for cpus i still do not expect to see a four fold improvement in runtime right so -pron- can read more about lawndale slow but -pron- be not necessary to memorize a formula -pron- could always calculate -pron- -pron- just simply by sketch out a timeline of think about ok this be the code that -pron- be -pron- be run in the code that -pron- be go to improve an last comment be what be the difference between concurrency whoop and parallelization so concurrency be the idea of do two thing potentially do different thing at the same time so for example -pron- may make a phone call while baking cookie so -pron- be able to do these two task at the same time but -pron- be not go to leave the kitchen until both be do and then this parallelization run do thing in parallel so an example there"
  ],
  "199ad3c7-e0c6-414e-8fa1-80276ca9fdcc": [
    "ok so let -pron- try these pipe on -pron- mac and -pron- will see how many byte -pron- can send before -pron- block . so -pron- will have a little counter right so here -pron- go will have , let -pron- see .. size_t    to say right this be number of byte send ok , so initialize that to zero and then -pron- need to make a pipe right so i need two fire descriptor so -pron- be kind of -pron- pipe and -pron- be just a little array and then -pron- actually make the pipe case so -pron- pipe great and now let -pron- have a little loop and will try to see how many byte -pron- can send to this pipe before -pron- block . so let -pron- go right so print out number of byte \" send so far , ok \" \" byte send so far \" \" and -pron- can just work .. call that an integer \" because -pron- know -pron- should be small and will say byte send key let -pron- do flush out the new line and now -pron- need to send something ok so -pron- will call right",
    "k so that be the second remember yes read write and watch -pron- say well let -pron- give -pron- the address of one bite do not matter kind of what -pron- be but how about just this little so the string literal meaning -pron- have that be get an address an i just want that single character gay so let -pron- increment -pron- counter here key bite send and if i wish i could check the right actually work how could i do that well let -pron- just check return value of right mean that this well be actually equal to one ok so let -pron- run this and see what happen on -pron- mac how -pron- linux system may be different but -pron- will see how far -pron- get before -pron- block . ok , so -pron- save that ok so let -pron- compile -pron- . ' pipetoblock '",
    "ok great ok so -pron- do not like try to use just nature let -pron- use the recommend type so -pron- have get z z -pron- ok write clear that oops i do not compile -pron- ok there -pron- go and let -pron- now run -pron- off -pron- go oh right so on -pron- system , today ! these limit can be but modify i can send close to sixty four kilobyte in fact this be sixty five that be exactly sixty four so if i have to do say python and let -pron- do two fifty six time two fifty six get -pron- to exactly that number six five five three six so",
    "\" but at some point be kernel say \" \" that be -pron- -pron- be only \" \" go to support that number . \" \" so -pron- can even think of for \" example the ring buffer that -pron- implement use count semaphore as an implementation of a pipe ! ok so if i be to start remove character out of this then i could actually kind of keep send anymore . however as -pron- can see -pron- be dangerous to use a pipe if -pron- be only use -pron- as a communication protocol between within one process just send a few byte be unlikely to block with right but send much large datum structure over pipe -pron- may run into this limit about how many byte pipe be prepared to store before -pron- block right so pipe be much more useful when -pron- actually want to communicate between different process and in fact -pron- use by the by the shell so if for example",
    "then ask cat to read all the file that end with star dot c so -pron- give -pron- a lot of datum i can then take that and i can pipe -pron- somewhere so for example i could pipe that into grep and i can ask grep to only print out the line which have the word include ok then i can take that and i can pipe that into something else so i can pipe that into say a sort key and now i can take that and pipe that into unique which will only print out line which vary from online to the previous line ok so now -pron- have get all the different include that -pron- have use in all the program on this current directory ok all of these pipe special in the sense that -pron- just use this pipe mechanism",
    "that cat at some point will block -pron- will block try to write datum into this pipe which be useful -pron- do not want to keep generate gigabyte of datum but overtime grep will start read that source from that pipe and as -pron- start to exhaust datum from that pipe , a ' cat ' can be unblocked again and continue can continue to be send more datum so pipe be very useful and -pron- allow -pron- to kind of change thing together like this on the command line so let -pron- now actually start think about how pipe can be can be close and what happen when -pron- say -pron- close the read end or -pron- close the write end so in the next video -pron- want to"
  ],
  "1a077e0a-fca4-4696-851e-cc0eb3ca149a": [
    "hi welcome to lecture eighteen so let -pron- start off with a challenge -pron- want to make -pron- barrier just use a single mutex lock and a single unlock core so that seem impossible let -pron- see how -pron- can kind of get unstuck and then talk about why this be actually a terrible barrier ok so here be a sketch of what -pron- want to do here -pron- want multiple thread be able to call or barrier function here will have a keep some kind of count for the number of thread that have get stick inside -pron- barrier and then -pron- want to wait until somehow wait until the order the thread that -pron- need about actually call this barrier function and -pron- account have incremente to the right value ok so let -pron- have a think about what -pron- need to do here first of all this plus plus be not atomic so -pron- definitely need to protect that with a p thread lock so only one thread at a time can write this so before call count -pron- definitely need to call pthread mutex lock",
    "thread can call call count ok call cam plus plus so will need to unlock -pron- somehow right ok unlock great so -pron- will short that critical section in here the count behave now as if -pron- atomic because if two thread try to do at the same time water then -pron- will have to wait what about this waiting until the count have reach be require barrier number case so i suppose -pron- could consider the follow right let -pron- just do nothing ok let -pron- just keep go around the loop yeah let -pron- burn that cpu baby because -pron- be go to just keep check the value of count all right so if -pron- test this -pron- may kind of work",
    "a good chance of -pron- work right now let -pron- explain why i have all those provisor so the first problem be that when a thread be run this code continuously check the value of count what be -pron- do -pron- just keep go keep on check so -pron- be unnecessarily use cpu core to do that if another thread want to run then either -pron- will be run on a a second cpu core or -pron- will be automatically give the cpu after a millisecond of time or so but for the whole millisecond -pron- be just waste cpu time whilst a first read just needlessly check the value of count so ideally -pron- would want to give up the cpu at this point and sleep until the value of count change but i say -pron- be only allow to use one mutex lock and one on local ok so at the very least i may put a p thread yield here",
    "ok right so at least now -pron- be only go to pull the value of count every millisecond this be still a pretty bad solution however and here be why that there be two reason why the value of count may never change for this poor thread one of -pron- be that code be write with the optimize if this be just a simple integer and optimizing may say well hold on i see this loop never change value account be there for this expression will always be true therefore i can optimize -pron- away to just wild one while true in other word will never escape a second reason why this value may cheat never change",
    "-pron- may never get update by a different thread change the memory version of counter or at least a version of count which be running which be hold inside the cache of another cpu now on a modern intel x eighty six architecture chip -pron- be very very lucky that these chip even if -pron- have different physical chip on the motherboard so say -pron- buy a couple of expensive zian processor here then actually there be a special bus between -pron- that will automatically update cache information from one chip to another but that be not generally true on other architecture so how can -pron- ensure that the value -pron- read actually be the value which be share between multiple process and the answer be to"
  ],
  "1aec58de-6b0d-4068-a042-acdc8954bcda": [
    "hi welcome to lecture twenty six ok so let -pron- get start today -pron- be go to look at tcp client and server and first of all let -pron- just have some fun with some inbuilt thing ok so if -pron- have get python three instal then -pron- already have an inbuilt web server ok so let -pron- to navigate to a certain directory and then -pron- be just go to start -pron- right so python off -pron- go let -pron- do python3 and -pron- will say ok i want to load the module http dot server ok now right so off -pron- go -pron- be listen as -pron- can see on port eight thousand so let -pron- connect to this little web server ok so right so i will now go to firefox and connect there and do -pron- have a connection ok yes -pron- be alright -pron- be happily respond and finally",
    "suppose by default -pron- do this all the file and if i click on story dot text for example i can see the content of the file ok right so if -pron- do not have python three instal if -pron- have only get python two then i think the similar module be something like sorry simple http server and in both these case -pron- can specify a port number so if -pron- want to comment that one out if -pron- want to specify a port then i could specify a different part number here so let -pron- choose for example if i try to do a low port number like port eighty -pron- will not be very happy -pron- get permission deny because -pron- be not root right now on this system",
    "to be an administrator to listen on those port so let -pron- not connect on let -pron- not listen on port eighty let -pron- listen on say port eighty eighty ok great and off -pron- go again so now again i can make a connection use -pron- favorite web browser and off -pron- go and see the content again wait and -pron- will see this particular web browser also print out who be connect to -pron- and when and what resource -pron- be request so another useful tool be call netcat let -pron- have a look at that ok so netcat be a swiss army tool be well worth -pron- instal for when -pron- be play and or debug with simple protocol use tcp and udp netcat can behave as client netcat can behave as a server so once -pron- have instal",
    "or mac port install on a linux system -pron- may be do thing like apt install -pron- just need to find a quick google look up will find -pron- anyway so let -pron- look at netcat so netcat behave a bit like cat except rather than concatenate from file -pron- can send stuff to and from a network connection and by default all -pron- need be a host name and port , and after that -pron- can start to describe whether -pron- want to make -pron- to listen on a port whether -pron- want to use tcp or udp etc etc etc so let -pron- try this i will do netcat and -pron- will connect to -pron- localhost use ip four so right and -pron- will talk to port eighty eighty",
    "blah blah to the server that be listen on that port alright and -pron- will see that -pron- little web server over here in python do not like -pron- message here -pron- say hey bad request and in response to -pron- request -pron- send the follow -pron- say ok -pron- i do not like -pron- -pron- be an error code of four hundred and -pron- shut down the connection so let -pron- let -pron- let -pron- try again but this time -pron- will send a valid request ok so i happen to know a little bit of http and valid quest look like this so -pron- have get and then what would -pron- like well how about -pron- could have the story dot text and the protocol that -pron- 'd like to use today be http",
    "have a blank line and there -pron- go ok so this be what the server reply be there be right yeah yes i have that resource for -pron- so -pron- be ok so status code two hundred tell -pron- a little bit about -pron- the date and the content -pron- be give back be just plain text that be a mime type and there be go to be twenty one byte case so after the header 's complete after -pron- see this black line -pron- expect to have twenty one more byte -pron- get twenty one byte -pron- know -pron- get the whole file so there -pron- be once upon a time or if i connect again and i just say ok give -pron- the homepage right so again i need to say what protocol k a new line -pron- will see that great -pron- be now give -pron- a content type of text slash html in other word a web page and the speaking",
    "nine byte and here -pron- be and if -pron- look inside that -pron- will actually see here be the list of file in the directory so now -pron- could actually kind of click on those link and load -pron- for example so great -pron- have get -pron- a web server use python and -pron- have get this swiss army knife call netcat -pron- can even use netcat to kind of transfer file as well right so right so what i mean by that be -pron- can set up netcat to listen on one end and use netcat on the other end to to send a file or vice versa so let -pron- get out of python -pron- do not need that anymore instead how about -pron- log in remotely to a different server so -pron- use to be a very useful command for this call telnet the only problem with telnet today be that -pron- send everything",
    "send someone else on the internet or someone else that be run a router or even possibly in the same subnet can sniff -pron- packet ok so that be a problem -pron- will be able to sniff -pron- password ok so telnet be barely use today there be a few case of embed hardware that may offer a very very simple telnet interface say just for debug purpose but today telnet be not instal by default on most machine -pron- have to install -pron- -pron- let -pron- show -pron- one still fine example use of telnet and that be not follow that there be a telnet server run on the follow ip address so let -pron- try connect to -pron- ok right and off -pron- go and rather than give -pron- password prompt",
    "and those character include terminal control character to do thing like clear the screen and as -pron- can see -pron- actually play a movie and in fact -pron- play a complete ascii version of star war a new hope so -pron- will leave that go and -pron- will see where -pron- get to practice at the end of this video alright so let -pron- talk about telnet -pron- talk about netcat all great kind of debug tool especially when -pron- too will be write tcp client and server so remember these guy as as useful thing that be useful to debug and check client and server ok so let -pron- do something serious . let -pron- review how -pron- make a tcp tcp client ok right so if i want to make a tcp client remember tcp stand for transmission control protocol this dark color there -pron- go",
    "nice stream a data stream ok so how do -pron- set one up right so if -pron- be set up a client all i need to do be first of all -pron- be go to be lazy and call get address info this do a lot of heavy lifting for -pron- to actually figure out the correct parameter -pron- be go to send into -pron- next two call so technically this be not formally require but -pron- do make -pron- life a lot easy the two thing which be definitely require be of course -pron- need a socket then a socket be the abstract object own by the kernel which allow -pron- code to talk to the outside world and to be able to talk to other socket maybe on this machine but maybe not ok so once -pron- have make a socket and for a client all i need to do be ask -pron- to connect so let -pron-",
    "call the parameter i need for here be go to come from whatever get address info return now -pron- may see a little bit of traffic actual packet leave machine -pron- machine first of all when -pron- call get address info because -pron- be go to convert say a host name to an ip address and of course -pron- will see packet leave when -pron- call connect handshake be require between tcp client and server and so the moment -pron- could connect -pron- be go to send out a packet to that server to say hi please will -pron- connect -pron- let -pron- do a handshake let -pron- do -pron- tcp handshake right now one surprising thing about get address info be that -pron- can return zero one or more result and if -pron- remember that the result be this struct",
    "-pron- will see the last entry inside here let -pron- just move this out the way let -pron- do -pron- let -pron- do -pron- this way let -pron- move scroll this over here -pron- go the last entry be actually a link list entry have -pron- next pointer and that will be null so if -pron- be write kind of code very lazily or just want short simple demo code -pron- can ignore the fact that -pron- return multiple entry but if -pron- want to write robust code then realize that there may be more than one way to connect to the server for example perhaps the server offer an ip four address and an ip six address so -pron- may try both -pron- may try one after another or -pron- may create a whole lot of thread and do -pron- asynchronously and see which one actually kinda connect fast ok so let -pron- let -pron- remind -pron- about what what the entry",
    "what kind of connection -pron- want do -pron- want ip four ip six or some mixture do -pron- want -pron- to do something else for -pron- -pron- have the address family so that be do -pron- care about excuse -pron- ip4 versus ip6 -pron- have the socket type which be do -pron- care about stream base socket or a datagram another packet light socket the protocol be usually leave zero do not have to worry about that right but what be go to give for -pron- in the result object be correctly set up socket address which be go to be great for call to either connect or bind however c do not allow -pron- to use inheritance so this struct here this socket address address be the simple kind of socket address and and for different kind for example ip six -pron- can actually",
    "why -pron- need also to pass in how big be socket address so that be why i will see a lot of cast to this very simple type of struct and also -pron- need to pass just how big -pron- real struct be just as a kind of a way to verify that -pron- be read the reading and write byte correctly in a valid struct ok so let -pron- get back on track here the excuse -pron- get address info be a complicated beast -pron- be quite long but -pron- -pron- do not because -pron- call many other call include do -pron- dns look up to convert host name to an ip address -pron- actually have a special way of return error rather than return something",
    "and then if -pron- want to know about what that nonzero value mean as to how -pron- fail ok there be something like gi a get address info str error and that give -pron- a string ok so -pron- will be see that in the actual code that -pron- write also realize that if -pron- return a non zero value then -pron- mean -pron- never actually find -pron- a way to connect and so that result pointer probably have not be change so just assume that -pron- do not point to anything valid right ok some other thing -pron- need to know so i mention ip four -pron- thirty two bit address scheme that today if -pron- be to pick up a random packet would discover -pron- be an ipv4 base packet but -pron- be try to transition over to a more flexible addressing scheme which be much large so today -pron- would like to use ip six but",
    "and -pron- will write -pron- out like this version six be that -pron- be address scheme use one hundred and twenty eight bit for address so that should be big enough for everybody two to the one hundred and twenty eight be a lot well than just two to the thirty two which be all -pron- have for ip four ok so in code how do -pron- specify that -pron- 'd like an ip for ip six address answer just use this constant constant for the address family if -pron- truly want just an ip four address then -pron- can just say underscore on -pron- for ip4 before ok that be color out though because hey let -pron- try ip six right now speak if ip six address here be one which be very useful -pron- be -pron- home address ok say here be -pron- notice",
    "point zero point zero point one this be special ip six address that if -pron- send packet to this address -pron- be not leave -pron- machine -pron- be define to be -pron- local machine right so let -pron- put this together now let -pron- actually set up a tcp client ok so -pron- be go to just quickly review how -pron- use get address info right and i want to k just fix this this be actually not go to be a client this be go to be a server right ok and just remind -pron- how -pron- do this so -pron- be go to set up -pron- hint object to say everything -pron- like about this connection but what be important be to remember that there be many field in that struct that -pron- be not go to touch so let -pron- initialize -pron- all to",
    "-pron- be and set -pron- all to zero like and how many byte would -pron- like to set to zero ok so if -pron- use the pointer here that would be incorrect -pron- actually want the size of the whole struct so i could write struct address info like that or i could just say size of hint so great -pron- have set -pron- all to zero now i can start initialize the field that i actually care about right so -pron- want ip four so inside here -pron- can say address family inet by the way there be an inet any which mean so if any mean -pron- will take ip4 or ip6 i just want to connect to the server i know care about the exact mechanism all of the ip address but today in this problem -pron- care about inet four so let -pron- use",
    "stream if i want to use datagram in other word kind of packet base connection then i would use socket dgram here right but the joyful thing about to stream be i could just shovel byte down -pron- end and know that -pron- will appear out the other end in the same order and i do not personally have to worry about miss packet and drop packet and duplicate packet and all that good stuff if a packet in the internet do get lose then there will be a momentary pause whilst the other end request that packet to be reset anyway so -pron- have set up -pron- request here now i need to go get address info so let -pron- do that right -pron- will call get address info and just confuse i only have two result",
    "let -pron- do that like this get address there -pron- go right so what do -pron- need in here well first of all -pron- need the ip address i can specify that as a string either as an actual string like this or i can specify -pron- as a host name so for example like illinois dot edu ok if i do this then there be probably go to be a packet leaving -pron- machine in the next moment to say hey -pron- need to figure out the ip address of this host name can -pron- help -pron- please right and then -pron- need a port number so the port can actually be specify symbolically so i can say well i care about the default port connect that be use for this protocol this secure https or i can specify precisely so i can say ok i happen to know that be four",
    "develop some example on -pron- laptop and -pron- be run an encrypted https service web server on some unusual port like for example eight four four three ok and -pron- choose that number because -pron- be great than one thousand twenty four -pron- be not a privileged port so anyway let -pron- pick a number right now -pron- need the hint so here be the address of -pron- hint and finally -pron- need here be the address of that pointer please change this please and -pron- will do so if -pron- successfully manage be to take the information -pron- give and figure out a way to connect to that server ok so what would -pron- do for each entry here ok so for each entry i would call that i want a socket and then -pron- be go to try to connect and i would use the result inside each of these result object to that link list to",
    "be one other thing -pron- can occasionally do with a client but -pron- be not normally necessary -pron- can use bind and now -pron- be go to see bind when -pron- get to talk about set up server but realize that normally -pron- do not care about the port number that be use locally and -pron- do not care about specify exactly which network card -pron- should use -pron- 'd like -pron- machine to figure that out automatically for example suppose -pron- have a machine where one network card talk to -pron- corporate internet and the other network card talk to the internet and another network card may be connect to say a fiber line that run under the atlantic ocean -pron- may want to explicitly specify which network card to use rather than let"
  ],
  "1af0122b-b9dc-41df-a00a-b449acd1c803": [
    "hi ok so here be a little quiz -pron- be use f printf today and -pron- be go to print out four thing so what do -pron- think be go to produce -pron- be send cs 241 & nbsp;system programming and new line but -pron- may notice -pron- be send -pron- to two different place stderr stdout stderr and stdout ok so be -pron- ready have -pron- make -pron- guess to what -pron- be go to see let -pron- try -pron- out ok so -pron- have get question seven ready to go be the same code again -pron- have just wrap -pron- with standard io in a main method so let -pron- run this let -pron- compile -pron- hey question seven and -pron- will produce some output -pron- call -pron- question seven so now -pron- have get a question seven exist so let -pron- run -pron- and what do -pron- think be go to say ok -pron- say hello cs two forty one programming system wait what happen why do -pron- line come out in a different",
    "a little bit about the buffering that the c library give -pron- the c library support buffer in order to ensure good performance make a system call be a lot more expensive than just a regular function call so rather than just send a few byte at a time let -pron- only make that system call when when -pron- want to ok so what be the default behavior of the c library here ok right so the default behavior be actually kind of reasonable when -pron- kind of think about -pron- first of all if -pron- be send stuff to standard error be probably a good idea that -pron- see this as soon as possible -pron- if -pron- program about crash or this or there be any kind of problem let -pron- not keep that information hide inside -pron- process instead let -pron- write -pron- as soon as possible so by default standard error be not buffer ok so that information be go to be send as soon as",
    "and will see that yes -pron- get cs two forty one and programming so these two thing -pron- send pretty early on and -pron- see -pron- pretty early on but -pron- also see -pron- kind of hello early as well while i be that well the c library when the output appear to be go to the terminal will flush that the moment that -pron- see a new line the thinking here and if -pron- think about -pron- -pron- be pretty reasonable be if -pron- send a new line -pron- probably now may be wait for input from the user perhaps -pron- still say to the user hey please enter -pron- password or -pron- sure -pron- really want to do this so the default behavior be prettify if -pron- be send -pron- a new line -pron- be go to take that all that content -pron- have give -pron- so far and then call right in other word -pron- be go to flush the buffer -pron- be go to now right out what -pron- have give -pron- anything else that -pron- have store in -pron- buffer so that behavior be the default behavior",
    "ok with that let -pron- try send this output not to the toggle i send -pron- someone else ok so -pron- can do that by run -pron- program and send the standard out in standard error to different place for example i can send a stamp out to a file so i can call this hello dot text and i can send the up the error output to somewhere else so for example i could send the error to stream number two which -pron- know be now the error i will look i can send that to say error so let -pron- run that and now what if i get after -pron- run -pron- have get -pron- output in try again not there -pron- have get -pron- output inside hello",
    "the stuff -pron- send to the standard error in the other file so if -pron- look at error will see -pron- have get cs two forty one and programming right so the last kind of quick comment on all of this code be when else when else would -pron- expect up rc lie beat a flush thing out so the answer here be if -pron- exceed the size of the buffer and typically -pron- be go to be about four thousand book bite or so so at that point -pron- will flush the buffer and everything else the other answer be when -pron- be close a filestream so if -pron- gracefully shut down a file object so for example -pron- have call f close on -pron- or wear exiting gracefully -pron- program then will send out everything that -pron- have currently get inside the memory the c library flush out if -pron- crash -pron- program then this policy likely never have a chance to actually send those bite so"
  ],
  "1af6249c-bd09-46a8-9b8f-738611112cb5": [
    "ok so let -pron- just do some kind of quick work example -pron- have get a case where -pron- file use ten direct block and -pron- have -pron- dis block number use thirty two bit number ok so the maximum number of disk block which be addressable two to the thirty two and if each disk block be four kb let -pron- just work out how big disk -pron- can actually use before -pron- run out of addressable space here so what be two to the thirty two minute at home ok so i can think of that as two to the ten time two to the ten time two to the ten time two to the two ok times four kb ok so each one of these make -pron- go for unit so -pron- have get instead of kilobyte megabyte gigabyte terabyte and so this scheme allow -pron- to address",
    "right about limit that i can already easily by a say twelve terabyte disk right so in practice then e x two actually provide actually have be limit base on choice of say dis block must be represent use just thirty two bit and each disk block be exactly four kb but let -pron- go back to scheme here of actually how -pron- reference a information about file and look at how many block and indirect block that -pron- can reference here so for how many indirect block can be re reference -pron- work this out by say i have four space of four kb",
    "because that be the size of -pron- table that can fit inside one dis block right so the next question be how large the file in lot of datum if the indirect block index be half full so what that mean be that be -pron- table that this do not have four thousand twenty four inch -pron- have five hundred twelve ok so how big be -pron- file well -pron- use ten direct block k so -pron- have ten plus five hundred and twelve indirect block so in other word -pron- have five hundred twenty two block be the size of -pron- file gay right and let -pron- see what be question three what",
    "ok so in this example then -pron- have five hundred and twenty two block worth of datum but the actual storage space on the disk be go to be five hundred and twenty three y one extra because -pron- have this overhead of actually store the table and notice i do not bother to consider the i node as as extra block -pron- have already to set aside some space for the i node entrie when -pron- format -pron- the disk ok what about huge file do -pron- have triple indirect yes do -pron- have court indirect no ok -pron- be not as a so so with triple indirect -pron- already work this out -pron- discover that the large file that -pron- could have here where be go"
  ],
  "1b576d61-d378-4ab7-892f-56f113eb5f08": [
    "hello great welcome to the next lecture so off -pron- go on a lecture thirty one -pron- be go to keep look at file a little bit and also talk about how -pron- can actually run a virtual machine today so i think that be pretty cool and exciting and also as part of file be go to talk about quick introduction first look at memory map file as well where -pron- use a virtual memory machinery that -pron- have to actually directly access file as part of memory ok so first of all let -pron- talk about umask so i make hint about umask at the end of the previous lecture that this be something that every process have and umask come into play whenever -pron- make a new file so if -pron- be just change file -pron- be not go to need to umask but the idea of the umask be that by default -pron- want to remove some permission that otherwise would be give some read write access access permission for say other in -pron- group or other people on the system",
    "that say ok create a file and then change -pron- mask d'espies change -pron- mode bit to be something else but suppose i give -pron- an exist script or an exist program and -pron- 'd like to run that and automatically make sure that all the file that -pron- create a now secure that only can be for example read read by the same user ok so this be how -pron- can see how -pron- do that right so here be a virtual machine i log into early and -pron- will see that let -pron- start again up here right so oops not -pron- make what umask there -pron- go right -pron- mask have an initial value of octal twenty two so do this mean -pron- mean -pron- be go to be remove these bit when -pron- actually make a file so how do -pron- read this let -pron- not worry about the topmost digits instead i want to look at these three low bit digit remember",
    "here kind of read right execute ok so -pron- 'd be four right be to execute be one in other word -pron- be go to ensure that the right access be remove from the new file that -pron- create so -pron- can kind of quickly verify this let -pron- course -pron- do not make a file t one and -pron- look at t one -pron- will see that yet -pron- do not have the right bit set but wait a moment -pron- say what about the execute bit that be not set either yes well -pron- mask be just part of the story about the default permission that be create -pron- can think of -pron- mask as a final kind of take away be that these be the thing that -pron- want to remove in addition to any other bit that be program",
    "say that now -pron- be go to set -pron- umass to remove all privilege all read -pron- execute for the group and for everybody else ok so now when -pron- make a file here -pron- go let -pron- have a look at -pron- t two and -pron- will see that only i have access to this and the same be true let -pron- trade make -pron- directory as well so let -pron- make a directory t three ok right and now if i look at t three of course by default -pron- would tell -pron- the actual innard the content of the directory which happen to be -pron- and -pron- parent of course but there be an option to say -pron- know what -pron- be tell -pron- ls actually i want to care about the actual directory -pron- ok so just tell -pron- about t three directly so here -pron- be as -pron- can see no -pron- can go into this directory",
    "and -pron- want to ensure that anything -pron- do be be not publicly world readable on the system and then -pron- be go to keep inherit that until the day -pron- change -pron- back so let -pron- put -pron- back as the default here so -pron- mask -pron- have a default of just twenty two k right notice that uh that -pron- affect creation of nude file and new directory be so if -pron- have by default let -pron- make a umask of seven seven seven ok so now let -pron- make a directory ok what about this directory right so tell -pron- everything in long format on d four and -pron- see no one get any permission do anything about this directory so now of course i can not even go into -pron- -pron- hotere right how do i fix this well in this case the ownership be ok but not",
    "like to be able to read write and navigate into that directory so there would go but everybody else -pron- stay out of -pron- so now i have i have permission to read white navigate into the directory ok so that be kind of umask one kind of final quick thought be that often if -pron- say unpack thing or play around with say sometimes be root sometimes be -pron- sometimes -pron- need to kind of re fix up the ownership of a whole load of file so turn out that chair mod and charoen can be recursive so -pron- can do thing like ok please go into all sub directory and plus be so -pron- could for example let -pron- go to potato bob on forest one",
    "ok whoop and yeah nothing like a demo right so i need a minus be here for k there be no forest one in here what be go on i think -pron- be oh -pron- be in the wrong directory ok yes so let -pron- let -pron- instead just instead of do force one let -pron- change all of these directory begin with t to be own by potato bob there -pron- go right so not only have i change all directory begin with t but any sub directory in sub sub sub directory etc inside these directory so -pron- can play the same trick with -pron- mod bit as well so for example suppose -pron- want to ensure that -pron- be all private -pron- could say remove from group and other group another let -pron- remove all read write and execute ok for all these directory and -pron- sub directory so -pron-"
  ],
  "1b746b25-23e0-4c94-9d7c-de89b9b30c5a": [
    "hi ok so -pron- both through five different example of where -pron- seek deadlock or not no deadlock and fundamentally -pron- be the requ sequence that determine whether -pron- actually run into deadlock or not so what can -pron- do to prevent deadlock and one algorithm that -pron- system could use be something call the banker algorithm so if the operating system know in advance what resource particular process want so if -pron- know an example example for example the process one be go to need let -pron- say eight aa whatever azar and say three bee whatever bee be but no season die then the bank side -pron- banker algorithm can ensure that the bank never go into an overdraft right and never -pron- never allow -pron- process be to continue so",
    "type so for example if i have one hundred day and i know that -pron- process two and -pron- process three and so on only ever go to need just a couple of these ace ok this one need ten and this one need a twenty then -pron- and i can immediately see that -pron- do not matter what order process one two three or four ask for ace -pron- have get so many of these ad that -pron- be never go to deny or slow down a request that because i can see that this be never ever go to kind of cause -pron- an issue with deadlock however if i have far few let -pron- to say ten then the moment that p three come along and request",
    "-pron- resource of type a to process three then -pron- can immediately reason that any future request by these other process will will potentially get stuck and potentially -pron- can run into deadlock so the banker algorithm which -pron- be not go to go into a detail today be this idea that i can keep if i know in advance and that be the crux but if i know in advance the maximum number of request for each resource type then i can ensure that the sequence of that -pron- allow -pron- process be to be give exclusive access to -pron- resource type -pron- can ensure that will never go to have an overdraft and -pron- can never therefore go into a deadlock alright so this be an example of kind of deadlock avoidance and -pron- can read about banker algorithm on wikipedia etc but i instead i want to spend a little bit -pron- be talk about the linux and",
    "ok so first of all some theory and -pron- will ask -pron- to guess which guess which what lennox in windows use ok so here be an idea -pron- could actually think about -pron- process be in some kind of conceptual space so let -pron- just think about say two process about how -pron- advance through this space so -pron- process run through different state so for example -pron- may be that -pron- require a mutex one and then later -pron- acquire mutex too ok then -pron- do some thing and then -pron- release mutex server two and one ok so over here right but -pron- can see the idea that -pron- first process be go to slowly advance along -pron- access here and i could do the same thing for another process i could talk about the state of -pron- second process and -pron- be always go to be monotonically increase",
    "represent a little walk through this state of space where the actual walk depend upon the sequence in which -pron- process one or process to acquire the mutex lock or some other exclusive access to some other resource ok so look at this -pron- process one be acquire -pron- first mutex lock and then switch to support the state two and so on and so on and so for example -pron- may have a path like this ok so some path in this conceptual space correspond to deadlock and i could reason very carefully about which path -pron- look like so for example -pron- may look like where process one acquire a first lock but then process two acquire a second lock and now both of -pron- be be stick verse versus if process",
    "acquire both lock and then release at all -pron- could see that oh -pron- kind of skirt around the outskirt of this graph and in fact that would not be a deadlock so -pron- could actually think about the state that position in this state space of possible state -pron- two process which actually correspond to when thing get stick in other word when do -pron- correspond with circle cycle in -pron- weight for graph and what -pron- would discover be that -pron- all interior point on this particular graph right so if example process one do not do anything but process two acquire all of the resource and then release -pron- and then process want acquire all of the resource -pron- need and then release -pron- -pron- have go around the edge where say if i interleave -pron- two process process the two processor or thread operation then -pron- be try to take a more dangerous path through the",
    "get stuck at i can not continue ok so what do the lyric do do -pron- attempt to kind of look at what state in this state space correspond to deadlock and avoid -pron- by ensure that -pron- always go around the outside no so here be what linux and windows do let -pron- choose a new color of first of all -pron- need to ground then i need creature color so -pron- have no idea how to find brown on this thing so i guess -pron- will just head right towards brown ok so here be the lennox and the window operation i just need to do a couple of foot a furry body there -pron- go a long neck ok and finally the head stick in the ground yes -pron- be",
    "look scary quick stick -pron- head in the sand and do not look so the look of window strategy for deadlock avoidance be call let -pron- just hope for the good which the ostrich algorithm be basically -pron- be let -pron- pretend -pron- be not -pron- problem -pron- system be go to let -pron- write code that can cause deadlock -pron- be up to -pron- the system programmer to make sure that deadlock can not occur so the system do not prevent -pron- from cause deadlock right so good luck -pron- be on -pron- own on this one and that be why -pron- be important to make sure that -pron- do not enter possible deadlock which bring -pron- to -pron- final little point which be how can -pron- possibly do this ok so here be the secret source here be the most important part of this lecture because now -pron- have show -pron- that -pron- can simulate deadlock -pron- could see -pron- occur inside the resource allocation graph but -pron- actually want to prevent -pron- here be the secret",
    "have a meeting with all of -pron- programmer and say look here be the thing which -pron- be say a quiet call peter mutex lock on abc and d -pron- just need -pron- to always acquire -pron- in agree apon order so for example if -pron- be go to acquire a lock in order to access a then get this lot first before get be and if -pron- go to acquire a lock be then acquire lock be before access see and then if -pron- get the idea so -pron- need to rank order or resource so another be give some kind of simple map to integer here so on and so on and so on and so on and if -pron- acquire something when exclusive access if -pron- always agree to acquire -pron- in small integer to large integer order then deadlock be impossible right to see why",
    "i want -pron- to see that if i have acquire something so here be -pron- first process and -pron- have get this first resource and -pron- have acquire this gay but now -pron- be wait for say see -pron- will see that because all of -pron- process be always acquire in the saint luke 's i want a different color ok let -pron- go for acquire in the same order i can never generate the case where -pron- have get a process to which have now acquire this but then also go backwards and create await condition on an early resource all of -pron- line which correspond to -pron- wait for resource must be to",
    "a bow tie where -pron- have end up with weight on resource which be both before and after in -pron- resource order so all of -pron- weight -pron- be go to be to the right and therefore be always possible for the early resource to be complete -pron- process be complete so therefore i can not set up a chain or between -pron- process be where i end up say with process three wait for process one and process one wait for process do ok so that be the secret source -pron- be always make sure that -pron- get resource in the same order so i want -pron- to think about how -pron- would implement that suppose for example -pron- have a set of integer say -pron- may be under a one of a link list and each one of those integer have a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let -pron- say two or three mutex lock"
  ],
  "1b84f2ca-7d13-46c1-8e96-254217cc7d9b": [
    "ok right sir how about -pron- cause a great flood right in fact -pron- be go to cause a syn flood waha right so let -pron- think about what -pron- now know about tcp and see if -pron- can bring down a server right so -pron- first example of this be where -pron- just start send packet to a server and so will send just a single packet to say hey server -pron- 'd like to make a connection with -pron- and here be -pron- tcp packet and -pron- be go to set the synchronization bit here be -pron- synchronization number here be -pron- ip address up here inside the ip part of the header here be -pron- port number that -pron- be come from here be the port number that i want to connect to please to meet -pron- and if that particular destination port be open because someone be write a server and ask the server to start listen on that port then let -pron- think about what",
    "please to meet -pron- -pron- 'd like to acknowledge -pron- packet and let -pron- start talk right so now at this moment the kernal have to remember the synchronization number that -pron- provide and also the port number and also just get ready to start talk to -pron- or hard so now this be where -pron- can do -pron- the synchronization flood first of all what -pron- be go to do be yes the server will send back and an acknowledgement packet but -pron- do not care about that acknowledgement packet -pron- do not even need to listen to -pron- or be interested in do be just keep send more synchronization connection to the server now -pron- do not care about this acknowledgement so which mean -pron- can even fake where this packet be where this packet be come from -pron- can fake the source ip -pron- can fake the source port and the server will send packet back in that direction but -pron- do not care -pron- be not list be",
    "a tcp connection please and -pron- can flood the server with million of these little packet but second and for each one of these connection connection attempt the kernel have to put aside some memory because -pron- need to remember the synchronization number in the port and -pron- have to get -pron- ready to be a real connection so -pron- can drown out this poor server -pron- can run -pron- out with these fake connection attempt make -pron- hard for real connection to actually get a chance to talk to the talk to the server so this be call sin flooding and -pron- be a very kind of early example of a tcp level type attack on a server today there be mechanism for a server can implement to prevent this and one of -pron- be in the bag not be not to actually commit any significant resource when the syn packet first",
    "can play be to actually embed the synchronize -pron- synchronization number client synchronization number inside -pron- own acknowledgement synchronization number so that so that -pron- do not actually need to remember that piece of state information which i think be kind of pretty cute and so basically -pron- be like yes ok -pron- have get -pron- synchronization number encode -pron- in some way inside -pron- acknowledgement number inside -pron- synchronization but -pron- be not go to tell -pron- how that encoding work so that if -pron- send -pron- another packet in the future the third packet of part of that handshake that i can recover -pron- original synchronization number and only then will actually start to treat -pron- as a real connection attempt so today synchronization flood still occur but less effective",
    "service so let -pron- one up the game let -pron- think about how -pron- can create large problem for a server and the next kind of attempt that -pron- see start start five year ago which really take off with the distribute denial of service so now let -pron- start make real connection real socket connection to -pron- server and simply just send a lot of -pron- so this be rather than try to subvert the protocol now -pron- be go to actually make complete connection but -pron- be just simply go to try to flood the server similar get exhaust by send gigabyte of information per second gigabyte of connection real connection per second in order to do this then as a malicious actor maybe -pron- have take over a few core machine on the internet with big fat",
    "to -pron- target -pron- target for example may be github -pron- may be microsoft so -pron- may be some hospital that i want to extort money form for example ok so -pron- attack here be just base on kind of pure bandwidth concern that -pron- be go to try to simply exhaust the resource of -pron- machine by send -pron- lot of real socket request so today protect this be somewhat hard how do -pron- can not protect against this well well what -pron- have see now be the rise of cloud base resource and scalable resource where first of all i do not necessarily have a single server so that mean -pron- can connect to say microsoft or office three sixty five and the same url can actually correspond to multiple machine",
    "a lot of machine resource so that i can still actually connect to regular traffic but there be more -pron- can do today which be today -pron- put intelligent intelligent firewall and network device in front of -pron- -pron- precious database and web server and -pron- can try to identify in real time these fake connection versus real connection and so -pron- only provide a limited amount of resource for these kind of fake connection attempt and protect -pron- valuable but slightly slow resource like a web 's real web server or real database from these from all these kind of small packet which do not necessarily -pron- could have do much but do not ask -pron- bona fide request for server ok so that be kind of distribute in other service where -pron- have many machine on the internet try to attack -pron- machine and today that can produce kind of gigabyte of bandwidth",
    "device perhaps -pron- have hear of bot net for example so i could use every machine or -pron- botnet to attack a particular service which lead -pron- now too and the most sophisticated kind of attack today where the so call internet of thing do not have service so this be kind of merely in one sense a variant of have distribute denial of service except now -pron- actually -pron- can do a lot more with this and -pron- be much hard to discern beg -pron- eat the malicious traffic or the fake traffic versus the actual real traffic and so here be the plan be let -pron- say that -pron- put a web server what i can do be if -pron- bot net if if -pron- be a malicious attacker and i own million of machine i can make those request from those million of machine look like bona fide",
    "for example or request -pron- login page or attempt to log in for real so now -pron- be much hard for a company sophisticated company to identify the fake traffic i can no longer say oh yes well if -pron- be just as simple kind of packet i can write a simple regular expression which discuss the wheat from the chaff which discard the fake attempt versus the real attempt because now someone be sophisticated attacker have now actually understand say -pron- website or how -pron- back end for -pron- android on -pron- phone service work and now i can not just simply discard those connection attempt because if i do then -pron- be discard real",
    "why be -pron- call internet of thing do not have service simply because today -pron- see many many device simple device such as camera such as wifi enable light bulb that connect to the internet and have some kind of ability to run arbitrary code because -pron- be so pure so badly configure so -pron- be vulnerable to simple attack for example maybe the admin interface still have a password like admin or maybe -pron- be run extremely out of date web server which be get know vulnerability or maybe -pron- have some other well know a backdoor into -pron- which allow an attacker to take over these device",
    "malicious actor -pron- can find a million of these device or even billion of these device soon so now i can create very large attack from a very large swath of the entire ip address and then send all those packet to a single enterprise in attempt to kind of take -pron- down and possibly extort some service or extort money forward from a company so this be device of the internet of thing base in out of service -pron- be extremely hard to protect against the day the good hope of a company be to have a cloud base system and to attempt in real time to identify when -pron- be under attack so as -pron- can see -pron- be continue to see arise in these level of attack be hard to say -pron- be go to see tomorrow and if -pron- be write code for internet of thing i employ -pron- to write create device"
  ],
  "1be96113-98ce-4816-86a2-55d1f7e9357e": [
    "ok good morning welcome to lecture twenty seven so -pron- be go to start talk about file soon but first i want to cover just a couple more thing to do with the tcp and server socket so let -pron- have a look right so the story so far -pron- have make a server socket let -pron- just check -pron- have get laptop mode there -pron- go right so remember how to do that the trick of course with use getaddrinfo ( ) be first of all zero -pron- all out throughout all the field will have a tcp ip four so -pron- want address family inet so in other word that be go to be an ip four socket -pron- want to use tcp so -pron- will have a stream base protocol please right there -pron- go so that be go to tcp and to make sure -pron- have a server socket -pron- want a passive socket here for the flag ok so -pron- set up all of -pron- hint -pron- call getaddrinfo and right now -pron- be go to say please listen on port",
    "-pron- to think about what be a thousand twenty four look like in hexadecimal so remember port number be two byte two octet so -pron- can have any result from zero or zero zero zero if -pron- wish up to ffff anyway so that be a little teaser because -pron- will see something interesting in a moment right so let -pron- do some error checking remember that if getaddrinfo fail -pron- will use -pron- own little helper function to print an error but -pron- be also go to check the return value of all of -pron- other network code as well and if something go wrong with one of these call return negative one -pron- be go to just quit so -pron- quit function be very simple -pron- just print out the errno message together with -pron- little message of what happen and -pron- just exit so that be that be quick very simple program there simple simple function",
    "will use the result this time to say there be -pron- family so expect that to be afinet be the only one -pron- want will have the socket type in there and will have a protocol which be actually usually just the value o for -pron- regular tcp ip type socket right ok so -pron- have make -pron- a socket will check to see if -pron- work if -pron- get a valid file descriptor now let -pron- bind that to an actual network port ok so this be when -pron- actually start say right i want to use a particular port ok so -pron- have do that ok now -pron- turn out that if -pron- have not actually specify an explicit port in other word if -pron- just ask for zero -pron- would be nice to know which port -pron- be actually bind to so -pron- can do that the surprising thing be rather than be call get sock port -pron- be actually getsockname ( ) \"",
    "code to know about get information about -pron- socket so here be what -pron- will do -pron- have this little structure here call sockaddr_in call sin and because there could be different kind of socket -pron- have to pass through these kind of function not only an address of -pron- struct but how big -pron- be as well so that be a little bit of code here just to say say ok i want to know the size of this and while the amusingly -pron- pass in the address of this as well ok so notice there be some casting go on here -pron- be cast -pron- to this base class if -pron- like except of course c do not really have inheritance so -pron- have to do explicit cast there right so out of this one let -pron- print out the actual port number ok which should be the same as the port number that -pron- ask for which be a thousand",
    "say that -pron- be prepared to accept a backlog of up to one hundred one hundred connection from a hundred client in other word if i do not call accept at all the first hundred people be lucky but after that one hundred and first person get turn away ok so here be -pron- little service loop here -pron- be go to do be when someone connect great will have now a client file descriptor -pron- will print -pron- out and -pron- could immediately tell this socket hey by the way -pron- refuse to read anymore -pron- be just not listen anymore to any byte that be go to arrive on this socket that will actually also give a hint to the client as well to say hey stop send anymore byte then will say hi -pron- will write three byte which be h and -pron- and a new line to the client and because -pron- do not want to say anymore let -pron- shut down now that client file descriptor for write as well and then finally because",
    "the file descriptor so -pron- can reuse -pron- ok and then -pron- will go round again so let -pron- compile this and run -pron- ok so off -pron- go like will run -pron- and -pron- will see that -pron- say oh bind to port four now can -pron- guess why because -pron- be pretty confident if i connect to port four be not go to work let -pron- just have a quick quick play here i use telnet today and -pron- say no unable to connect there be nobody listen on that port and so so i could try -pron- with netcat as well for example and that be not go to work either just immediately return but -pron- and i both know that actually -pron- be connect to port thousand be a listing on port thousand and twenty four so there -pron- go -pron- see that finally accept return give -pron- a file descriptor and -pron- go down the loop and decide to block again ok if i use instead of netcat if i use telnet the same thing right so -pron- great -pron- connect -pron- print",
    "how come that everything seem to work except that the port number -pron- get back the port -pron- print -pron- out here be incorrect -pron- print out four that be uh annoying in the current code where -pron- actually explicitly put in thousand and twenty four but even big problem when -pron- actually say -pron- know what just find -pron- any old free port because -pron- be do some development and i do not want to specify the port right now just find -pron- a free one ok so now -pron- have a big problem that if i run -pron- this port number be completely wrong so if i try to connect -pron- do not work right so what do -pron- forget what do -pron- miss what -pron- miss be that this low level c structure that -pron- be get information about the socket embed -pron- be information",
    "just simply print out the port number like -pron- be attempt to do here the bit that be inside this field of this c structure be not in the correct order to represent the right integer -pron- need to convert -pron- how do -pron- do that -pron- need to say ok i want to go from network to host and port be equivalent to sixteen bit of the word -pron- want this short ok and let -pron- convert that right and now -pron- should give -pron- the correct result so let -pron- try that ok so -pron- will recompile this run -pron- again and ok now -pron- have get a port number let -pron- see if -pron- believe -pron- ok so -pron- will get back over here and will try to get to -pron- and congratulation now -pron- work now -pron- be give -pron- the correct port number ok so that be kind of the",
    "etc in the network byte order and use network representation which may or may not be different from the way that -pron- cpu represent integer ok in this case -pron- want to go from network to host hence ntohs if -pron- be set up the c structure explicitly because -pron- do not want to get address info -pron- may go the other way -pron- may go from host to network right so i think that be all i want to say -pron- talk about shutdown ( ) -pron- talk about why -pron- close the file descriptor and let -pron- just for fun let -pron- before -pron- close out this video let -pron- not close -pron- ok so off -pron- go right and the other thing -pron- will do be before run this loop",
    "ok so -pron- will compile this and ok run -pron- so i can now already if -pron- can get there in time yeah connect right notice that i successfully connect to the host that be because -pron- have already call listen and so the kernel be willing to be the welcome host in a restaurant that kind of welcome -pron- there right and then right please to meet -pron- and shake -pron- hand right -pron- do the protocol handshake so that be so that be listen in action -pron- could have up to a hundred people arrive to -pron- restaurant before -pron- call -pron- call accept and now if i keep connect -pron- will notice on the other side -pron- be start to use up -pron- file descriptor here let -pron- connect again right"
  ],
  "1df54d06-6533-47ef-9136-ed124c6ff6d3": [
    "hi what do -pron- think happen if -pron- ask to print out the address of a function or even libra call ok so that be what this question six be ask -pron- to do the percent p say hey treat the follow thing as an address and print -pron- out in hexadecimal for -pron- so -pron- be go to pass in maine and malik and surprisingly yes this be valid so stop think about -pron- function as piece of algorithm and start think about -pron- as something that cpu can execute in other word -pron- be perfectly reasonable to say hey -pron- have get a function over here what be this address and so notice there be no parenthesis here and if -pron- do this -pron- can actually protect those address so let -pron- actually try this -pron- have get the carry over here find -pron- -pron- have get this malloc address so if i compile and run this -pron- will see that the address of maine be some smallish value versus aggressive malloc be much high"
  ],
  "1df72ccf-c3d4-4939-945b-2a60fbbe7490": [
    "ok right so let -pron- see if -pron- can remember something about -pron- mutex lock remember -pron- be use the posix library the patriot and -pron- come with four important course here -pron- be initiate lock unlock and destroy right so remember that actually -pron- can skip write p thread mutex initiative -pron- initialize be available to magic value first alright so -pron- first question for -pron- be which one of these call will block in other word which one of these call may take a very long time -pron- gauge -pron- know ok if -pron- say look -pron- be correct right so when can add occur when can -pron- be that -pron- call putrid mutex lock and -pron- do not return immediately so that will happen when another thread have lock the mutex so i like to joke about -pron- mutex",
    "to take -pron- -pron- be -pron- right now and -pron- get to hold onto -pron- until the day that -pron- declare that -pron- finish and -pron- call unlock and -pron- release -pron- back into the wild so once -pron- be hold onto -pron- be like the conformally lord of the fly no one else get to speak -pron- do not continue -pron- call to lock will block set doctor seus ok so now -pron- can answer this next question right let -pron- turn on -pron- little writing tool here -pron- case which of the follow call will block the answer be lock and i want to give -pron- in -pron- highlighting let -pron- do that ok right there -pron- go so lock be the call be go to be block and what need to happen in order for -pron- to unblock in other word",
    "so think of lock as -pron- two year old saying i want the duck that can only happen when the thread that currently have the duck call unlock so that -pron- be here so if i be to sketch this out with time so let -pron- do time grant right -pron- have get one little thread here here be -pron- first thread right -pron- be like thread one ok come along call lock here ok no one else have currently have acquire the duck so -pron- get to continue straight away key meanwhile on another cpu another thread be run and -pron- call lock on the same mutex lock ok can -pron- carry on and execute -pron- next piece of code no there",
    "in practice the kernel can say oh i can see -pron- -pron- be stick right now -pron- be short order cook can not device because there be no voice yet so -pron- be actually go to sign the physical cpu to do something else -pron- have get another thread that would love to get start love to get do some work right now so let -pron- tell -pron- -pron- be go to do something else but from this thread perspective nothing be go to happen -pron- do not pass go do not execute the next line of code until the day that -pron- thread one have finish do what -pron- be do inside those critical section and now cause unlog on this mutex so -pron- release the mutex let -pron- that duck fly away back to the pond ok great at that moment thread two can wake up and in do so -pron- acquire that mutex -pron- be go to grab -pron- and say ha -pron- be -pron- now and -pron- can continue and eventually someday -pron- will release that mutex lock as well hold on a moment suppose with the thread that also try to lock so say somewhere inside here -pron- call",
    "wait for that duck ok so what be go to happen the moment that thread one call unlock the answer be one of -pron- be go to win and only one of -pron- be go to win so in this case that two be one thread three -pron- be afraid be go to continue to be asleep until the day that -pron- be able to acquire and lock that new text -pron- so that be why -pron- can ensure that uh -pron- satisfy all critical section constraint that there be no way to continue unless -pron- grab that duck unless -pron- have acquire the mutex right so i think -pron- have answer nearly all of these question what about this one why be -pron- that peter mutex lock do not block ok this one should be easy for -pron- to answer -pron- have already"
  ],
  "1e783a67-b8be-40c2-9441-09e0f8e0a1f8": [
    "ok so let -pron- play with race condition and then fix with lock right so what do -pron- think the following code be go to print here -pron- have a counter variable which be global as -pron- can see anybody can reach into -pron- and read -pron- or write -pron- and in fact like a little function here that be go to loop look like a million time and each time around the loop -pron- be go to implement that counter now the value of eye a stack variable which mean i can create a whole load of thread and each one be go to get -pron- own value of i but -pron- be all pick at this global variable this counter so -pron- be go to share access to that that variable right and then -pron- have get some code on here peter create peter create and then two p thread join so out of the two p thread join -pron- print out the value of counter right so what do -pron- think about this code what be -pron- go to print let -pron- give -pron- ago so i need to compile -pron- ok -pron- have compile -pron- off -pron- go right -pron- do not print out of course",
    "value each and every time so why do -pron- think that be a key so actually there be two reason the first one be because -pron- the value that -pron- get depend upon the actual interleaving of -pron- two thread to how -pron- do this increment so even though -pron- plus plus hear the big news flash be that this be not an atomic operation so what -pron- mean by atomic well -pron- enough uranium together no -pron- do not mean that what -pron- mean by atomic here be -pron- be that an atomic operation -pron- behave as if -pron- complete as one complete operation but that be not true not for plus plus here so instead what be go on -pron- be say ok read the value of counter add one to -pron- and then right back into memory so there be three distinct stage here",
    "need to read the following four byte please ok -pron- pull that into a cpu register then -pron- invoke the arithmetic logic unit to add one to -pron- register ok so -pron- have recalculate new value and then -pron- take that bit pattern and -pron- throw -pron- back towards memory here -pron- go memory have a new value the add one be extremely fast writing to main memory be extremely slow compare to what the cpu can do so of course practice -pron- have level of cash operating but let -pron- not worry about that model complexity today i just want to point out that be actually kind of three step read and add one and a right so even though -pron- be write this plus plus -pron- actually take three distinct step alright so that be the kind of first idea be that -pron- have get two chef two thread run as fast as possible really from memory add on write -pron- back",
    "go over and read the same value and then -pron- add one at about the same time and then -pron- write back -pron- new value so instead of increase the value by two -pron- have only increase -pron- by one -pron- can imagine more extreme variation where one thread be run a bit slow perhaps -pron- cpu keep on be interrupt because -pron- be be ask to transcode some video as as i as -pron- be talk to -pron- and so now the other thread be able to run forward a bit so imagine the follow one thread reach in grab the number i know -pron- be do the calculation or at least -pron- be go to get to the calculation soon meanwhile the other thread reach in grab the number add one send -pron- back breach in addison number as well and send -pron- back which anson do like like a million time then -pron- first red wake up again a few i get cpu again",
    "one right -pron- back so -pron- be just manage to write over all of those result take year back to a really low number so that be kind of the problem of just let -pron- thread run without any kind of proper synchronization so i mention there be two bug the other one actually be just an insidious copy paste bug do -pron- spot -pron- ok so -pron- call pthread create here or with the same id address here which mean that -pron- second thread id here be actually be never initialize so -pron- never actually truly go to wait for that second thread to actually complete case so so -pron- should fix that let -pron- make sure that -pron- be write into two different two different variable right so i promise -pron- start use p thread mutex lock so here -pron- go let -pron- figure out how -pron- can fix this program",
    "get -pron- self lock will make -pron- a global so all -pron- program can see -pron- if i do not use global -pron- 'd have to pass -pron- around or least pass a pointer around to -pron- right so p three edit music type -pron- be go to call -pron- a duck i want to imagine little duck quack quack that be very important little lock and today -pron- will use the the magic value piece red mutex initializer \" initial lie be ok wait so how can -pron- use this \" \" duck \" \" to ... \" to make -pron- program more deterministic ok some various way -pron- could do this let -pron- let -pron- first of all , come up with a new function here ok how do -pron- feel about this so before do any work in -pron- data structure -pron- be go to grab the duck here so how do i do that as a pthread mutex lock and here be the address of -pron- variable",
    "this compile run -pron- oh -pron- never finish can -pron- see why ok so -pron- problem be that -pron- acquire the lock but -pron- never let -pron- go so when the second thread start and call preferred mutex lock -pron- be go to be wait for a very long time an infinite amount of time -pron- never get that duck that duck have be steal by the first red and never return so as a result the second thread will never finish so as a result rp so join in maine will never complete so as a result will never put the counter ok i think -pron- well fix that let -pron- put in -pron- pthread mutex unlock there -pron- go after i finish in -pron- surgery",
    "at which point be this anybody else wait for the duck -pron- too can grab the duck and then carry on so now let -pron- run this ok and ha who have be yes guess gratulation 's -pron- have manage to make another fiendishly complicated program to add up to two million by use now kind of three for thread the main thread which do not do much -pron- just delegate like a manager do not actually do any work and then two thread which be independently add up a million but -pron- do notice that actually -pron- do not actually do any of the work in parallel first a thread probably the probably thread one but who know actual add a million and then when -pron- be finish -pron- release the duck and so the other thread get to continue -pron- require a duck carry on add a million to -pron- and then unlock the duck ok so maybe -pron- should allow -pron- thread to work in small",
    "a version three right well now -pron- be go to only acquire -pron- doc for a very short period of time ok so now -pron- be go to rap each call navigate to before i change the counter -pron- be go to acquire -pron- mutex lock so now right -pron- will k von function three so for a million time -pron- acquire the lock -pron- have want to counter and then -pron- unlock the duck ok so let -pron- compile this run -pron- ok -pron- give -pron- a correct answer and will always give -pron- a correct answer but be now actually a little bit slow do -pron- know why well in this contrived example add one to a variable be an extremely fast operation compare to a typical",
    "datum structure this share datum structure occasionally so -pron- have just manage to modify -pron- original program which would just increment the counter to now access the mutex change the counter unlock the mutex so -pron- have actually add a lot more complexity in term of number of instruction that have to be execute for each iteration around -pron- loop ok so that be not do not make a program any fast and in fact -pron- slow -pron- down a bit just because -pron- be use -pron- lock in such a fine grain manner but -pron- do ensure that -pron- two thread could actually carry carry on now and finish -pron- about the same time so now -pron- have get an interleaving of -pron- two thread but -pron- have ensure that the actual change of the datum structure only happen in one thread or the other thread at a time",
    "-pron- have get two thread two cpus actually try to read a right to the same piece piece of memory what if that value be cache or the good news actually be deplete mutex lock take care of that as well for -pron- that if this cpu support some caching mechanism peter mutex lock will ensure that that value be flush out to main memory if any other cpu want to read these magnet so technically -pron- be call memory fence what memory barrier -pron- be not go to write code that do not explicitly instead -pron- be just kind of allow the factor period mutex lock make -pron- world say again make -pron- program be equal to all the process be -pron- have actually run at least that be what -pron- appear to be like"
  ],
  "1ea99e17-8bc6-433e-90ce-9d051362f24b": [
    "ok so let -pron- look at -pron- a little demo here yes -pron- be go to actually share information between two process directly alright so will start off today whereby just share a file ok then -pron- could have do this anonymously as well but let -pron- use a file call alice dot text -pron- may recognize some of the word in a moment and now -pron- be go to say actually i want to be able to read and write to this file so i need those mission because -pron- actually go to make modification to the file so when i say map share down here be one of -pron- option i expect any modification i make to be see by multiple process and even inside the file -pron- ok so yes -pron- be map a file so -pron- need that and what about the actual protection for each page of memory ok so -pron- want to be able to read and -pron- want to be able to write to these page of memory but i do not need to be able to execute -pron- i do not care where inside -pron- virtual address space this memory end up and i want four thousand and ninety six byte please ok",
    "i can actually start to use -pron- will be the content of alice dot text but -pron- of course be able to change -pron- so let -pron- do that right so here be a little demo where -pron- be actually go to now do some communication between a parent and a child so strong copy and i can copy content directly into that memory location so here be the child write something into there and what about the parent the parent can read from the same address now back at the begin of two forty one and -pron- talk about fork -pron- say hey these be completely different address space and actually there be no long connect after -pron- call fork ok well guess what that be a little lie why because -pron- could not handle the truth but now let -pron- actually have a look at the truth with mmap",
    "of map memory here that both the child and the parent will see this piece of memory and -pron- will be the same piece of memory the same physical piece of ram for both the parent and the child for this particular mapping to alice dot text so the moment that the child start write into those piece that piece of ramp the parent can read -pron- as well so be not that cool let -pron- actually kind of a look at this let -pron- actually do some rp cs sorry some interprocess communication some ipc between the parent and a child so off -pron- go right i need -pron- right window okay who be ok so -pron- have get -pron- little map demo here ok and -pron- be go to open alice dot text as -pron- see here be",
    "the only thing -pron- have add here be some counter and thing just to prove that -pron- be kind of update everything ok so in one corner i have the child here that every two second be go to print out forty byte out and then directly read forty byte from that address ok so organized and say be hey take this memory and send forty byte of -pron- directly to stand -pron- out meanwhile -pron- parent process be modify the memory so let -pron- use s printf to directly write to this memory address that -pron- get back from a map and -pron- will write the follow format string will say hello from the other side and follow by a little number account here ok and so let -pron- actually see this in action let -pron- start run -pron- ok right so let -pron- compile -pron- get -pron- map two",
    "the other side plus an alice as well here be why that -pron- be necessarily over write a full forty byte and so if -pron- be to look at the beginning of the file -pron- would see this hello from the other side follow by a newline and alice ok but there -pron- go great -pron- have get two process communicate directly by overwrite the same piece of shared ram ok so will kind of get out of that let -pron- actually how look to see if -pron- update the file so if i do say hex dump of alice dot text pipe that into less than -pron- do not see too much ok right so oops that be a little hard to read let -pron- actually have a look at just text here -pron- be -pron- get to hello from the other side then there kind of the terminate c string character and then the",
    "escape out of a single process use nmap also realize that would have make the malik mp really easy if instead -pron- say ok just hey kennel give -pron- some more memory and in fact today this be how real malloc work -pron- will actually use mmap to request more memory from the system ok right so the last thing i want to show -pron- be how easy m map can make write some code so let -pron- have a think about how -pron- can look for string inside a inside a file so let -pron- have a look at implementation use nmap right so",
    "inside a particular file so let -pron- kind of give an example of how this would actually work there be actually a utility call string if i say run string on test dot iso -pron- may find something possibly useful so but possibly not because -pron- be encrypted oh i should have actually limit this out but -pron- be go to keep go for a little while ok there -pron- go let -pron- run -pron- on something small like a toy out and will see there be a whole lot of string hide inside that executable include any string that -pron- have actually write as well and even the name of function that -pron- want want to bind once -pron- be loaded ok so how can -pron- pull those out how can -pron- write a version of string alright so let -pron- actually have a look at one here be one i write early",
    "whole file into memory so -pron- could already do that use same alakan stat however that require -pron- to actually get all of that memory at the same time with -pron- map the page can be load on demand as -pron- need -pron- ok so let -pron- have a look at this how -pron- work right so -pron- want to of course call open and then stat -pron- as well to find out how big -pron- be ok so now -pron- have get that information -pron- will check the s stat actually work correctly so now i can use -pron- map skill by say right so i need this many bytes plead and -pron- have get that from stat and i want to read from this file and now let -pron- just kind of see if -pron- can find a useful",
    "use the pointer return by mem map i do not need to mess around read individual character etc and so when i find a sequence of character which be all printable then great look like i find a sequence of byte which may be a secret string inside -pron- file so let -pron- then print -pron- out ok so -pron- could have run this now so -pron- will just compile -pron- k just to prove that -pron- kind of work right call that be a s one ok so now let -pron- rerun s one on a doubt and -pron- will see kind of very similar output to what i form the kind of string utility ok so -pron- kind of find all those useful string this have a look to see how -pron- may have write this if -pron- do not know about nmap ok so here be an alternative then use c can get ok very similar code but now -pron- be read just kind",
    "if -pron- be a printable character great fit continue otherwise -pron- be go to start seek around when the file in order get backwards in order to print out each character so this be kind of very different code to right now -pron- be think about position within file and seek around -pron- be much easy to read and write so -pron- be much easy to create this kind of code if i can just simply say hey -pron- entire file be map into -pron- memory space and i can just move around -pron- file just by use memory offset so -pron- allow -pron- to write kind of that kind of kind of code very efficiently quite final quick comment be that nmap however do not necessarily increase the performance of -pron- code the kernel be very good at buffer and read file continuously so just use nmap do not necessarily make -pron- -pron- code anymore efficient or more performant just"
  ],
  "1eae9ffe-aa3f-41af-bb4f-a63743eb80a6": [
    "hi so let -pron- talk about how -pron- can use reallocate reallocate be go to allow -pron- to beat -pron- cs two twenty five friend and other when -pron- come to create memory structure which can grow very quickly so let -pron- have a look to see why ok so realloc behave a lot like malloc but allow -pron- to change -pron- mind -pron- can say hey i previously get back some memory safe from catalog call malloc and i decide that i do not want a hundred byte i actually want two hundred byte what can -pron- do for -pron- now the great thing about realloc be that -pron- potentially say hey do not worry i can give -pron- two hundred byte and in fact -pron- be go to continue use the same address so -pron- can think of this be like in a big apartment block where -pron- say -pron- know what -pron- 'd like to double from a hundred square foot to two hundred square foot and the apartment manager come back and say hey",
    "to use so actually this do not take very long at all -pron- be just go to allow -pron- to stay live in the same place and -pron- can now go two hundred foot out do not worry about -pron- if -pron- turn out however that realloc can not play that quick performance trick realloc will copy all of -pron- furniture all of -pron- byte into the new location and then tell -pron- where everything be be move to so -pron- be important to use the return value of real if everything go wrong then realloc will just return null and have not do anything with -pron- at the old old allocation ok oh more less common be that if -pron- do actually move stuff to a new location -pron- automatically free the old memory that -pron- have inside the heap so let -pron- have a look at how -pron- can use this right so let -pron- have this accessory leg ample that time -pron- be read in some value perhaps and i do not know how many i have so how",
    "i will ask all this read all ok so -pron- will need to keep track of the number of item in the capacity so here be -pron- capacity and then here be the number of item -pron- have get right so now let -pron- kind of go around -pron- little loop and start read thing in ok so -pron- have get i mean -pron- will read double for example ok so -pron- have get a value and somewhere somehow i get get another value maybe -pron- be read in from a file maybe -pron- be come in from the network but for whatever reason -pron- want to store this value ok what should -pron- do next right well -pron- well actually have some memory on the heap for this so i will have",
    "write a really slow version initially where -pron- just keep on say hey -pron- have change change -pron- mind about how big an apartment i want i just want something to be just a little bit large ok so how could -pron- do that right so -pron- read of successfully another value let -pron- increment r value here ok and what about the capacity well -pron- need to increase -pron- capacity by want ok so do that ok make little bit large right sir now -pron- need to get some more memory so -pron- can say hey real ac have a look at -pron- old data structure there -pron- be and actually the size i want now be capacity right so what do -pron- think about that so first of all -pron- say hold on a moment realloc can return",
    "do that will come back to some other bug there in a moment ok so now -pron- have get -pron- datum i can put into ok i need to put this value in so let -pron- let -pron- do -pron- this way let -pron- move that numb item too indirect after -pron- have use -pron- k and i will say ok numb item -pron- can be the value alright so -pron- will keep go down around the loop until something happen so typically say get if value with zero perhaps -pron- want to break out of the loop ok right so what do -pron- think about this well first question may be well what happen when -pron- have just pass in null into realloc well good news there be that if -pron- do that then real -pron- behave exactly like malloc ok so the very first time -pron- be go to ask for just",
    "to do and this be a common error be real -pron- work with bite -pron- do not know what -pron- be try to store in there actually be these double value so -pron- be very common to forget to put the size of the thing that -pron- want to put in here and what do -pron- want to put in so another common mistake be to accidentally get the type here well -pron- do not want pointer daredevil -pron- actually want the thing -pron- which be the double ok so call real lock and -pron- have get some some memory back -pron- be cheat a little bit but well code would actually check to see if realloc fail -pron- be not go to buy -pron- air condition today instead i want to think about how to make this a little bit more performant right now -pron- be go back to the building manager say hey mister heap i need a slightly big apartment please another four byte -pron- another four byte -pron- ok -pron- can do well than that of course -pron- can only do this occasionally so let -pron- instead",
    "the capacity so if number of item plus one be go to be ok so i can do -pron- like this could have not change -pron- capacity yet if there if -pron- be already at capacity there -pron- go then -pron- new capacity ok should be why do i just double -pron- ok so i can like that and then ask real lock for more space and at that point when -pron- return like i say datum maybe point to some a different memory but -pron- be move all of -pron- old datum for -pron- ok so what do -pron- think about that one little problem right now be that -pron- capacity value start at zero so let -pron- change that this to start say which kind of some reasonable number like sixteen right so good -pron- have get away now to start read value one kind",
    "the actually -pron- will never go to grow this array anymore so -pron- could be a little bit more efficient with memory -pron- could say hey by the way -pron- have actually change -pron- mind the actual space i need be no long capacity but just before i return i now know i need exactly this amount of space so this allow the heat to reclaim that unused extra capacity at the end that -pron- and i know -pron- will never use for particular program ok so -pron- have get little program now -pron- 'd have to store the datum on the number item in in a data structure -pron- have now get away to read in value and to efficiently use -pron- heap memory ok the last thing -pron- do not do be too if -pron- want to write production quality code let -pron- see if -pron- add up failed so i would have another pointer in here ok to see if",
    "-pron- could handle that and exit or something right so if there be no no real to memory -pron- better stop otherwise hey let -pron- update -pron- datum point that key and -pron- will notice -pron- be not write any kind of cast in here so i be some people traditionally like to put cast here because -pron- be change the type from a void pointer to a double pointer in practice i find i do not like to do that i think -pron- be necessary and be lead to more visual clutter when the most likely mistake be to accidentally request the incorrect amount of memory so i have much more other kind of like this coder stand out where -pron- actually think about the exact number of byte where -pron- be request ok so that be -pron- example use of real ac"
  ],
  "1eb0f7e3-89d3-453d-bfbc-accad12de44e": [
    "ok right let -pron- see if -pron- can do this one quickly like maybe -pron- can do -pron- quick than i let -pron- find out right so will try and do a speed run this time ok but first of all i want to go to -pron- thin line ok have well process to process three this be not go to be the prettiest version -pron- be just go to try and do -pron- quickly ok process one get an be right so there -pron- go and -pron- connect -pron- up to the chocolate like process two request c and d ok so here -pron- go right off -pron- go -pron- can get that as well right but then -pron- want be ok -pron- be uh this start to be a problem ok so i process two -pron- be go to have to wait for be ok so -pron- be look longingly clip hour then wait there -pron- go ok i have to wait for that for that resource ok meanwhile process four request be ok be right so -pron- be sorry process for -pron- be go to have to wait for that ok right and",
    "process one have finish with be ok so -pron- get erase one of these line ok so that -pron- have go ok so now -pron- be finish with that -pron- mean a process two can continue ok so -pron- be no long wait for this resource ok so now -pron- acquire -pron- so let -pron- draw a line from the ok from the chocolate ok so now process two ok do -pron- have everything -pron- need yes -pron- do so process two can continue ok right because -pron- do not have anymore instruction down here about anything that oppose need so -pron- can infer that there be no deadlock at this at this point versus two have everything -pron- need -pron- can not see a cycle so eventually process one will",
    "ok -pron- can see that process three can now acquire -pron- resource and so -pron- will take that an process four will require d -pron- continue as well so in this last example there be no deadlock alright so one kind of final comment in all of this be that -pron- have be play with single resource down here there be an extension to this model that -pron- be go to think about inside cs two forty one but -pron- can imagine how this be actually now a finite set of resource i just want to line here so rather than just have like a zero or one inside here like here be one resource -pron- be one resource that one crisis have -pron- could imagine i could tell -pron- sister off ok i could have say a fix set of resource inside here so why then just one i may have to say two or three resource type type b or c maybe see can"
  ],
  "1f0947f0-7d90-4971-8f36-20b870937782": [
    "hi sue allocator can not only allocate memory reallocate reallocate memory when the user want a bit large space -pron- be small space -pron- can also tell -pron- how well -pron- be do this kind of sketch out and see what that would look like ok so this story so far -pron- have get -pron- little metadata entry and -pron- be go to represent that use with a link list of all of -pron- entry and let -pron- imagine the kind of thing that -pron- may want to print out or know about in other word how do -pron- want to instrument memory allocator well perhaps -pron- care about thing like the follow like the total number of byte which -pron- have actually give to the user right now pass -pron- care about the overhead of -pron- implementation so remember that every time -pron- have make an entry that be additional ram that -pron- have to buy that -pron- be use internally that -pron- can not actually give to the program so that represent an overhead -pron- also may care about light switch not available so -pron- will talk about that in a little bit",
    "this well remember -pron- be just go to walk through this this link list so i need -pron- entry point be here right ok -pron- be the pointer and will start by look use -pron- little global variable here -pron- little static variable head kate and -pron- want to keep go around whilst i get a valid point at once that get to null -pron- be go to stop so the end of -pron- loop -pron- be just go to use that next pointer to look at the next one ok so let -pron- think about how many byte -pron- have actually give out right now -pron- case so i could have a little counter here right so will have say a number of allocate byte right now remember that -pron- link list represent",
    "be allocate then i will use that ok so now i want to say thing like ok add that to -pron- running total allocate byte an will look at p a p tell -pron- how large or ok now how about the overhead well let -pron- count out the number of metadata entry -pron- have because that those be the light switch which no long which be part of -pron- implementation so -pron- will have a say little ok count here so kind of entry count and each time round this -pron- will add one to this case so i want to count both free and not free entry and then the number of byte then for -pron- overhead ok over head would",
    "ok right so what about unavailable bite well -pron- depend buy definition -pron- mean by kind of unavailable and -pron- be go to get -pron- to think for a moment about the follow idea which be that -pron- have these entry -pron- have be call malloc and free with -pron- little metadata at the front and so -pron- could imagine that -pron- have get say four hundred byte here but the user only ask for three hundred fine yes say lock code listing but what if -pron- only ask for say three block splitting but what if -pron- only ask for say three hundred and ninety six then -pron- actual",
    "and -pron- have get all of these byte over here which be waste space no one can see -pron- similarly if -pron- be very lazy or very fast with -pron- real ac and -pron- say oh -pron- only want to now -pron- say two hundred byte and -pron- just return then again -pron- have get this piece of ram that i pay for but be never go to be use so let -pron- have a look at that waste space so for that if -pron- if -pron- care if -pron- actually care about this then -pron- may start to keep track of not only the size of each entry here but how much be actually be ask for so -pron- could say that -pron- actually request size that in other part be just truly go to be store there ok so in this case if -pron- want to look at kind of by such a unavailable so -pron- be never go to hand out these bite i just sit there take up silicon then",
    "currently in use so that would be true and now i care about when the actual size of -pron- be different from the request ok request so the difference between those two will tell -pron- about these bike which no one 's ever go to use ok now these expression may differ depend on -pron- implementation perhaps -pron- only implement block splitting really late in the game for example like an on demand for example in which case this be not quite a valid expression but i just want to kind of sketch this idea about the last thing -pron- may care about -pron- say just simply the number of fragment of memory because ideally",
    "satisfy very large request without have to go back to the kernel and then also allocate will be pretty fast because then -pron- do not have to keep go through a long list of of entry so let -pron- just keep track of the also the number of fragment of available memory so i may have something like this could be an int as well just available frag so i may write the follow late so if this actually be a free fragment then -pron- will increment -pron- account but i hope -pron- can see there be actually lot of instrumentation -pron- could do if -pron- care about performance both in term of -pron- speed and how well -pron- be use memory then -pron- meta data structure can tell -pron- a lot about have -pron- lock be perform"
  ],
  "1f76e788-6515-470d-8411-5a70fc7d7edb": [
    "hi so -pron- start this little lecture with the idea that every time -pron- want to have more memory every time -pron- call malloc -pron- could implement that just by go back to the kernel to say hey colonel please raise the watermark will call ask break would just get some more ram that way but -pron- can do well than that -pron- need a heap allocator that can keep track of block of memory that have be free so that in future allocation -pron- can reuse those piece of memory and so how can -pron- do this efficiently actually this be a nontrivial problem actually this be an np hard problem because -pron- need to try to find the good allocation of a sequence of of allocation and -pron- be not clairvoyant either so -pron- can not actually do the perfect possible set of , or sequence of allocation so instead -pron- need an algorithm to choose where to place the next malloc request that allocation request that be fast and house reasonably good performance",
    "-pron- end up with a heap where all the spare space be actually in very tiny short block then that mean that i can no longer allocate very large request and many request that what i have to do for many request be just keep walk through -pron- data of representation of all these entry and none of -pron- will be any good because -pron- be all too small so -pron- performance will be awful -pron- will take a long time to find a good place for the next allocation so let -pron- get start let -pron- have a look at this -pron- have get a little simulation that -pron- be go to use here paper base simulation and -pron- will use this simulation to understand a little more about three possible placement strategy and all user as well as a way to talk about how these placement strategy work go to look at good fit bad fit and first fit allocation",
    "-pron- idea of heap just use a simple link list and each link each node in -pron- link list datum structure just represent a segment of memory that be either currently in use mean -pron- be be allocate or be available be free so -pron- will keep -pron- link list in sorted order and everytime malloc be call -pron- be go to actually walk through that link list look for place that -pron- can use to satisfy that request for some contiguous memory right when -pron- find a piece of memory that third be large enough and free -pron- be actually go to do two thing be actually go to obviously return that address back to the caller so that -pron- have -pron- memory that -pron- request but the piece of memory that -pron- find be probably large than what be request which mean there be go to be some unused space at the",
    "for that unused part so that future call to malloc can potentially make use of that spare space simile when free be call -pron- be go to do two thing -pron- want to mark that entry in -pron- link list be now available for future allocation but -pron- could be that -pron- link list actually have two neighboring entry which be both free so at this point let -pron- clean up -pron- link list so that rather than have two separate entry -pron- can represent that as just a single entry of a much large space and similarly -pron- could i actually think about the fact that there may be some spam space behind the current entry as well but -pron- will not go into those detail today -pron- be not go to implement a full piece of work c code here instead -pron- can think about conceptually about how these placement"
  ],
  "203bde9a-6185-4ffa-94f2-2c4b061612e8": [
    "ok great so puzzle for -pron- let -pron- think about so now take -pron- address of thing so have a look at this code -pron- have get -pron- a global variable so that be not go to be on the stack ok -pron- be go to initialize that to five but this be what -pron- do inside -pron- main -pron- call a function f one -pron- pass the value of ten and -pron- also pass in the address of -pron- global variable so just sometimes -pron- actually do not want the value of -pron- variable -pron- actually want to know where -pron- live that be the purpose of this address of operate say tell -pron- where something be because maybe i want to write something directly into that those memory location right so that be go to pass in the address of -pron- global and also the value of ten meanwhile there be go to look inside f one because -pron- challenge to work out which one of these line will actually which one or two or three of these line will actually print out an address in the stack ok so -pron- first contender",
    "v one what be v one be a parameter of this function ok -pron- second will print out the address of v two and the third book have a typo be fix that let -pron- make that actually print out v two so -pron- will fix that line ok so let -pron- go in and look at -pron- code here right i just copy -pron- from the handout -pron- want this to be v two unfortunately -pron- have copy the line number so i want to fix that i can instead state wanna substitute on all line anything which start with the line with a zero and i do not care that be character i want to delete -pron- ok so if -pron- could wait whoop -pron- ok there -pron- go go to this so -pron- will get the indentation fix in a little bit but right now -pron- have reasonable code so i think -pron- be",
    "out a stack address be -pron- already go ok time up time to try so let -pron- compile -pron- right gcc stack address and -pron- have get a problem here yes -pron- have get the fact that if one be an invalid function at this point so what be go on -pron- problem be that -pron- be try to use this function f one before the compiler have see -pron- so maybe -pron- will have a dot h file an include file that actually define -pron- but let -pron- just instead this declare -pron- directly here so -pron- be go to say -pron- be a compiler there be go to be a function i promise -pron- that take two integer taker take an int and an eight pointer and return and -pron- ok and -pron- be not go to tell -pron- anything more about -pron- and not go to give -pron- -pron- definition ok so now -pron- can compile and -pron- have get -pron- control which that because",
    "so now -pron- run -pron- let -pron- deal with got ok so the first two do return address be on the stack do -pron- get that right let -pron- have a look at -pron- code one last time ok put -pron- out use cat case or two parameter v one v two -pron- -pron- be just automatic variable there part of the parameter be f one -pron- be go to disappear -pron- go out of scope that moment that -pron- return from f one so -pron- be go to live on the stack along with any other automatic variable that -pron- declare inside f one so when -pron- print out the address of those variable -pron- will be on the stack and -pron- be only go to be valid for the duration of that function the moment -pron- return from that function those variable be go and that address those address can be use for something else but the last one -pron- actually print out the content the value of v2 that be where -pron- actually print out"
  ],
  "20a17ad5-03fa-40e1-bb61-739bcec6e2e2": [
    "hi so let -pron- talk about how -pron- can implement free ok so the first part of implementation be trivial if -pron- call free with null be there be nothing to do so let -pron- test for that right so if the pointer value with zero in other word if -pron- be null then do not do anything just immediately return ok for what about all other value well remember -pron- have be link list and be link list be of these metadata entry object each one of those have a size next pointer and whether -pron- correspond to some maybe that be commonly in use or not ok so let -pron- walk through that link list look for the entry that correspond to this piece of memory that -pron- be try to free ok so how do -pron- do that right so -pron- will initialize -pron- little -pron- available to the beginning the link list and -pron- have get that static global variable there call head right so let -pron- get start at the beginning and keep go around whilst p be not null and at the end of each iteration update pea in the next pointer",
    "be a mistake to directly compare p with the user address be pass in with the parameter value because remember -pron- do not point to these metadata entry instead -pron- have -pron- internally have get to access that from -pron- struct so let -pron- use -pron- metadata entry struct here and look at the pointer value and see if -pron- find the right one if -pron- have great now -pron- be time to mark that entry as available for future allocation right how do -pron- do that be this easy -pron- can just say ok p let -pron- update -pron- counting here so that -pron- do not need to change the size just that the entry be now non zero for free ok so future call to malloc will look at this block and consider -pron- provide -pron- be light enough of course ok so that be easy for a little bit of a performance boost no point go around be link list anymore let -pron- break out of this loop ok and -pron- do not"
  ],
  "214ce85d-efea-4e30-9831-390614fc2683": [
    "ok right so let -pron- have a look at -pron- question four -pron- get process one go for a then be great so let -pron- sketch this out right so here be -pron- process one and then process two versus three process full ok right -pron- will start with a dark color for the easy stuff ok so process one get a ok so yeah sure -pron- get to eat that chocolate and -pron- will not be as well ok so of course that succeed notice that when -pron- want to identify that process truly have take so -pron- require that resource -pron- do -pron- from the chocolate from the center of a box here ok now purse two request cd then be right so request see ok so yes -pron- get c and then d ok and -pron- want -pron- goodness there be a giant hour be not",
    "because b be currently not available -pron- be sorry -pron- be go to have to wait let -pron- choose a red color here ok so sorry process too happy group -pron- have to look longingly the outside of this box of chocolate ok -pron- be not allow have be yet why because process will not have -pron- so -pron- can see that when at some point versus one finish -pron- can continue but -pron- get next ok -pron- be a process four request d ok guy so let -pron- do that process four -pron- be sorry -pron- have to wait as well there -pron- go and then process to main request be ok so be get in line -pron- be sorry -pron- be go to have to wait as well be -pron- do not quite because now process one request see ok so let -pron- draw that in a different color",
    "one request see ok -pron- can sketch -pron- in here here -pron- be versus one before -pron- can continue i do not want to now i just want a straight line there -pron- go right process one before be prepare to finish get through this quagmire of line here there -pron- go be wait for this resource and now -pron- can see where -pron- have get deadlock process one be wait for c but process resource c be be hold by process two process two will not give -pron- up because -pron- be wait for b and b be be hold by process one so -pron- have get a deadlock between process one and process two that be the cause of -pron- deadlock that be the cycle in -pron- weight for graph and i guess -pron- could sketch out if -pron- want to this kind of highlight -pron- this be the ok so -pron- be this be all cycle go down here up to here",
    "i guess that be the cause of all of -pron- deadlock this fight over two resource b and c but -pron- be not just process one and process two which unfortunately stick process three will never get to see -pron- resource be so -pron- be stick -pron- be in deadlock and process for be also in deadlock because -pron- be never go to get resource d as well ok so that be how resource allocation graph can inform -pron- as to why up machine be in deadlock -pron- have simulate -pron- just by kind of these kind of paper base example but i hope -pron- can imagine that in a more complicated system let -pron- suppose -pron- want to do a little video sale service i do not know let -pron- call -pron- netflix or something or maybe youtube lot of move part everything some caption to to be able to take comment etc lot of piece lot"
  ],
  "21a18c82-8c09-4c06-aa5a-1430e944cfd4": [
    "ok right so i guess i -pron- have be pull -pron- off but now i think -pron- be actually time to talk a little bit about these address structure which -pron- have be happily throw around and not really worry too much about what -pron- look like because get drink have get address info fill -pron- out for -pron- ok so the big idea here be that the information inside these struct inside these low level c struct be actually store in a binary format which be close to or compatible with the actual bit switch send out by the network card so what bit should represent the number one two three four well for that -pron- have get to make a couple of choice do -pron- actually want to represent this use one complement two 's compliment ok so first of all that be a trick",
    "octet in other word sixteen bit so now -pron- just have the question of do i want to send a high bite first the high octet or the low octet first the representation then of that number be not not necessarily the same way that i may represent -pron- use -pron- cpu ok so that be the purpose of these little function here which be to ensure that the number that -pron- see as just an integer that -pron- want to say manipulate or display have be convert into something which be understand by the host machine so this end to hs actually say that i want to convert network little large than i want let -pron- try again let -pron- try that ok there -pron- go network kind of to host",
    "so that be the end hs guess what there be also version which be go the other way so if i want to convert host to network as a short then i could do like that right so for example i could say like one two three four would be a useful thing to do if i be actually manually set up one of these struct -pron- so if i be not actually rely on get address info to do the work for -pron- ok so there be end to hs there be also ok an to network to host long as well so this be long",
    "be thirty two bit and this be use to describe ip four address as well so if -pron- want a numeric version of an ip four address and need to convert -pron- from the network implementation to number which be understand why -pron- assume -pron- will be use this as well ok so use these cool stand mean that now -pron- can write c code which be compatible and -pron- do not matter whether -pron- cpu use a little endian format a big endian format or a completely different way to represent integer number that be go to write for port number -pron- can be sure that as -pron- actually want to convert these into something to send down the network on the internet that -pron- have correctly convert the integer bit pattern into the correct bit pattern -pron- be go to be understand by the network to mean the actual same number",
    "the kind of lasting here be that a notice that accept have a couple of argument that -pron- be not use i can actually use accept to tell -pron- a little bit more about who be connect so with every tcp socket -pron- not only have the destination address -pron- also have the source address so -pron- know where that socket where that client be come from i know -pron- ip address and so if i wish i can make use of that so for example i could check -pron- ip address and if -pron- be connect from a certain machine i may give -pron- a version of the website which be out of date or i may deliberately give -pron- a website which have thousand of link so -pron- can keep click for anywhere"
  ],
  "22302903-5bcb-4262-bd2c-179cf2135ab9": [
    "ok -pron- be sir let -pron- talk a little bit about http so http be the mechanism today that how -pron- actually get a web page and http actually grow out of an existing protocol and this very first version of h d two p the first of official version one point oh and also one point one be a text protocol so why do -pron- think that be why choose a text protocol because this of always advantage to a binary protocol with a binary protocol i can be a lot more succinct i can choose -pron- protocol so that by the number of byte i need to send or octet i need to send be minimal so why do -pron- think the very first version be text base ok so the reason -pron- be text base be because -pron- be easy to implement different client and server and -pron- be easy to debug the actual connection which be happen over -pron- will tcp or udp connection and -pron- be easy to write",
    "so for example if -pron- want to get a web resource today -pron- would make a connection to a server and -pron- 'd say hey server can -pron- get -pron- the follow so let -pron- get resource so if i just care about the home page then that be just slash if for example i want a particular subreddit page -pron- may say ok say slash r slash let -pron- get some cute picture of cat ok all right ok now i need to also to complete this be an http and if i go and read the specification -pron- see that after that i need to declare what version of http -pron- be use so http forward slash one point oh and if i continue within the spec i discover i can add some other header information in here but -pron- request",
    "so that be a new line just those two character there i could add some more thing in here like what image i prepare to accept i could add cap and cookie information but right now -pron- be just go to say ok slash r slash n slash r slash n be a way to say and here be a blank line mean -pron- request be over now -pron- be time for the server to take all this information and give -pron- a response ok so -pron- manage to implement in http one point oh specification request but do -pron- send -pron- over tcp or udp well -pron- be pretty sure -pron- can guess that tcp be the right answer yes that will make a tcp connection and then will send these bite and will know that these bite will arrive in the same order that -pron- send -pron- be that the full story well not quite if -pron- be the size of google today then -pron- may actually choose to actually implement",
    "fact that packet may go missing but this be useful if -pron- want for example to provide an interactive feedback as soon as the user start type something into the search part -pron- want to be able to display immediately some potential result so that sound to -pron- like udp may be a great course so if -pron- be prepare to employ a lot of great system programmer from say from illinois then if -pron- do not mind that expense then udp give -pron- a low latency response and besides if -pron- be do this just for incremental search be -pron- do not care anyway if -pron- drop a packet because in a moment the user be go to be type another character anyway and so -pron- can reissue a new search base on that new information right but most packet today"
  ],
  "23d922a6-680c-4d83-887e-43c407779538": [
    "ok so -pron- first attempt be actually tide that so -pron- first attempt be ashley really really simple change here be -pron- idea i just want to p fit all the vote and what i mean by that be take a look at -pron- original version which have this nest for loop what about if i say well artie or -pron- will make this activity this inner last for loop as something that one thread should do and so if -pron- have get to say five hundred or so row then why do not i just make five hundred thread ok so let -pron- try this and what will have to do then be take these three line of code here turn this into some little function let -pron- call -pron- to like like rolex be go to run a thread and somehow pass in the value of y right so let -pron- now look at how -pron- could do this",
    "right and this be definitely a very hacky way to do -pron- so here be what -pron- will do -pron- will have a little loop here and -pron- little loop will know when i call pizza create i have to pass in a void pointer but what if that void pointer actually be just the y value in other word somehow will take the value that -pron- want to give to a thread and convert -pron- into just the void pointer type so -pron- be literally just cast -pron- pretend that the value zero be a memory location pretend that value one be a memory location etc so -pron- be not actually pass in the address of a real piece of memory -pron- be just convert the integer into a void pointer into a memory pointer -pron- have to do the same hack when -pron- receive this information",
    "to get a new cpu for -pron- to run this calc one so what be calc one here -pron- be ok and the value that -pron- pass into hack here so here be hack which be go to appear here that be go to be pass into this variable here avoid point here and rather than try to dereference that no -pron- be treat that memory location that address as the actual integer that -pron- want ok so -pron- be pass -pron- cast -pron- back into -pron- so this be an exciting hack honestly -pron- have no true way to know whether enter officially go to be as large or small than what can be represent by a void pointer i certainly would not recommend this in production code but i hope -pron- can see how -pron- work and certainly -pron- will come across these kind of hack again in the future",
    "kind of an interesting idea -pron- will play with this in a moment and then let -pron- see what this calc want do ok so -pron- then just run through all value of x so for a particular value of why -pron- be go to run through an calculate -pron- and walk for that ok so each thread be go to run from leave to right filling in -pron- pixel and in this case -pron- pixel be just a global variable so -pron- can see -pron- from any threat ok so let -pron- run this right if -pron- give so -pron- be go to run -pron- now a bit slow just so -pron- can see what be go on let -pron- do say let -pron- do right let -pron- do say eight thousand iteration alright do -pron- see how that work let -pron- that be right once more",
    "then -pron- fill in or all of this area much more slowly what be -pron- about the middle that cause -pron- to finish slow than any of the other row that -pron- have to calculate well hopefully -pron- notice something about -pron- calculation here which be that not all row be create equal in this case that some row be not go to require that much computation because -pron- get out of -pron- little man a bootloop really really early that for each of these pixel up here at the very top and the bottom of the picture -pron- do not need to do many iteration before -pron- discover -pron- have a value great than two versus this centerline most of these be go to be run for the full eight thousand iteration before -pron- give up play the game for that particular pixel so this particular row take a long time but -pron- assign",
    "part of -pron- cpu to now split that job into two so though -pron- work -pron- have get some limitation that the speed of this be limit to the waiting for this slow row here perhaps -pron- could do a little bit well by split this up into different region second comment on this be create this many thread five hundred thread be exciting model system be go to support that or at least -pron- may run into some limit on the shared system would be fun to see what happen if -pron- run this for example on a shared linux system there -pron- would not surprise -pron- if there be be some limit set up to say no -pron- be sorry -pron- be go to let -pron- one five hundred thread right so the last thing to point out of this be go to run -pron- be of course i do not really have a five hundred and twelve cp cpu core available on -pron- machine so so to get this job do be real cpus actually have to",
    "run -pron- once more again so -pron- can actually see the output let -pron- wait for -pron- ok there -pron- go and let -pron- make -pron- a little bit large so -pron- will go for c eight hundred by eight hundred there -pron- go be not that great all right -pron- senior next video when -pron- actually design a well anna task base version to solve this problem by where do -pron- go on ok i think i can stop -pron- like this no no no -pron- still watch ok come back there -pron- be ok stop ha ha"
  ],
  "24389f97-732f-4c49-9ec5-d5ea195e83da": [
    "ok so this be go to be a story of the child not pay for the parent sin and kind of the good analogy i could think of so here be what -pron- be go to do be -pron- be go to make a process -pron- send a signal to -pron- and then -pron- will see what happen after fork when will let both the parent and child lower the drawbridge so here be -pron- plan be that will first of all set up signal set will say ok should be empty and then -pron- will add one signal to uitsig -pron- ok so -pron- be go to block that signal right so now the sig pop mask i can say something like cig say set mask to say right do not let siggin be deliver -pron- be go to have to stay pende outside right now rather than -pron- try to press ctrl c at the right time let -pron- just send a signal to -pron- ok so how can i do that i could call could call kill but let -pron- use raise which",
    "right now normally cost that would then stop program signal be deliver or -pron- call a signal handler but because -pron- set the signal prague mask that portal sequels have to stay outside -pron- pende -pron- can not cross the moat -pron- have stop -pron- so -pron- be go to look outside -pron- castle for a little bit but now here be what here be what -pron- be go to do -pron- be go to fork so now -pron- have get the chair and parent and the child and -pron- be go to lower shield low the drawbridge on both of -pron- ok so how could -pron- do that well -pron- may say well -pron- look as an easy way here i can call set mask and i actually make a note of the old mask so let -pron- use that ok and i do not care about what -pron- use to be i already",
    "parent and the child from now to have cigarette be deliver what be go to happen to -pron- ok so if -pron- get this far then one of -pron- will print child 's life and one of -pron- open to parent alive so let -pron- see what happen ok so -pron- have get that code here -pron- be group pende fork right so -pron- have where be -pron- ok pende yeah pende folk right so same code the only difference be -pron- game use sick term in this little demo but other than that same idea that at some point -pron- lower the drawbridge ok after the fork ok so let -pron- run this -pron- get to pende fork here right pende fork",
    "but because -pron- block -pron- be not yet deliver -pron- be in this pende state ok so now -pron- two little process be the original one and the child be reset the process mask what be go to happen and -pron- will see that surprisingly the child be carry on the child be not stop however the parent be stop and the shell happily tell -pron- that -pron- be terminate with signal fifteen ok so this be like i say the child do not pay for the parent end mean that pende signal be one of the few thing which be not clone when -pron- fork the idea be that here signal be some event like say stick child and -pron- would be strange for the child to",
    "hey look at the child i should go and do something completely different ok so signal be not clone if there in a pende state right so the kind of last demo , -pron- think , today be yeah ok -pron- will use signal sig wait so this be -pron- view one of the clean way to actually work with signal especially if -pron- be work with multithreade code because what -pron- can do be actually set up a separate thread whose job -pron- be to synchronously work with each signal as -pron- appear so -pron- may remember that welcome back there -pron- get that before with thing like signal and cig action -pron- say well that code that",
    "these guy will set up a little function little handler when that be call asynchronously but -pron- be really limited about what -pron- can do inside that -pron- can not use of any code that call malloc for example there be a very limited number of system call that be allow to use there be even the mutex lock the whole order stuff -pron- just can not use inside -pron- signal handler why because -pron- have temporarily interrupt -pron- other code and that may be deep inside that other code already in that code be not re enterable so a well way to do this be to actually just have a thread that pull off the next signal and -pron- just behave like any normal regular thread so let -pron- see how -pron- can use this here be the big idea be to use something call sigwait here and this will tell -pron- when -pron- return what signal have",
    "a time as -pron- come over but -pron- want to make sure that the signal that -pron- care about only deliver to this particular thread so -pron- better pull up any of the other drawbridge ok so that be what -pron- be go to do here inside -pron- main thread i do not want -pron- main thread to ever have to worry about get a signal hey i do not want any signal be deliver to -pron- so the first thing -pron- be go to do inside -pron- main method here -pron- main function so be to set a cig mask to say hey block all these signal in fact block sigterm blocks eginton if i wish i could walk a whole other brother right so this this mask here be then use to say right ok on the main thread -pron- pull up this drawbridge so -pron- can not deliver these signal to the main thread ok after -pron- have do that -pron- be go to create lot",
    "one at a time so when -pron- call p thread create initially the new thread get a copy of the same signal mask so initially -pron- get all these thread and all the drawbridge be up but this be where -pron- signal weight come in so sigwait provide a mechanism to say hey i care about some specific signal if -pron- be outside if -pron- be pende then -pron- be go to eat -pron- one at a time ok just tell -pron- about one of -pron- so in this case as -pron- can see -pron- be go to -pron- be go to sell tell sick wait two kind of signal that -pron- care about sigint or sigterm for example and guess what that actually happen to be exactly how -pron- set up the mask early so great let -pron- use the same mask and then when this will block until the day that a signal",
    "printf and file code and other normal code inside here -pron- do not have to worry about whether -pron- be signal safe anymore so let -pron- actually have a look at that code and -pron- will notice by the way that yet -pron- -pron- have this inside a little loop because after -pron- have consume one signal -pron- want to go around again and see the next one ok so where be that here be -pron- sig weight demo right right so -pron- be go to each time around the loop call course equate then find out which signal happen and then print something out so meanwhile ok -pron- main thread be do a big calculation -pron- be just count count down i think problem fully septa again nine problem initially or so and -pron- be just go to print out some doc as -pron- work but"
  ],
  "25b095de-25dc-448b-873a-ddcf22752393": [
    "hi so let -pron- have a look at first fit ok right so first fit -pron- will run through the same allocation as usual right so nothing change there let -pron- quickly set those up right so i have p a be go to be at the beginning ok so that be -pron- pa bite and then -pron- have ok then -pron- have pb ok so right so -pron- go pb -pron- can be there and then -pron- have pc oops -pron- -pron- need one more for pb then -pron- have pc right pc -pron- be go to be these three block here ok right and then -pron- get the free space at the end ok so right so i will not bother to put all the little line in to indicate this because -pron- have see -pron- so many time but -pron- could understand that -pron- be go to link list which be hold this representation right so then -pron- free pb right and now this become a free",
    "more than four kb ok so what come in next -pron- have allocation request for let -pron- choose a nice color here ask for this ok so -pron- have an allocation for three kilobyte ok now -pron- be do first fit and the first fit be the scrappy doo approach here which be that let -pron- just find an entry inside of link list that be which work and as soon as -pron- can find a viable one let -pron- stop so will go through link list the first entry that be no good because i actually correspond to a piece of memory that be in use but -pron- second entry ok -pron- be bounce along tile link list and -pron- be iterate through -pron- -pron- second entry be of size four which be fine -pron- only need three kilobyte so -pron- be do -pron- do not need to look any further through -pron- link list so -pron- do the usual",
    "three kilobyte so will split -pron- into a three kilobyte which be go to be available for the caller and rpd will point to -pron- beginning of that right and into -pron- link list -pron- will have a new entry here with the one kilobyte which be remain here ok and then what happen next right so then -pron- free up pa ok so let -pron- update be link list ok there -pron- go so that but this entry here be now available turn off -pron- scissor ok and that be the one kilobyte request come in ok i think -pron- can guess what first fit do by now that start look at -pron- link list oh look the very first entry that -pron- have look at be great -pron- be big enough so will split up into the one kilobyte that -pron- want an update",
    "this be go to be -pron- value of p ok so how do -pron- do with first fit well -pron- can see that -pron- fragmentation in this example have three three bit of fragmentation -pron- have get some memory here be some free space here some three space here so even though -pron- have get let -pron- see two plus three two plus one be three -pron- have get -pron- six kilobyte space here then old altogether so if -pron- want six kilobyte of contiguous memory i can not satisfy that request because -pron- -pron- memory use be fragmented ok so right be there anything else -pron- want to say about this yeah there be a few other thing ok so first of all there be a little detail that -pron- may not have notice early which be if something fit perfectly"
  ],
  "25f60154-4c5e-4768-9b0f-f050b09bb778": [
    "hi , so a big idea be that most file system device be what note be know as block base device mean that at the hardware level -pron- do not ask for a single bite from a disk instead -pron- have a convention and -pron- say -pron- know -pron- 'd like give -pron- the first block of byte please will give -pron- the second block of byte or -pron- have like to update this block of byte with some new value so for performance reason -pron- do not make request down to just very small unit -pron- much prefer to say to a disk system an external system give -pron- a whole bunch of bike and useful idea to make the same disk block the same size as -pron- memory block in fact what -pron- be go to see be all over -pron- system example where the block be base around four kilobyte chunk or -pron- will find example where the chunk be slightly",
    "on this main convention here so in other word -pron- be throw around four thousand ninety six byte anytime i want to load or read something from the disk so -pron- have probably be talk about kind of cache line and this idea that if -pron- make a request in main memory for one byte -pron- be go to get say the whole cache line which may be sixty four byte or thirty two bite or hundred depend on the system whole load of byte be free -pron- all come across right depend on the width of the actual physical number of line between main memory in -pron- cpu so -pron- get all these bit for free the so the same thing apply for -pron- fault base system and -pron- be kind of at the low level say hey i want",
    "make these same size be -pron- virtual memory be because think back to -pron- virtual memory table where i need to have a mapping from virtual address to physical address and the very first thing -pron- do be -pron- take -pron- physical memory and divide -pron- up into these chunk into these ram into these disk sort into these memory block here and -pron- need to do thing like say well these bite right now i do not care about no one seem to be use word to paginate table so all that code inside here be just waste ram so why do not i evict out of -pron- memory meanwhile -pron- have get some other stuff that i would like to have inside -pron- ram inside -pron- memory so i want to page that into from disk into memory maybe",
    "structure that i have not need for several minute but now -pron- be start to work on that part of the document or now -pron- be render this now -pron- be inside of game inside a new area of the world -pron- be time to bring that stuff into memory so -pron- want to be able to make -pron- disk block on line -pron- neatly with -pron- memory block and like i say for most operation today -pron- be go to be talk about four kilobyte block as -pron- standard unit in practice system may actually support small block for example a hundred and twenty eight byte often owner sector but -pron- be go to ignore those particular implementation dip implementation detail and all will stick with four kb 's be kind of standard unit when -pron- kind of work through some example wait so with this in mind give that i can now store a file by say right let -pron- store the content in block number seven block number nine block number",
    "for each file that -pron- want to store -pron- have actually get the content statue of byte of the file but what else would -pron- like ok so -pron- have mention a few of these before maybe -pron- want some kind of access control so -pron- may want to say if -pron- be the follow user -pron- can read -pron- if -pron- be the follow user -pron- can write -pron- if this user belong to a certain group -pron- can delete -pron- so the simple form in linux today consider user to be in three different kind -pron- have the owner -pron- have a group and -pron- have everybody else so the rest of the world or other and -pron- can describe different different to access",
    "-pron- have read write and execute read write and execute and -pron- and -pron- can specify these separately so for example -pron- may say hey -pron- file can be modify by -pron- because i own -pron- people inside -pron- group can also read -pron- and everybody else do not have eddie access the tool so that be the simple kind of access control that -pron- may have there be more complicated version today in other file system what else could -pron- have well in addition to the actual content -pron- have probably care about -pron- eye be some interesting meta information cape -pron- may care about the mind type so what kind of thing be this file and today -pron- represent that use these type for example -pron- have already see a few of",
    "-pron- be -pron- type be text slash html -pron- can have a mind type for image in -pron- own type for gift for jeff depend how -pron- 'd like to pronounce -pron- -pron- have a mind type of jpeg image -pron- have a -pron- type of a word document etc so these be all different type of file -pron- can also talk about some timing information so for example -pron- may care about hey when be this create and -pron- may care about hey when be -pron- modify and -pron- may care about how often this file be access when when be -pron- last access for example because file which be kind of very rarely access perhaps -pron- would be good candidate for archive perhaps -pron- should compress -pron- perhaps -pron- should move -pron- to a slow portion of the disk for example ok so -pron- may care about how often or how recently these event occur -pron- also may care about who",
    "-pron- who modify -pron- and who access -pron- modern linux system specially the fast and be work to look at do not keep track of who access the file but -pron- be assume that whoever create -pron- be also the current owner file but actually -pron- turn out -pron- can change that later so one person may have create the file but later -pron- could say actually let -pron- reassign the ownership of a file to someone else ok so -pron- have get these kind of event timing -pron- could also store thing like how about -pron- name ok so presumably off file be go to exist and -pron- need to build a refer -pron- -pron- do not want to keep say hey why do not -pron- load file number seven while file number",
    "to give -pron- file some kind of name -pron- also may want to store some other additional matter information so -pron- may have kind of search meter information so for example there may be key value pair like who be the artist if -pron- be a gps coordinate of where something be store or find maybe if -pron- be an image say the camera setting lens -pron- use that kind of stuff ok so -pron- can have an arbitrary key value pair to help come search right so -pron- could kind of keep go on here and -pron- could keep kind of brainstorm a whole load of thing that -pron- may want to store about the file but i want to kind of simplify -pron- back down to linux do and what -pron- see in most file system ok right so let -pron- choose a new colour let -pron- let -pron- go for this yellow",
    "of this meta information about when -pron- be create modify even if -pron- wish -pron- can keep -pron- access there in practice today -pron- will find that this be actually really use in fact -pron- disabled because -pron- may for performance reason not want to keep update -pron- disk all solid state drive every time someone touch a file so every time someone read a file access control like -pron- have already mention be kind of simplified down to just kind of a single group single owner and everybody else yes -pron- definitely want the size yes of course -pron- want the content but no -pron- do not use mine type so as much as mine type would be useful today -pron- have much clunki system which be to either look at the extension so for example will claim that a file that end with say gi f be a gift or jeff dot png be a png file",
    "microsoft word document so will just look at some extension or -pron- may look at the first few byte of the file and try to infer from those byte as to what -pron- be likely to be but both of these system be kind of clunky compare to actually have real mayo type the other thing -pron- be go to have be always nice meta search information or regular filesystem do not give -pron- that but here be the big one that i want to kind of surprise -pron- with be that that file actually -pron- do not have a name so i want something much more kind of exciting than that right but no -pron- be not go to store the name as part of the file that -pron- file yes have content have size have some of this kind of meta",
    "-pron- be go to discover -pron- be -pron- file have this wonderful thing call and i know number so that be go to replace how -pron- think about datum be store on a disk and a name be just something that which live inside directory list so if -pron- happen to be inside particular directory for example -pron- happen to be inside say directory call sub two then inside that particular directory there be go to be a whole load of name that school directory list an each name be go to map two and -pron- 'd know number so the i node number become the authorative way to talk about a particular file on a particular file system name be just a kind of secondary add on -pron- name be just a cute way for -pron- to be able to have",
    "ok so -pron- be get down to this next part here that right so what be an ai node this be the definition of how -pron- store a file on disk and -pron- have certain meta information -pron- tell -pron- about the size that file -pron- tell -pron- about who own -pron- and thing like when -pron- be last modified -pron- also tell -pron- kind of where on disk be the datum -pron- actually need to get to the content so kind of where where be the datum so in other word be which dis block should i go to to actually start read the content of -pron- cat dot jpeg so -pron- be a kind of key if -pron- like into the actually read",
    "become actual file -pron- can not have a file without have an -pron- node ok now -pron- have probably already use stat in several case -pron- may have use -pron- early on in the shell mp -pron- may have almost certainly use -pron- when -pron- start think about kind of parallel make because now -pron- care about modification time and whether file exist and -pron- can get that by use stat and stat be read the i node so of course -pron- do not usually say ok please start for -pron- particular i know number so please tell -pron- all the meta information about kind of four i know number seven say twenty three instead -pron- write a particular"
  ],
  "2635d0a3-9614-4aa7-9bdc-dca870b27eec": [
    "ok so if -pron- be google with a lot of server in a lot of bandwidth -pron- care about use those efficiently -pron- also care about get information as fast as possible back to user so for example even a ten twenty millisecond delay which be barely perceptible be enough to make few people actually use few search result and if -pron- google -pron- really care about make sure -pron- search result be as valuable as possible secondly -pron- think about today about if -pron- be search as -pron- type google want to send -pron- information back with suggest search term search query and -pron- can do that at the speed at which -pron- can type which be incredible so -pron- can actually find thing on the web fast than -pron- can even find -pron- on -pron- local disk so -pron- need a fast efficient way to be able to connect send that information to google and get -pron- back so as a headline this be why quick be invent quicks support encryption out of the box so -pron- get encryption that -pron- do not get from tcp also",
    "that look if -pron- be google ann i control the client and the server end of the connection i can take destiny into -pron- own hand here and i do not need the tcp protocol anymore to control control to flow and resende packet i want to do that -pron- so there be time when i do not care about resende packet for example the user have just i have another letter to the search query i can discard that previous request and send long search query now to get back search search possibility so let -pron- say let -pron- use udp packet and hope -pron- get to the other end the other thing that quick do be that -pron- avoid a classic problem that -pron- keep see which be this",
    "so -pron- see this in various form where say -pron- want to get a web page and -pron- use this as motivation for h t p two to say hey -pron- should be able to get all these resource at the same time hey -pron- solve the problem well -pron- have not solve entire problem because beneath http two -pron- be still run on tcp and this thing back to what tcp do ttp say great -pron- have get these packet arrive and the kernal be go to assemble -pron- into the correct order ok so -pron- could use this sequence number for that but then a packet be miss meanwhile other packet continue to arrive so this packet right here in http http two may be just information save for the favorite icon or a particular jpeg these be the packet however continue to arrive",
    "so now packet that may actually be contain javascript may be contain css s -pron- may be complete and ready -pron- should be able to give those directly to the web browser with tcp -pron- can not do that -pron- call to read be block right here until -pron- get this information and only then will all of these other packet be send so google kind of reject this instead -pron- can do well if -pron- start with udp -pron- can actually implement all of the transmission control and resende control directly as part of -pron- user process and besides if"
  ],
  "27f7e6d9-2a1f-419b-b0c5-3ad8dc4064d3": [
    "ok so -pron- have kind of talk a little bit about this idea before so -pron- could i implement p thread mutex lock just by disable interrupt on on the cpu so the idea here be that if -pron- code be run on the cpu if i disable interrupt then i can not be stop become agent smith out of the matrix that now i own the cpu so no one else can can take -pron- for -pron- so one of the limitation of this first of all that yes -pron- can ensure that -pron- be the only one go into the critical section if one there be only one cpu ok so if i control the one and only cpu and i can not be interrupt then i get to do everything inside the critical section until i give up the cpu ok so provide",
    "-pron- data structure no one can stop -pron- because i disable into app ok the second be that i require an here be a big problem here be that actually require sufficient privilege to disable the interrupt and because this be such a powerful operation by default that be disabled for normal user program -pron- need interrupt in order to make a cpu stop run one thread and start run another in order to handle hardware interrupt -pron- too do to device iot device be ready to either take datum from the system or give datum from the system for example the network card may report that -pron- new package arrive and here be some datum or a disk or solid state disk may report hey -pron- have now finally get the datum -pron- can now read this into memory or gpu",
    "of reason why -pron- in over a normal complex system -pron- can not just disable disable interrupt ok so this be one solution to the critical section but like i say -pron- be not a generally useful solution to the critical section -pron- need to find a way to be able to kind of implement these correctly and will talk about some algorithmic concern about that in the future instead now be what -pron- have get a real challenge for -pron- which be i want to implement a barrier in fact -pron- be go to give -pron- all the code that -pron- need here -pron- be i just want to implement a barrier that will wait until five thread call this method call this function and -pron- have get to keep track of how many there -pron- go and all -pron- be go to give -pron- be the follow code which use a counting semaphore so -pron- get to choose how what -pron- would like to implement what -pron- 'd like to"
  ],
  "28a2bdb5-a357-4b00-bb00-b9d1e478498b": [
    "hi so -pron- have see example of where -pron- have use a fork exec and then wait pattern now let -pron- think about what happen when -pron- break that pattern so first of all what about if the parent process die first what be go to happen to -pron- poor running child who be -pron- parent now so the surprising thing be there be that the child always have a parent process in fact -pron- get adopt or in unix and posix speak -pron- get re parented so that -pron- parent process id be the grandmother of all process that be right -pron- get re parented to process number one so process id one and process id one will automatically wait for -pron- to finish so -pron- will call wait pid on those process so what about the other possibility that a what if the parent never finish so -pron- be a long running process",
    "example the long running web server or a long running database or even shell that perhaps do this so what happen now well those child will eventually go to finish but -pron- never call wait on -pron- so -pron- finish but -pron- be not do anything anymore yes lady and gentleman -pron- have manage to create process zombie so -pron- child dead but -pron- be not do anything anymore -pron- have not go away yet -pron- still know thing about like -pron- process id and -pron- exit status in fact -pron- be go to clutch up the process table inside the kernel and if -pron- make enough of these zombie then in future call to fork inside -pron- code and other user of the system that may fail so at some point -pron- will not be able to make any more process so -pron- be important to clean",
    "ok so how can -pron- do that well let -pron- give -pron- a sneak peek of some really fun stuff that -pron- can do with single programming and in fact -pron- be do some of this stuff already so how do -pron- think -pron- be that when -pron- press ctrl c -pron- process just stop and the answer be that actually the kernel support a wonderfull idea call signal and what be just happen to put -pron- poor little process be that -pron- say send -pron- a sig int -pron- generate a cig interrupt and the default behavior of that be to stop the process and of course -pron- could find this out use the weight pid macros here be another one if -pron- write bad code and -pron- try to read write to some invalid memory location -pron- get segfault or a cig i think a sig fault sick i notice i notice let -pron- let -pron- delete that that",
    "and both of these by default killer process and -pron- exit add normally do not pass go do not flush the buffer do not print anything else immediately stop -pron- well there be a third signal that -pron- be really useful to discover when -pron- child who finish and -pron- can use this as one way to prevent zombie now i do not need to write code that just block and wait for -pron- child to finish i could start many child and then be tell be form when one of -pron- finish and the the this signal be call sick child but just for fun do to keep -pron- on -pron- toe the actual definition of -pron- do not have the id so chill without the eye but that be that be what -pron- purpose and unlike sigint and sig segfault -pron- -pron- do not actually kill"
  ],
  "2a2f8631-b18e-4323-90d0-8f71927323fc": [
    "ok so this build -pron- a web client so this be not go to be quite as good as firefox or chrome but i promise -pron- that -pron- be a lot fresh and also a lot small let -pron- just one little downside which be that if -pron- want to navigate to a different page -pron- be go to have to recompile -pron- but never lie be for technical audience anyway so here -pron- go -pron- want to build build a web server and -pron- want to specify name like illinois dot edu and -pron- need to convert that there into a tcp address right for that here be a really really useful function get address info and fat -pron- do many thing but -pron- be go to use -pron- today to create the information -pron- need to create a socket and also to call connect and so -pron- eventually will get back a family a socket type and address length and and address as well so -pron- will use these too kind of",
    "-pron- actually set up one of these struct as a as like as a hint to say this be the kind of stuff -pron- need and then -pron- create another one force in fact a potentially a link list of way that -pron- can actually connect to that server so what -pron- need in here ok let -pron- scroll down be -pron- be go to cool get address info -pron- be go to pass in host and the port that would like to connect to this can either be number but -pron- have to be a string otherwise -pron- get a segfault or -pron- can be name like http s for example but here be where -pron- get a passing then a pointer to",
    "create some heat memory force with the result so that be what -pron- need to get to let -pron- think about how -pron- can set up this hint object what do that look like gay so here be the plan -pron- get to say what kind of connection -pron- want do -pron- want to say an ip four or maybe six or both do -pron- want to set up a client or perhaps -pron- want to set up a server so -pron- be go to have to set those flag there be many thing in here however that -pron- do not currently need and so the first thing that -pron- should do be actually take -pron- hint object so here -pron- be ok and zero -pron- all out ok so take the address of -pron- and the number of byte that i need for this struct will be",
    "to zero so memset be go to walk through order those byte set -pron- or alter zero so if i do not set some of the all of the parameter inside that field sorry aside that be truck then by default -pron- will have a value of zero which be a good thing the other thing -pron- be go to need in here be a pointer to result as well so i do not need and address flow i just need a pointer to one right so -pron- can start to set this up now if -pron- be go to set up a tcp then the address family idea be af address family and i need high net which mean ip version four for -pron- next for short for internet if -pron- want ip version six then -pron- would use af inet underscore inet six there be also i net any if -pron- would say i do not care",
    "about try to get an ip four address right and what kind of socket type well this be where -pron- can say i actually want either udp or tcp and the constant here either d gram for for a datagram udp or stream for a tcp so -pron- be go to use stream i will look up the correct name for this error moment from a man page but -pron- be something like sock stream yes in fact this what be soccer underscore stream ok so -pron- have say about hint that sufficient for what -pron- need for -pron- little client here so now let -pron- say go get address info please and -pron- 'd like to connect on port eighty because that be where unencrypte web",
    "and here be the address of -pron- result pointer which be go to be change as well ok so -pron- will get address info change -pron- result pointer who know to be sure -pron- well actually check to see whether the get address info actually succeed or not so -pron- be important with all of these network call to check -pron- return value so if -pron- do not succeed then -pron- result pointer can -pron- point into anything game because -pron- never set -pron- maybe -pron- be point to this smiley over here so a little bit more of a bus code would have actually explicitly set result equal to zero but certainly -pron- do not want to assume that be be set unless get address info return zero so if -pron- do not return zero then -pron- actually have a useful error function down here ga get address info gi underscore string",
    "to why this occur so -pron- do not use air nose be the one of the few time that be not use error to find out what happen instead the error be actually encode by the return value directly ok so -pron- have get all get address info now -pron- can make the call for a socket and connect so rather than do that here let -pron- actually do that as part of the live code so -pron- can start write this ok right so yeah i be right the socket type with sock underscore stream so great -pron- have get that now -pron- be time to actually make -pron- connection ok so i want to make -pron- a socket so let -pron- have a why -pron- ok that be fix indent here right ok so let -pron- have a socket fire scripture this be how -pron- be go to",
    "first thing be the kind of socket well ok where do i get that from i get that from the result and -pron- will see -pron- have make a note of the different field inside here and the first thing that socket be the domain that be the actually the family that -pron- need here so the socket family ok and then -pron- be the socket type ok so that be a i type ok and that be the last thing be the protocol which usually be just zero for some kind of family that could be different kind of protocol but so -pron- need to get loop socket here there -pron- go result and then ok so then result go to ai vertical so great -pron- have get that but -pron- better check to see if -pron- fail so if the socket file descriptor be negative one -pron- know -pron- do not work so at this point",
    "right so give -pron- have get -pron- a socket now -pron- be time to actually connect to where -pron- want to go bbc or illinois or whatever ok so let -pron- call connect right so -pron- will call -pron- connect result that school connect right so the parameter for connect be first of all be the socket far descriptor ok so -pron- have get that but then -pron- need to pass in a pointer to a struct now all style code for network would have be actually assemble and create this structure -pron- directly so in theory that be why -pron- actually only need the socket in the connect call but -pron- have be lazy today -pron- have be use this swiss army nice chord get address info that actually set this set this up for -pron- so -pron-",
    "this struct actually be ok so that be down here that be all address and address length let -pron- grab those from the get address info result ok so -pron- have get result address and result address lynn ok as usual let -pron- check that connect actually work ok so if this be equal to negative one -pron- know that fail guess so -pron- have get connect fail all right and -pron- will print out a little message and exit ok so first of all this to see if this actually can connect to illinois dot edu alright let -pron- see if there really be a web server listen on port eighty on this address i think -pron- be time to compile this so let -pron- clear this i want to make -pron- text a bit large",
    "ok so will do well -pron- be play right and off -pron- go ok all i get i do not get the socket right because i need a type oh do i just get a type of one here oh -pron- be socket type not this type ok so there be that ok let -pron- look at that and i will do -pron- right ok so -pron- can compile that and play this ok so great -pron- do not crash this actually truly prove that -pron- connect -pron- will just productive message say connect right so well connected just like a case of -pron- go run -pron- oh -pron- connect to great",
    "to this machine right so will say ok right now -pron- do not want to write this to -pron- output on -pron- terminal actually want to write to socket f d k so i could have a message right so hash define a little message ok -pron- message can be save alot all along right ok let -pron- send that so here be the address of that message and here be how long -pron- be extra learner message ok -pron- do not care about zero time and i be go to send -pron- random character ok so will send that and should -pron- see if -pron- censor anything back sure ok so for that will have a buffer say thousand twenty four byte let -pron- see what -pron- say so -pron- 'd like to read from",
    "ok and will say here be the buffer and -pron- want a maximum of say that be a size and then -pron- can just immediately print -pron- out so let -pron- send that to -pron- stand out and here be the buffer and i want to send this many byte except let -pron- just be a little bit careful let -pron- check that be least one so if byte receive be great than zero will print that out ok else let -pron- print something out like have read fail ok right so -pron- have get -pron- beginning of a web server and -pron- be just go to win which -pron- connect say -pron-",
    "now -pron- be be a bit short here a bit lazy because -pron- be call right directly i need to actually rap this so that -pron- can deal with kind of partial right and ear interrupt and all that good stuff etc etc etc so well -pron- be not -pron- be just assume that -pron- whole message get send in one go right so let -pron- compile this and run -pron- ok be connected oh -pron- do not -pron- do not send -pron- anything back ok -pron- be still list be still wait for -pron- to send more bite fine -pron- can do that let -pron- send -pron- -pron- little message but this time actually terminate -pron- with a slash slash r slash n and another one ok so -pron- be send this because i know that this be part of the http protocol and this little sequence of four",
    "-pron- and -pron- be -pron- be send something back to -pron- who ok so first of all -pron- have -pron- see a lot of thing -pron- can -pron- can see the current date -pron- can see that the server claim -pron- be an apache server so if i be a hacker i could type apache two point two point one five in and look for vulnerability associate with this -pron- be tell -pron- that -pron- be send hundred and twenty six byte and -pron- be close the connection as well -pron- be also tell -pron- that be this be a character set -pron- be use and this be what -pron- get for two hundred and twenty eight fight -pron- get a response code of four hundred fat sorry that be -pron- response back there the very top four hundred bad request the rest of -pron- be just a nice document format version that",
    "understand ok so the status code be four hundred and -pron- do not like arbitrary request let -pron- send something which be actually close to a real http request ok let -pron- change this message now to something which be a lot more reasonable let -pron- say that i want to get the follow resource and -pron- be speak a certain variant of http so http one point oh and this time -pron- be go to say that i know that different host could be live on this ip address i want -pron- to behave as if -pron- be illinois dot edu ok and then lastly -pron- know that a line have to be follow by a blank line in order for this request to be finish ok so that be a full request now -pron- be behave a lot more like a reasonable http client ok so will send all that so all -pron- have to do be recompile",
    "be in klang and run -pron- an be here then -pron- get a different response now -pron- get a status code of three oh one move permanently ok meaning that the resource that -pron- want will never be available on the current request instead -pron- will see that -pron- be say that illinois now support encrypt communication encrypt version of http and if -pron- want to see this web page -pron- should open a new connection on https which would be a different port now -pron- little web client today do not support encryption yet so -pron- be not actually go to implement that instead let -pron- matter connect to a different server let -pron- connect to say -pron- local machine on a local port so how can i do that right so let -pron- go",
    "to do be come out this different line and uncomment this one there -pron- go in -pron- culture into a different machine and notice as usual that -pron- be use quote double quote here to talk about a string but -pron- be go to make a little mistake here -pron- be go to say that i forget that port number need to be quote as well so now will connect will try to connect to this and see what happen ok so let -pron- run clang and yes -pron- get a warning but if -pron- run -pron- -pron- will see -pron- get a segmentation for why because -pron- try to read a string to address eight thousand and of course that be not go to work so let -pron- fix -pron- code there -pron- go so now -pron- be connect to port eight thousand right ok i run this i get connection refuse because right",
    "so in try to connect this moment where be -pron- connect call this be what this be where -pron- be web browser fail connect fail -pron- try to pack -pron- say hello -pron- 'd like to start a tcp connection but there be no one listen at the other end so if -pron- could not complete the handshake ok so this be where -pron- exit out here -pron- be unable to then send another request alright so i see to see if i have python two instal on this machine ok so what what be try this simple http server ok alright because i do not have http -pron- into so -pron- will have to activate let -pron- just try"
  ],
  "2a7b5c6d-c236-498b-8c94-c4baac66feaf": [
    "hi ok so two little kind of fun problem for -pron- here first one be which be the correct way to kind of completely statement for count semaphore so -pron- have get account center for and -pron- need to choose where -pron- want to say will always may or will never ok so what about send post will -pron- block will -pron- never block and what about sam wait or will that always block may block never block ok so get to choose and -pron- will tell -pron- the right answer right -pron- be ready -pron- will give -pron- three second ok here -pron- go right so sem post will never block sem post that just put a pizza slice back in the pizza box that -pron- can do -pron- -pron- can immediately return some way some weight may block if there be no pizza slice to be eat then -pron- will wait around until there be one and if more than one person be call sam wait an",
    "that pizza slice the other person be still hungry and -pron- will continue to block all right so now what about the follow challenge but i -pron- have get there -pron- go -pron- have get ten thread now or call sam wait and three of these thread immediately continue but the other seven be block then -pron- call sam post twice k on another thread maybe once there do -pron- twice maybe two thread independently call sam post how many additional thread will continue ok so -pron- have get ten thread originally call exam wait three of these thread do not block the immediately continue but the other seven block what happen next what happen after i call send post"
  ],
  "2b24ffa8-c092-48c4-af51-3e0e88ff8792": [
    "ok so -pron- do not need a definition for deadlock and this idea that -pron- -pron- thread be freeze up maybe one thread be wait for a mutex lock that be never go to be unlocked maybe -pron- be wait for something from a data structure which be never go to be give to -pron- so here be a general definition for dead log key text door work ok great make -pron- that big right so dead log be when -pron- be wait for an event that well ok can i type so i put in some in there ok will never happen ok so stop try to make -pron- day to happen -pron- be never go to happen stop try to make this thread exit -pron- be never go to happen ok so -pron- poor poor little fair door process be wait some for an event maybe -pron- be go to signal that",
    "just never go to happen so -pron- do not get to complete -pron- do not get to kind of run -pron- activity or run the code and of course debug deadlock be tricky -pron- be often there as pair that i could a thread maybe -pron- be stick inside p threat condition wait and -pron- do not know why why that event do not have not have not fired have not occur ok so -pron- have get this general definition of deadlock now actually let -pron- see if -pron- can kind of construct some example where -pron- actually cause -pron- so let -pron- use team mutex lock and two thread to create an example of deadlock ok bye -pron- be go to actually do this in a text editor ok let -pron- go right do i have so if -pron- have get thread one imagine -pron- thread first red make the coda big right have call",
    "lock on this first mutex and then after -pron- have do that please lock on this other mutex right so -pron- will do some work ok do something and then after that -pron- want to at least ok so -pron- will call p thread unlock on both of these mutex be ok so for example maybe -pron- want to take some datum out of out of datum store one stick -pron- into datum structure to ok -pron- do not matter particular which order that -pron- release -pron- in just for symmetry -pron- be go to do -pron- this way but let -pron- let -pron- think about what happen if -pron- lock these in a different sequence inside another thread so -pron- be go to have now another thread that do the same sequence of operation accept ha -pron- have swap these around the case so",
    "like most of the time no most of the time -pron- thread be perfectly happy do what -pron- need to do until the follow happen until one unfortunate day thread one have call preferred mutex lock on get this choose a new color call prefix lock on the first one case be complete that at the same time -pron- other thread which be curiously call thread one so let -pron- fix that thread two right have just acquire the lock on mutex too so now -pron- be both able to do this but what happen",
    "let -pron- go for yes -pron- be kinda extreme pinky purple thing let -pron- try that ok right so now what happen thread one say -pron- 'd like to lock this mutex but of course what do this do -pron- block ok why because another thread have that new text between -pron- and -pron- -pron- know -pron- be thread two meanwhile thread two try to look -pron- take one and that of course block -pron- be not yet available another thread be currently quite that music lock ok so when will -pron- escape out of this and the answer be never ok -pron- can read the code and see that eventually -pron- be go to release these lock but -pron- be never go to get to that that piece of code that thread one be wait for thread two and thread two be wait for thread one so -pron- be kind of stuck for stick forever",
    "be in the same order -pron- would have be fine let -pron- just kind of quickly sketch that out to see that let -pron- imagine that i have -pron- first thread do mutex wear and then mute x two and then mutex wanna mutex two down here for thread two then if -pron- both try to acquire mutex in at the same time then -pron- can imagine that thread one would acquire the mutex lock here which would mean thread two will be force to block so -pron- do not get to go to step two which mean thread one can continue and then when -pron- be finish -pron- will release those lock so now thread two can finish so if -pron- 'd actually write -pron- code like this in the same order -pron- would have be impossible to get deadlock",
    "semaphore sure ok so let -pron- do something similar with count semaphore where thread one call say sam weights on count center four as well and at the end -pron- will will increase the count again ok so now -pron- will have another thread that do something similar or key and another thread do something similar ok so do -pron- see any problem right now nope -pron- could imagine that these counting semaphore 's -pron- kind except for have be initialize just account of one ok so same",
    "for every same weight call -pron- call assam post ok right so what if -pron- could have make -pron- a little bit more complicated though and -pron- say that same weight here be go to in order to continue -pron- be go to wait on this thread and then -pron- be go to post on some sample to an meanwhile thread two -pron- be go to wait on count semaphore two and then -pron- be go to post on count semaphore three ok and then some weight three -pron- be go to then post inseminate one ok if all -pron- county be force to start off with a value of zero -pron- can see that no one get to play that all of -pron- thread have get stick that -pron- first thread be block here wait for the value for sale want change well someone will change",
    "pizza slice and be able to get that piece of slice form -pron- be wait for sam post to be call by thread two but thread two be not go to give -pron- that pizza slice until -pron- get a piece of slice out of count semaphore s two and where will i get that only from thread one when thread one finally call stem post but that be not go to happen because thread what be still wait for the pizza slice from thread three so now -pron- see -pron- have get this love triangle here between -pron- three thread -pron- will never go to continue that always wait for an event that be never go to happen so that be -pron- example of deadlock -pron- can construct lot of these vary bit of complexity usually -pron- do not artificial construct -pron- like this usually be scratch go ahead go why do -pron- system come"
  ],
  "2c80a67a-6e39-4b62-812c-69eb49905471": [
    "ok so let -pron- talk about why the nation part of the operating system here that be ass break now if -pron- be to look at the manpage of s break -pron- 'd read something like the follow s break increase the process be datum segment by end bite so when -pron- call s break -pron- can give -pron- a number and -pron- can say hey -pron- 'd like ten more byte please alright so what do that actually mean ok so between -pron- and -pron- as big be not actually use anymore instead -pron- be go to use some virtual memory trick of all the slide this do modern c library use some virtual memory trick that -pron- have not learn yet so s breaker be simply mechanism but -pron- will use -pron- for cs two forty one to implement a simple memory allocator ok so remember how i say that the bottom of the memory -pron- have get the text segment which be the program code and string literal and any other constant -pron- have put in here and above that -pron- have -pron- global variable which live forever alright so",
    "ok -pron- can put any datum -pron- like inside there and by default the total amount of memory allocate to this be just sufficient for what -pron- need ok but what about the day -pron- call malloc and say hey -pron- malloc i need another four thousand and ninety six byte please this point -pron- need need to go back to the operating system to the kernel and beg for some more ram beg for some more real address -pron- do not want to talk to the oblivion -pron- do not want to avoid -pron- actually need those memory address now to refer to some actual memory and that be the purpose of s break be to say yes i know -pron- have get -pron- heap possibly say zero"
  ],
  "2cd13b51-dc41-427e-91b3-c63a9d8334fe": [
    "ok some new concept for -pron- let -pron- talk about this really important idea call the working set so -pron- have get the idea that when a process run now that every page that contain datum inside a process will map to some ram there -pron- go so here be the ram that be actually be use to hold the heap for example and here be another piece of land be be use to hold say the program code well actually -pron- know that be not quite true there can be time when i say this piece of -pron- process do not actually contain any mapping at all so let -pron- take delete that and say hey there be no entry inside inside memory right now well how can that be how -pron- allow that well -pron- turn out that right now -pron- program be not use this page of memory at all that may be code say to formulate to format",
    "browser to render an svg and right now -pron- do not have any svg image on -pron- page so this part of -pron- process do not actually need to live in ram and right now nobody would know or for example here be a piece of pete memory that -pron- be just currently not use and do not intend to use for the next hour again that piece of memory do not actually need to correspond to any physical ram because -pron- be not try to access -pron- write down so of all the page that -pron- be currently access ok so in this case say -pron- be these page here plus maybe -pron- have get some code down here that -pron- be currently use plus maybe -pron- have get some stack memory up here that -pron- be currently access this be define to be -pron- working set -pron- be a set of page that -pron- actually need to get anything do that set of page that -pron- be currently access by by the cpu",
    "be part of the program that -pron- only need during startup possibly -pron- only need during shutdown there be go to part with a c library that -pron- just do not care about those part of the stack for example that -pron- do not need until -pron- deep nest recursive function finally return etc etc etc so what -pron- do care about be have enough memory such that these page -pron- can exist inside ram if -pron- do not have dave if -pron- be a lot of stingy with -pron- ram for process then -pron- run into a big problem and that problem be call flash so now let -pron- think about what happen let -pron- say that every few nanosecond -pron- be go to be need to touch all of these page so unfortunately -pron- do not actually have enough ram today for to put a copy or to have all of this inside",
    "say up see daisy i get a problem here this page be not available inside -pron- ram do not matter what be i go to do i can page -pron- in from ram perform disk so great i can copy -pron- in but in do that i need to first of all evict one of the current page so i have to choose a page that either i have a copy on disk for example -pron- current code or i have to copy that dirty page to disk maybe to page store or a file or file system dedicate to support -pron- virtual memory so now what be happen now every nanosecond every little memory right be go to result in a disk access as -pron- page in an page out ok so unfortunately -pron- paging mechanism be about a million time slow",
    "time slow than normal and this this effect be call thrash that -pron- be constantly swap in and out page in order to make the small amount of progress and so -pron- appear from the user perspective that the whole machine be slow to a crawl unfortunately what do -pron- tend to do when -pron- machine do this invariably what -pron- do be to say -pron- be too impatient to wait for this website to load or for this compiler to finish i know what -pron- will do i will give -pron- machine something else to do instead like -pron- will open up a different web browser or -pron- will try to compile something else and so i just make the problem even bad that now -pron- have actually increase the load on -pron- poor system and so there be even few page leave or be -pron- available to actually go to make any progress so thrashing be a problem -pron- want to avoid",
    "of page around that -pron- need in order to make good progress to -pron- program and more less common or working set be that the work set of a program can change overtime the amount of memory -pron- need -pron- may be for example the very beginning -pron- need to load in a lot of the program code or -pron- may be that overtime -pron- render system need more and more hip space in order to complete some recursive picture for example ok so these be important idea and -pron- strongly impact how much ram -pron- need and also the performance of -pron- program so let -pron- have a look at this as an actual example how large do work set if -pron- have m map some datum",
    "binary search and let -pron- imagine -pron- have start a little company or call -pron- google or something right and -pron- want to look up the price of an adverb base on some kind of key that -pron- be go to search through now in fact -pron- be describe kind of adword that google use and one of the tas for for this class actually help kind of write such an early version of the system so all of -pron- adword all of -pron- different keyword be a large datum what do -pron- really kid four gigabyte be no long day today but -pron- be the kind of thing that -pron- could easily imagine store -pron- have get all these different keyword -pron- want to load and at anyone moment i have random request into this data so how big be -pron- working set expect to be ok and will -pron- change overtime right so",
    "be if and if -pron- repeat or if -pron- truly be random so if -pron- be get a lot of request per second and a random that mean i end up touch all of -pron- datum all of -pron- four gigabyte and -pron- could imagine ok i try to do a binary search for anyone request so -pron- be definitely go to need the page in the middle and then -pron- will go left and right k so for a particular key maybe i go down here for or i go up here and then from that request again divide -pron- datum so maybe i will declare that the search value in here and -pron- will check that middle point etc etc etc but -pron- be do many of these search request so overtime",
    "i would expect -pron- work set to be close to four gigabyte plus a little bit more in order to hold the program code and the stack etc but i expect that -pron- be go to end up touch all or need to read all of these different page and if i do not have enough memory for that then -pron- be go to experience a lot of thrashing as i pull indifference caustic rely on -pron- disk io in order to pull the right piece of memory ok now be -pron- possible that -pron- be always go to need that four gigabyte load into memory no -pron- could change so in a real system for example at some point there be go to be less traffic say for example in the middle of night would also could be that there may be a major event and suddenly the large amount of -pron- google search traffic be always look for the same search term so for example maybe people inside a curtain country or with google the word earthquake or music",
    "and consistently so now the number of page -pron- need to kind of load into memory -pron- be go to be much small -pron- be just go to be a handful of page because -pron- be always touch the same page so now -pron- may shrink say from four gigabyte to say under four megabyte etc right so again -pron- be kind of a little example of working set so i mention this kind of word in pass demand page and just as a reminder what this mean that i can have part of -pron- process address space ok so for example this page -pron- processor memory maybe -pron- be part of the heap may be part of the code maybe be part of the",
    "so when -pron- demand this when -pron- cpu attempt to read a memory location inside here -pron- know that -pron- can actually recover this page by go back to -pron- disk and so what -pron- need to do then be if this be all of -pron- random access memory that i pay lot of good money for then -pron- demand paging be the idea that as need when there be demand let -pron- draw a little disk symbol in here there -pron- go i get in -pron- disk i can read that patient disk that may take say ten millisecond but in ten millisecond time great i can copy all that datum for kb say back into -pron- actual ram here so let -pron- label a few thing this be -pron- ram this be -pron- disk",
    "continue ok so that be demand page -pron- load thing on demand from disk and if -pron- never have to do anything else life would be pretty easy of course in practice -pron- never have enough ram so in practice what often happens be before -pron- get to do this -pron- need to page out a particular page and part of the game be to figure out which one should -pron- page out and -pron- choice include thing like hey let -pron- choose a page of ram -pron- look like no one need for the long possible time or less choose a page of ram that actually -pron- know -pron- already have a copy of that on the disk for example perhaps -pron- correspond to some of the code of a program and -pron- already have that program store on the disk somewhere right so that be kind of demand page and in the next video let -pron- address the follow little brain teaser let -pron- suppose -pron- actually do"
  ],
  "2ce0c44c-c7e2-4bab-becf-4f3ab3af2d11": [
    "ok little puzzle for -pron- here be a function that just want to count the number of item in an array until -pron- discover a number that be great than one hundred ok so -pron- have get a sketch of an idea here -pron- can see that -pron- be go to be give an address and -pron- be give a hint to the compiler to say that at this address i expect to read or write an integer and this this code just assume that be give a valid address if -pron- give -pron- a null address -pron- be probably go to crash if -pron- address if i wanna race or -pron- do not have a number than great than a hundred then -pron- poor little code here do not know when to stop be just go to keep incremente -pron- be just go to keep look through memory until -pron- reason editor which be great than one hundred alright so let -pron- get start -pron- i see a typo that should be particle away so let -pron- write this in",
    "do i need -pron- -pron- have a function call say -pron- be go to call -pron- count ok and take point to here and right side but another int pointer ok so remember that the astrex as pop available declaration be a hint mean -pron- be talk about pointer rather than -pron- other meeting which be to hey follow the pointer right so here be the plan that let -pron- continue read at the pointer location and if that value be less than a hundred then what do i want to do increment -pron- pointer and go on again ok so style people may say yeah -pron- should put that in brace alright let -pron- do that ok let -pron- place clear like to say that the following",
    "now -pron- pointer to a place where -pron- look very great and the one hundred how can i figure out how far i go ok so perhaps i want to say something like where be this current location minus start and divide by the size of int right because -pron- be go to keep move right what do -pron- think about that be that correct give -pron- five second to have an opinion -pron- already go ok look this code remember or -pron- be work with pointer arithmetic and anytime -pron- ask to see compiler to do pointer arithmetic for -pron- whether -pron- be add or divide sorry adding or subtract the compiler go to make use of the type so this be why in line three when -pron- be add one to a little pointer say to -pron- i see that -pron- point be actually point image and i know that on this system and",
    "in add one actually -pron- be go to move the pointer forward by four byte -pron- would have move -pron- back by four byte if -pron- ask -pron- to subtract by one one of the case of subtract two pointer this be only valid when the pointer be actually the same kind of same type so in this case be actually not go to tell -pron- the difference in byte be go to tell -pron- the difference in term of the number of element between the two so i do not need to divide by the size of -pron- pointer type and so be this expression correct pointer minus start let -pron- imagine that the very first value be one hundred and one in which case pointer and start would be still actually look at the same piece of memory so that would be a value of zero and that be the actual value that -pron- 'd like in this case so in other word -pron- do not have an off by whatever in this case so all -pron- need to do be just subtract those two pointer and return ok what would happen if i pass in array with no value",
    "here -pron- just walk off the end of the rate would keep go where do -pron- go on forever probably not here be what would happen either but by the sheer luck would come across a bite a series of byte which represent a large enough integer value or -pron- little program here would walk into a memory address that be no long valid piece of memory to read -pron- would have expect that -pron- would have leave the exist memory segment and perhaps -pron- have enter no man 's land where there be no actual physical memory map to that address anymore at which point -pron- would get a segmentation fault ok the possibility other kind of fun thing here be that -pron- little code here do not know anything about the address that -pron- give -pron- perhaps -pron- be go to give at the start of -pron- away but -pron- do not have to -pron- could give -pron- any address which be a reasonable place to start look for perhaps -pron-"
  ],
  "2cfefc6a-33cd-4ed1-8b07-a9aacbed4aca": [
    "ok so welcome to the reader writer game show here be the game -pron- actually want to be able to have -pron- reader run concurrently that when -pron- be perform the read -pron- should have million or billion of people free able to access that datum but when -pron- actually want to do any writing when -pron- actually change the datum structure maybe -pron- be an entry inside a particular table maybe -pron- be a file then at that moment only -pron- get access to -pron- ok so anybody else get temporarily block last -pron- change -pron- ok so let -pron- have -pron- first to go here -pron- be here be -pron- first attempt -pron- be just go to use a standard mutex lock and then want to analyze this and decide if -pron- be any good so -pron- be go to have two mutex lock here -pron- be read law can write log and just for fun today let -pron- actually make these pointer so that i can create",
    "how much memory on the heap do i need the size of -pron- -pron- little type here and a reminder that yes these be variable and -pron- represent some memory sure but the actual object -pron- -pron- can think of -pron- like file handle that -pron- actually exist as part of the part of the kernel so that be why i need to call p thread mutex initiate please create an object for -pron- base on store a reference to that inside this memory structure so -pron- have get -pron- two lock now let -pron- see what happen right so as part of the read -pron- be go to call read lock ok so -pron- be just go to call p thread mutex lock and then afterwards petere mutex unlock key and then the right i first of all -pron- be go to get the right lock then -pron- be go to get the read lock and -pron- be go to do some writing so what do -pron- think about this be mutex lock sufficient to implement this right so take a moment to think about that and",
    "ok right so a preferred mutex lock let -pron- talk about positive thing first let -pron- do like positive code review here so the good news with this implementation be that only one writer at a time actually get to run ok that the only way -pron- can get through to the being an active writer be to first acquire these two mutex logs ok so that be good the bad news however be that reader be force to read the datum just one at a time if i have multiple thread call -pron- read here then only one of -pron- can acquire this this lock and the other get block ok so now i can not have a million people on use -pron- cash -pron- be go to be serialize so just one at a time get to",
    "not good but like i say the nice thing be that the implementation be write so far be that once the writer actually want to change -pron- -pron- be go to also acquire the read lock so that -pron- can prevent reader from actually run ok so so the data writer come in and acquire both these lock the reader get stuck ok so -pron- can at least be sure that -pron- do not read any invalid datum but the performance suck -pron- do not -pron- have not actually succeed yet so -pron- can test -pron- one -pron- do not win the reader writer puzzle even though -pron- get kind of close so let -pron- look at contestant to -pron- want to -pron- want to try to make -pron- so that now i can have multiple reader so here -pron- go -pron- be -pron- reader method say ok only",
    "into rp three condition wait or something but for now -pron- have just get this busy loop and will keep polling this variable until -pron- be false then -pron- will change this reading variable become an active reader to true and alta -pron- reading here so what be the writer do when -pron- want to write when -pron- want to change the datum structure -pron- will first see if there be anybody reading or anybody write if there be then do nothing but just go balance in a while loop again so -pron- be go to keep pull these value and i can only escape out of this while loop this infinite while loop want -pron- both false when that occur then i will raise this flag to say ok -pron- have get an active writer on the scene and now -pron- be go to do -pron- surgery",
    "-pron- writing to false ok search what do -pron- think about this and what be -pron- good about how to think about this and then -pron- will tell -pron- -pron- opinion ok great so what do -pron- decide this be contestant too though winner ok no -pron- have get several problem here -pron- have get several race condition so here be some example problem for example suppose writer appear at the same time so -pron- both would see that right now there be no reader and there be no writer so great -pron- be the only writer on the scene and -pron- would both set writing equal to true oh now -pron- have two writer inside the critical section and so -pron- be go to collect datum structure so -pron- can not do that -pron- fail to have just one active writer second there be there be",
    "at the same time and the reader say well be anybody right writing no there be not great i get to continue meanwhile the right the writer say be anybody meaning anybody write no great i get to continue to so because of that race condition because -pron- both check those condition at the same time now -pron- have a reader thinking that -pron- be ok to read and -pron- have in writer thinking ok two two right so the now -pron- can both read and write at the same time but now -pron- have get a reader that may need some invalid datum of might and may get corrupt as well so no that be not go to work for -pron- ok the other race condition and other concern as well which be let -pron- think about some meter come in ok so in -pron- go and -pron- be do -pron- reading that open file find the right part of the table that kind",
    "read default but hold on -pron- i would i still get other reader still perform the reading so this kind of simple balyan register of say yes -pron- be read or not be not sufficient what -pron- really want to do be actually keep track about the number of reader which actually do some meeting and only when that reading count go down to zero should -pron- allow writer to continue ok so hopefully these these two contestant though -pron- be clearly failure -pron- have actually give as a lot of insight into how -pron- can start to write a well version of this -pron- be go to need to keep track of the active number of reader and -pron- want to make sure the only one writer datum type can get into actually change -pron- and -pron- need to be careful about race condition between -pron- state fair verbal between",
    "checked be true -pron- need to continue to be true whilst be actually read or write ok so -pron- get a lot of do so now let -pron- start look at -pron- third contestant ok so now what do -pron- think about this now -pron- have get some lock go on -pron- have get -pron- mutex lock ok -pron- have get condition weight ok so now -pron- be go to lock a mutex ok before i do anything ok so now -pron- testing here will will remain true so if i say whilst anybody be write then block -pron- know that that be go to be true until the datum -pron- will unlock -pron- code because all of -pron- code use the same mutex lock ok ok so lock mutex and",
    "only way i can get out of that condition be when there be no one actually write ok so if -pron- can escape then i be go to increment by read count so this route now represent the number of active reader then -pron- do -pron- reading after that -pron- decrement the number of reader let -pron- call condition signal will talk about that a little bit but -pron- be go to wake up one reader or one writer maybe -pron- want to lose broadcast will see and then will release the mutex lock ok let -pron- see what the writer do ok so on the writing side let -pron- acquire the mutex ok and then will check to see if anybody else be currently read or write so if there be anybody touch the patient right now for reading or writing then -pron- want to block so -pron- be go to block inside this condition wait alright",
    "fantastic ok so now -pron- be go to say ok right on the scene there be now an active right there so -pron- change the datum structure after that -pron- will document be active writer and then -pron- will wake someone up ok so how can -pron- improve this like there be several thing -pron- want to do first of all after i finish write there could be multiple reader so -pron- condition signal be sufficient here no -pron- probably want to use broadcast secondly do -pron- notice that -pron- actually hold onto the condition variable for an awfully long time and in fact -pron- can stop that right let -pron- go for red key right and in fact -pron- do not actually allow multiple reader because once the first reader have acquire the lock -pron- only release -pron- after -pron- exit so what -pron- actually should do here be unlock the mutex lock -pron- only need -pron- whilst -pron- be actually make assertion and change -pron-",
    "-pron- can open a file and search that file go to a big dictionary that can be that can be do without any without hold onto the mutex lock so let -pron- all lock the mutex here ok then -pron- perform the relatively slow read and then -pron- will just need the mutex lock again for quick moment whilst -pron- update -pron- reading count ok so -pron- just need -pron- for a few nanosecond ok right so and what about the writing side ok so -pron- will unlock -pron- though -pron- could argue that that be unnecessary because -pron- do not want anyone to play anyway but the reason i do that be because i would like -pron- new reader that appear or any new writer to appear -pron- 'd actually like -pron- to get stick inside condition wait ok that",
    "period of time will work but -pron- be not good practice ok partly because -pron- may spin the cpu for a little while which be in -pron- case unnecessary -pron- know -pron- want that friend to go to sleep -pron- know -pron- want to actually be block inside p three condition wait ok so now -pron- have unlock the mutex right so -pron- only go to hold the mutex whilst -pron- be fill in checking be variable so get these little bit of code here but do -pron- have now work code alright so now -pron- can see that -pron- writer if there be an active writer that be already change value of writing to one then any future writer will see that and get stick similarly if -pron- have get a reader there be incremente the count",
    "will also notice that an get stick inside p three condition wait and what about the reader ok so on the reader if -pron- have get any currently active writer then write variable will be non zero and so -pron- will get stick ok right so the the i want to imagine this scenario which often kind of confuse people a little bit be imagine -pron- have get a whole load of reader already read ok so -pron- have get like a hundred reader say in here and imagine now -pron- introduce a writer be time to update so what happen ok so the new writer come in and say oh look someone currently read this be a non zero value so -pron- will sleep inside p three condition wait ok so now",
    "that start to exit out of here will be decrease the value of read and call p three condition signal so that be a little unnecessary -pron- have actually only need to call peter condition signal when -pron- -pron- know there be an active so -pron- know there be a writer waiting and when -pron- notice that -pron- have take the reading countdown to zero so ok this be kind of overkill be constantly call kick signal whereas in fact -pron- may not actually be anybody inside that condition variable ok so but eventually the last reader 's exit exit out of here which point after leave unlock the mutex then on this side the writer will wake up reacquire the",
    "and the value of writing be zero so now finally -pron- get to continue so if -pron- make those change -pron- have get a pretty good version of the reader writer but -pron- suffer from one little problem imagine -pron- website get really really popular and so there be never a point where the number of reader actually go to zero there be always know reader arrive always know reader come in so even though -pron- have get reader come in and exit -pron- actual reading count never go to zero what do i have here this be a wonderful problem -pron- be understand by the south side of green street -pron- be call the starve writer problem and as -pron- can see -pron- right -pron- poor little writer even though -pron- arrive at nine o'clock in the morning here never get a chance to"
  ],
  "2d49256b-843d-4c27-969c-5a4a8ef761ed": [
    "hi welcome to lecture twenty four -pron- be go to start with a quick code review let -pron- see look at this attempt wait a fix sized ring buffer and -pron- will see if -pron- can figure out how -pron- may go wrong ok so some of the thing that -pron- want to ask be be deadlock possible in other word could get stick so that be never able to continue be underflow possible in other word could -pron- be that -pron- attempt to write so attempt to read some datum that be not actually inside the ring buffer so will just be read back some garbage information or perhaps overflow as possible which mean that -pron- be able to put more datum into -pron- buffer then -pron- can actually hold so presumably -pron- be go to corrupt something possibly value that -pron- have not yet write out so what do -pron- get here -pron- have two counting semaphore and will see the s one be initialize to two hundred and fifty six so this smell to -pron- like"
  ],
  "2e2bb4d7-75e2-4780-90b7-77bbe8fd3c70": [
    "hi , so let -pron- address a point of confusion and start talk about how -pron- can write and read thing inside the c library , but also how -pron- work underneath . so let -pron- change to laptop mode . ok , great . so here be the big idea that , at the heart of -pron- all , if -pron- want to stream some information out , and -pron- do not matter whether -pron- be to a pipe or network socket or file , -pron- be go to use the low level system call call read and write . and -pron- work with file descriptor . and initially , -pron- get actually three file descriptor for free : one for input , one for output , and one for an output error stream as well . and -pron- can make more by open file [ use ? ] other object , but that be the low level interface . and inside cs 241 then , -pron- be actually go to use both of these . -pron- be go to work with this low level interface . but -pron- will also see how the c library wrap this up into something more useful . for example and",
    "-pron- want to write out some format information like number which only have a limited number of decimal point , or -pron- want to read in certain word and tokenize -pron- . so in this course , actually , -pron- be go to be play with both , but -pron- be important to realize whether -pron- be at the c library level , or whether -pron- be play with the low form , these read and write call . and what be actually \" really cool about these , this get \" \" low level , \" \" there \" be the fact that -pron- can be use with different kind of object . so these file descriptor that -pron- have , -pron- be just little integer , little non negative integer , -pron- have mention three of -pron- already , zero , one , and two , for the input , output , and error output , but actually -pron- be go to see these for other thing as well . so , in addition to file , -pron- can actually send thing to pipe as well , and pipe",
    "down a pipe , and -pron- can stream -pron- through -pron- while another process can start read those byte , and -pron- will come out in the same order that -pron- send -pron- . and then then -pron- have get fun stuff will see at the end of this course , which be socket . and socket be the way that -pron- can set up -pron- service . so this be how -pron- can create , say , a new database or new web . this be kind of a fundamental part of -pron- internet be how -pron- can get two machine to kind of talk to each other . so behind that all be just a simple idea of -pron- process have these little file descriptor . that be when -pron- want to talk about a particular kernel object that want to read or write to . so anytime -pron- see read or write , -pron- know that -pron- be work with a little file descriptor . but above that , -pron- can now talk about what do the c library give -pron- ? and the c library be go to make -pron- world a little bit easy when -pron- want to work with formatted information and when -pron- want to ensure good performance as well . because the c library , when -pron- actually say ,",
    "go to immediately call write . -pron- be not immediately go to call the system . instead , for performance , -pron- may choose to buffer all of that content inside the memory until the day that -pron- decide to flush -pron- out , until the day -pron- decide to send -pron- . so let -pron- turn -pron- attention then to the kind of c library version of the world where , ok , scroll down here , where the c library have a file object and , by default , -pron- get three of these for free . there -pron- go . -pron- have standard in ( stdin ) , standard out ( stdout ) , and standard error ( stderr ) . and -pron- can use these , -pron- can use standard out and standard error , for example , with fprintf . so all those time -pron- been write printf , that be \" actually just equivalent to say , \" \" hey , fprintf , \"",
    "\" to standard out . right , so if tomorrow -pron- say , \" \" no more printf , \" \" \" \" -pron- today could say , \" \" oh , no problem ! -pron- be go to use \" fprintf instead , and -pron- be go to send -pron- output to \" standard out . \" \" what be these object , by the way ? -pron- \" be just object which be of type : file pointer . and so tomorrow , if -pron- want , -pron- could make a new file object by call fopen . and what be inside a file pointer ? what be this struct , what be this thing ? and the answer be do not ask . -pron- be actually an opaque type where -pron- do not get to peer inside -pron- . instead , -pron- be detail be leave for the internal of thing like fprintf and fopen , so the implementation of those function will use what be inside that datum structure . but -pron- personally do not actually kind of peer inside -pron- . -pron- will talk in the future about how -pron- may implement"
  ],
  "305a1d6f-7dfb-4fe9-8271-64421be8f294": [
    "hi so -pron- start this little lecture with the idea that every time -pron- want to have more memory every time -pron- call malac -pron- could implement that just by go back to the kernel to say hey kernal please raise the watermark will call sbrk would just get some more ram that way but -pron- can do well than that -pron- need a heap allocator that can keep track of block of memory that have be free so that in future allocation -pron- can reuse those piece of memory and so how can -pron- do this efficiently actually this be a nontrivial problem actually this be an np hard problem because -pron- need to try to find the good allocation of a sequence of of allocation and -pron- be not clairvoyant either so -pron- can not actually do the perfect possible sedative or sequence of allocation so instead -pron- need an algorithm to choose where to place the next malloc request that allocation request that be fast and house reasonably good performance",
    "-pron- end up with a heap where all the spare space be actually in very tiny short block then that mean that i can no longer allocate very large request and many request that what i have to do for many request be just keep walk through -pron- data of representation of all these entry and none of -pron- will be any good because -pron- be all too small so -pron- performance will be awful -pron- will take a long time to find a good place for the next allocation so let -pron- get start let -pron- have a look at this -pron- have get a little simulation that -pron- be go to use here paper base simulation and -pron- will use this simulation to understand a little more about three possible placement strategy and all user as well as a way to talk about how these placement strategy work go to look at good fit bad fit and first fit allocation",
    "-pron- idea of heap just use a simple link list and each link each node in -pron- link list datum structure just represent a segment of memory that be either currently in use mean -pron- be be allocate or be available be free so -pron- will keep -pron- link list in sorted order and everytime malloc be call -pron- be go to actually walk through that link list look for place that -pron- can use to satisfy that request for some contiguous memory right when -pron- find a piece of memory that third be large enough and free -pron- be actually go to do two thing be actually go to obviously return that address back to the caller so that -pron- have -pron- memory that -pron- request but the piece of memory that -pron- find be probably large than what be request which mean there be go to be some unused space at the",
    "for that unused part so that future call to malloc can potentially make use of that spare space similarly when free be call -pron- be go to do two thing -pron- want to mark that entry in -pron- link list be now available for future allocation but -pron- could be that -pron- link list actually have two neighboring entry which be both free so at this point let -pron- clean up -pron- link list so that rather than have two separate entry -pron- can represent that as just a single entry of a much large space and similarly -pron- could i actually think about the fact that there may be some spam space behind the current entry as well but -pron- will not go into those detail today -pron- be not go to implement a full piece of work c code here instead -pron- can think about conceptually about how these placement"
  ],
  "31222488-6252-419c-9c31-9ff072cffeee": [
    "ok let -pron- review this one what do -pron- think the follow code will print ok so how can -pron- analyze this right so -pron- have get a pizza -pron- create and -pron- be store somewhere the thread ids and -pron- be go to say ok i want a thread that be go to start function a and another thread start function b and -pron- be go to pass a void pointer the address of the string literal so the address of the capital a and address of the capital x to each one right so what will function b do function b then get this pointer and so -pron- be give -pron- the address of xyz so when this run and -pron- be not quite sure when -pron- will run -pron- will print out xyz now what about function a so functionally when -pron- run let -pron- see be give the address of abc ok but -pron- do not do anything instead -pron- just simply exit this thread and -pron- return an address so -pron- take the",
    "in memory abc and a zero bite if -pron- be ok and -pron- take that caster character add one in other word -pron- just calculate a pointer that now point to the b ok and -pron- return that so if and when these two thread run -pron- know that the first first one return a pointer to bc string and the second one print out xyz right what be the rest of the code to write so equal p thread join on thread a and grab the result and so in store that in there area code result ok so what what be go to be put inside this result so this line be go to wait be go to wait until -pron- be able to join p thread so that mean -pron- wait until functionary have finish at which point -pron- set this result variable to be a pointer and -pron- be",
    "-pron- print out ok so this will print bc add a new line ok right so now -pron- hopefully -pron- can conclude what this code be go to print right so if -pron- say -pron- be go to print bc or the new line then -pron- 'd be correct if -pron- say -pron- be go to print bc in a new line and xyz -pron- 'd be correct if -pron- say be go to print xyz with a new line and bc -pron- 'd be correct yes so what code be actually indeterminate fethard create make no promise about when these thread now go to stop maybe in a microsecond maybe in a millisecond time there be a very real chance that the first thread thread a could could start up exit and main thread could join on that -pron- could print out",
    "be particularly true on sale really busy system or a system that be only get one cpu core be poor threadbear -pron- have not have a cpu schedule yet and so -pron- main thread be do before -pron- -pron- have a chance to start up ok right so all those those as possible if -pron- modify -pron- code so that -pron- include p three exit on the main thread then -pron- know that that mean that because -pron- be never return from maine now -pron- program be go to run until both those thread finish so now -pron- expect both the bc to be print and the xyz to be print though -pron- can not actually say definitively what order these two thing can print -pron- can make a guess as to which one more likely but -pron- have not actually make -pron- program fully determinant in term of -pron- out but -pron- have not enforce the idea that bc must"
  ],
  "31a84e40-90fe-4ea7-9af5-cfc0d0ffebe8": [
    "right file globbe so what be fargo bing far globbe be the idea that on the shell i can type thing like cyrus asterix dot text and that will be expand to all match file inside the current directory that meet this pattern or i could do something like finally all file that begin with f for example the astrex will be expand so who do this the answer be to shell so -pron- only see this when -pron- be run -pron- inside bash for rochelle -pron- will not see this if -pron- use aspect inside -pron- c program or python etc so part of the shell but the how can -pron- prevent -pron- well -pron- could either escape the asterisk so backslash or -pron- can put -pron- inside single quote for example high",
    "out of here right so let -pron- suppose that someone have delete ls that -pron- remove a whole lot of thing all be so let -pron- suppose that someone have delete slash bin ls oh dear so how would -pron- still list the content of -pron- current directory well -pron- could say echo star and that would allow -pron- to see all of the current file and typically echo be actually build into the shell so even if there be no echo command -pron- still stand a chance of run this this kind of trick be once use to rescue a satellite where someone have accidentally manage to delete most of the operating system from the satellite but -pron- still have a",
    "satellite do not become a float piece of dead metal up in the sky right so -pron- do not file globbe i use -pron- sometimes with bash for loop for example i could say thing like for i in and then i could say please find -pron- all match file so i do not have to buy quick one quick to quick three ok so let -pron- imagine will do this case semi colon do let -pron- say dollar i do i forget something right there -pron- go -pron- often more than have to specifically type all this all those out let -pron- just look for some matching pattern ok so now the next stage may be before i execute man command of this tag -pron- be",
    "go to do and finally if -pron- be actually truly happy with what -pron- be go to do i would delete the echo so now -pron- be delete those three file ok right let -pron- fargo and oh yes so finally just another kind of quick fun thing -pron- can do with slash proc ok so let -pron- just go and look to see at sea the total amount of memory and other information -pron- have get ok so -pron- can see i can find out all sort of cool thing about -pron- system like how many megabyte -pron- have get how big swap area be so i can page out memory how much of -pron- be be use this system have quite a well memory ok that be good i can look to see how fast -pron- cpus be and when -pron- linux system start up -pron- have a simple timing loop simple",
    "use this to try to estimate how fast how many million of operation per second -pron- cpu could do but this be a relatively bogus way of measure cpu speed so therefore be call bogomip ok so this actually information be store by each cpu so -pron- be go to have a look at this ok so if i do ok like cat slash procs cpu info give whole loada stuff like the fact that i think -pron- have buy a sixty four bit machine but in fact -pron- actual wire come out of -pron- cpu there be only actually forty addressable wire come out of -pron- cpu so -pron- be a lie -pron- be a cheat so -pron- do this of course for energy and for space and for cost reason so -pron- pretend to be a sixty four but i do not truly have a sixty four bit addressable machine here ok i can find out what operation distinct",
    "the cache but today -pron- just want to see how do -pron- do -pron- start up and -pron- will see that -pron- have actually get four cpus inside this machine and each of -pron- claim to have about four billion instruction per second at least bogost instruction per second ok so that be bogomip and finally let -pron- how -pron- could have a look at a particular program let -pron- go into cd proc self and see if -pron- can workout what -pron- program be ok so what be cd proc self maybe -pron- should have a convertible hint here so let -pron- go and look at the clock self and -pron- will see actually -pron- be a number -pron- happen to be process fifteen oh sixty one so basically now -pron- program be talk about -pron- what do -pron- have here hold other thing ok so let -pron- find out what the memory map look like",
    "right so this should give -pron- give -pron- away right so much tell -pron- about the actual memory mapping of a process which i think be pretty cool ok so this process currently get -pron- can see -pron- be get a whole load of library which be map into different part of the address space let -pron- keep scroll backwards here there be a lot of mapping kate look there -pron- go great then -pron- may notice that -pron- have get some address space over here which be map to the file slash bin slash bash yes that be right -pron- have get different part of bash map of the file bin bash mapped and the difference here be whether -pron- be rewritable etc so this one be actually executable part this be just a read only"
  ],
  "32897e63-cb36-4269-8874-4059caa719c9": [
    "hi welcome so let -pron- figure out how to make -pron- version of calloc    okay so off -pron- go now first of all i need to figure out how many byte to actually actually can -pron- need -pron- here so -pron- could do the multiplication right so the total number of bytes be go go to be those two figure multiply together now in the previous video i mention the correct version of catalog actually check for overflow so how -pron- would do that well -pron- be actually not that easy so -pron- have get a couple of choice i could open -pron- favorite bit twiddling book how hacker delight and check to see how -pron- get there quickly test for overflow when multiply two number together -pron- could do some kind of simple type size check so if -pron- have a kind of max size -pron- could divide by say count and check to see weather -pron- have get a value that be go to work with",
    "than -pron- pointer for example if i have some kind of one hundred and twenty eight bit integer that be fast on -pron- machine i would implement -pron- like use that and that in practice be how modern compiler will use -pron- if this modern cpu support an even large type that be typically the fast way to check to see if the multiplication can fit inside -pron- sixty four bit of a pointer so -pron- will skim over that detail out an implementation detail and instead think about like what do i need to do next so -pron- work out a total of the byte -pron- want and now i just need to get -pron- ok rather than wait a full function -pron- be sbrk except for guess what -pron- have already get -pron- lock let -pron- defer this request to malloc so hey -pron- lock please give -pron- that many byte ok be -pron- do no -pron- need to actually set all those byte to zero but first let -pron- just check to see if -pron- log actually",
    "any byte there do not pass go do not collect two hundred dollar instead here immediately return so here be -pron- kind of early failure -pron- be do right and let -pron- write some some nice code that -pron- will put some brace around that so what do -pron- get next -pron- have get the idea to set all these bike to zero so i want to write something like ok so let -pron- go through each of these byte that be not user int let -pron- have useful type a size t and well i be less that ok now in this kind of code let -pron- make sure -pron- choose the right variable -pron- have get a choice of three count size or total so let -pron- slow down and make sure -pron- still at one k and now i will need to set all of those bike to zero oh ok so for this i would need to say a character pointer right so i could cast -pron- result",
    "begin of that bite and now -pron- 'd use i and set that equal to zero hold on new moment -pron- may say well -pron- should not i use an issue point out that way i can set more bite well yeah maybe but that be kind of tricky now because now every time -pron- advance by -pron- be go to advance by four byte so -pron- actually end up overwrite way too much memory instead of write -pron- to say a thousand byte would have write to say four thousand byte so i would have completely write to memory that i should not have have access to ok so that be not a good idea and in fact -pron- should probably do well than this if i just want to zero out some memory surely there be a way to do this which be fast than -pron- write a full loop and in fact yes there be there be something call memset an memset 's implementation actually will make use of cpu instruction which can do this and much more quickly than any code that -pron- could write",
    "to say this be the signature of memset -pron- take a pointer the byte value that would like to set and the number of bytes ok so let -pron- do that right so ok memset -pron- want to set the value zero into each byte and how many byte -pron- have total often so by the way one little error that -pron- can run into with memset be -pron- can actually put these delong order so for example if i if i want to set so one hundred byte with zero that work great but suppose i accidentally put one hundred and zero that one -pron- round so now -pron- be say right the value of one hundred into zero byte in other word that would do nothing so that would be a failure whoop so another example of where be often great to kind of write code slowly use the manpage check to make",
    "those byte and now finally will return result ok so that be -pron- implementation of of calc be -pron- go to be as fast as the real of implementation of calc probably not and also -pron- the real version can make use of some secret fact so for example if -pron- ask for some more memory from the system that be go to actually be zero out because -pron- know page -pron- get from the system must must be clear so -pron- so -pron- do not leak any information about old about information from other process that be previously use that piece of ram so maybe -pron- could use that to write -pron- a high performance version of calloc but anyway -pron- have get that so now the next video let -pron-"
  ],
  "34a28852-0928-4275-9d51-ae6393b84ed4": [
    "hi so livelock be very similar to deadlock but -pron- be not deadlock ok so that be the first important point be that livelock be not deadlock ok so what be the quality of deadlock and how do -pron- recognize -pron- right so an example of debt of livelock be suppose -pron- and i agree to come into a room exactly the same time let -pron- say every hour and if -pron- can grab the piece of paper and a pencil then -pron- can continue unfortunately the pencil be close to -pron- and the paper be close to -pron- so -pron- always end in a stalemate will put down will leave will agree to have a rematch in an hour time ok so if -pron- continuously arrive at the same time an attempt to make any progress -pron- never"
  ],
  "34b3522d-04fe-4f64-bfd8-427941a01fb5": [
    "ok right just a little bit of nomenclature here let -pron- talk about a context switch what be a context switch so technically a context switch be when let -pron- do -pron- down here when -pron- say thank -pron- very much cpu i know -pron- be work on say one particular process go to prepare so that now the cpu can work on a different process -pron- be not correct to describe a context switch to when switch from one thread to a different thread of the same process ok so -pron- can not say right -pron- be in thread ten and -pron- be go to say thread eleven of the same process that be not a context switch however many people erroneously use the word context switch to describe those kind of switch when -pron- be actually switch from one thread to another fit inside the same process so -pron- should be different process right so let -pron- think about then what actually need to happen",
    "fairly simple model of cpu etc navarre of -pron- kernel a real context which will have many additional more step so so what be -pron- go to be able to do be to explain why context switch be expensive in other word why there be a significant overhead to move from one process to another right so what be the kind of some of the thing that -pron- need to two right so first of all -pron- have get the virtual memory address map in other word be page table these only make sense for a particular process that a particular memory inside a particular process be go to be mapped or not to actual physical piece of ram and so the same address inside a different physical process could be map in a completely different fashion so -pron- need to change the process",
    "the second thing -pron- need to do be that -pron- keep a lot of accounting information so let -pron- update how much time be processor have actually be work on process one because at some point be go to exhaust goodwill be go to exhaust the amount of time -pron- want -pron- to actually have run on run a particular cpu on a particular process and so -pron- well keep track of that because at some point -pron- may want to say right now -pron- be time to not go back to process one plus two pet want to process three instead ok so -pron- get to update this accounting information about just exactly how much cpu time where -pron- be spend on a particular process ok so be -pron- do no absolutely not here be something which be perhaps surprising which be do -pron- remember the tlb ok what be the purpose",
    "i know that i want to read a particular memory ok let -pron- read this piece of memory here then i can bypass all of the page table vlookup if -pron- have read the same piece of memory or a nearby piece of memory in the very near future so if i swap now from process one process two i have lose all that information about the tlb in other word if i now inside process two then in order to read or write even a single bite of main memory -pron- have get to follow the page table and remember page table will typically for -pron- process down slow -pron- down say two or three time compare to just begin to access memory immediately so tlb here make naively -pron- program run say two three time slow simply",
    "order to access a piece of memory ok do not sound too good to -pron- right eh quick comment about how -pron- teach this or how -pron- be disgust interview and what happen in real life right so the kind of the model that be often discuss in term of video and exam etc be the assumption that when -pron- change one process to another process -pron- be just simply go to flush the entire tlb because all the information in there be no long relevant to the mapping for the new process ok that be somewhat true -pron- be in many process except for the late intel processor where -pron- actually play a cute trick which be where hey -pron- know what will probably be context switching back to this process so let -pron- stash the tlb indice",
    "about -pron- until the day that -pron- decide to context switch back to this very same process ok so this be why context switch be expensive -pron- have a lot to do and the typical -pron- pay for context switch in two different way one be the actual setting up of all the different register for everything from get the program counter already to say copy out the tlb and other information the second be actually to do with the tv -pron- so there be can have no good tlb information so remember the tlb -pron- be very purpose be to avoid all of those look up -pron- need to do in order to convert a virtual address to a physical address so all conversion from fit virtual"
  ],
  "34f5f15f-13e2-472c-a71d-7653231e61e9": [
    "ok right so -pron- have get this object that -pron- want to create that allow -pron- to put a block on other thread so how be -pron- go to work ok so here -pron- be i will do -pron- over here right so -pron- see so already the idea i could make these type thread thing which represent a running thread of execution now what else do posix give -pron- when i say posix this be posix standard part of unix be the standard which write all the code ok so -pron- be go to make one of these mutex object let -pron- call -pron- say lock and what can i do with -pron- ok so a lot do not support that many operation -pron- can lock -pron- and unlock -pron- so let -pron- have a look at that code and big important idea be before -pron- be out allow to lock and unlock the mutex i have to initialize -pron- so there be a couple of",
    "mutex iniciat and pass in a lock and one of the great thing about pizza -pron- be implementation of mutex lock be that -pron- can actually pass in a few attribute like -pron- can set -pron- up to debug -pron- can actually create recursive lock but -pron- be go to anyway -pron- be go to stick with this vanilla log today again this be kind of one of the example where where the posix implementation the positive definition of mutex logs go a little bit far than what the new c standard do ok so i want to initialize -pron- lock and -pron- be not go to pass in any special attribute today right so that be one way of do -pron- another way be to use a special constant so -pron- be possible to say let -pron- make static variable here do a key right so i just want to clear that -pron- be not -pron- be not actually on the on the stack -pron- still some global variable here",
    "the other way of do -pron- and that be a magic constant so that in the future when i call the loc method on -pron- mutex -pron- will automatically initialize at that point so -pron- can choose one of these but do not choose both particular mutex right so how can i find out more about these mutex lock well guess what the -pron- have get a lot of information inside -pron- manual for example i could all this stuff about the p thread and what i can do in a detached state which i kind of skip over condition variable so let -pron- actually go and have a look now at but -pron- care about which be the p thread mutex lock here -pron- go and -pron- will see -pron- do not take that many parameter this be really easy -pron- just take the address or mutex",
    "the mutex become available ok so let -pron- write this out as an example so -pron- have get -pron- pthread mutex lock here and i pass in the address of -pron- little object here call lock right and then i go off and do -pron- critical section stuff so do critical section stuff here do critical section stuff like eg update the data structure or read from the data structure but i can be sure that if all of -pron- code follow this pattern so after this i call p thread mutex unlock right and then here be the address of -pron- mutex i can be clear that that that only one thread at a time can be access in the data structure so that sound like",
    "in real program ninety nine percent of the time -pron- thread be work on something else -pron- be only when -pron- be actually get a result or once more datum that would actually go to this share datum structure ok so that be all basic pattern this be how -pron- bring order to -pron- madness all the example -pron- have see so far would have help if -pron- have this ability to pause or threat to implement synchronization now be a couple of limitation with rp thread mutex be which -pron- will be able to relax when -pron- look at other synchronization primitive but here be the big one -pron- have to write these thing in pair -pron- have to put the lock and unlock together on the same thread and when -pron- finish -pron- should clean up so -pron- will call p thread mutex destroy right and here be the address",
    "the actual mutex -pron- more be a bit like a file handle so when -pron- have do thing like f open to open a file handle or passive call open the kind of posix the low level version to open a file descriptor the thing -pron- get back word maybe just a little integer or one of these see object right so file f open this be not actual father spain store on disk -pron- be just the variable and -pron- be the same idea with this this mutex lock -pron- represent a mutex but -pron- be not the attribute x -pron- ok see what else do -pron- want to say right so -pron- call peter mutex lock and -pron- get to continue great what happen if another thread now call peter mutex lock on the same object on the same mutex",
    "-pron- have to wait -pron- be call preferred mutex lock be block so right so -pron- know for sure that this coal here either continue if no one else have the log right now and if -pron- continue then -pron- have acquire that look -pron- get to play ball right the rock be yours otherwise -pron- have to wait and at this point -pron- may block mean -pron- poor cpu be not allow to pass go and not allow to execute a single more instruction of -pron- code -pron- be stick inside here wait so great now what happen if -pron- have get ten thread or pile together all call petere mutex log at exactly the same nanosecond what this mutex log guarantee be be that one of -pron- will win",
    "continue the other nine or however many -pron- be day or block -pron- have to wait at some point in the future -pron- release the lock -pron- -pron- be no long -pron- and out of those nine thread that be call mutex look one of -pron- be go to win the other will remain block ok so -pron- guarantee -pron- that there be only one thread at a time that can acquire the lock so only zero thread be one third of the time now the piece that mutex lock do not do anything special other than that -pron- do not bless -pron- code in the middle -pron- do not declare to the compiler that something wonderful be about to happen no -pron- be basic pricing mechanism be very simple -pron- either block or allow -pron- to continue if no one else have acquire that look and only one thread"
  ],
  "3645730a-4aa1-43d8-be7d-16db4e0c5df3": [
    "hi so what do -pron- make of this let -pron- see if -pron- can spot some error here okay , right so what do -pron- get so -pron- be take a pointer to a pointer okay right so that sound like -pron- be go to be change not result but what result actually point too and here be -pron- input this message which be a pointer to some character in other word be promise not to change the string there wait see what this code do then so -pron- have get a little position variable int and then -pron- be use -pron- see libra function code be digit and -pron- be go to pull out one character timeform the message kasel read from the current position and determine if -pron- be a simple numerical digit or not and in fact the libra have a lot of these little useful function here which work either with a single character or whole c stre so whilst -pron- be a digit or position be less than the length of the string keep go well -pron- actually want to terminate if either of these condition surf fail so -pron- be go to change",
    "to stroll in i know that i have actually already reach an all by -pron- so -pron- be ok to pass in a zero into -pron- -pron- be not pass a pointer but i may have actually write this code with these to the other way around so let -pron- -pron- then -pron- know when -pron- exit that out of the loop then i find the first non digit in other word i can say for sure that message at pause be the first character that be not a digit -pron- may be null byte -pron- may be letter a may be a space etc but i guarantee -pron- will not be zero one two or three -pron- may be the very first part",
    "ok so then what do -pron- do right now -pron- be change the the value that result be point to so in other word if -pron- give -pron- the address of -pron- variable -pron- be go to change the content of -pron- variable to point to something else this be what i want to make -pron- variable look at i want -pron- available to now look at some heat memory and -pron- be allocate this number of byte i think the intention here be to try to put a c string in there let -pron- see how well -pron- do so -pron- man copy into this be not right right now -pron- be try to copy -pron- into where -pron- variable be if that be on the stack -pron- be just yeah -pron- be go to actually start over writing directly over -pron- variable way in fact what i want to do be -pron- variable suppose to hold a pointer so i actually want to change there -pron- go -pron- variable the thing that -pron- variable point",
    "use the beginning of the message and here be a number of character well do -pron- put these in the right order in any way to truly check that be to use demand page and also notice that -pron- be use mem copy not stroke copies and mem copy behave in a very similar way -pron- give a target and a source but now -pron- have to say exactly how many byte and do -pron- copy do -pron- actually create a c string no -pron- do not because -pron- copy the digit but -pron- never terminate -pron- so -pron- should remember to before return if -pron- want to see string -pron- should remember to set that equal to zero so result pause -pron- well equal the super bite but if -pron- do that now -pron- better check that -pron- have actually allocate enough memory and so if -pron- have a little bit of thought will realize that the memory that -pron- should have request be actually go to be pause plus one ok so great now -pron- have get a function to ashley find the digit at the beginning"
  ],
  "367502e6-86bd-4b7c-8b0f-a6d09829fe75": [
    "hi so let -pron- talk about process process be a fundamental unit of computation when -pron- come to the kernel and how -pron- think about thing -pron- need to do for user log into the system so a process be a kind of base container for user when -pron- want to do anything and any time that -pron- start program -pron- be actually create a process so for example -pron- may have a process compilation process and i may have a compilation process -pron- both actually refer to the same program perhaps gcc c lang or some other compiler but -pron- process be independent of -pron- process and there be many resource which be provide to a process in a secure manner so for example -pron- can not easily see the file that i have open and change -pron- unless -pron- -pron- sell -pron- actually open those file and -pron- may or may not have access to -pron- another important one be memory so when -pron- create",
    "of that ram that process can only read or can only execute or can -pron- do right or part of that memory space which do not do not belong to any room at all and these process container then provide a strong piece of security to -pron- linux system if -pron- process have a bug -pron- a bug in -pron- and crash -pron- hopefully -pron- will not bring down the entire system hopefully -pron- process will not be able to read or write directly into the memory of -pron- process will talk about exception to that world later on but this idea of a process be the kind of secure container that look linux provide be a really really important concept and -pron- be go to see this especially -pron- start talk about the memory of a process and what virtual memory can give -pron- so great -pron- can talk conceptive process but how about -pron- actually create one and this be where the",
    "so how can i create a process here be the big news -pron- be go to look at a system group i do not want to know i want ok -pron- be go to use assistant call call fork and fork do not work the way that -pron- may expect when -pron- call fork the process that cause -pron- be clone so that be right -pron- be not call maine again -pron- be not run from disk instead -pron- be say hey colonel look at -pron- current process give -pron- a complete copy of -pron- that be right the whole stack all of the heap memory all of the process all of the constant that -pron- have inside memory -pron- be go to copy all of that into a completely new independent process the new process",
    "go to be call the pat and from that moment on so -pron- make look backward and say hey look at -pron- variable hey look at -pron- open file look at -pron- memory from that point on -pron- be independent process so if the parent start change -pron- variable that child be not go to see that be a separate process just like if -pron- have a compiler and i have a compiler run -pron- independent process with -pron- own variable in -pron- own heat space and -pron- own stack space -pron- have separate -pron- fork into two different happy independent process well -pron- great let -pron- actually have a play with this let -pron- actually kind of try to fork and create some new process be ok so this be just a very quick demo about this -pron- be go to see a lot more about fork in the future right so i need a little program here ok right so here be -pron- starting point -pron- have get uni standard because -pron- be go to be call fork so let -pron- for example have some stack memory",
    "that that be say and -pron- know what -pron- be not go to even tell -pron- how many argument that this function have right so -pron- have main and -pron- have a little stack variable inside -pron- here be -pron- variable say ten i could make some heap memory as well by call malloc have some global variable as well etc but that be just enough for today right now -pron- be time to clone -pron- process so -pron- be go to call fork but just keep -pron- on -pron- toe i think be fun today to call fork handful of time let -pron- call -pron- three time and -pron- question to -pron- be what be go to happen here to make -pron- real will get each of -pron- running process to print something so will say -pron- variable be percent d and -pron- be store at like upset be ok so i want to print out the content of -pron- variable but also and i want to know -pron-",
    "that will do be let -pron- add a newline ok right so one of the thing could happen what be this go to print how much be -pron- go to print and let -pron- see if -pron- be right so will compile this and off -pron- go so here -pron- go let -pron- compile -pron- ok be -pron- a really right three two one ok -pron- print out a lot of information in fact that print out one two three four five note there be more there be one here there be six seven eight -pron- actually print be eight line worth go on -pron- start with one process but then -pron- call fork and at that moment -pron- process be clone into two now i have two completely happy independent process run each of those process then call fork independently and so the operating system say fine ok -pron- could",
    "-pron- as well now -pron- have get four process so -pron- could sketch this out in time that be a little drawing tool here ok so i have ok i have a so i have one process run and -pron- be go to have -pron- time axis go to the right here and then -pron- call fork so at this moment -pron- call fork ok that original process will return from fork so -pron- be just go to keep keep go on in time and eventually will print something else to say hey be valuable but operating system say great i will clone -pron- and make a new process so a few millisecond later brand new process have appear on off -pron- go ok and eventually this process be go to continue and print something out",
    "go to do so the first one call fork and -pron- be go to be turn from that and continue so actually at a moment -pron- be go to call fork -pron- so let -pron- say ten millisecond later for example -pron- call fork ok be go to be turn from therefore can continue of course but as a result of that fork -pron- clone this process so in a few millisecond be go to have a brand new process be that all this happening no remember -pron- start a child that child be also go to be turn from the first fork call and -pron- be kinda cool fork independently -pron- be a happy independent process do -pron- own thing so as a result of that the car be go to create a copy of -pron- ok so now -pron- get full process be run all four process be go to call the third line here there all run the same piece of code but -pron- be different process",
    "piece of code running but -pron- separate process be run ok so the other local fork each one of these process be therefore clone duplicated so when -pron- call fork and this one call for corn this one call for when there be one call speak -pron- end up with four more process so this one get duplicate visional process get stupid k this one get duplicate and this one get duplicate right so now -pron- can see that -pron- have end up with eight indypendent process each process have -pron- own memory each process be do -pron- own thing if i change the value now inside one of these process the other side kind of see -pron- just suppose -pron- be use the debugger and so -pron- be deliberately go to modify a value let -pron- choose a strong purple color here so for example suppose",
    "to say to be twenty and then let -pron- continue what would happen remember these process be isolate -pron- do not affect each other so all of these be the process be that -pron- see testing to print out ten -pron- do not know or do not care about the change that process memory so the process -pron- do change will print out twenty and then later in a moment when this process be clone by call fork the clone of -pron- will also be hold the value twenty so that will print out twenty now one point of confusion here be if -pron- actually look at the output of this -pron- look like these variable be all inside the same memory location ok very important idea and point here be that these address of variable and in fact the address of anything outside -pron-",
    "that these address actually each process can be map to completely different piece of physical ram so even though -pron- appear to be the same address actually those number be only sensible inside a specific process and if -pron- be talk about different process may actually be connect to different piece of of hardware that allow -pron- then to be able to change the value of one variable inside process and for -pron- to not affect a different process which be use a different physical piece of memory so -pron- be a very important idea right so that be what i enough today about fork process i kind of want to leave -pron- with one idea but in the beginning when -pron- system boot up there be just one user process so -pron- can take any process which be currently run now and trace history back -pron- can say oh an -pron- parent"
  ],
  "37245daa-183e-43b4-9765-a5d9bc2a6ac6": [
    "ok so great -pron- have start think about -pron- allocation in term of these block and in fact rather than hardcode sixteen byte -pron- be go to use size of -pron- size t operator here be why this be this be a great little integer -pron- be potentially large than just a c int and -pron- represent lot of interesting useful thing like the total number of byte that i want to allocate -pron- pointer can not hold value great -pron- point be can not point to memory address be great than this value so if -pron- have chunk up -pron- memory into the size of these thing i know that -pron- location be go to be robust and powerful ok so -pron- have kind of stress this idea that -pron- get to think about byte anymore instead -pron- memory be become one big array of these size t type entry",
    "machine but let -pron- not think like that most of the time let -pron- just imagine -pron- as one big array of these integer style entry so now -pron- can introduce nufc boundary tags and let -pron- have a look at this so i need -pron- -pron- little point be here here be -pron- here be -pron- basic plan that when -pron- ask -pron- for some memory let -pron- say -pron- need space for a hundred of these block or block be one of these sixteen by or eight by entry here -pron- be go to make a note of that at the beginning and at the end so if -pron- want a hundred block i actually need space for one hundred and two there -pron- go but -pron- be go to write what -pron- ask for the beginning and the end ok right so i see that -pron-",
    "-pron- sixty four here i jump forward of sixty four plus one in order to write sixty four into that location and -pron- have also ask -pron- for a hundred and thirty two bite so here be a hundred thirty two i give -pron- plus one here be -pron- memory address and also write the hundred thirty two in there ok so why do i do this so the wonderful thing be and i may have sketch out before in a previous video be that if -pron- then free something up let -pron- say that -pron- free this one here actually -pron- give -pron- this pointer here to say ok -pron- be do with this space i would say great so if i immediately cast a point -pron- give -pron- into one of these one of these block pointer here then i just need to go back by one to be able to read first of all -pron- size and if i go back by two then i can read the previous",
    "this entry be free or not simile i can jump forward i can read -pron- sixty four and jump forward to see if the next one be free or not so in this case i have to jump forward not sixty four but i have to jump forward one two three at a job for sixty four plus three in order to read the size of the next entry ok right so how can i determine if a block be free or not there be one last little trick here which be that actually if i only have a store even number here then i could use the small bit to hold whether this represent a free block or not or similar if i decide that the high bit be never",
    "store whether this be correspond to a free or unfree area or not ok so that allow -pron- to very efficiently store the size of -pron- block and whether -pron- be free or not ok so that be nice boundary tag -pron- be not go to implement but i will just mention canary ok so -pron- can detect whether a user have use -pron- memory incorrectly ok so -pron- can see right now that if ok if -pron- give some memory -pron- and the user code start write over memory perhaps -pron- do a buffer overflow so so -pron- start write into this valley here or perhaps a data underflow and start write before that -pron- think back to when -pron- be write get line code right and get line could return negative one imagine -pron- try to adele",
    "so -pron- have be over write these value so -pron- could actually use these value as a canary and what i mean by that be when the coal miner go into the mind one way -pron- could detect the atmosphere be dangerous word by a canary of keel over because the canary would die before -pron- do so let -pron- do some some sanity check here in -pron- malloc kodinar free code and -pron- can do thing like say well hold on -pron- expect this value to be equal to that value or -pron- can go further -pron- can actually deliberately put value into memory that -pron- later check so for example -pron- favorite be i may write the hexadecimal value immediately after the end of the user code here that say that something like dead code which be a hexadecimal value right so i can write dead code as a hex value",
    "and if -pron- be not that be -pron- canary to say oh someone overwrote some memory that -pron- should not have write and i probably exit at this point or perhaps i would print out some useful message or perhaps drop into the debugger ok so that be the idea of canary -pron- could -pron- too can implement inside -pron- -pron- lock code write an one quick idea be yes -pron- probably hear a buffer overflow -pron- have also get buffer underflow which be where -pron- go before the start of of the buffer so again -pron- could put a canary there and check that that be not overwritten ok last thing -pron- could do with -pron- free if -pron- do not care about performance but -pron- care about catch memory hour be after uh someone be call free -pron- could deliberately overwrite"
  ],
  "37ee433b-e79d-4957-9dbc-0d62b0785dbd": [
    "ok so -pron- have kind of talk a little bit about this idea before so -pron- could i implement p thread mutex lock just by disable interrupt on on the cpu so the idea here be that if -pron- code be run on the cpu if i disable interrupt then i can not be stop become agent smith out of the matrix that now i own the cpu so no one else can can take -pron- for -pron- so one of the limitation of this first of all that yes -pron- can ensure that -pron- be the only one go into the critical section if one there be only one cpu ok so if i control the one and only cpu and i can not be interrupt then i get to do everything inside the critical section until i give up the cpu ok so provide",
    "-pron- data structure no one can stop -pron- because i disable into app ok the second be that i require an here be a big problem here be that actually require sufficient privilege to disable the interrupt and because this be such a powerful operation by default that be disabled for normal user program -pron- need interrupt in order to make a cpu stop run one thread and start run another in order to handle hardware interrupt -pron- too do to device iot device be ready to either take datum from the system or give datum from the system for example the network card may report that -pron- new package arrive and here be some datum or a disk or solid state disk may report hey -pron- have now finally get the datum -pron- can now read this into memory or gpu",
    "of reason why -pron- in over a normal complex system -pron- can not just disable disable interrupt ok so this be one solution to the critical section but like i say -pron- be not a generally useful solution to the critical section -pron- need to find a way to be able to kind of implement these correctly and will talk about some algorithmic concern about that in the future instead now be what -pron- have get a real challenge for -pron- which be i want to implement a barrier in fact -pron- be go to give -pron- all the code that -pron- need here -pron- be i just want to implement a barrier that will wait until five thread call this method call this function and -pron- have get to keep track of how many there -pron- go and all -pron- be go to give -pron- be the follow code which use a counting semaphore so -pron- get to choose how what -pron- would like to implement what -pron- 'd like to"
  ],
  "37ef3efe-3f33-4f02-bfee-552b68beac1b": [
    "right great ok so unless some implement a stack and will implement stack but be bound by two thing first of all -pron- will see that i data store here -pron- little array here can only handle ten item also -pron- can not pull anything from the stack if -pron- stack be empty so now push and pop method need to block if -pron- be unable to continue right so let -pron- let -pron- have a good figure out how -pron- be go to implement this first of all let -pron- just pretend that with i cs two twenty five or some other course right and right than on the single threaded version ok so what be -pron- go to have -pron- be go to have thing like the push method will be take -pron- datum structure -pron- ray and after -pron- have use the value of n increment -pron- and density equal to be ok right what else -pron- want to do so for multithreade",
    "end otherwise two thread may call this code at the same time and both right into the same slot the same entry inside the away so less use mutex lock for that so -pron- be definitely go to need mutex lock soapy say mutex lock and as luck would have -pron- -pron- have already get -pron- variable up here ready to go right so let -pron- call peter mutex lock on -pron- mutex there -pron- go so that may block for a short while if someone else be currently acquire the lock which be why a later on -pron- be go to release -pron- ok so thank -pron- very much luck -pron- be do with -pron- anybody else that be wait can now continue right so great so now -pron- have get code which where only one third of the time can push thing what about if -pron- array be full of what if i stack be full so remember step",
    "busy check this right so while while n be equal to the maximum number go round the loop now -pron- know -pron- could put a sleeping here if -pron- want to -pron- know that right now this be a terrible test because -pron- be hold the lock if all of -pron- code use a lot no one else will be able to do this fortunately for -pron- -pron- be go to be use p thread condition wait and that will release the lock whilst -pron- be block ok so here be -pron- condition variable that be go to sleep in and watch be sleep unlock that mutex and then before return lock -pron- again so the big idea here be that in all the code that -pron- write let -pron- do i make a highlighter well let -pron- do -pron- like like a",
    "that -pron- own the mutex lock so -pron- could reason that -pron- be the only thread that continue to run so great -pron- have get all these other thread run at the same time but -pron- head do not need to explode thinking about the possible interleaving of all of these expression from this thread and another third because -pron- own the mutex lock right and anybody else have to wait until -pron- finish so -pron- simplify reason about this back down to just simple single thread code again alright so great -pron- have get -pron- push method to work ok let -pron- go back to -pron- kind of blueish color right so if anything else -pron- need to do yeah well -pron- be write a method which both to push and pop can can block so if i just put something onto this onto -pron- way -pron- could",
    "-pron- be go to call p threat condition broadcast ok and say hey everybody wake up all right and there -pron- go so if there happen to be someone sleep in on this condition variable because that waiting to pop then now -pron- can wake up so -pron- could for performance reason a little bit more about this and say the only time -pron- need to do this the only possible time that someone could be block while pop from this away would be if the value of n be zero so in other word -pron- have just increase -pron- up to one otherwise there be no way that anyone could be sleep right now so -pron- could weight use about that and -pron- could also reason that -pron- have",
    "as well but i would have to be a lot more careful about reason about that so -pron- be go to use p thread condition broadcast just in case there be multiple thread go to sleep -pron- want to make sure that if -pron- be only go to wake up in that transition that -pron- work -pron- all up so right i i think -pron- can now continue and will write to the next one so the pop ok so what should -pron- pop method look like ok so first of all let -pron- write the code which be go to return value k so -pron- turn -pron- v where do become from -pron- be go to have something like double v equal so i go to -pron- way now i want to pre decrement -pron- value of n there -pron-",
    "-pron- need something like look if -pron- value of n be zero then go to sleep ok right so -pron- be go to have -pron- p thread condition wait ok do -pron- do today and here be -pron- condition variable -pron- 'd like to sleep in and do not forget that mutex lock ok what be the mutex lock code look like be right so -pron- have see this before that be just annotate -pron- in a different color -pron- be go to obviously have a lock here k and unlock at the end ok right be -pron- do no -pron- may need to wake up some thread so let -pron- put that code in as well about this kind of dark publish right so let -pron- in here wake up any thread switch may be sleep on the condition variable",
    "all right and again -pron- could reason about this -pron- could say if there be if there be any lock if there be any thread sleep on this waiting to push the only time that that can occur be if the reach the maximum number so if any be equal to now nine then i know that -pron- have just decrement -pron- off the off the very top so time to pee time to broadcast however this be kind of a optimization -pron- be very easy to get these wrong -pron- be very tricky to start model think about this when -pron- have get multiple thread which may call pop of multiple thread which may call push get a little bit easy to think about if -pron- have only get one thread of each kind so -pron- advice be treat these optimization with",
    "if -pron- do not care about absolute performance just call prefect ingram forecast that performance head be not that great ok so -pron- have get some working code -pron- think let -pron- actually have a go at testing this ok so here be -pron- code that be go to actually run this and -pron- have get some test code where -pron- producer be go to call the push say ten thousand time but -pron- be actually go to do that with two thread and then -pron- have get a consumer method that be go to call pop twenty thousand time be just one of those today so let -pron- check that -pron- actually get all value",
    "that -pron- know that -pron- be go to push in the help for help in the background ok great so -pron- know -pron- be go to push in the value zero up to nine hundred and ninety nine nine have enough ninth ok right and so if -pron- be just go to some these so -pron- have the sum of value from zero up to that number there ok but in fact -pron- be have two thread actually push all those value in so -pron- be go to sum up the integer and if -pron- know -pron- be sure -pron- have see this inside once every three right or -pron- can do -pron- recursively -pron- can do this inductively or -pron- can do -pron- with lego as well -pron- know that the sum",
    "word -pron- expect a total of that right by the way i say -pron- could do -pron- with lego block here be the reasoning with lego block if -pron- still some lego block from -pron- young sibling -pron- can build something that look a bit like this ok that be ok that be -pron- integer one two three four five and then just to make -pron- mad -pron- build that again so right want a different color all right there -pron- go -pron- have to do to do right so -pron- build this again great so what do -pron- get -pron- get now -pron- have get a rectangle of size n times n plus one ok and the area of that be exactly",
    "integers be go to be end time n plus one over two there -pron- go i actually use this mentally to remember whether -pron- be end time n plus one or n times n minus one etc so that be kind of cute little lego block prove there right so let -pron- let -pron- actually have a go at run this ok so do -pron- have code right so -pron- call -pron- block and let -pron- let -pron- run this thing ok -pron- will notice that -pron- only exit after -pron- manage to join all three threat so will compile -pron- stop the cake monster stop consume cake ok wait finally -pron- be finish ok good so -pron- want to compile ok block right so let -pron- do that",
    "k alright and great -pron- get the correct some who be so be -pron- convinced that -pron- code work or like i say -pron- have firm give -pron- a fair shake -pron- call the push and pop in a tight loop and -pron- call -pron- for ten thousand time so empirically -pron- have show that maybe if there be a likelihood of -pron- fail -pron- have at least test -pron- to the kind of point one percent level but be that be that be that do that give -pron- confidence to put this into production no -pron- 'd actually want to kind of actually do a code review and think carefully about how -pron- code work so so in multithreade code -pron- be a very important -pron- have strong understanding about how -pron- code work and rather than just simple go to lightweight testing and say oh yeah great"
  ],
  "386e3067-a4c7-42a0-9721-75a58c84ced0": [
    "hi welcome to lecture 38 , so let -pron- get start right today -pron- be go to do some review idea and also go into some operating system idea as well . so let -pron- start with go all the way back to thread and ask why be the follow code threadsafe ok so let -pron- have a look at -pron- what be -pron- do . right so -pron- have get a function . -pron- take a pointer to some memory , sleep for second and then -pron- assume that there be a string of that memory . so -pron- will cast that to say -pron- expect to be a pointer to a character and -pron- be go to put all that out as a string with a new line at the end . so nice simple function . now , what do -pron- do down here ? so run method ( excuse -pron- ) say what ? right . -pron- be go to make a thread . there be -pron- thread identifier data -pron- represent an array . and so remember with an array , -pron- can not change this variable to point to anything else . datum be the array .",
    "-pron- get the first bite of the zoo at entry . right so , let \" -pron- copy into the array , \" \" 1234567 \" \" \" plus zero byte to this well and then -pron- say pthread_create okay , -pron- want to know the thread id and -pron- be go to pass , as the argument for when the thread finally start , datum +4 . in other word , inside -pron- array here , -pron- be go to have the character one two three four etc and i have the copy of that into some writable memory . where be that ? of course , -pron- be actually on the stack , so [ the ] data -pron- represent 8 byte on the stack so right just here -pron- be pass in an address on the stack of this call function of the thread that originally run this code case . so that sound pretty dangerous right -pron- be actually say , right , inside this array , -pron- want to pass in the address of this five just here use",
    "ok and then -pron- say put -pron- p create call now which of these put function will run first ? the thing ( ? ) be -pron- do not know ! either of -pron- could happen first . -pron- be quite possible for -pron- to request create the thread and then immediately to continue . and for -pron- to see that line before -pron- actually print something out . in this case , what -pron- print out will print out five six seven eight and a new line , of course . right so why be -pron- that this be thread - safe ? -pron- look pretty dangerous to actually pass in a pointer to stack memory . right ok , the reason -pron- be thread - safe be because of this last line just here . pthread_join that -pron- do not pass go . do not collect two hundred dollar until the thread that -pron- create have finish . that be -pron- definition what pthread_join do . so -pron- can be sure that"
  ],
  "38a81991-43dc-442e-b214-b0fdcb528caf": [
    "so -pron- can have security error in a protocol -pron- may for example specify a state diagram and there may be a way through that state diagram which bypass say login step or an authentication step or an authorization step after -pron- log in but -pron- not suppose to have the privilege that -pron- actually do so -pron- may actually have error in -pron- protocol but -pron- can also have error in -pron- implementation of protocol and here be a very famous one call heartblead and this actually be the code from open ssl and which be a very kind of common secure library implementation if simplify -pron- a little bit just so -pron- actually fit on screen here but the ssl as there -pron- go and i support by web server at the time support different protocol message and one of -pron- be be very simple idea be just a little",
    "still listen to -pron- so why do not -pron- send a little heartbeat request to say hey server how -pron- be do and -pron- would expect the server to say hey -pron- be great and in fact all -pron- do be just echo back what -pron- say so that be the purpose -pron- rip -pron- litter be very very simple -pron- will notice here that -pron- have get these call call secure read that simply because -pron- want to wrap up -pron- normal read and write so that the bite actually send be encrypt use some cryptographic cryptographic algorithm right so let -pron- get a connection right so -pron- be usually call accept and then will start push something that that connection so let -pron- get some bite for example and then see what kind of open ssl message -pron- be ok and so the one -pron- care about be this heartbeat wait have -pron- see how -pron- have break the internet yet ok because all -pron- be go",
    "send back to the client whatever -pron- send to -pron- and how many byte do -pron- want to send well however big that message say -pron- be ok so that be -pron- why be this a problem the problem here be that -pron- trust how many byte the incoming request claim -pron- be for this -pron- have get a cute xkcd comic which i think i can find here scroll down k here this right so zoom in ok so the client say let -pron- send a heartbeat request",
    "and then what if -pron- subvert this what if as a malicious actor on the internet -pron- say ok -pron- be go to send -pron- hat please send -pron- back five hundred letter ok and this be which point -pron- little right request will happy send back five hundred letter in other word -pron- be send back five hundred arbitrary byte in for more process which be actually run part of the security protocol of web server oh dear -pron- have a problem here because what be go to be in there be thing like message which be suppose to be for other client the private",
    "and even the server 's own private key which if -pron- have that mean that -pron- can now decrypt all message be send and receive by that server so -pron- take awhile but by careful understanding of send the right request all of these become possible and at the time this affect a large number of server little note here but how many so yeah as of kind of two thousand fourteen long after infect where -pron- be discover three hundred thousand system be still vulnerable to this and -pron- be a simple simple bug as -pron- see just that -pron- happily trust the actual value that be send to -pron- from the client so a big security idea here be to understand trust boundary where do -pron- get that information from"
  ],
  "38d669a5-394b-4826-bb65-0090a3444b01": [
    "ok so let -pron- talk a little bit about http so http be the mechanism today that how -pron- actually get a web page and http actually grow out of an existing protocol and this very first version of http the first official version one point oh and also one 1.1 be a text protocol so why do -pron- think that \" be why choose a text protocol because there be always advantage to a binary protocol with a binary protocol i can be a lot more succinct i can choose -pron- protocol so that by the number of byte i need to send or octet i need to send be minimal so why do -pron- think the very first version be text - base ok so the reason -pron- be text base be because -pron- be easy to implement different client and server and -pron- be easy to debug the actual connection which be happen over",
    "so for example if -pron- want to get a web resource today -pron- would make a connection to a server and -pron- 'd say hey server can -pron- get -pron- the follow so let -pron- get resource so if i just care about the home page then that be just slash if for example i want a particular subreddit page -pron- may say ok say slash r slash let -pron- get some cute picture of cat ok aww right ok now i need to also to complete this be an http and if i go and read the specification -pron- see that after that i need to declare what version of http -pron- be use so http forward slash one point oh and if i continue within the spec i discover i can add some other header information in here but -pron- request",
    "\" be specify use slash r slash n so that be a new line just those two character there i could add some more thing in here like what image i prepare to accept i could accept and cookie information but right now -pron- be just go to say ok slash r slash n slash r slash n be a way to say and here be a blank line mean -pron- request be over now -pron- be time for the server to take all this information and give -pron- a response ok so -pron- manage to implement in http one point oh specification request but do -pron- send -pron- over tcp or udp well -pron- be pretty sure -pron- can guess that tcp be the right answer yes that will make a tcp connection and then -pron- will send these bite and will know that these byte will arrive in the same order that -pron- send -pron- be that the full story well not quite if -pron- be the size of google today then -pron- may actually choose to actually implement",
    "fact that packet may go missing but this be useful if -pron- want for example to provide an interactive feedback as soon as the user start type something into the search part -pron- want to be able to display immediately some potential result so that sound to -pron- like udp may be a great course so if -pron- be prepare to employ a lot of great system programmer from say from illinois then if -pron- do not mind that expense then udp give -pron- a low latency response and besides if -pron- be do this just for incremental search be -pron- do not care anyway if -pron- drop a packet because in a moment the user be go to be type another character anyway and so -pron- can reissue a new search base on that new information right but most packet today"
  ],
  "398ab8f1-44ca-4550-8662-16d9a98af68a": [
    "ok so let -pron- have a play with this -pron- have get this idea that every process actually have a uid and effective user id so let -pron- write a program to actually look at those and in fact -pron- would be great if -pron- know not only the number of the user user id and -pron- vote user id but also perhaps a name associate with -pron- be nice to actually call -pron- user by name so -pron- can do that and the way to find out the username be through this little function call to get password of user id so will pass in an integer and -pron- will get a fill out other this will give a pointer to a struct so probably just struct be store in some static memory somewhere right so that look like a password -pron- can not actually recover the user password from this struct in modern unix system ok so what -pron- be go to do",
    "the uid and also the name associate with -pron- and then let -pron- repeat this but with the effective user id so again will actually print out the effective user id and the name associate with that so -pron- be go to call this get password base on uid with two different argument ok so the uid any effective user id ok so let -pron- run that here be a program that -pron- start early right so what have i be do between likely there -pron- go right so -pron- have get a little program call hello and -pron- may notice that right now -pron- be route on this machine who ok so i do sudo minus s to become root and then stay route so -pron- have just compile this and now if -pron- look inside this current directory -pron- will see that -pron- have make a program call hello -pron- be own by root and everybody right now be allow",
    "a different ssh session where now i can still look inside this directory same directory where be -pron- head i get there -pron- be ok so i should be able to run this so let -pron- run hello and -pron- say great yes hello engrave -pron- user id as a thousand and -pron- affective user id be a thousand in other word anything this process anything this program do on -pron- behalf have -pron- right have the right of angrave so -pron- can not start alter system file -pron- will not be able to open port less than one thousand twenty four for example case so -pron- be not go to be a very good web server if -pron- do not have those privilege right then so that be not stop play with this let -pron- run this as say root ok so -pron- be go to run hello again",
    "zero and so if -pron- want to test whether a process be run as root -pron- can test -pron- user id or well -pron- effective user id to see if -pron- have root privilege ok so now let -pron- play with some sticky bit here so -pron- be go to change the sticky bit of this program to say right so chair mod plus s of hello and now will see that the sticky bit be set so when an grave run this let -pron- see what happen right so -pron- be go to run -pron- again and will see that when i run this affective user id be now route so this would be a great way to give say angrave where anybody else that can run hello",
    "hello be complete running shell now just by run -pron- -pron- have -pron- can become root and do anything -pron- want so that be a that be a way to attack a system if -pron- can add a sticky bit to something which can do generally useful thing the alternative be that maybe -pron- have get a bona fide reason to do this for example maybe hello be now go to be a web server so great now angrave for anybody else that can run this program can start a web server so maybe i want to change the permission on this so that only people within a certain group for example can run this program so -pron- see how ok how the sticky bit be be useful here let -pron- let -pron- go and have a look at this for a slightly more complicated program where not only do i",
    "etc and -pron- can try -pron- to not just with angrave and root let -pron- try -pron- with a third user call potato bob so here be what -pron- intend to do -pron- be go to try to open a file and will try to open -pron- will try to stat this particular file and will try to read the content so let -pron- use stat to find out -pron- size ok and then i can malloc some space be use every today to say right i want to read in that number of byte i do not need this to be a c string because i mean immediately go to call f right to output the content of the file another go to read in exactly the byte of the file and then",
    "to behave a bit like cat if -pron- like ok so -pron- be be a good citizen and close the resource as soon as i do not need -pron- so -pron- be call f close on the file handle and then free the memory as well ok so here be what -pron- have get here be -pron- secret file and -pron- will notice that -pron- secret file here be very secretive the only thing that -pron- allow to do be read -pron- and that be if -pron- be the owner which be potato bob ok so of course route have privilege root can see everything so even though route be not potato bob root can always kind of read -pron- ok but what about angrave ok so angrave let -pron- see if -pron- try to read secret dot text -pron- get permission deny because everybody else",
    "ok but if -pron- look at this program call how which be the code -pron- have just be look at -pron- notice -pron- be get the sticky bit set here this little s here and -pron- owner be potato bob so now let -pron- run how and -pron- will see that yes i non log in as angrave but -pron- effective user id be potato bob so -pron- be now run this process with potato bobs privilege which mean that this little program can actually open secret dot text and read -pron- content so -pron- could do that because of the sticky bit so the sticky bit be seem kind of obscure and strange at first but actually allow -pron- to effectively manage different privilege and then give those privilege selectively to people that be allow to run that program so right now with how"
  ],
  "39e45f0e-a47f-4922-a4a3-3b2f8e19cefa": [
    "ok so here be the big idea to make tcp client i actually only need two call i need a way to escape out of -pron- c code and actually start talk to the network card and for that i need a socket so this be the thing that be go to give -pron- a file descriptor and -pron- can pass some information into this be to say what kind of socket -pron- want do -pron- want a tcp or udp kind of socket in other word do -pron- want to stream base or packet base data ground base kind of suck -pron- here so -pron- will talk about how to fill these piece of information in a moment but -pron- want -pron- to realize that the result of call socket be just a file descriptor so this if -pron- like be very similar to call open or very similar to call pipe now -pron- have actually get something that i can use great but no bite have actually leave -pron- machine yet know all tech have be set that actually happen",
    "possibly to -pron- if i want to connect to one hundred and twenty seven point zero point zero point one if -pron- be use ip four ok and how do i connect then -pron- client use this thing call connect ok and -pron- just use this socket ok so notice that in both these case i careful to check the error value ok so this will be a non negative value if -pron- be a valid file descriptor if -pron- return negative one then -pron- know that -pron- attempt to create a socket fail perhaps i do not have privilege perhaps -pron- have create too many socket at anyways so let -pron- print out the string of every number and quit exit so network code have to check very carefully whether each system for work but once -pron- have get to suck -pron- now -pron- can call connect so again let -pron- check",
    "find out -pron- value of erno and print out a useful message and quit ok so what do -pron- do with this file descriptor well if -pron- make a tcp will not guess what -pron- can call read and write on -pron- so in this sense -pron- be a little different from a pipe in a sense that -pron- support two way communication that if i write to this file descriptor then the server will see the bite if i read from this file descriptor then -pron- be read bite from the server have send -pron- some thing to watch out for of course be that -pron- be do right can return negative one and due to a signal -pron- do not have to necessarily send all of the byte or -pron- read do not have to read all of the byte so i have to be able to be ready to only get partial amount of information and let -pron- see what else oh yeah so i can block so if i call reed and i have not get any light yet from the server then that recall be go to block forever",
    "block until -pron- be able to send those byte to a buffer when -pron- do return that do not mean that all those byte have actually respond to as far as the host at the other end be simply mean -pron- have be able to take -pron- buffer and copy those bite into say the network card buffer and at some point hopefully the next few millisecond those byte will start to leave -pron- machine eventually -pron- want to close this connection in fact there be two way two thing to know about this first of all there be shutdown which -pron- can use to say ok i do not want to send or receive any more bite on this particular file descriptor so -pron- be go to say ok here be -pron- socket fd and then i can shut down that socket for either reading or writing or both so i get a choice there and what this mean be after those bite that -pron- have already give -pron- have be send the very extend another packet to say ok no more bite for -pron- at this point",
    "-pron- anymore bite but be -pron- do ? no ! -pron- should also call close just like -pron- have a file descriptor of the file be time to have free up these resource ok so remember to close -pron- as well ok so the these have two different effect the shutdown be a way to tell the other end that -pron- be do either receive or sending or both and close actually say right , this file descriptor can now be use for other thing remember that -pron- only have a limited number of fire descriptor -pron- can actually use for each process right so with this in mind i think -pron- be time to fill in some code here but there be one thing -pron- have not talk about up here so i say that -pron- tcp server only need actually two network call which be true but in practice there be a third one that come in very very useful and -pron- be the follow be this get address"
  ],
  "39f43910-3996-4918-b9ce-21346fb84956": [
    "ok -pron- have get one other little imagination game here so let -pron- just take a break from deadlock just think back to hey what do -pron- do -pron- this way why be -pron- invest and that be because -pron- care about concurrency -pron- want -pron- machine to be able to do more than one thing at a time now today with the key about this in term of threat but tomorrow behavior think about this the fact that i have a thousand machine or a multiple gpu card or whatever or people even and i want this process to run concurrently so i encourage -pron- to in -pron- spare time next time -pron- be have drift off to sleep chat with friend and an algorithm or an idea pop into -pron- head think about oh how would i apply what -pron- be learn inside cs two forty one to make that run fast to make -pron- actually run concurrently so as a work example remember some of the sorting algorithm -pron- may have see before like merge sort have suppose -pron- want to make -pron- merge sort",
    "ok so kind of let -pron- do this as a little bad example but again there -pron- suggestion to -pron- be be think about -pron- cs life and start think about well how can i use multiple thread to make this or how can i use multiple process ok so remember how merge sort work -pron- say if -pron- have get say an array of datum here what -pron- will do be -pron- will use recursion to first of all get the left hand side sort and then the right hand side sort an now all i need to do be combine these which be a lot easy than sort all i get to do be take the topmost card off each one and copy the small number ok so think of like to parcel card so this number be small great -pron- will take this now -pron- build the next number ok so now this number be not as small as the number may from -pron- right hand pile",
    "recursion fairy to do most of the work so of course this happen at all level so if -pron- have start with nice big block of datum say mb of datum then first of all -pron- call recursion ok and so on and so on and that have to be cursively run these ok so how can i now think about do this concurrently right so obviously i can not actually just run all these different level concurrently because i can not actually merge -pron- datum until the low level of recursion have finish but -pron- can see thing like these task here be independent ok so if i have say four cpus maybe when i spit -pron- problem"
  ],
  "3b653f0c-c210-4f13-a615-5d87a823e96e": [
    "right so -pron- get this little challenge about what will this code print ok so -pron- know that let -pron- make this so -pron- see that -pron- have get little stack variable here and two little stack variable so let -pron- map this out on -pron- stack -pron- have get let -pron- say four byte for a ok here be -pron- four byte and inside be the bit representation of ten so whatever that be presumably eight plus two and then -pron- have get also -pron- stack another variable core pointer and what type be -pron- -pron- be a pointer never mind what -pron- point to simply by the fact that -pron- have to point to any memory address mean that -pron- be go to need to be the right number of bytes queso say on a thirty two bit machine that will be four bite on a sixty four bit machine will be a pred ok so will pretend that -pron- have make a one two three four five six seven ok have one more byte there -pron- go by eight byte there and what do -pron- put inside",
    "-pron- have another variable call child when -pron- put that in here these will stack variable and -pron- call fork right ok and what do -pron- do inside the child right so if with a child -pron- do reference or pointer and -pron- change the value to twenty in other word in the child -pron- be write the value or twenty inside the area here so -pron- be go to put stupid little arrow have a blue blue arrow key so -pron- be go to put the value twenty in there right so meanwhile what happen in order for those bite there -pron- go right meanwhile what happen in the parent the parent call weight pid this be actually happen concurrently if -pron- have two cpus -pron- really would be happen at the same time and -pron- say please",
    "how -pron- exit ok so -pron- be not go to get past line six until the child have finish and which point -pron- print out the value of ok let -pron- follow -pron- pointer and read the integer that be at that moment location so what do -pron- think be go to print be -pron- go to pretend or twenty -pron- get -pron- get to choose now -pron- be ready go alright let -pron- see if -pron- be right so first of all let -pron- see what happen and then see if -pron- can explain -pron- ok so -pron- will go to some code i prepare early kate -pron- be go to wait one let -pron- hook up -pron- fork puzzle yes cat for puzzle same code right let -pron- run this be today -pron- say clang like fork puzzle get off -pron- go and run",
    "in other word the child never change -pron- value be that surprising hopefully not hopefully this reinforce the idea that the child have -pron- own destiny now -pron- have -pron- own memory and even though -pron- clone -pron- from before anything -pron- do to -pron- variable here and -pron- memory space do i have right which be what the child be do here be happen inside a completely different process so -pron- be not go to affect the parent process memory at all so even though the dress value of the pointer be the same even if -pron- say look at address ffff liberalize resume what something that number actually correspond to a different piece of ram and that be the idea of virtual"
  ],
  "3b9f5713-ca11-400c-bd6f-428347679520": [
    "hi ok so -pron- have this wonderful thing call the memory allocator so when i want some memory some dynamic memory that i may need for a while i need to get that from the heap how do i do that well be easy just get -pron- lock and say how many byte do -pron- want so inside that memory maybe will store c object maybe -pron- will solve a structured many thing maybe -pron- have an array of integer -pron- do not matter in the heap allocator do not care what -pron- do with that memory all -pron- have to remember be that -pron- be very careful to only use that piece of memory be careful so if -pron- ask one hundred byte only use a hundred byte do not start use the hundred one hundred two hundred three bite step probably important and be use for something else also if -pron- know the start of -pron- allocation do not use the byte before again those byte be probably go to be use for something else and if -pron- override -pron- then -pron- program will probably have undefined behavior who know what -pron- be go to do so let -pron- take a look at this little puzzle here -pron- have get two call to malloc",
    "and the puzzle be how can i make these two call actually return the same address now -pron- may notice in this example here that -pron- have get these void thing so avoid pointer mean i want to store an address and -pron- be not go to tell -pron- what there just simply treat -pron- as a number as an address as a memory location and -pron- will not talk about what kind of object or what kind of primitive or anything about with store there so -pron- can not -pron- can not -pron- should not do pointer arithmetic on void pointer or at least that be the official line more about that later ok so -pron- have get -pron- two memory allocation request how could these possibly would be return the same thing so the answer to -pron- little puzzle here be what do -pron- do the following after call malloc -pron- immediately say hey thank so those bite but -pron- know what i change -pron- mind i do not need -pron- anymore so let -pron- call free and pass in"
  ],
  "3bc5e145-f08c-45f8-af8f-9b7dd35d816f": [],
  "3c6b2669-f4b1-4b5e-ad45-a0b90bff5373": [
    "ok right so why can -pron- call malloc from two third because -pron- be what right hopefully -pron- say because -pron- be thread safe right so if i can write with this thing here -pron- go thread safe ok right and -pron- explain why that variable man will point to different two different heat memory because -pron- actually have two different version of two two malloc call go on and each of those result get store inside a different man variable one for each each thread because each thread get -pron- own stack right so -pron- probably get a whole lot of question about thread in people 's at this point so what -pron- be go to suggest -pron- do be post a video and by the google something or try a man page see if -pron- system already support the manpage for p thread and if -pron- do not figure out how to install those additional manpage hint a quick google search can tell -pron- the magic incantation if -pron- be work with the cs two"
  ],
  "3cd7353d-eaae-4c1c-a4d5-ca1b6ce5f52f": [
    "ok great i welcome to like twenty eight so let -pron- get start -pron- be go to look a little bit more at -pron- file system representation and then dive into stat and how -pron- be go to have hard link and symbolic to -pron- file so just as a kind of quick warmup remember -pron- be play with the model of the ext2 file system and -pron- i node be the file i can not create a file in this -pron- have actually get inode entry and -pron- be go to have will say ten entry inside -pron- inode directly to the first ten disk block use by -pron- file so in otherwise i could hold forty kb there and then i also have inside the i node that this block which hold a table with a thousand twenty four entry and then another entry side the i node for -pron- double interact an another entry for the really large file which be actually go to be a triple indirect in those for the triple",
    "where the data be store but even for very large file the beginning of the file be always store in these direct block so that -pron- have nice fast access to those ok right so let -pron- kind of run through this remember that -pron- disk be when i format -pron- -pron- have format -pron- into a super block and i may have copy of that to the rest of the rest of the disk for backup purpose have a space set aside for i node and the rest of the space be go to be use for the actual file and any indirect block that -pron- need to store okie sue this will look at -pron- quick first question for x two with four kilobyte block at thirty two bit address watson maximum size be disk that -pron- can support well the idea for this question be not about the indirect and double in triple indirect -pron- be more the fact that if i want to say to the disk hey disc actually",
    "pass in a number which be bound by thirty two bit address scheme so -pron- have get two to thirty two possible dis block i could request and each one be four kb so if -pron- do the math here and i think i do -pron- in a previous lecture here that be remember the two to the thirty two how can i think about that well two to the ten be anybody know be about a thousand thousand and twenty four ok so two of the thirty two be actually two to the ten time two to the ten time two to ten time ten time two to the two ok so now -pron- can see that -pron- be go to change -pron- unit from kilobyte to megabyte to gigabyte to terabyte queso terabyte and then -pron- have just get this two of the two time the original four so in other word i can support up to sixteen terabyte",
    "ok so let -pron- have a look at the follow question then so if each -pron- 'd entry be fix size always a hundred and twenty eight byte and -pron- have when i format -pron- disk i say please put a size sixty four kb for the i node away in the word the space up here there -pron- go how many -pron- know can not actually store right so -pron- in other word -pron- need to do sixty four gigabyte sixty four kb divide by a hundred and twenty eight ok so the reason i do this one be just kind of point outlook -pron- should be able to these quick back of the envelope calculation so here be one way to do this let -pron- convert this into two to the n format right so what be sixty four kb well sixty four be write sixty four be two to the six and -pron- have get kilobyte in other word this this be two to the sixteen",
    "so subtract -pron- exponent and -pron- have get two to the nine in other word -pron- have get enough space to store five hundred and twelve i note ok what do that mean that mean that -pron- have only get enough space to store five hundred twelve file in -pron- disk ok that be probably mean that -pron- original choice only put aside sixty four kb for the inotes base be a little bit a little bit too small i only get to store five twelve file on this disk -pron- better be very very large file ok so probably want to reformat that and put aside more space also go to need inote as -pron- will see in a moment to actually represent directory be as well ok right so what be the last question -pron- want to work on here for xt two how large can of rb before triple indirect block be require ok so to answer this one -pron- mean -pron- be",
    "so -pron- indirect block -pron- be four kb but -pron- be use thirty two bit address so that mean each one of those entry here be go to be a number which take four byte for -pron- thirty two bit ok so for -pron- four kb block here that mean i can have a thousand and twenty four number in other word i can reference a thousand and twenty fourth datum block which mean that -pron- have get four kilobyte which mean for each block which mean -pron- have get four megabyte of datum here for -pron- direct for -pron- first indirect and then for double indirect each one of those thousand twenty four entry -pron- -pron- can actually talk to or describe so thousand and twenty four datum",
    "do do do do do -pron- to do right so this be go to be a four megabyte of datum for megabyte of datum etc etc ok so in total that be go to be four gigabyte of datum i get thousand twenty four -pron- in other word the large file i can store before i need to start use triple indirect addressing be go to be forty kb plus four megabyte plus four gigabyte an i could turn that into a an actual number of byte if i really want to ok so a quick comment be so far -pron- have be use large k here for kilobyte mean that -pron- unit be be base on two to the ten another thousand twenty four this manufacturer however tend to would like to maximize the apparent number of byte that -pron- be sell -pron- so -pron- use a different",
    "in other word in multiple of a thousand so -pron- the correct way to write this today be to put a little small i after this for example like a kilobyte would mean one thousand byte or a megabyte so that would be a million byte as in one zero zero zero zero zero zero byte however -pron- do not be surprised if -pron- be the marketing material the disk manufacturer conveniently forget to write the small i hear also if -pron- be buy a modem -pron- want to talk about bit then if -pron- be talk about say megabit per second the small b be use to represent bit not byte so just watch out for those kind of little gotcha there and do not be surprised in the marketing material",
    "now here be a useful little command get cwd notice that be right -pron- tell -pron- the process be current working directory which be go to be useful if -pron- want to work with relative directory and in fact path in -pron- system of define to have a maximum length so -pron- can be confident that the string that -pron- can request can never be large than this constant here path max and -pron- add one just to ensure that there be enough space for the c stre zero bite at the end ok so if -pron- want to know how where -pron- currently on file system here be one way to do -pron- right so that be a limitation of function here so in fact if i type c w p w for present working directory that",
    "can either pass in some space or -pron- can pass in null and -pron- will allocate -pron- on on the heap in general then if -pron- want to work with kind of path then -pron- can use this constant which be actually part of the kernel but provide by the c library to assure that -pron- c string be always of sufficient size right so now let -pron- actually start work with directory -pron- would be great if for example -pron- could enumerate all file inside a directory and -pron- can here be the kind of big idea that a directory be actually just a file but there be a couple of thing special about -pron- first of all inside of file all -pron- all -pron- would find if -pron- actually open -pron-",
    "find a whole lot of entry that look like this -pron- would find a name and and inode number and then another name and then another i know number so that be all that a directory -pron- be comprise of just a set of name and map in each name map too and i know number so normally -pron- do not actually open the directory as a binary file but -pron- could -pron- could actually look at these entry and if -pron- know exactly how this be store inside the file then -pron- could extract this datum -pron- but that be the big idea that be all the directory be of course most of the time -pron- do not actually print the i node number but -pron- could if -pron- really want to so let -pron- have a look to see how -pron- can do this in c in fact the c library give -pron- ally typical of level of abstraction here and -pron- be very easy to use -pron- call opendir and that internally",
    "so for example let -pron- open the current directory and then -pron- can keep call reader to read the next entry ok so when -pron- do that -pron- get a pointer back this little directory entry structure and -pron- be a very simple structure in fact -pron- only have two entry -pron- have name and the i node number so if -pron- want to print out the i node number -pron- can say ok dp tell -pron- the i node number so -pron- be just i know ok so that be all -pron- can do and -pron- just put -pron- in a loop and -pron- can iterate through that directory ok and and the name -pron- will not be the full path -pron- may just be for example say the short name like hey -pron- have get to something like program dot c for example so here be a little bit of code then that actually look",
    "why do -pron- crash ok alright bye -pron- right so just the pen -pron- be work good right so -pron- be just look to see if a particular file name exist inside the current directory and what -pron- turn what otherwise let -pron- return zero so what do -pron- think about this code can -pron- spot any mistake in -pron- ok so hopefully -pron- system program a alarm bell go off because the problem with this code be that there be a path of execution where -pron- forget to close the current directory so if -pron- do find the name that -pron- be look for -pron- return one -pron- never actually execute this",
    "security problem that -pron- may work once or twice or ten time but -pron- be leave a file descriptor open and eventually will run out of spare far descriptor for process and then open file or calling open be will not work in the future -pron- do not have any spare file descriptor leave ok the other thing that -pron- may comment on if -pron- be do a code review instead open a could fail so if this return null for example there be no current directory 's kind of a little bit bizarre but -pron- could imagine that happen for example someone be delete the current direct current directory then this open durcal would return null so -pron- be not actually check for that ok and by the way in case -pron- do not notice look -pron- be do this trick to hear to say ok i know that -pron- have finish read the current directory when this be call to read return null",
    "to fight but the big idea here be that -pron- do not clean up -pron- -pron- do not always release resource so always check -pron- code -pron- system programming code to make sure that in all code path particularly error code path -pron- have release resource as soon as -pron- finish use -pron- ok and this will correspond to file descriptor to memory to any other resource to tcp socket etc etc etc right ok so let -pron- have a look at this actually -pron- have get a demo somewhere here -pron- be right and in this demo -pron- be go to implement a version of ls that be go to read a directory and also not only print out the name but print out the i node number as well so i want to make -pron- code be somewhat cross platform as -pron- be just bring -pron- out -pron- be go to assume that this i know number be at least unsigned be no",
    "-pron- be just print out the number anyway so let -pron- just cast -pron- i would not claim that this be kind of completely portable be bus bulletproof code because maybe on some system and i know -pron- may be a have a large representation far than a simple long ok right so let -pron- compile this directory list ki so gcc directory list kate as well -pron- and -pron- have get little usage thing here so let -pron- see if -pron- give -pron- an argument or not and ok so let -pron- say alright -pron- 'd like to list a kind directory and where hey off -pron- go right so -pron- can see -pron- be happily print out directory name and i know number and",
    "number ok so -pron- have get now a program that be behave a little bit like ls when i type ele -pron- print out the name in fact i can say hey this please tell -pron- the unknown number i think -pron- be minus i and there -pron- go -pron- can see now the i node number associate with each file hopefully this be go to be the same as yet eight three four twenty for -pron- actual program here and if i wish i could say to ls ok please actually do -pron- in a format where -pron- be one per per per line the other thing -pron- may notice however be that in -pron- program -pron- print out two extra yeah so actually -pron- turn out that for every directory -pron- actually get to entry for free -pron- always get the current directory and -pron- always get the parent directory as well so -pron- be always",
    "file so let -pron- call -pron- dot secret and -pron- will just have a secret piece of information in here like banana ok i do ls -pron- will not see -pron- secret file but -pron- program or -pron- program will actually print out actually list so what else do by default be not print any file out which start with a dot -pron- can however say ok let -pron- tell -pron- everything right now i want also also so now i can see that ok there really be a file call dot secret and i can really see when -pron- be modify and who own -pron- and all that good stuff and i can see that what permission i have so i have read write permission the group have read everybody else have read and -pron- be a regular file versus these two entry be actually directly -pron-"
  ],
  "3d0ca20e-770a-4185-b85c-16363e80fe82": [
    "ok right spinning disk so let -pron- talk about a little bit what -pron- look like how -pron- work etc game so first of all right if -pron- be to take the cover off -pron- spinning disk maybe -pron- want to clean -pron- or something what would -pron- find so the do i have a picture ok great i just wanna color choose say this right so first of all the actual spinning surface the physical part be call a platter and -pron- may use both side of -pron- or just a single side of -pron- so i think if -pron- be just like a like a pizza platter except -pron- be circular and -pron- spin around ok now on that platter -pron- could trace out an imaginary circle so i do not want to know i want i want a -pron- will can circle around here so let -pron- put all -pron- datum on this little circle right on one side of -pron- cylinder",
    "because of course i can actually store the datum and just not on this single side of this first platter but on all of the other platter and this particular disk have three platter hide inside there so -pron- actually all of -pron- data sit on sit on a cylinder and and this mechanism just here that look like a triangle be the actual way that -pron- read or write a single single bit as -pron- fly past the head here and so very very close area here if -pron- want to get close as possible to the surface in order to be able to detect the very weak magnetic change that -pron- store on the surface ok the whole thing be drive by an actuator here so -pron- can change the position this arm here can sweep in or out to access different cylinder",
    "sector this idea that -pron- cylinder which i will pretend -pron- be really really large here i divide -pron- up into small unit and that unit will be the small unit of read the area that i can write on too so a sector may -pron- be pretty small say two hundred fifty six byte but probably a lot small than -pron- four thousand ninety six block that -pron- take typically talk about ok so -pron- talk about spindletop butthead actuate some disk drive actually be use -pron- but most be to simply enclose service because -pron- do not want to single piece of dust or -pron- to get between the head and the spin platter right so what do -pron- do -pron- spend these thing really",
    "even ten thousand as well but the disk that be be at this bead be pretty rare these day -pron- still exist but fifty four hundred and seventy two hundred rpm be more commonly so what do that mean in term of revolution per second so -pron- have get seventy two hundred revolution per minute -pron- want to work that out a second ok so let -pron- do the fifty four hundred divide by sixty sixty second right so the other one -pron- want to seventy two hundred divide by sixty right so i could that work that out in term of ninety and and twelve but course anytime -pron- do not feel like do math remember that -pron- could always open up -pron- trusty python and say and just immediately type some math so -pron- can do say fifty four hundred divide by sixty there -pron- go",
    "by sixty again be one hundred and twenty time a second right so there be other way -pron- buy the way -pron- can calculate thing -pron- can even do -pron- in bash if -pron- put two parenthesis in so for example fifty point four hundred divide by sixty though this be just by default integer arithmetic ok so -pron- have now calculate in -pron- head and python oh yeah there be one other there be bc as well some kind of crazy all calculator that -pron- can type thing in as well so and i forget how to use -pron- but hey -pron- exist or subsystem right enough of that so -pron- have calculate this enough time -pron- know then that this be one hundred and twenty revolution per second in other word how many millisecond do -pron- take for a single revolution case so let -pron- use python -pron- favorite will say -pron- have get",
    "ok thousand divide by hundred and twenty -pron- be like favor eight in the third ok so -pron- will call this of the order eight many second ok right so if the datum -pron- want be say store just here how quickly can -pron- read this well several thing need to happen -pron- need to move the actuator so that the head be on the right cylinder right now as -pron- can see -pron- be not the right center -pron- be -pron- be read this innermost cylinder -pron- need to pull -pron- out so -pron- can start read form from this circle over here and then -pron- need to actually get the datum underneath -pron- head ok so this bring -pron- at all kind of all kind of sort of interesting latency consideration and in fact",
    "say once -pron- have even start read this datum that the little microprocessor on board here have to be able to kind of start understand the signal be get from -pron- from -pron- head and extract the right sector check the error check there be no error on this or maybe to fix any of fix the one bit error that -pron- have before then send -pron- over the bus but -pron- be go to use a simple calculation for starter -pron- have already see that through the millisecond for one resolution be about ten millisecond -pron- just as a work approximation but what about k so so so how on average will -pron- take for -pron- to get to this piece of information well on average -pron- be go to be not completely lucky but -pron- could be",
    "-pron- head so in other word on average rotational latency be go to be five millisecond ok what about the actual move the head to the right cylinder well for a random seek that take typically about ten millisecond that include a time to speed -pron- up to slow -pron- down until -pron- to let -pron- settle and get get ready to and get -pron- at exactly align on the right cylinder so -pron- will see that -pron- can do these kind of thing in somewhat parallel but -pron- be only when the head be actually move to the cylinder that -pron- can start kind of read reading accurate information from -pron- cylinder so -pron- have get multiple access time to consider right so",
    "and the average seek time for a random seek be of ten millisecond ok so if -pron- be move around try to read random random piece of information the good i can hope to do be go to be of order fifteen millisecond of latency for each separate request like i say this be still kind of rule an argument to still kind of work calculation to see how fast be device can be and in some case -pron- do not need to be quite that slow for example if -pron- be just seek between neighbor tax track -pron- can get to that much fast or if -pron- be only use a very small limited number of track again -pron- seek time can be a lot small but let -pron- kind of look at more than the average case and look at -pron- access time about fifteen millisecond ok so what do this mean",
    "satisfy per second right like this in and say over thousand millisecond if each one take -pron- of order fifteen millisecond -pron- will see that -pron- have only i can do approximately kind of sixty six to like a hundred i owe event per second ok so that be pretty slow right that i can only do a hundred different thing per second compare that to the number of read that -pron- can do inside memory -pron- will see now why storage get a bad rap in term of -pron- performance that of order a hundred event per second be extremely slow so let -pron- kind of go back to -pron- virtual memory discussion when -pron- say hey when -pron- be run",
    "when -pron- do that then the latency of a spin disc extract a heavy price because the most -pron- can hope most event -pron- can hope to do in second be about a hundred of these thing so if -pron- be page one thing out and page another thing in as soon as -pron- need to do that to say more than fifty different block to random piece of disk -pron- performance be go to be extremely slow now in order for -pron- if -pron- be experience a lot of page fault in order for -pron- process to continue -pron- work at the speed of disk not at the speed of ram ok so which mean -pron- have go down from ns hundred of nanosecond to just a few hundred event per second so -pron- have how many order magnitude be that about in a ten to the seven ten to the eight right -pron- have just make a machine about ten to the eight time slow right good news today of course be if -pron- compare with ssd ssd today"
  ],
  "3e1b1597-b1e1-4999-9d99-6e412cce8d0e": [
    "ok so when talk about scheduling and how -pron- be use -pron- resource there be some very common term let -pron- go kind of throw these so first of all there be the turn around time ok so let -pron- draw a life analogy here if i ask -pron- to produce a report and -pron- start send -pron- page and finally give -pron- the whole report the turn around time yet be the time between when -pron- first request to report and when -pron- finally get -pron- all complete so for example if there be a web server this would be the time between -pron- make the request and then get the complete web page ok so this be go to be with in term of -pron- little formula here thing like the completion time minus the arrival time ok write the wait wait time -pron- have already talk about that -pron- be the total wait time the total amount of time that process be spend on the weight on the redi cube",
    "do -pron- think of that be -pron- ok so this be the moment that the first output be create -pron- can imagine for example that with a web page -pron- care about the very moment -pron- can thirst start send the byte back because that moment -pron- can at the web browser can start trend the response maybe -pron- do not have all of the javascript library available yet but -pron- can store start to see the basic outline of the page or for example if -pron- could long text file -pron- may take awhile for -pron- to load the entire content or fax if -pron- be more something more complicated like a three d game or an architecture picture -pron- may take a minute to load all of -pron- high resolution graphic but even when there be few second potentially -pron- can start to see what the page look like what -pron- -pron- model look like so the response time be the idea between the difference between the",
    "time so i could may say look the wall clock time for the first byte be send -pron- know -pron- see depend if -pron- find -pron- versus the arrival time of when -pron- actually start this process ok then -pron- can also talk about the throughput and the throughput be typically talk about in term of perhaps number of byte per second or number of process be complete over a period of time so for example maybe i have many database job to complete and i care about get a hundred job per hour complete again the unit those particular unit require but the general concept be a number of thing that i can complete within a duration of time and also obviously i kind of care a lot about have that number to be a large number ok so latency -pron- have hear this term before -pron- fewer gamer this be the kind of delay this off introduce",
    "flow and that -pron- can measure the latency of an entire system the entire delay of a system and so typically that will be the latency due to over the response time so a delay response time -pron- can say oh -pron- be because of the latency of the system and that may be due to effect physical effect like speed of light processing effect like the time -pron- take -pron- to calculate the position of a camera if -pron- be do say augmenredreality but -pron- be basically be the discussion of the actual delay that be introduce by a system or system component ok and then what about starvation ok so starvation be when -pron- 'd like to get something do but -pron- never seem to happen because other thing be get in the way perhaps for example -pron- be",
    "little kid keep stream in front of -pron- and -pron- never get to the counter ok so -pron- will be starve -pron- will never get to buy -pron- donut well something similar may happen with a system where because other high priority job be give first access hyper t access over -pron- -pron- never get to run on the cpu in fact this even happen with the apollo mission to the moon where certain job be unable to complete there be not enough cpu time to run -pron- anyway so that be a whole another story but there be lot of fun thing about the software bug and hardware bug that -pron- manage to land on the moon despite of these issue ok so so let -pron- click on general term oh i think the last one get batch so batch be the opposite of kind of interactive the idea that -pron- have get these long run job -pron- do not require a kind of user intervention -pron- have just",
    "thing like throughput like -pron- have get a large number of job i want to run between midnight and two o'clock in the morning before say the back up once and i care about complete as many of these as possible or completely as fast as possible and i do not need any interactivity so so typically if -pron- be go to schedule thing so batch i just want to maximize how fast i can complete more in other word i care about minimize the total wait time of the entire system across all of -pron- job across all of -pron- job also when -pron- be kind of compare different schedule scheduler schedule there be lot of different trade off so -pron- just talk about one where -pron- do not care about interactivity -pron- be happy to say schedule",
    "not be good for -pron- io resource and so there be always a kind of interesting tradeoff do i want to see some completion by some job early -pron- expensive throughput or do i want to maximize -pron- cpu resource or -pron- want to maximize -pron- io resource in general -pron- can not maximize against all kind of possible measure so -pron- have to kind of decide what be well for -pron- particular application ok if alternatively -pron- be work with the interactive system imagine -pron- have all log into one lennox server for example or -pron- have get many process run on a windows machine then i do not want to give this cpu to a single process and let -pron- run forever because then everything else on -pron- system will appear to be very sluggish -pron- possibly not interactive at all i press a letter nothing happen so instead",
    "that be ready to run should have a little bit of cpu time ever so often and even if -pron- do not get to kind of fully complete -pron- calculation at least if -pron- give every ready process a little bit cpu time then for simple thing like update the display when -pron- press a button update menu as -pron- click at least able appear kind of somewhat interactive and give fast feedback to to the user -pron- may not have time to fully re paginate the page but that be ok those thing do not need to be kind of immediate ok also if i give a little bit cpu time then then appear to the user that -pron- at least have -pron- all access to the cpu when in fact -pron- be only get a little slice of -pron- so if -pron- make -pron- slice happen regular enough interval let -pron- say every one hundred millisecond or ten millisecond or one millisecond then -pron- should appear that",
    "example suppose -pron- be currently log into a share linux system -pron- be run gcc or ceiling -pron- be run say ls and -pron- be also run a compiler that all of these thing will at least make some progress -pron- do not have to wait for -pron- very long compilation doctor complete before -pron- can start or if -pron- be use an editor like vim or something else or microsoft visual studio then list i can continue even whilst -pron- be use some of the cpu time for -pron- compile job then there be thing like real time system so if -pron- be go to estero rocket i will have certain process and calculation which be time critical if i be go to use a piece of c code to control the engine firing",
    "of the edge and then i need to be able to complete -pron- calculation base on the temperature of the outside air the temperature outside exhaust how long the manifold be be subject to different temperature of the grassy -pron- have get load and load of different variable and i need to kind of kind of make a decision on exactly when to fire the ignite -pron- fuel every every every piston stroke so this be go to try and critical i well make sure that i can achieve this even when -pron- start mess with the cd player right or some other kind of ui be kind of turn the wiper on or something or enable bluetooth simply if -pron- have get a thread that be control the steering or check the sensor input for the the radar or kind of front end collision and check into"
  ],
  "3eef8bd5-25ff-471b-9ae8-2388a3967aa9": [
    "ok so let -pron- just think about the kind of different information -pron- want to be able to send over the wire to the other side ok so -pron- have already see one example of this which be an ent and -pron- have get several choice -pron- have get for example -pron- could choose to send -pron- in plain ascii format -pron- could choose to send -pron- in a binary format format but -pron- immediately need to ask thing like ok what exactly be -pron- binary representation for example should be little endian like a typical intel cpu or big endian like a typical network representation and also how many byte and also how do -pron- want to represent negative number so -pron- be probably go to choose two 's complement but -pron- should be explicit about this -pron- should be very careful to specify this so that -pron- can write kind of portable implementation and who know tomorrow maybe for energy purpose -pron- may want to run -pron- remote server end use a completely different cpu",
    "just integer if -pron- be go to use an ascii how do -pron- represent -pron- number be there go to be a fix number of byte be -pron- go to begin to include a termination character like a null byte or cologne or comma or be -pron- go to say pass a number to represent the number of byte that be stre version of that inch go to be go to use typically downside of use an ascii version be not only be -pron- network bit of a network hog -pron- get to send more more bite down the network be also a cpu hog that turn that number back into a binary representation just take more cpu cycle ok what about afloat ok -pron- have a similar problem here be -pron- talk about salona binary side be -pron- go to use ieee float point format of four byte or eight byte for example to represent a double precision all will -pron- use an ascii or -pron- could even use a fix",
    "number where the denominator be fix to be one over two hundred and fifty six so now i can represent not just integer but small integer together with a small floating point limited precision format something like that be actually use today in modern gpu card as well or what about today if -pron- want to represent something more interested in some some interesting thing like a structured piece of datum like a composite piece of datum like something which represent a string and integer how be -pron- go to marshall that be how -pron- be go to send this so -pron- may be tempt to write something like the follow let -pron- just write all the byte inside -pron- struct so for example suppose i write ok -pron- be go to write to -pron- file descriptor",
    "a file and the size of -pron- stat datum structure ok so one downside of that be that -pron- do not control this particular struct and tomorrow depend on how lynn exchange this truck -pron- may grow in size -pron- also may have more field on what operating system compare to another operate system all those field may be put in a different order -pron- get bad than that however because a compiler may choose to change the binary layout of a particular structure and in fact there can be pad byte so in simply write out all of the bike inside of struct not only -pron- send the field that -pron- want to -pron- be also send out any by the information that happen to be in those unused pad byte which if -pron- be",
    "arbitrary value that be use to be on the stack maybe then -pron- have really information from previous thing on the stat that -pron- do not actually mean to kind of send with that would be a concern if -pron- be write kind of security aware code what about a link list how would -pron- send a link list ok so -pron- may say well -pron- have get a whole load of stat structure each one represent the next point but of course -pron- do not need to do that if -pron- just send a marshaling a link list -pron- can just send the actual value so for example -pron- may send -pron- do not need to send the pointer -pron- just need to send the traverse the link list one at a time and will let the other side une marshall that and turn that back into a link list when -pron- receive -pron- now the fun here be -pron- could send possibly a note of how big be link list be but then that mean -pron- have to either keep track",
    "value to indicate that this be the very last value that be send typically with link list then -pron- be go to be pretty fast to traverse that however the on the other side on the server side when -pron- be une marshal this datum -pron- have to then generate some malloc call for each and every link list item that be go to create and then finally what about a graph how would -pron- actually marshall a graph and serialize at to send -pron- down the wire so how would -pron- be -pron- little code direct graph how could -pron- turn that into a sequence of byte that -pron- could send down the network so typically with a graph -pron- have to be aware that unless -pron- be a simple tree that -pron- may visit a node more than once and -pron- also have to be aware to make sure that -pron- visit every node even if -pron- graph",
    "boat node and visit all of -pron- so typically code that be go to push down a graph will end up have some kind of set map to do two thing first of all to make sure that -pron- only send each node once down down -pron- father scripter across the network and secondly -pron- typically need to label -pron- somehow to say k so this be -pron- first node and then the first notice set connected to the second one and the third one and i need some kind of mapping to go between say the address of each node and some kind of vertex or node identifi that i then use to refer to describe -pron- the connectivity of the of the graph and also then i also need to send any value that i associate with the edge and vertex of -pron- graph so again -pron- depend very much on the kind",
    "be actually nontrivial and can take a fair number of cpu cycle both on the client and the server right so fortunately today -pron- do not need to actually write all this code to handle these problem instead -pron- can use a new level of abstraction and then ask tool to automatically generate the marshaling code for -pron- and for that -pron- be go to use language or different kind of language which be call idls or interface design language these look a lot like kind of function definition in the simple case be so for example i may declare that -pron- have get a function that return a string and be a name other collection method name or function name for example get name and take a parameter like an int possibly -pron- may even describe the in size and typically with these design language -pron- have"
  ],
  "3f559120-de38-4bc0-bcf2-95f88505b2a5": [
    "ok so let -pron- build -pron- a web client so this be not go to be quite as good as firefox or chrome but i promise -pron- that -pron- be a lot fresh and also a lot small there be just one little downside which be that if -pron- want to navigate to a different page -pron- be go to have to recompile -pron- but nevermind -pron- be for a technical audience anyway so here -pron- go -pron- want to build a web server and -pron- want to specify name like illinois dot edu and -pron- need to convert that there into a tcp address right for that here be a really really useful function getaddressinfo in fact -pron- do many thing but -pron- be go to use -pron- today to create the information -pron- need to create a socket and also to call connect and so -pron- eventually will get back a family a socket type and address length and and address as well so -pron- will use these to kind of",
    "-pron- actually set up one of these struct as a as like as a hint to say this be the kind of stuff -pron- need and then -pron- create another one for -pron- in fact a potentially a link list of way that -pron- can actually connect to that server so what -pron- need in here ok let -pron- scroll down be -pron- be go to call getaddressinfo -pron- be go to pass in host and the port that would like to connect to this can either be a number but -pron- have to be a string otherwise -pron- get a segfault or -pron- can be a name like https for example but here be where -pron- go to pass a pointer to an exist struct and then here be where -pron- pass in",
    "create some heap memory for -pron- with the result so that be what -pron- need to get to let -pron- think about how -pron- can set up this hint object what do that look like okay so here be the plan -pron- get to say what kind of connection -pron- want do -pron- want to say an ip four or maybe six or both do -pron- want to set up a client or perhaps -pron- want to set up a server so -pron- be go to have to set those flag there be many thing in here however that -pron- do not currently need and so the first thing that -pron- should do be actually take -pron- hint object so here -pron- be ok and zero -pron- all out ok so take the address of -pron- and the number of byte that i need for this struct will be",
    "to zero so memset be go to walk through all of those byte set -pron- all to zero so if i do not set some of the all of the parameter inside that field sorry inside that struct then by default -pron- will have a value of zero which be a good thing the other thing -pron- be go to need in here be a pointer to result as well so i do not need an addressinfo i just need a pointer to one right so -pron- can start to set this up now if -pron- be go to set up a tcp then the address family i need be af address family and i need inet which mean ip version four i net short for internet if -pron- want ip version six then -pron- would use af inet underscore six there be also inet_any if -pron- want to say i do not care",
    "about try to get an ip four address right and what kind of socket type well this be where -pron- can say i actually want either udp or tcp and the constant here either d gram for a datagram udp or stream for a tcp so -pron- be go to use stream i will look up the correct name for this at a moment from a man page but -pron- be something like sock stream yes in fact this what be soccer underscore stream ok so -pron- have say about hint that sufficient for what -pron- need for -pron- little client here so now let -pron- say go get address info please and -pron- 'd like to connect on port eighty because that be where unencrypte web",
    "and here be the address of -pron- result pointer which be go to be change as well ok so will getaddressinfo change -pron- result pointer who know to be sure -pron- well actually check to see whether the getaddressinfo actually succeed or not so -pron- be important with all of these network call to check -pron- return value so if -pron- do not succeed then -pron- result pointer can be point to anything game because -pron- never set -pron- maybe -pron- be point to this smiley over here so a little bit more of a bus code would have actually explicitly set result equal to zero but certainly -pron- do not want to assume that -pron- be be set unless getaddressinfo return zero so if -pron- do not return zero then -pron- actually have a useful error function down here ga - get address info gai - underscore string",
    "to why this occur so -pron- do not use errno this be one of the few time that be not use errno to find out what happen instead the error be actually encode by the return value directly ok so -pron- have get -pron- getaddressinfo now -pron- can make the call for a socket to connect so rather than do that here let -pron- actually do that as part of the live code so -pron- can start write this ok right so yeah i be right the socket type with sock underscore stream so great -pron- have get that now -pron- be time to actually make -pron- connection ok so i want to make -pron- a socket so let -pron- have a why -pron- ok that be fix the indenting here right ok so let -pron- have",
    "talk to the server so -pron- will make a socket right so the first thing be the kind of socket well ok where do i get that from i get that from the result and -pron- will see -pron- have make a note of the different field inside here and the first thing that socket be the domain that be the actually the family that -pron- need here so the socket family ok and then -pron- be the socket type ok so that be ai_type ok and that be the last thing be the protocol which usually be just zero for some kind of family that could be different kind of protocol but so -pron- need to get loop socket here there -pron- go result and then ok so then result go to ai protocol so great -pron- have get that but -pron- better check to see if -pron- fail so if the socket file descriptor be negative one -pron- know -pron- do not work so at this point",
    "right so give -pron- have get -pron- a socket now -pron- be time to actually connect to where -pron- want to go bbc or illinois or whatever ok so let -pron- call connect right so -pron- will call -pron- connect result let -pron- call connect right so the parameter for connect be first of all be the socket file descriptor ok so -pron- have get that but then -pron- need to pass in a pointer to a struct now all style code for network would have be actually assemble and create this struct for -pron- directly so in theory that be why -pron- actually only need the socket in the connect call but -pron- have be lazy today -pron- have be use this swiss army knife call getaddressinfo that actually set this set this up for -pron- so -pron-",
    "this struct actually be ok so that be down here that be -pron- address and address length let -pron- grab those from the getaddressinfo result ok so -pron- have get result address and result address length ok as usual let -pron- check that connect actually work ok so if this be equal to negative one -pron- know that fail guess so -pron- have get connect fail all right and -pron- will print out a little message and exit ok so first of all let -pron- just see if this actually can connect to illinois dot edu alright let -pron- see if there really be a web server listen on port eighty on this address i think -pron- be time to compile this so let -pron- clear this i want to make -pron- text a bit large",
    "ok so will do well let -pron- use clang and off -pron- go ok what have i get i do not get the socket right because i need a type oh do i just get a type of one here oh -pron- be socket type not just type ok so there be that ok let -pron- look at that and i will do -pron- right ok so -pron- can compile that and clang this ok so great -pron- do not crash this actually truly prove that -pron- connect -pron- will just print out a little message say connect right so well connected just like ok off -pron- go run -pron- oh -pron- connect to great",
    "to this machine right so will say ok right now -pron- do not want to write this to -pron- output on -pron- terminal actually want to write to socket fd okay so i could have a message right so hash define a little message ok -pron- message can be say blarghlarlrlalalala right ok let -pron- send that so here be the address of that message and here be how long -pron- be so strlen of message ok -pron- do not care about zero time and i be go to send -pron- random character ok so wr'll send that and should -pron- see if -pron- send -pron- anything back sure ok so for that will have a buffer say thousand twenty four byte let -pron- see what -pron- say so -pron- 'd like to read from",
    "okay so -pron- will read from the socket ok and -pron- will say here be the buffer and -pron- want a maximum of say that array size and then -pron- can just immediately print -pron- out so let -pron- send that to -pron- standard out and here be the buffer and i want to send this many byte except let -pron- just be a little bit careful let -pron- check that be at least one so if byte receive be great than zero -pron- will print that out ok else let -pron- print something out like kind of read fail ok right so -pron- have get -pron- beginning of a web server and -pron- be just go to when -pron- connect send -pron-",
    "now -pron- be be a bit short here a bit lazy because -pron- be call right directly i need to actually rap this so that -pron- can deal with kind of partial write and e interrupt and all that good stuff etc etc etc so well -pron- be not -pron- be just assume that -pron- whole message get send in one go right so let -pron- compile this and run -pron- ok be connected oh -pron- do not -pron- do not send -pron- anything back ok -pron- be still listen -pron- be still wait for -pron- to send more byte fine -pron- can do that let -pron- send -pron- -pron- little message but this time actually terminate -pron- with a slash slash r slash n and another one ok so -pron- be send this because i know that this be part of the http protocol and this little sequence of four",
    "-pron- and -pron- be send something back to -pron- who ok so first of all -pron- have -pron- see a lot of thing -pron- can -pron- can see the current date -pron- can see that the server claim -pron- be an apache server so if i be a hacker i could type apache two point two point one five in and look for vulnerability associate with this -pron- be tell -pron- that -pron- be send two hundred and twenty six byte and -pron- be close the connection as well -pron- be also tell -pron- that be the character set -pron- be use and this be what -pron- get for two hundred and twenty eight byte -pron- get a response code of four hundred in fact sorry that be -pron- response back there at the very top four hundred bad request the rest of -pron- be just a nice document format version that",
    "understand ok so the status code be four hundred and -pron- do not like -pron- arbitrary request let -pron- send something which be actually close to a real http request ok let -pron- change this message now to something which be a lot more reasonable let -pron- say that i want to get the follow resource and -pron- be speak a certain variant of http so http one point oh and this time -pron- be go to say that i know that different host could be live on this ip address i want -pron- to behave as if -pron- be illinois dot edu ok and then lastly -pron- know that a line have to be follow by a blank line in order for this request to be finish ok so that be a full request now -pron- be behave a lot more like a reasonable http client ok so will send all that so all -pron- have to do be recompile",
    "be in klang and run -pron- an be here then -pron- get a different response now -pron- get a status code of three oh one move permanently ok meaning that the resource that -pron- want will never be available on the current request instead -pron- will see that -pron- be say that illinois now support encrypt communication encrypt version of http and if -pron- want to see this web page -pron- should open a new connection on https which would be a different port now -pron- little web client today do not support encryption yet so -pron- be not actually go to implement that instead let -pron- actually connect to a different server let -pron- connect to say -pron- local machine on a local port so how can i do that right so let -pron- go",
    "to do be comment out this different line and uncomment this one there -pron- go -pron- be now connect into a different machine and notice as usual that -pron- be use quote double quote here to talk about a string but -pron- be go to make a little mistake here -pron- be go to say that i forget that port number need to be quote as well so now will connect will try to connect to this and see what happen ok so let -pron- run clang and yes -pron- get a warning but if -pron- run -pron- -pron- will see -pron- get a segmentation for why because -pron- try to read a string to address eight thousand and of course that be not go to work so let -pron- fix -pron- code there -pron- go so now -pron- be connect to port eight thousand right ok i run this i get connection refuse because right",
    "so in try to connect this moment where be -pron- connect call this be what this be where -pron- web browser fail connect fail -pron- send a packet -pron- say hello -pron- 'd like to start a tcp connection but there be no one listen at the other end so if -pron- could not complete the handshake ok so this be where -pron- exit out here -pron- be unable to then send another request alright so i see to see if i have python two instal on this machine ok so what what be try this simple http server ok alright because i do not have http -pron- into so -pron- will have to activate let -pron- just try"
  ],
  "400997f2-57b2-4cbf-8257-c43a761b7df6": [
    "ok right so here -pron- go let -pron- -pron- start to look at two thing first of all the time of when -pron- c code be modify and the time of the executable that -pron- be try to create so in other word -pron- be try to make make be very lazy i do not want to actually compile -pron- program if the executable be already up to date on the other hand if -pron- be not up to date then i i do want to call -pron- compiler so here -pron- be -pron- be go to call gc but i could also call c lang or some other compiler and -pron- be go to be a little bit lazy at -pron- that this system call here be roughly equivalent to call fork exact some shell like there be actually very simple shell call sh ask shelter run the follow command and then wait for that shell command to finish so so that be go to cross platform",
    "call -pron- but -pron- of course -pron- know about this sequence of how to do this on a posix environment use fork except wait and use focus at weight allow -pron- to do more interesting thing like piping to scan and input or capture -pron- standard output use a pipe right so so this be where -pron- want to end up with hopefully -pron- can be lazy and actually not have to do anything otherwise -pron- be go to want to compile -pron- right so i should have some code i can write k let -pron- go to -pron- mic there -pron- be right so -pron- need struct call step and -pron- will have to -pron- will have one for the source and one for the target and so let -pron- call -pron- stack also",
    "dot c and fill in -pron- struct and will do that for the target as well which be a got out ok and fill -pron- in right be that enough no -pron- want to check that stat actually succeed ok so -pron- want to say like be the source ok and be the target ok so -pron- will well check that stat actually return zero ok so will compile down here by call system make a little bit large right so system hey system please call say gcc look for on the path something call gcc and -pron- can compile program will see right so what be -pron- reason for when should i compile well i better check",
    "the time entry and i care about the modification time so -pron- will be s t on the school end time for both the source and the target k right great so now -pron- have get the delta time and if i look at diff time so i have open a man page here -pron- go quickly search -pron- return a difference between two color into time express in second ok so great -pron- will be negative if t one be b forty two ok so if -pron- source be be b forty two in other word -pron- executable be old then i know that nothing i need to do case so if delta",
    "the source and the target actually have this same time what should i do there ok so now this be a case of be pragmatic to stay well -pron- could still be that the source be actually new than the executable so the right thing to do if -pron- can not tell the difference between the two time be hey -pron- should be conservative here and compile -pron- right so let -pron- let -pron- do that now be -pron- do no -pron- also need to consider the case that the value inside -pron- test here inside by stat structure arbitrary because never actually",
    "do not even exist then let -pron- be again conservative and treat that as ok -pron- should by default do some work rather than by default be lazy ok so if s ok be not happy or the target entry be not happy let -pron- just try to compile and -pron- will let any error from gcc hopefully guide the user about what should happen next ok so alright let -pron- compile this and test this ok so here be -pron- little make program right so let -pron- run out to compile -pron- with k klang right i better call -pron- something else so let -pron- call -pron- ok -pron- make alright ok so let -pron- run -pron- make an -pron- say nothing to do ok right",
    "out ok and now great -pron- compile compile -pron- so here be -pron- little program call program dot see -pron- have be stellar world so now but i run a doubt -pron- say hello world right so let -pron- test -pron- -pron- case that -pron- have modify program dot c so how could i do that well of course i could add some pen some line to the end of -pron- so let -pron- use cat to modify -pron- and -pron- be just go to say add some empty line that double in the double arrow here mean please append be control there so now program dot c have some extra line great so when i run -pron- make the composite great i want -pron- again this be nothing to do the other"
  ],
  "4032b6db-39d8-4d61-bef9-218a42c0a7e4": [
    "ok sir let -pron- compile -pron- and let -pron- go and then let -pron- just run -pron- so -pron- will see -pron- -pron- be print out -pron- ip address and -pron- know -pron- be listen on port one two three four ok so let -pron- try connect to that ok so i need a web browser here so i need to go to http key and actually i do not want regular port eighty on a listener port one two three four ok do -pron- work right why -pron- have to give -pron- a second right yeah ok so -pron- send -pron- a web page and then -pron- make a second request to get the get the image and so here be a cove silly picture i use as -pron- first meme and on this side -pron- can see that -pron- see the request -pron- actually get the actual request from the web browser -pron- can find out let -pron- see who -pron- also this be all of the information",
    "-pron- accept where -pron- come from and -pron- be happy to keep the connection alive in this case -pron- do not keep the connection alive in order for -pron- to get additional resource -pron- actually remember always close the connection so in fact this be actually kind of knew connection each time for every resource so -pron- will talk about how -pron- can improve that in a future lecture but for now who be -pron- have make -pron- a very very simple web server and -pron- only take like a hundred line of code if that actually go to serve the internet and server picture ok so let -pron- get outta here let -pron- just see how long -pron- be"
  ],
  "412638bd-03f0-44d0-a48b-5c8f0bee64e9": [
    "hi ok so i get a little bit of a challenge for -pron- here let -pron- go back in time and say well how would -pron- actually implement a valid mutex lock remember these thing be critical to implement -pron- critical section where -pron- can only have one thread manipulate datum structure or some resource at the time ok so what do -pron- think about the following attempt right so this suppose -pron- be try to actually implement the mutex lock -pron- here be -pron- idea do not tell anybody but actually be mutex be actually just a simple integer pointer ok and so initialize -pron- be easy will just set -pron- to zero and then for -pron- lock method here be what -pron- be go to do -pron- be go to check to see if the current value of -pron- integer so -pron- be go to do reference that pointer be equal to one if -pron- be then just sleep for a short period so",
    "great but i do not need -pron- for short period type please give -pron- to another needy thread and let -pron- run again in a few millisecond time so -pron- will keep just keep check this and the only purpose of the p thread yield be the idea that there be no point just check this in a very very tight loop that would burn a lot of cpu time more unnecessary energy so slow -pron- down right so that be -pron- lock first of all wait until -pron- value be zero and then change -pron- ok right so think about that while -pron- also think about what should i do for unlock well unlocking be easy -pron- be the only thread which actually have acquire mutex lock so -pron- be go to just reset -pron- back to zero there be no need to wait for any other thread",
    "ok so what -pron- have course be a race condition -pron- could imagine two thread call p for mutex look at exactly the same time and -pron- both see a value of zero so -pron- both say aah great i have the meeting log -pron- be both go to set the value to one and then -pron- be both go to return ok so the problem be that now i could have two thread actually now enter the critical section what -pron- want to do be make sure one of those thread actually block and so -pron- problem with this naive implementation be that there be a moment in time between when -pron- test value and -pron- set the value ideally what -pron- want be those two thing to actually occur at the same time and to ensure that if one if -pron- mean to set the value",
    "to get in there change check -pron- and change the value as one operation so this implementation that -pron- have written be not adequate how -pron- be go to fix -pron- easy use mutex look wait can not do that -pron- be actually try to implement a mutex lock ok so how can -pron- fix this alright so here be here be kind of two way let -pron- let -pron- let -pron- let -pron- write one of -pron- in here so yeah ok so ok yeah -pron- will do -pron- here ok so here be another way be ok be that if -pron- be run on a very simple system -pron- have just a single cpu then -pron- could",
    "then if i disable interrupt on this then -pron- code can not be interrupt because the only way that -pron- code can be interrupt be if i if i allow the kernel to interrupt what -pron- be currently do so if i do turn off interrupt there can be kind of no opportunity for -pron- kernel to the operating system to stop -pron- code from run the cpu become very blindsided to anything else go on because -pron- can not be interrupt ok so of course for real system this be hardly a practical solution anymore because one with -pron- have more than one cpu and so actually other code can be run concurrently different"
  ],
  "41b0a81d-3653-466e-87dd-0eda65d6af2e": [
    "ok so let -pron- talk about a very well know problem call the dining philosopher this be classic computer science stuff every good computer scientist should know about this -pron- be go to look at this in term of some simple idea about how -pron- can solve -pron- or not and then -pron- will look at some internet code that attempt to solve -pron- when -pron- be not go to do be talk about some of the propose solution eg like stall solution and other that -pron- can find say or wikipedia in through google so instead i want to give -pron- enough information that -pron- two could try to implement -pron- own solution ok so here be the classic idea let -pron- see let -pron- invite five philosopher to -pron- house and serve -pron- food classically this be do with that ok will say a bowl of pasta or something and just annoy -pron- that -pron- can imagine -pron- have give -pron- chopstick or fork either side and before philosopher can get",
    "which be either side of -pron- so here be immanuel kant and before -pron- get to eat -pron- bowl of spaghetti right -pron- need to grab this drop stick to the left and this job stick to that right ok now philosopher do not eat all the time in fact eating represent a critical section where before -pron- can do that -pron- be go to need to acquire these t mutex lock but for the rest of the time -pron- be sleep ok so there philosophise right dozing in the chair ok but occasionally -pron- wake up realize that -pron- be hungry and eat some more and then go back to sleep so -pron- will notice that life would be easy if -pron- actually set the table such that each philosopher have -pron- own cutlery but -pron- do not do that instead each philosopher force to share the country with -pron- neighbor",
    "ok so what be the problem here well let -pron- let -pron- think about some solution that may or may not work and will look to see if -pron- run into problem like deadlock livelock etc ok right so as just a quick repeat the rule of the game of philosopher only get to eat when -pron- actually have acquire both there left and right chopstick so right now for example immanuel kant and ok and philosopher number five over here with that be also able to eat but philosopher two and one and four unable to eat right now so if -pron- wake up and decide -pron- be hungry -pron- be force to wait so if -pron- be actually look -pron- performance this week actually measure how long be philosopher force to wait in order to be able to continue right so let -pron- have a look at -pron- first instruction -pron- will tell all philosopher to follow when -pron- be hungry",
    "then -pron- can eat in other word -pron- can access -pron- yield critical data structure there so new critical section and then of course release both chopstick ok so what do -pron- think about that be -pron- safe be -pron- be -pron- go to be ok be deadlocke possible ok so yes deadlock unfortunately be possible so -pron- could imagine a case where every philosopher be hungry at about the same time and so -pron- all start with these instruction and -pron- have all pick up a chopstick on -pron- left there -pron- go right so now what happen next -pron- will stuck there all wait to pick up the chopstick to the right which be never go to happen there wait for an event that will never occur so no one get to eat or -pron- philosopher be stick inside deadlock so this be not a good solution",
    "be instruction and say all i want -pron- to pick up the chopstick on the right first be that go to be safe be this a solution so obviously not -pron- can now imagine unfortunate scenario make up of a likely but -pron- be theoretically possible that all philosopher pick up the chopstick on there right first and then -pron- be stick there unable to continue so both of these suffer from deadlock so these be not solution to the dining philosopher problem right so in practice of course -pron- do not write code that manage be philosopher eat spaghetti or whatever with chopstick but -pron- do illuminate how different socalled solution behave and -pron- can",
    "up because -pron- be unable to proceed and also what kind of over -pron- have so for example here be another one -pron- could say look i take cs two forty one i understand deadlock and -pron- be only let -pron- eat when i tell -pron- so with this so call solution yeah -pron- have -pron- can ensure that deadlock be impossible perhaps for example -pron- be go to implement some of the banker algorithm -pron- be go to visually look to make sure that -pron- never get into that process state where all of -pron- be hold a left hand shot equal right hampshire stick so -pron- can avoid this but -pron- have not really specify a full algorithm for this -pron- just simply delegate the problem to some manager that stand in front of the table be in las -pron- be miss able to see everything for example and so this also have additional overhead here that -pron- have now get to implement",
    "ok so let -pron- look at and instead another local solution where -pron- have get the follow instruction be go to give to each philosopher -pron- be go to say ok pick up -pron- left chopstick then try to pick up the right chopstick if that do not work then just put everything down so put value of both chopstick and then try again so look menacingly at -pron- chopstick at the philosopher to -pron- left or right then when -pron- finally put -pron- down pick quickly try to pick -pron- both up again ok so then go back to the beginning all right and then of course eat after finished release both ok so -pron- have to think about this one well in this one -pron- have break holden wait that coffman condition no long apply so -pron- can immediately conclude that there be deadlock be impossible and if -pron- be",
    "up left chopstick ok let -pron- do by leave ok there -pron- go left wait this be leave let -pron- do -pron- a new color right here -pron- go right so -pron- pick up the left one -pron- pick up the left one -pron- pick up the left one -pron- have pick up the left one -pron- pick up the left one ok what happen next be that all of -pron- will be unable to pick up the right so -pron- all give up and put down the left chopstick right so -pron- can not have deadlock -pron- could have livelock if all of -pron- philosopher run on the same clock frequency maybe -pron- have one thought per second and then in exactly one second time -pron- will pick up a chopstick again and then turn to the way i can not continue put -pron- down and repeat then -pron- can see -pron- be go to be waste a lot of enerji lot of philosophical enerji try to proceed and",
    "in practice -pron- want to introduce a little bit of randomness etc but now -pron- be kind of tweak this -pron- be try to kind of introduce some heuristic to make -pron- run effectively but at least from a theoretical point of view -pron- have prevent deadlock alright so in one of the lab section be go to ask -pron- to work on a very similar problem to dining philosopher where in order for a an assignment to -pron- to work -pron- actually need to send to programmer i believe to do say some pair programming so again a similar idea that -pron- need to acquire two resource in order to continue so will be up to -pron- to experiment and to try some different implementation of this but there be dining philosopher very classic classic system programming problem and with lot of interesting solution if -pron- be interested in this stuff i encourage -pron- to go and research some"
  ],
  "42b41294-c566-4d01-97b7-8822cdc13bb9": [
    "ok right so let -pron- talk about what what be a mutex mutex be the key thing that -pron- need in order to implement critical section if -pron- think about -pron- code from moment where -pron- critic section be basically where -pron- want to do surgery on a data structure that moment -pron- only want one surgeon in the room most of the time -pron- thread can be busy say work on the sound another one could be work on the ui another one could be talk to the web but at some point -pron- need to come together and say send message over datum bus or some other kind of event structure so when -pron- manipulate that structure only one of -pron- should be change at a time ok so that -pron- have identify a critical section and now -pron- need to make sure that if one thread be currently do that then other thread get temporarily block put on pause if -pron- like whilst -pron- be in that critical piece of code and the key to do that then be this mutex and a mutex be actually go back there right actually"
  ],
  "42ebcdb6-a366-49f4-b95a-a0614c5ac1ce": [
    "hi so let -pron- look at complete solution of -pron- implementation of get line first a couple thing to point out be -pron- know -pron- can actually check to see if the point be -pron- be be give a valid -pron- expect all of these pointer to actually point to be non null so let -pron- use assert to check that each of these value be a non zero ok so -pron- next piece of code be to check to see if -pron- do not actually have a valid piece of heap memory to use so -pron- be go to follow the pointer be give because remember -pron- point be actually point back to the stack variable use by the caller ok so let -pron- follow -pron- and see if -pron- be equal equal equal to zero then that be no use for -pron- instead let -pron- now get -pron- in new buffer ok right now let -pron- have a look to see how -pron- be go to extend the buffer i like -pron- code to be performance so rather extend -pron- buffer just buy one or ten or twenty if i run out of",
    "if so here -pron- go let -pron- dereference -pron- capacity and double that value and now before i can continue i still have some partially read information inside -pron- old buffer so i can not free -pron- up just yet instead i need to copy -pron- and rather than write a little for loop there be a much fast way to copy memory and that be to use and mem copy and then copy be great provide the two region of memory -pron- want to copy of form and two do not overlap if -pron- actually want to work with overlap memory -pron- need to move use m move instead so -pron- know that -pron- be not go to overlap -pron- be actually go to write to some new memory and so that be the code here be ok time to call malloc again with -pron- update capacity value now -pron- be go to copy the line porter from the old area and the number of byte -pron- need to copy be not -pron- be all",
    "of -pron- test now to see ok how -pron- should -pron- should return if -pron- get see return negative one then a couple of possibility that -pron- could be that -pron- have an error in which case time to stop or -pron- could be that the stream be close and if -pron- have not write any have not read any bite at that point then -pron- be time to stop try to read anymore ok otherwise -pron- still watch -pron- want to return a valid string -pron- have get some -pron- have get some bite that -pron- have read already let -pron- turn -pron- into a a valid c string so let -pron- turn that like with a zero and return the last option be that -pron- have",
    "-pron- return heap area and now let -pron- make sure that -pron- have terminate the string and return the number of byte red form the c string from the stream so as -pron- can see that be quite a gnarly little function to write so be not -pron- great that the c library be provide -pron- for -pron- okay so that be get line so let -pron- have a look at the follow and see if -pron- can immediately see what be wrong with the following code and be -pron- suppose to do all right so -pron- have get ok so now actually twenty use getline and year to say oh look at that -pron- be use the correct type -pron- get -pron- to compile but what i should have do be actually -pron- type here be actually ok -pron- be compile with optical useful what -pron- want be a variable here let -pron- just call -pron-",
    "memory and rather than just pass into -pron- that whatever value happen to be inside that variable -pron- actually want to know the address of that variable so that be one mistake second mistake be that both these variable should be set to zero so -pron- fix that so will store that that line now so now great line be point to to some input and will run -pron- ok so i do not want to live with anymore let -pron- just quit line let -pron- try this ok so i want to get out of this and -pron- will see what -pron- little program can do ok so i want this code and i will call -pron- let -pron- see -pron- -pron- be exact -pron- be get line and exec k and fix -pron- right so what do -pron- need -pron-",
    "moment and i get -pron- main -pron- say that -pron- do not want to character pointer here -pron- just want a simple light pointer here -pron- should initialize that meanwhile the size here ok be zero right the next issue be whoop -pron- be update size here no this code suffer from the idea that get line just return the capacity the buffer -pron- be not be return the number of byte read from the stream which be different from the capacity the capacity should be large right so i actually need a new type here and double s for sign size and let -pron- give -pron- a well name like bite red ok and will change that to the address of -pron- variable come look good and now -pron- want to just",
    "use the lp version which mean that -pron- be go to look up on the path and -pron- also mean i have to terminate -pron- argument with a character pointer with value zero in other word another point right so what do -pron- think about that be that any good what will -pron- do ok let -pron- try -pron- ok ok sir will grab this and -pron- will compile -pron- k get lie exact fix -pron- -pron- do not like get line -pron- be miss some important include so let -pron- fix that -pron- need hash include standard bio right and k pilot and -pron- -pron- do not have the white verbal -pron- need to fix the",
    "ok finally recompile so now -pron- can run -pron- and let -pron- give -pron- some standard input what shall -pron- tell -pron- to run how about how about cat please become cat do -pron- work do not look like -pron- let -pron- let -pron- uh let -pron- start debug this ok so -pron- will well program would actually discover when exact fail so let -pron- do that let -pron- print out something like exact lp fail right ok so how can -pron- discover what be wrong be -pron- ready let -pron- run -pron- and this time will type in and -pron- say fail no such file or directory what be go on here can -pron- see what the problem be yet ok well let -pron- part start add some more debugging",
    "case so -pron- go to run so -pron- be about to run and k i want this string and -pron- be go to give -pron- -pron- little line pointer there -pron- go ok so right ok let -pron- let -pron- do that pilot and i probably mess up a graph yeah ok so let -pron- jump to the comma and -pron- be double quote ok right and -pron- know -pron- type cat and -pron- say -pron- be about to run cat great but then -pron- say exact fail now then there be actually two error in this code can -pron- see what -pron- be the first one hopefully alarm bell should be just go off and say hold on a moment actually when -pron- want to exact and change what this process be do -pron- need to specify the program name twice",
    "to find secondly as the zero th argument to the process the main go to see -pron- need to program name so actually -pron- should have use line twice firstly for the program to final disk secondly as the process name ok so if -pron- do that will -pron- work and the answer be no -pron- do fail now then why be that so the only way -pron- may have spot this be if i have put quote around -pron- variable here so if i have put let -pron- see if i put a quote here in a quote here i think this would have give -pron- away what do -pron- think let -pron- try this now case so run -pron- ok -pron- will type something in which would get line will get so -pron- will type cat and -pron- say -pron- have a well one",
    "in the middle answer because that be actually go by standard error so that be not be buffet be be print -pron- be be send to the terminal immediately so let -pron- pretend that that be a problem right so -pron- will make sure this whole line go out straightaway ok maybe all of -pron- now can see what the problem be i hope so will flush standard out to say please please please send everything else lady make sure -pron- have get nothing inside -pron- internal buffer make sure that -pron- call right and everything go ok so let -pron- run -pron- once more and will type cat and -pron- see ok this time -pron- run cat but cat contain a newline yes be gotcha here be that get line be give -pron- back everything -pron- be write",
    "call c a t with a new line -pron- need to strip that newline ok so let -pron- do that right i want to check that bite red be least least one if -pron- be right then if that last character be a new line so let -pron- have a look at bite red and let -pron- see will that be the end almost actually minus one if there be equal to a new line then i know i should remove -pron- ok well season where every move something do not make a new string just put just truncate -pron- by put a zero in there so let -pron- do that right hey line let -pron- change bright red at want to now be the null byte which be -pron- market to say there be nothing else after this point key so and if -pron- do get a valid thing let -pron- actually try",
    "be -pron- run cat -pron- be who be -pron- be run cat run cat there -pron- go right so that be -pron- little program right so what be -pron- just make lady and gentleman -pron- have just make possibly the world 's simple shell prograf be not a very good show program because -pron- ask for input and -pron- get one chance to enter the name of the program -pron- want to run and that be -pron- be never go to give -pron- a prompt back why because -pron- call exec and exact service -pron- will never do anything more -pron- will -pron- -pron- will never have a chance to say and what would -pron- like to do next but this be the basis of bash this be"
  ],
  "43f3b072-76f4-44af-91de-41fdc64695b5": [
    "hi ok so a couple of quick question for -pron- so can thread access heap memory i think the answer right now -pron- should know be yes -pron- can so -pron- be actually pass in some heap memory in -pron- -pron- previous code right so -pron- say ok let -pron- start or run method and -pron- can see -pron- be get the right signature to be give to p thread < br > create and -pron- pass in pointer there -pron- be initialize a stack variable which be go to be individual to each thread unique to each thread but what be -pron- pass in here remember -pron- be pass in that memory that -pron- malloc'd on the main thread so if -pron- go back to original code over here right -pron- first of all -pron- malloc'd < br > that memory and then later when -pron- call -pron- runner -pron- be pass in a pointer to that memory so yes of course -pron- can access heap memory and -pron- could even create that heap memory on a different thread there be",
    "so keep -pron- to be share i could have write malloc inside a different a different function all the thing that i could do be i -pron- main thread i could also do inside the other thread -pron- notice like i even do right here i could have do printf here as well so anything that -pron- can do normally through many trade -pron- can do with the other thread a quick comment here however be that many application with a user interface put all of -pron- ui code into a single thread require if -pron- kind of modify the datum structure that represent the ui interface -pron- do -pron- inside one thread so android do this qt and other framework do this the reason be for performance that if -pron- keep on have to lock that data structure last potentially other thread",
    "bad performance so if -pron- want to update the ui from a different thread -pron- end up create a message which -pron- then have to synchronize and send to the user interaction thread take to process ok so -pron- talk about this yeah that one thread can call malik and another thread can call free that be fine just remember to pass in minus p thread when -pron- compile -pron- to make sure that the compiler know -pron- be use thread right and let -pron- talk about static variable and where do -pron- live so do static variable live on the heap course the answer be no well do -pron- live on the stack no ok so static variable be special -pron- can think of -pron- as basically global variable -pron- live for the lifetime of the program so -pron- where -pron- declare -pron- change the scope mean whether -pron- can actually",
    "and modify -pron- matrix code here suppose k -pron- want to go back to ok there -pron- go so suppose -pron- make a variable static here so let -pron- make the the character see a static variable so between -pron- and -pron- i can tell -pron- that static mean that this only go to exist once that be go when -pron- program be load and become a process some memory will be set aside for that variable now -pron- have declare -pron- inside the function but actually that would be just as equivalent to declare -pron- outside the function with one exception so if i put before -pron- as i could have",
    "this variable see can not be bind can be see by any other compilation unit so another compilation -pron- could have another variable would see and that would still compile fight so -pron- have limit the scope to this whole combination unit but i do not write -pron- there i put -pron- inside a function which mean that the c the actual letter see the actual symbol c be only bind to that specific piece of memory when -pron- inside this function anyway so -pron- have -pron- have declare this variable static here let -pron- go back to the original code now and -pron- can tell -pron- what -pron- be go to do case so here -pron- go right get -pron- static variable here and off -pron- go so late clear this make this be not a compile time constant yeah yeah ok so -pron- will change -pron- to that",
    "ok like this be possibly a little hard to tell what be go on let -pron- slow -pron- down ok right so -pron- will slow down a lot more and ok -pron- could say ten time slow right let -pron- try that and yeah so -pron- will make -pron- well run -pron- again can -pron- see the effect right can -pron- notice that -pron- be all actually print the same character at the same time so the be not hard to see here possibly maybe if i turn -pron- off there -pron- go may be a little bit easy to see so let -pron- run with that ok so -pron- be go to matrix of -pron- go right -pron- can see that",
    "once once -pron- have change value see all future update will use that new value of c and so -pron- be change -pron- anytime that one of these character get down to the bottom which may be one of these kind of fast one over here alright so yeah once once one of these cycle down be say -pron- letter right so do -pron- see the idea that all of these be share the same variable which be sometimes useful perhaps -pron- want to global counter and the other interesting point be that -pron- could make because -pron- live forever -pron- value do not change so for example between between function call so for example if i have a ticket to ticket provider like a little ticket system let -pron- make -pron- and then with static variable"
  ],
  "441ed34b-d340-4f03-8c15-3753a894fcf7": [
    "ok so let -pron- talk start talk about how -pron- can store item on a disk and in particular how -pron- may actually represent the datum what feature -pron- may want in -pron- file system so -pron- be go to start by just a bit of a brainstorm exercise by say if money be no object if i can get -pron- the good software engineer what feature would -pron- like to add to -pron- file system so let -pron- not try to be too constrain by the limitation of the file system on -pron- laptop or what -pron- have see in virtual machine so far this act -pron- think about what -pron- need ok so this be kind of real let -pron- start with the white board and will start to write down some feature ok so what would make a great file system right so let -pron- come up with a few idea and then all kind of see how well -pron- do and compare -pron- to some other kind of brainstorm exercise -pron- have do in the past right so what would -pron- like first well maybe -pron- want some access control right so -pron- want the idea that",
    "and perhaps i want to make sure that some people can not read all of -pron- file or perhaps i want to make sure that some file be only read only or perhaps i want to make sure that only a limited set of file should be execute so if -pron- give -pron- a a file i can not just easily turn that turn around and say ok bash run this or ok cpu load this as a program so i want to define some sort of security about -pron- mike file maybe -pron- want to write a file system create file system that even track who be access the file so maybe the sort of audit and log auditing and log perhaps if -pron- be go to get -pron- file system to the nsa i want to know which analyst have open which file so perhaps -pron- have get some kind of logging",
    "create each week probably want to keep track of the late file so there be some meta information that -pron- want as well so -pron- have get thing like when be the last file access when with file open and who by how large be a file in term of byte or other information or if -pron- be a music file who be the artist or where be -pron- record so -pron- may want to have more than just lump sum bite if -pron- care about multiple version perhaps off -pron- system should innately support that so for example if -pron- overate a file perhaps -pron- system be be compromise and -pron- be try to lock up all of -pron- file in order for -pron- to pay some bit go to get -pron- unlocked -pron- would",
    "so i could go back in time and pull out the previous version all version before that so maybe -pron- want some versione as well ok now on a typical file system -pron- be not unusual for the same piece of datum to be find in multiple place there be certainly go to be true of course with versione but -pron- and i may have a same copy over text file same copy of a c file so if i share some music with -pron- for example or video file and -pron- be store -pron- on the same disk -pron- seem a bit of a waste of space to actually store those bite multiple time on the disk surface so perhaps -pron- want -pron- file system to support deduplication right do i find deduplication right to find multiple copy of the same information may be the same file",
    "ok wait what else would -pron- like ok so far -pron- have be think about feature what about performance case so -pron- like -pron- file system to be nice and fast -pron- want to have a good performance when -pron- be empty and asbestos performance as possible when -pron- be get near fall as well so -pron- care about the performance of the two different way typically -pron- have random access so if i start ask for oh no -pron- -pron- list be go can i get -pron- back there -pron- go right random access spell that correctly random access so i want to jump around a particular file say -pron- represent a database of all thing and -pron- be get different record from that or maybe i care about sequential access so perhaps -pron- have write a web application call class transcribe and i know",
    "file as fast as possible out of this machine onto the network so -pron- want good sequence sequential access and of course -pron- want to do this -pron- use in the minimum over cpu time because i want to use -pron- cpu for other thing so what else may -pron- need here right k so if -pron- be store say text information that text could easily be compress so maybe -pron- file system should support compression as well so for some file for example suppose -pron- be store all of the linux kernel that be just a lot of c code and i could store that in a very much more space on -pron- disk and if i can decompress -pron- quickly i may even",
    "and actually get well performance from -pron- file system so -pron- want compression potential potentially for performance if i can decompose quickly but also of course i want to maximize the amount of thing i can store on -pron- file system right what else ok so -pron- could go through and keep talk about kind of more feature like this but i want to remind -pron- that so far -pron- have be think very much like software engineer -pron- have forget that real filesystem live on real device and so a big thing that -pron- have miss out here i have not think about be that -pron- want -pron- file system to be robust so perhaps there be go to be an error on the disk surface because the bit be never write correctly perhaps",
    "make all of -pron- file unreadable just because one bit be flip simile if i drop -pron- hard disk -pron- physical spin hard disk -pron- 'd like to think there be a fair chance that have not suddenly lose all of -pron- file so there be robustness in term of what damage and how likely be -pron- that -pron- be unable to recover anything there be also there be also -pron- could talk about the kind of likelihood of non rick of recoverable file so can i recover anything but i also may care about how short be i the data time get back be correct so what assurance do i have",
    "so be there any assurance the datum be get back be correct so maybe -pron- want to initially store some checksum for example or maybe if the datum on the disk be absolutely super critical for example be define how file be lay out on the disk -pron- may actually want to store some of that format information multiple time on the disk so if that particular sector of the disk that particular portion of -pron- be corrupt i have a backup copy of this elsewhere ok -pron- write anything else ok i just mention one other idea -pron- want to efficient backup so typically i want to be able to do backup on a regular basis and with large disk these day -pron- be become quite inefficient and quite timely -pron- take a long period",
    "which one have change which one have be create -pron- would be great if -pron- file system could actually tell -pron- which file have be create or modify since the last backup so -pron- need some feature to support that how be -pron- go to do that right i kind of want to mention that one fun thing about all these feature be that -pron- be not require of course with all application but -pron- also be difficult to implement together for example compression may or may not hurt performance deduplication require ability to scan file and may take additional cpu time additional memory and so may actually actually affect negatively the performance of -pron- whole system the last thing will put on here which be kind of go",
    "ok -pron- be -pron- be write -pron- be kind of sympathetic with the kind of hardware constraint and feature so for example if -pron- be wait on a spin disc there be actual physical constraint about how quickly that can spin how often a particular sector be actually readable if -pron- be write to an ssd then portion of that electrical system can only be write a number of time before -pron- start to become likely that i will not be able to correctly read that bit again in the future so i want to make sure that how -pron- represent -pron- file on -pron- disk how implement these feature and how i talk to the hardware respect",
    "up with a kind of a good list not bad for a quick brainstorming session let -pron- have another look at novel list i make see how close -pron- get so what do -pron- what do -pron- miss so here be -pron- another kind of incomplete list queso in this list -pron- think about kind of hardware failure so that include not just cosmic ray and kind of dust on -pron- disc surface but thing like what happen if a prior to -pron- disk i do not complete maybe because there be a power los how likely be -pron- that -pron- be able to detect that or recover from that in some way or have i just lose the entire disk have i just lose all of -pron- file or in the future what i read back of file and not even realize -pron- be incorrect here be some other feature -pron- do not think about be account and",
    "fill up the storage system or do i want to be able to limit the number of file on the amount of disk space that -pron- be write too -pron- do not talk about indexing and search so if tomorrow i want to find all file by a particular artist or if i want to be able to kind of find the moment in a video file that though the word camel be speak then perhaps -pron- file system should support that in interesting way k so everything else -pron- kind of come pretty close -pron- do not talk about encryption which be an important security idea so encription can mean different thing -pron- can mean if someone get physical access to -pron- disk let -pron- say -pron- steal -pron- can -pron- do not read -pron- file or if someone be a user or if someone even be an administrator on machine be -pron- able to read -pron- file directly form",
    "the actual information and the meta information as well maybe -pron- be not just enough to store to encrypt the actual content of a file maybe -pron- even need to make sure that -pron- be not possible to see the name of the file or who own -pron- or when -pron- be modify even the metal information become sensitive information ok right so that be a pretty good listen i hope -pron- get to see why actually implement a file system be hard and many file system today be surprisingly old -pron- be actually some of the old code -pron- will find inside the kernel why because write code without bug to satisfy all of these kind of design idea and design goal be really really really hard and this",
    "do not want -pron- file system to suddenly start misbehave when -pron- disk become full for example -pron- want all file system to work with all sort of edge case for example when a particular sector on a disk go bad or if -pron- want to start a shuffling information around in -pron- disk for well performance in the future these little use case be all tricky and take a long time to kind of get right both in term of correctness and performance on -pron- expectation of this part of the of this part of the kernel work robustly again and again and again even if -pron- be write large number of light at ten to twelve or great number of byte be very very high so -pron- tend to find that this code be extremely old and mature and extremely well tested ok so that be kind of a fun little game perhaps -pron- 'd like to think about -pron- own feature if tomorrow -pron- decide to have a new startup to make a new file system will return to this little game in the future"
  ],
  "4566a81d-1bd5-43f8-8720-ba122a2b1f23": [
    "hi so let -pron- have a play with make process and start or pause -pron- and -pron- start -pron- again ok so -pron- be go to play with six stop and sit continue right so -pron- better start with a little process that happily merrily go along and so -pron- will take -pron- little dot writer again but this time -pron- be go to go comment out any of the kill and raise route here so now -pron- should just happily keep print sixty dot ok so now i will compile -pron- again ok right so if -pron- go gcc dot waiter and walk there -pron- go ok and i need to say that -pron- will see ok so off -pron- go little dark vader ok there be purity so now let -pron- send -pron- a signal so hey doc vad sosig stop",
    "actually -pron- can restart -pron- again if -pron- send a cig continue event off that process go none the wise than -pron- be actually pause for many many second so -pron- could do this if -pron- say need temporary stop a process if send too much datum or -pron- want to pause -pron- once -pron- get a debugger ready to attach to -pron- so actually this little technique be go really really powerful the other thing be really powerful be -pron- can use something call kill and give -pron- a name as well so let -pron- send sig int to any process that have the name dot writer and do -pron-",
    "ok there -pron- go so let -pron- try i forget the negative for foot ok kill signet and off -pron- go and also do not do that so if i have multiple program call dot writer running -pron- would all print do not do that let -pron- try that ok so how can i run something in the background of bash this short answer put an ampersand at the end ok so now -pron- have get would mean i do not have dot later oh yeah ok so be helpful if i put a dot four slash dot force operator ampersand -pron- have now get two daughter go but -pron- be run that one in the back in the background so -pron- be happily go so if i now do -pron- kill all oh -pron- be hard to type because -pron- be type at the same time so kill all space miner sig int and then any process which have the word i can not type this kill or minus dot"
  ],
  "4601a707-5dd9-44c5-b66d-261ac8ae080b": [
    "hi ok so let -pron- jump to a different level let -pron- jump back into the c library perhaps -pron- wanna write some very portable code -pron- do not require on require to think about these low level posix interface be -pron- just want to write code that work say in window as well maybe -pron- kind of other operating system that support the c library and which be kind of everything so let -pron- have a look at how -pron- can kind of jump around in file now i big word of caution here be that the function be go to look at only work where -pron- can specify the position of file in term of along so say on a typical machine today a long may be assign value represent use four byte in other word the same as be be in today so -pron- can only really represent file up to two gigabyte so bear in mind that be a kind of big limitation of the function be go to cover today right so",
    "about to f seek and f tell right so f tale tell -pron- the count position of where i be be a stream so if -pron- have open up a file use f open i do not always want to read byte from the very beginning or maybe if -pron- be like a movie file the movie file actually would have some index information to say oh well if -pron- want to find say the audio stream go to this byte offset or if -pron- want to find the beginning of the first video stream go to this file offset or if -pron- want to find the first frame go to this other offset so there be lot of example where i need a random access to a file so if -pron- file on a disk or network disk then great i can start jump around -pron- file so that be what -pron- be go to be able to do with this fseek and ftell so ftell tell -pron- -pron- current position so that be useful if -pron- want to kind of come back to where -pron- be an f seek allow -pron- to seek to a new position",
    "the trick be to know what be this this whence an what do rewind do ok so -pron- will get to rewind and a little in a little moment notice -pron- do not take any parameter but -pron- will let -pron- kind of guess what that may do in a moment ok so let -pron- talk about how this fc quirk right so -pron- be go to pass in a a filestream that c base in the fast ring if -pron- try to use this on standard io like stamp instead -pron- out instead of there -pron- be not go to work those be not seekable but -pron- will work with this regular file so -pron- pass an offset and that offset be go to be offset to something that -pron- specify in here and -pron- have get three option either be an absolute offset in meaning that -pron- be with respect to the beginning",
    "or -pron- can be an offset relative to the end of the file and notice this offset can be positive or negative so -pron- can let -pron- pick a nice bright color ok -pron- can set this little go thing to three different value bring -pron- down here -pron- be -pron- have get seek set which be there -pron- go ok i just want to specify as an absolute position sikur mean i want to specify relative to -pron- current position or seek end which mean i want to specify -pron- relative to the end of the file typically if -pron- want to use this weekend -pron- may say ok go to the very end because now i want to start immediately append to the end of the file or -pron- may use a negative value for example i want to read the last one hundred byte of the file",
    "how big the file be and then start read all of -pron- ok so let -pron- have a play with this right so -pron- will need a new file here let -pron- let -pron- not do all of that stuff start simply ok i will grab -pron- usual include here and or -pron- will need a ok get out of that so -pron- will need a new let -pron- have a file here call about touch see can tell right ok and actually -pron- be use f seek right and dell ok ok so -pron- need standard -pron- o h",
    "lobby please open -pron- data file katie datum say csv and -pron- can open -pron- for say reading and i want to reserve some space for may -pron- file so -pron- 'd like to know how big -pron- be now one way -pron- may have see already be simply to use stat stat tell -pron- all sort of great thing about a file -pron- size which file system be on the number of hard link -pron- have not talk about yet modification time and all that good stuff but let -pron- just stay within the c library today for the most portable code and figure out how big the file be so -pron- trick would be to go to the end of the file so go to the very end right so will call f seek k and which file this be -pron- file handle ok where i want to go to the",
    "end now i can tell where i be so let -pron- say hey f tell right tell on the file k so that tell -pron- -pron- current position so that also tell -pron- then the number of byte that i would need so i can do thing like if i want to have some space on the heap i could say ok malloc give -pron- that number of byte now for brevity -pron- be skip a whole load of error checking but i just want to kind of sketch out the code so great -pron- have now get a some space and now i can read everything into -pron- ok so how can i start read -pron- bite well i can use something call fread but -pron- be not go to do that today instead -pron- be go to concentrate on this this little problem in here which be if i start read -pron- be now currently the end of the",
    "ok so how can i do that well i need to use f seek again otherwise -pron- future call to read -pron- will say oh -pron- be sorry -pron- at the end of the file so let -pron- go back to the begin right so i use a position of offset zero but this time i want to use from use the absolute position so that be sick set ok yes there be other way i could have write this i could have do something like ok use a negative position from the current position that would have work as well ok or -pron- could have say ok go that negative number of byte form the end as well that would have work as well although there be one other way -pron- could do this which be rewind and rewind hark back to the day when"
  ],
  "4675bcdc-930f-4e8f-bcf1-5baea25f1628": [
    "ok so -pron- have get a concept of i node let -pron- actually design -pron- own file system so -pron- be go to base -pron- little design on the x two file system which have be around for a long time but -pron- be the parent of the third generation x t three which come out in two thousand and one which add journaling so journaling be very useful if -pron- want to support file system crash when the file when the power go out so ok so -pron- can -pron- can -pron- can sort of say support power failure so this idea that i can resurrect -pron- file system back to a good well know state where all of the datum and the link inside -pron- file system be correct and all the block that i refer to as be currently unused",
    "of what action i have be complete and then today -pron- laptop -pron- linux laptop be probably use e x t four and that add a lot of performance and also support for large file increase from sixteen terabyte which should have be big enough for everybody up to today four now support want eat a bite of storage so that should be big enough for everybody -pron- be not go to look in detail at at e x t three week to four -pron- be go to concentrate on this simple model of e x t two right so here be -pron- plan remember -pron- disk drive have a lot of spin part or if -pron- be an ssd will have a three dimensional geometry and i want to ignore all of that geometry for now because i would have a very abstract",
    "that be -pron- hardware be go to support the idea of say please read this block one or please write this block two and that be all i need be a very very simple kind of block read or block right and -pron- 'd like random access if possible please ok so how should -pron- do use all of these disk block ok so -pron- will take the zero block here and will declare that as super block there -pron- be so that be go to hold some meta information -pron- choose a new color here how about how about some green gay so that be go to hold some meta information about how -pron- have decide to organize the the rest of the disk so before -pron- can actually start talk about that i note and where the actual data be go to be store -pron- well read superblock ok but after that super lock -pron- be go to use the rest of this place here",
    "so i can easily calculate where -pron- particular i know -pron- be in relation to a particular this block and i know -pron- -pron- be go to be pretty small let -pron- think about what -pron- need to store inside -pron- so -pron- have thing like not the filename -pron- be not go to store that inside and i note instead -pron- have thing like who be the owner read write execute permission where on the disk will find some of the block to do the size of the total file in byte and maybe a few other thing but typically i know be go to be of the order of one hundred and twenty eight byte or sixty four byte a pretty small so -pron- can actually fit a lot of -pron- in per desktop for kb chunk ok so -pron- be actually very very small here right so -pron- will set aside some space for all of these",
    "here will say that -pron- get one opportunity to decide how many i know -pron- would like to be able to store on this disk so -pron- make that choice when -pron- format -pron- when -pron- say right this be go to be the layout of -pron- disk -pron- be go to set aside sony dis blocks for the -pron- node here -pron- go and the remainder will be use for all of the datum that i want to store so that be -pron- initial very simple model -pron- be not very accurate in the sense that modern file system allow -pron- to have more than one area of memory set aside for on -pron- but -pron- be a good representation of how -pron- start with early file system ok so make that choice when -pron- when -pron- first format an will store that -pron- choice inside the super block let -pron- hope -pron- do not under estimate about the number of file that -pron- intend",
    "ok and the rest of the space -pron- be go to actually use to store the content of -pron- cat picture ok so the first block of cat dot jpeg will be here if -pron- be of a detailed jpeg picture then -pron- be go to need some other block ok and so for performance i probably put out try to use block which be contiguous which be next to each other but if -pron- disk become very fragmented because i keep change -pron- mind about the kind of cat picture that i want to store -pron- overtime i may say that ok so now anouk picture use these three block but also -pron- have to put the fourth block way over here and so let -pron- come back right so if this be a spinning disk -pron- may take quite awhile for the physical part of the disk to read these block and then jump over here to read these block ok so -pron- may want to make sure that if possible",
    "ok -pron- right so ok so one thing that -pron- may notice right now be that what would happen if a dis block get slightly corrupt so for example let -pron- say that some dust or for some reason the surface here get corrupt i be unable to read these bite so right now -pron- know -pron- have lose a particular cat picture or maybe the cap that particular cat picture will not display exactly correct now what about if -pron- actually instead have some damage over here and be super block ok so now this potentially render the whole disk unusable because inside the super block -pron- say where do the number of inode kind of finished and which block be go to use for the datum so in practice the super block be actually often replicate"
  ],
  "46d738b3-f1ab-4400-a64d-55474f51875f": [
    "hi so what be wrong with the follow code let -pron- have a look at this spot the error problem a little bit more complicated than -pron- have see before here some code be actually go to use some heat memory to initialize some floating point value for 's case so what -pron- do well -pron- be take some n value and then -pron- be try to ask malloc for some memory be try to a calculation on the number of byte that -pron- see right but -pron- have get a problem here that the actual number of byte -pron- see be an incorrect calculation here yes -pron- have an item but the size of each of those item be not a double pointer who know what that could be maybe on a thirty two bit system be point would only be four byte instead -pron- actually want the size of a double now -pron- tend to write this kind of error simply because -pron- put double here on the left to say i want to point to a double but the size of each element be not that so the fix be",
    "malloc realloc calloc stop and think most error be often find around these kind of call -pron- do not think carefully enough about -pron- memory allocation ok so and just avoid the kind of the symmetry that oh yes -pron- be have a pointer that point to devil but -pron- actual thing that -pron- be store be only over double right so now -pron- have get a pointer to a double in other word malaga say great i put aside some memory for -pron- here be the very first byte of the memory that -pron- be go to give -pron- so let -pron- store that inside be available here and -pron- be give into the compiler then that -pron- want to treat this memory as a place that -pron- can store double value float point value in so now -pron- can initialize this memory and that be what this next line attempt to do so while be i be less than n let -pron- run through this treat -pron- as an array and initialize",
    "code appear to work but there be a couple of kind of very dangerous and exciting thing about -pron- the most important dangerous and exciting thing about -pron- be the fact that -pron- never initialize the value of i so this be not java in java great everything get initialize but in see this be a stack variable and stack variable be not initialize so the big rule of thumb here be that stack variable and memory -pron- get back from malloc be not initialize right so what be the value of i who know today -pron- may start off with zero but -pron- do not have to in fact -pron- will be whatever bit pattern happen to be in the stack memory that be assign to i when -pron- call this function so that be kind of the most glaring problem here there be two other problem that could have mention which be that there be no error check here with with -pron- multiplication if n be huge -pron- could actually possibly have numerical overflow here secondly malloc -pron-"
  ],
  "48c308bd-22a2-405e-9437-75a1df1794fe": [
    "ok , so -pron- have get some code maybe some stuff -pron- have write say inside cs two twenty five or an internship or -pron- have get -pron- own startup , and now -pron- want to make -pron- faster ! so -pron- want to make -pron- so that actually multiple thread can use this code at the same time . okay , so let -pron- start by just look at simple typical kind of link list code . perhaps -pron- be go to write -pron- in c++ perhaps -pron- be go to write -pron- in c , perhaps -pron- be go to write -pron- in some other language . -pron- do not matter . the idea be all the same . ok so here be the goal . -pron- be go to try to modify this code to be what be call ' thread safe ' in other word -pron- can actually use -pron- with multiple thread so along the way -pron- be go to fix some error as well . ok so what do -pron- got . -pron- have get a pointer that correspond to the start of -pron- link list . in more complicated example this may be in a separate data structure but this be good enough for -pron- little example here . ok , and then -pron- have get two method to",
    "or remove from the front of -pron- link list . ok , right , so let -pron- see . what do -pron- do now ? can -pron- spot any error in this code ? ok -pron- can see one already . -pron- be attune to this one . this look exactly like this . this be not a good sign . ok so the goal of this prepend method be to be able to create a new link with this value . so how do -pron- create a link ? well , first of all , -pron- better get some memory . the easy way to get some memory that be not go to be immediately deallocate when -pron- return from this \" function be , of course , to use malloc . \" \" hey malloc ! -pron- need enough    \" space to hold -pron- link structure . right so the error here be that -pron- actually want the size of the struct",
    "in there . right , so great ! -pron- have now get enough space hold -pron- and now -pron- can set up the value of -pron- memory item here . and internally now , -pron- want to consider that piece of memory as have a ' value ' and a ' next ' . so all the arrow \" do be to say \" \" right , use the pointer that -pron- have give \" -pron- , like link , and -pron- be go to dereference -pron- but -pron- be not go to dereference -pron- right at the beginning ... -pron- be go to have some offset into that structure which \" represent the value of the ' next ' pointer . \" \" okay , so \" great ! -pron- be set up the value . -pron- be set up -pron- ' next ' to be equal to the current head ( -pron- global variable ) . and then the last thing -pron- change be ' head equal to link . ' \" so , provide -pron- fix the \" \" size of \" \" bug , this would work \" with a single thread ! alright , so -pron- can imagine ' head ' be hold the address of some link . here -pron- be . and this have a",
    "little link object there . and what have -pron- just do . well -pron- make a new link here . -pron- say -pron- value and then -pron- \" say \" \" ok , ' next value ' , -pron- need to point to the same thing that head \" \" do . \" \" so -pron- be point at the original top \" of the link . there -pron- be . and then finally change head so that -pron- be look at -pron- new link . ok , so -pron- have make an entry . -pron- preprinte -pron- . right , let -pron- have a look at the remove version of this . what be -pron- do ? so -pron- want to grab a pointer -pron- be go to make a pointer that be look at whatever head be look at . so , if head be look at this entry here , now -pron- have get this other variable , this link variable , -pron- be also look at the same memory structure \" and then -pron- extract -pron- value . ok , and then -pron- say \" \" right \" head \" change to be equal to link->next . \" \" in other word , whatever \" this link be point to ( which may be null ) , that",
    "to point to the same thing . right , so in do so -pron- skip over -pron- friend here and -pron- be no long apart of the link list , but -pron- still be take up some memory , \" so -pron- better remember to tell the heap , \" \" oh ! by the way \" \" -pron- be do . \" \" ok , -pron- do not want -pron- . \" \" right so the observant among -pron- may say \" \" ok , will \" \" this always work ? \" \" one concern , of course , be that what \" if there be nothing in -pron- link list . what if ' head ' , for example , point to nothing , to null . ok , so then -pron- code would crash and here be where -pron- would crash . -pron- would crash when -pron- try to dereference this pointer . so -pron- have get a null pointer pointing at address zero and then \" -pron- say , \" \" ok , let -pron- try and read some offset from that . \" \" so \" maybe offset 0 or offset 4 .. so -pron- end up try to read address 4",
    "ok , but what -pron- do like about this code be that -pron- do not free that entry here , until -pron- have finish use -pron- . so -pron- have pull out , for example , -pron- value . -pron- have see plenty of badly write link list code where -pron- free -pron- \" first and then -pron- say \" \" ok old link that do not exist , \" \" tell -pron- about -pron- next pointer . \" \" that may work if \" -pron- be lucky , but be actually undefined behavior . ok . so right ! now that -pron- understand how -pron- work , let -pron- see if -pron- can understand how to make this code ' threadsafe ' . right , so -pron- need to identify the critical section : ' where be -pron- that -pron- only need one thread at a time to be run . ' and so -pron- know that malloc be threadsafe . -pron- be perfect ok for multiple thread to call malloc . so if list_prepend be call in two thread at the same",
    "inside each stack -pron- would have -pron- own ' link ' variable . so -pron- would be point to different piece of memory . life get exciting ! not when -pron- try to use a parameter value , but when -pron- try to use the actual data structure . -pron- be this moment here when -pron- read ' head ' , that -pron- may run into problem . so -pron- could imagine , for example : -pron- have get ' head ' here look at an exist block , meanwhile -pron- have get one thread that -pron- be set up ( a new link ) and -pron- have get another thread that -pron- be set up ( a new link ) , and if life be fine and happy -pron- would end up with these in some order . -pron- do not really matter which order , just depend upon which one happen to be call first . but if ' list_prepend '    be call at the same time -pron- could imagine that both of -pron- would read the old value of head here . in other word , -pron- would both end up with the next pointer that point to the old beginning of the list ... whoops ! that be not so good ,",
    "-pron- need to do these thing one at a time . ok , and similarly , the next line , when -pron- change the value of head , -pron- want to make sure that -pron- do not accidentally overwrite another link that be be create at the same time so for example , -pron- do not want to first set head to be equal to a new one and then another thread immediately say , \" \" \" aww , do not look at that one , \" \" look at -pron- instead . \" \" and -pron- skip over one of those create \" link . ok , so that be the piece of code that be a critical section in this first part of the code . that absolutely -pron- can not have two thread run these two line at the same time . -pron- would like those two line to be ' atomic ' mean that -pron- should behave as if -pron- happen in just one go and -pron- can not be interrupt and no other thread can actually run those two line at the same time . ok so how do -pron- do that ? ok easy ! let -pron- use -pron-",
    "initialize ... so let -pron- pass in -pron- ' duck ' ( quack quack ) . right . and then afterwards -pron- will unlock -pron- . ok right . \u00a0  be -pron- do ? and be -pron- ok for list_prepend ( ) and list_remove_front ( ) to be call at the same time ? for example , one thread may be call list_prepend ( ) and another thread may be call list_remove_front ( ) . uh oh ! that be not safe . -pron- do not want these two function from change the value of head at the same time . -pron- do not ..... umm . so let -pron- make sure that -pron- define the critical section correctly in here as well . alright so when -pron- be remove thing , -pron- read the value of head and at that moment , -pron- 'd like to make sure that nothing else change , that this still correspond to the beginning",
    "the value of head . ok so these line be    important to define as a link list . right , so -pron- will say that ... ok ... this part in here be go to be protect by -pron- mutex lock . so before execute any of that i will call pthread_mutex_lock . ok ,    and afterwards -pron- will let everybody else play again . ( use pthread_mutex_unlock ) \" so ok . \" \" let go of the duck \" \" ... release -pron- back to the wild and \" there -pron- go . and -pron- can continue . ok so notice that -pron- be not free -pron- till later and in fact all of -pron- free operation could happen at the same time if -pron- have lot of thread call this . but if",
    "remove lot and lot of link , -pron- would each get a different link , because each bit of this code here do not happen in parallel . ok , -pron- have actually bring order to the madness . -pron- be like -pron- have a thousand people run crazy saying ... ok -pron- will not use that movie reference but if at some point -pron- turn -pron- into a nice order dinner \" queue and say \" \" ok -pron- go first and then if -pron- want to eat then \" \" -pron- have to get in line \" \" and just one person at a time \" get to use a salad bar or something . ok so ... will this code work as -pron- have write -pron- ? yeah .. kind of . well yes -pron- will , but -pron- want to mention a couple of thing . first of all , -pron- may be worried about what happen if -pron- call list_remove_front ( ) too many time ? yes , that be a problem . -pron- code do not check to see ... do not check for underflow . do not check to see",
    "and -pron- do not check to see if malloc succeed and -pron- actually hold on to the link a bit long than -pron- need to because this line in here where -pron- extract the value of the link that could be do afterwards that could be do when -pron- return but before -pron- free -pron- so -pron- could give back the duck and that be an important idea that -pron- want to minimize the contention of of -pron- log so -pron- program run past so there be only small part of -pron- code in term of the total time that -pron- take to run where -pron- need to hold onto a lock and say ok nobody else can do a critical critical section because -pron- be hold the lock lock so so -pron- will keep those piece of code to a minimum and so this idea that -pron- lock -pron- do a tiny bit of work on a data structure and then -pron- unlock -pron- that be very common to see inside multithreade code"
  ],
  "48e97dd2-4492-4527-bff9-3e3f957a074b": [
    "hi ok so here be a challenge -pron- want to implement a barrier now to make -pron- easy -pron- be go to implement just a single use barrier and in fact usually be one of the cs two forty one assignment -pron- ask -pron- to think about how to generalize this into a multiple use barrier and one of the complexity of implement a multiple use barrier be -pron- can imagine right -pron- have get -pron- thread -pron- have all arrive at hold gate here right so -pron- be all kind of get stick inside get block inside the little weight call here right and then after the eighth wonder way so -pron- be five six thread call weight seven thread call weight ok and then finally the eighth red call weight and so -pron- can say ok daytona five hundred off -pron- go and -pron- open the gate right and -pron- all start rush out -pron- could imagine that one thread complete -pron- work really quickly and so actually call p thread sorry of course the weight on -pron- barry again who and -pron-",
    "to wait and -pron- may actually even do that before this laggard thread over here be even manage to wake up and exit -pron- barrier so somehow -pron- need a way to ensure that this eighth this really fast thread this wiley coyote thread actually still block here even if -pron- even if -pron- do that before the eighth reader leave so -pron- need a way to disambiguate the first block the first barrier use form the second barrier from the third barrier from the fourth barrier and -pron- will let -pron- figure out how to do that be actually multiple way to do -pron- ok so let -pron- think about how -pron- want to do this right so here be what -pron- be go to do -pron- be go to keep track of the number of thread that have",
    "a very general barrier because i just want to think about how -pron- can use a p threat condition wait call to implement -pron- barrier ok so the idea that look -pron- have get this share variable here be just a global variable an multiple thread be go to call power so let -pron- keep track of the total number of thread that have be there call this so -pron- will have a little counter in every time a new thread call this -pron- be go to implement -pron- counter right now then what if two thread call this be exactly the same time this be not thread safe so i will actually need some kind of lock here so -pron- will have a p thread mutex lock k right and what else do i want to do well if -pron- counter have not yet reach eight then i want this to bed to go to sleep",
    "here right so if the counter be less than eight then try again and will hold on a moment -pron- should be use condition variable for this so let -pron- have a condition variable here to say ok please block inside here and release the mutex lock ok right so if that will go to sleep -pron- can wake -pron- up occasionally to see if the counter value be get to eight but to initially the first seven thread that call this that all go to see counter value which be less than eight right so be -pron- do well actually when -pron- get out of here -pron- should unlock the mutex so let -pron- do that but what should -pron- do to make sure that -pron- wake up all",
    "red so if -pron- counter value have reach eight then i know that -pron- be time to wake up all of the other thread so how should i do that should i call p three condition signal no that be only go to wake up one of -pron- i want to wake up all of the thread which be inside this wait call here so let -pron- call broadcast on -pron- condition variable there -pron- go right -pron- will now wake up of course -pron- can not immediately continue why not because -pron- be hold the mutex lock but there be live and ready to go ok so what will the eight thread do -pron- will call broadcaster ring the fire alarm and then -pron- a scape -pron- call unlock an out -pron- go ok so now -pron- have get seven thread that be work up inside inside here inside -pron- condition variable ok each one now try to obtain the mutex lock one of",
    "mutex lock and so the next red inside here be able to acquire the mutex lock so -pron- be call period new text log succeed and what be -pron- do -pron- immediately come out and unlock the mutex lock so then one after another all of -pron- thread can finally escape so that be -pron- barrier so -pron- have implement this use open mutex lock just to kind of quick idea suppose last i have six thread come in so -pron- counter now six and now i have two thread which immediately call barrier at the same time what would happen ok so again -pron- have the mutex lock to the rescue that this will ensure that one of the thread will acquire the lock and the other one get block so there can only be one winner like two toddler fight over a toy eventually one of -pron- say that the lock be mine -pron- be hold -pron- i have the duck and so that thread will",
    "-pron- be go to sleep in sleep on the one thing here and so get out here right that would see a value of six which be implement to seven so -pron- then -pron- would go to sleep so now finally that release mutex lock and finally -pron- last dead but the most important thread of all be able to acquire the metric lock then call broadcast and off -pron- go and -pron- release all the lock ok so that be -pron- single use lock one challenge will be to figure out how can -pron- generalize this into a multiple use barrier so how can -pron- deal with the special problem of thread which may complete very quickly and recall the barrier method before the seven other thread have manage to escape so"
  ],
  "491a80ef-eda8-4e66-a332-f2dd12cb7ebe": [
    "ok so let -pron- complete the follow to return one if the give c string contain an at symbol or not otherwise return zero so let -pron- write this little bit of code so first of all take a look at this -pron- be go to be give the address of a character so -pron- can read this backwards -pron- variable ptr be appoint otherwise -pron- be go to hold an address of something and the type be a hint of the compiler to say how much maybe -pron- should read or write when -pron- actually use this pointer be -pron- go to read or write four byte for example for an integer or but no in this case -pron- be just character in other word -pron- want to read or write just a single byte whenever -pron- actually use this pointer and that be what -pron- want to do most of the time most of the time -pron- do not care about where the pointer be actually want to use -pron- value -pron- know the pointer point to some memory so let -pron- go and read or write thing at that memory ok so let -pron- have a go at write this function",
    "favorite ide minus cat let -pron- see how far -pron- can get like what be cat will by default if -pron- just one cat and -pron- say hello -pron- just send a line back to -pron- so -pron- can keep do this but let -pron- not -pron- could also ask app to print out some file so please print out the content of a particular file for example but today what -pron- want to do be actually take the output of cat and instead of just say put -pron- back to -pron- i want to redirect -pron- output to a file so let -pron- call this file contain at right so now whatever i type will be send to that file right so what i need inside here well i will be do some possible input and output so let -pron- include standard io dot h so i can use thing like printf and now let -pron- start the may start -pron- program",
    "-pron- contain function well for example i want to be able to say result and then -pron- will call contain a lot of c code actually the style be to use underscore so let -pron- do that and will say contain out and -pron- expect if -pron- call -pron- with a test one that if -pron- pass in a string with an app side -pron- expect that to be equal to one ok so -pron- can talk about the certain little bit but for now let -pron- just decide what -pron- print out so i print out result so if -pron- be all be one then then that -pron- evaluate to true and -pron- can print out something and -pron- can say contain that right and otherwise -pron- will say no app find ok but this be not the good of code -pron- probably should put those brace around those single statement for the year from the else but in the interest of time",
    "so -pron- want something return an int and -pron- be go to be call contain at an -pron- want something which take a character pointer so what be -pron- do here -pron- actually give -pron- the address of the beginning of the string and -pron- be go to walk through the string one at a time so in -pron- example code above where -pron- call -pron- with test one actually what be go to happen be that when -pron- start program and create a process that string literal along with the code that -pron- have write here will be load into memory and so -pron- know the very first bite of this little particular string here and so that be somewhere in memory so that be why -pron- go to get to this function be the very first bite of that string ok so -pron- need a way to walk through the string look for each character ok so let -pron- think about how to write this right now -pron- be just go to keep go around forever look at each character",
    "come back to this ok and let -pron- have a look at the current character so i do not care about the actual address that -pron- -pron- variable hold i care about what be at that address i need the cpus be full of the money to follow that pointer so i can do reference that pointer with an asterix so notice the aspect actually mean two different thing if -pron- be in a declaration -pron- mean this be appoint to something -pron- read -pron- kind of backwards so inside out from the variable if -pron- use -pron- inside an expression -pron- be say hey follow the money right now -pron- be look at an address so go and use the type to go and actually read what be at that address be an interview for bite or eight whatever -pron- be if -pron- character just read that one bite right so -pron- can read what be there and -pron- want to know be what do -pron- find ok so -pron- really one character so -pron- 'd like to check to see if i find -pron- at how can i do that well perhaps -pron- be an ascii geek and i know happen to know that that be sixty value sixty four but that code be not",
    "not right because that be actually a c string and so that would just give -pron- an address instead what i need be a single quote to say here be an here be an ascii character please convert that into an ascii value for -pron- right so if that be find great -pron- can stop loop around so now -pron- can actually return one to mean success ok otherwise -pron- want to go on a loop ok so next time i loop i actually want to look at the next nextbit how do i do that i could say pointer equal pointer plus one or for short how shorthand i can just say plus plus ok now the important thing though about c be that when -pron- start do point two arithmetic actually the compiler make use of the pointer type and in this case the pointer point to character so to look at the next character -pron- actually need to advance by one byte if -pron- be look at integer pointer then -pron- would advance by four byte or eight byte or whatever ok so -pron- have get a little program",
    "and in see if -pron- evaluate an integer expression that be nonzero value mean true and a zero value mean false ok that be pretty good but right now -pron- be go to keep look forever right so -pron- actually need to stop if -pron- get to the very end of the sea of the string so how can -pron- do that let -pron- go now edit or program i like vim which be ver device so let -pron- up -pron- program here ok right so right now -pron- be just loop forever until -pron- do find -pron- out so -pron- want to fix this ok so somehow i need to wait to say hey -pron- have reach the end of the string now see string do not have any idea about length all -pron- ask -pron- to sequence until the day -pron- reach a very character which say hey no more and at that moment -pron- have read the actual ascii value be zero so the value zero be",
    "hey let -pron- read the value up memory and surface zero but there be no point i can just read the value and if that zero great -pron- know that -pron- find everything right just delete word delete word ok so let -pron- take this and try to compile -pron- ok -pron- contain at and -pron- have a problem here right that excuse -pron- first of all -pron- do not get out -pron- make a typo in -pron- main here and secondly that -pron- try to talk about contain out but -pron- see be implicit function declaration because -pron- have not actually find that function yet why because -pron- be later on in the file and the c compiler just run through once through -pron- -pron- will text so -pron- have not yet when -pron- start read main -pron- be amazing about function contain that so",
    "be and what -pron- look like ok so -pron- should fix this let -pron- run a command call v so now -pron- be ask -pron- shell to find the command that i last run that start with a v here -pron- be of course -pron- be vim so here be -pron- problem -pron- be use contain that and the compiler have not even see -pron- yet so at this point maybe i want to put a declaration insider dot h file or i could just declare what -pron- look like here so -pron- be go to tell the compiler that hey there be go to be a function call contain out that take a character pointer and -pron- be not go to tell -pron- anything more about -pron- today -pron- be not go to tell -pron- anything more about what how -pron- be implement just that -pron- exist ok right so now let -pron- compile k all -pron- have get that one other issue to fix which be -pron- main -pron- do not actually get the type here correct point to appoint or character white because -pron- be an array of string so now let -pron- try again ok great -pron- compile -pron- could even try to compile with all",
    "thing call a door out that be the default name of -pron- compilation let -pron- make -pron- something else for example i could call -pron- contain demo and now -pron- will see contain demo inside -pron- account directory when i ls -pron- if i want to look at more detail i can find out when thing be create how big -pron- be and all that good stuff ok so i want to run -pron- i can not just type contain demo because -pron- shell do not look for the current directory as uh do not consider the current directory as a place of executable program so i have to be more explicit and force -pron- to say hey look inside the current directory and -pron- will find contain demo and great look -pron- work -pron- say -pron- find find -pron- at -pron- do not put a newline so also along the same line i get -pron- standard kind of regular prompt ok so what do -pron- think will happen if rather than send test one that say delete two double quote there what happen if -pron- instead pass nothing what happen if -pron- pass",
    "to memory address zero what be thing go to happen so the exciting thing here be that actually when -pron- process run -pron- memory divide into different segment some part of -pron- be read only so for example the actual code and the string literal in the other constant that -pron- may declare inside -pron- function i have to be load into the process but that be put inside read only memory and if -pron- try to write to that memory -pron- can not -pron- process will actually actually stop with the segmentation fault other part of memory just simply do not exist yet -pron- can have large area of memory dress which be not map to physical ram other part of memory will be map to the stack and other part that will see later on the course ok so let -pron- try this and see what happen ok right so if i now compile this and run -pron- contain at right do i compile -pron-",
    "-pron- -pron- have check -pron- assumption yeah i do not actually run the thing -pron- just compile ok if -pron- be go to confuse that ok what do -pron- get so when -pron- run -pron- now -pron- do not print yes or no instead -pron- program crash process have stop with what be call a segmentation fault why because -pron- try to read some memory that be invalid -pron- do not correspond to a valid segment or area of memory so -pron- question to -pron- be where do -pron- crash which line do -pron- think actually cause that error so -pron- could use a debugger but right now -pron- 'd like -pron- to actually try to figure out where do -pron- crash occur which line in the follow code so -pron- will give -pron- five second to have a look ready go"
  ],
  "4a691a02-f191-450e-8b66-639b515b068e": [
    "ok hi right so -pron- have get memory there -pron- go right -pron- have get memory virtual memory work use a page table and -pron- have just invent a two level page table but now -pron- actually want to think about get recover that performance because right now with output to level page table -pron- take three memory access in order to actually read or write the bite that -pron- care about inside -pron- heap or stack or whatever -pron- be not part of -pron- process ok so here be the plan then let -pron- talk about a useful bit of hardware there be also part of the memory management unit so -pron- be part of the cpu and -pron- be the tlb or the translation lookaside buffer so what be this tlb the translation lookaside buffer so this be a cache and if -pron- remember recently use vlookup in -pron- table",
    "so this be a cache -pron- be get a limited size -pron- can not remember what kind of all of oil look up 's and what -pron- be basically do be say hey -pron- have get a virtual memory address except that i do not need to store a look up for a particular address instead actually -pron- be go to store this with a page the page number and i want to go from a page number to the physical frame number so let -pron- go to the frame number which date -pron- do use -pron- multi level page table but what if -pron- actually have a very fast piece of memory to do this as part of the cpu and this have to be extremely quickly have to be much fast than go to actually main memory and -pron- be go to need this every time",
    "time -pron- want to -pron- want to calculate and physical frame so the speed of this implementation -pron- be critical and in fact -pron- be get to look aside because the cpu start go down both these path at the same time this be where ns count even tense of nanosecond count so let -pron- start ask the tlb as -pron- fire up the machinery to talk to main memory to walk through the page table but hopefully -pron- will not need to complete that task because the tlb will say uh huh i have the answer for -pron- i can tell -pron- the physical frame for what -pron- need now why be the tlb in practice so useful yes that be two basic idea and -pron- be both spin around the idea of locality -pron- have spatial locality so special colour kalati mean that if -pron- have just recently access particular piece of memory so low cal make sure i can spell this locality",
    "zero seven then there be a good chance that in the near future -pron- be go to be access neighboring bite as well so for example zero zero eight right or something within the same page so the fact that -pron- be -pron- have cash the recent result of -pron- page level vlookup so if -pron- make future look up within the same page great -pron- already have that information so that special locality the idea that neighboring address be go to be use in the near future and then there be temporal locality as well which be just that if -pron- access one location -pron- be likely to access the same location again in the future ok so hey -pron- have just initialize -pron- variable say some location here or -pron- have just read this code and -pron- be probably go to be write into this same location again",
    "for example or because i have a counter or total and i keep write into that ok so -pron- be these two aspect of the program that -pron- write which make the tlb so useful ok anything else wanna say about the tlb oh yeah just kind of as a quick sketch -pron- realize that the page number be talk about -pron- virtual memory address process specific so the mapping that -pron- do always of course per process if -pron- fork -pron- make a child that be go to have a different mapping to different physical memory so when -pron- do a context switch from one process to another -pron- need to make sure that -pron- do not use the old mapping because -pron- be with four eight different process right so all the page number all of -pron- virtual address only make sense in term of the current process so -pron- could look over time to say after i switch to a new process"
  ],
  "4aa29e14-ce85-47a2-a685-4c0979a6c56b": [
    "hi ok -pron- be like a little challenge for -pron- today i think -pron- be fun to to check that -pron- can see -pron- yeah ok to log into nsa many people from uiuc end up work there so let -pron- see if -pron- can break into -pron- ok let -pron- see if -pron- can hack the address a i mean -pron- still use to hack -pron- i think -pron- should go the other way around right ok so here -pron- go to make -pron- a little bit more of a challenge -pron- be go to make sure that -pron- have only get four second to actually enter the password and how can i do this well there be one more a signal that -pron- be go to tell -pron- about call sigalrm and -pron- will notice that the sigalrm as a as a type if -pron- want to handle this actually be miss the second a but what -pron- be go to do be rather than register a handler for that signal instead -pron- be",
    "colonel please generate a cig alarm for -pron- in exactly four second time or close to four second time alright so -pron- first challenge to -pron- be what be the secret password that -pron- need to enter so quickly read this code see if -pron- can read this c code see if -pron- can workout what each part be do because -pron- have only get four second to escape this little while loop to get the password right if -pron- do get -pron- correct then what happen next well so -pron- do port s alright so let -pron- continue line so presumably that be probably go to be flush out if -pron- just in line buffering mode and then -pron- call exec and -pron- be go to ssh ok so -pron- wanna find ssh that be precious name and then -pron- be go to say hey ssh -pron- argument be an essay backdoor dot net let -pron- connect to that and finally of course no point yet -pron- do not expect that to return -pron- expect -pron- process",
    "from zero return ok so have -pron- figure -pron- out yet to take a few more second to workout what the password be go to be ok so what do -pron- do in this right in this little loop -pron- ask -pron- to guess the password and then -pron- call f get s which -pron- pass in standard in and -pron- say here be the size of -pron- result -pron- better check to see that be an array and yes -pron- be an array of twenty character so -pron- be say to africa this hey please fill in this memory do not give -pron- a string great than twenty character if -pron- succeed then forget -pron- will return non null result ok so and -pron- bed -pron- want to write into ok so right can -pron- tell -pron- the password be let -pron- try -pron- ok so -pron- will compile -pron- and run -pron-",
    "why be -pron- ok so -pron- have gcs es alarm dot c just to prove that -pron- be kind of the code that -pron- be look at ok so great i will now run this ok so off -pron- go eat out right and -pron- say -pron- four second password or click what be -pron- too slow and look bash print out a little helpful command to say hey hope i can tell from the weight pid value and those macros that the alarm clock be the alarm signal be responsible for kill that process ok so let -pron- try again hopefully by now -pron- have figure out that this code be say that the very first bite of -pron- result have to be a hash character ok or pound character seem to be call in american so let -pron- try this let -pron- put in a hash and fantastic",
    "still go off so even though -pron- manage to ssh into the nsa server -pron- do not have a chance to download any file because in four second time that colonel send the alarm clock to the very same process remember -pron- have when -pron- call exec -pron- do not actually create a new process -pron- give -pron- exist processor head transplant and ask -pron- to load in all of the new code and start with a new -pron- put a fresh stack and all that good stuff ok so very good if -pron- work out what the password be actually -pron- turn out that uh any password work why ok so why be -pron- that any password work less can actually look at that code and see if -pron- could improve -pron- ok so -pron- here be here be what the little change here be that -pron- possibly read that as weird as result equal and",
    "code say hey do -pron- result equal to hash instead -pron- say ok dereference result and change that into a hash right so this modify some memory one bite of memory and then use -pron- as a result and the result of the hash or pound symbol there be a non zero value and non zero value inside if mean success so -pron- do end up break break out of this so -pron- do not matter what -pron- type -pron- will always break out of that loop so -pron- may have say well why be -pron- that i do not see any warning when -pron- compile the code ok so let -pron- run this one more time case so -pron- have nsa alarm ok now -pron- be see some warning here that the compiler modern c compiler spot this be a common mistake so",
    "so i can still run this but in -pron- first little demo to -pron- i deliberately suppress that warning by put an extra pair or parenthese around this because sometimes do an assignment inside an if statement or while statement statement be exactly what -pron- want to do so that be how i get away with that that be neat little trick the last thing -pron- may change in this code be -pron- could -pron- may say -pron- do not seem right to return zero if -pron- ssh fail and -pron- could -pron- could change this code so that -pron- could install a single arm so that -pron- start get testy with start say give -pron- some warning that hey -pron- be run out of time to enter -pron- password that kind of thing but that be kind of cute little demo and finally how be -pron- that i be able to log into",
    "i could have do but actually not quite here be a trick be that with -pron- ssh i can define an ssh config to alias this to another machine so if i be to look at -pron- local machine and i say ok groove -pron- say few line afterwards let -pron- say i say two line and -pron- be look for nsa right let -pron- go to -pron- home directory dot ssh config and will see that on this machine actually -pron- be be alia to a completely different machine so yeah so so actually i get two alias i i can either send -pron- to -pron- other -pron- linux machine in -pron- office or a virtual machine"
  ],
  "4bb4d9de-3031-4ca5-9b24-28a62fa33ed8": [
    "hi welcome to like twenty four -pron- be go to start with a quick code review let -pron- see look at this attempt wait a fix sized ring buffer and -pron- will see if -pron- can figure out how -pron- may go wrong ok so some of the thing that -pron- want to ask be be deadlock possible in other word could get stick so that be never able to continue be underflow possible in other word could -pron- be that -pron- attempt to write so attempt to read some datum that be not actually inside the ring buffer so will just be read back some garbage information or perhaps overflow as possible which mean that -pron- be able to put more datum into -pron- buffer then -pron- can actually hold so presumably -pron- be go to corrupt something possibly value that -pron- have not yet write out so what do -pron- get here -pron- have two counting semaphore and will see the s one be initialize to two hundred and fifty six so this smell to -pron- like"
  ],
  "4be923cb-0fb1-4a38-b904-ceb8ff09755a": [
    "right hi so here be three world know synchronization problem there be well known because -pron- occur all the time and -pron- be generally useful for all kind of application as i explain -pron- i think -pron- will see why in fact i encourage -pron- to think about application where may this may be useful so the first idea be i want to make a barrier in other word -pron- have get a whole load of thread switch off do -pron- thing independently queso this one may be download something this one may be load some code this one may be talk to the sound processor there may be talk to the gpu off -pron- go and -pron- be not quite sure when -pron- be go to finish but what i do want to make sure be that -pron- all arrive at some temporary stopping point here and -pron- get to choose when to open the gate case so -pron- get for example to say when all of these thread arrive at this point then will let",
    "matrix and -pron- be go to divide the problem up so that each thread work on portion of this and only after each thread have finish work what -pron- do the next stage now -pron- have get say a matrix which -pron- have invert or matrix which -pron- have rotate so now -pron- have get a complete answer -pron- can continue to do the next thing right so that be that be a barrier and already i hope -pron- be think oh i could maybe implement that with p three condition wait there be one variant of barrier -pron- can call -pron- a one shot or even a repeatable barrier so -pron- can imagine that -pron- have get say a whole load of thread here -pron- come out to -pron- barrier point -pron- be not go to exit these thread be just go to be temporarily pause then when finally the final thread , this",
    "-pron- all finally have reach the next waiting point that be when -pron- let -pron- all go so off -pron- will release -pron- all so -pron- can see now -pron- have get a barrier which i can use repeatedly right so that be a barrier now let -pron- talk about a producer consumer or there let -pron- not -pron- have already talk about the idea of a producer consumer the idea be a producer and i may have more than one of -pron- be put thing into some kind of queue or data structure maybe a file store but there be some idea that -pron- have get some kind of datum structure inside here which represent a collecting point and then -pron- have get a consumer which consume thing out of there and i need to correctly synchronize these thing so that i never accidentally give invalid datum to the consumer",
    "sized ring buffer and -pron- use some counterexample force to temporarily block the producer or the consumer ok so that be the classic producer consumer problem and then the last one -pron- be go to look at inside cs two forty one be so - call reader writer problem ok so now -pron- could imagine -pron- have get a data structure where i which may be say on disk and and in memory so -pron- could be a kind of quite complicated device but i can have multiple reader now that want to be able to access this thing so lot of little reader thread say do look up diction -pron- look up 's file opening maybe for database table do a big search for this kind of thing but occasionally i have a writer that want to change -pron- and when i change -pron- data structure",
    "weird this toy digger red color ok so writer get -pron- hand off -pron- data structure right now -pron- be make change to -pron- -pron- be update a link list -pron- be copy over -pron- hash dictionary to a large piece of memory that kind of thing so -pron- be run to allow one writer to actually modify -pron- and a writer also have to wait whilst as any active reader so if there be a really currently work through a link list let -pron- wait until -pron- finish before the writer say start modify that link list and in fact if -pron- have get an active writer modify this data structure then if another way to appear then -pron- have to wait as well so that be a classic reader wait a problem that i can have multiple reader but only one active writer and when i have an active writer everybody else have"
  ],
  "4c2cacef-7dbd-4877-97e1-9c6cf834fa33": [
    "hi welcome the lecture thirty four ok so in this lecture -pron- be go to talk about solid state storage disk and also return to -pron- positive signal so firstly see but let -pron- get start for starter today let -pron- talk about solid state storage so here be a first idea that -pron- would need some sort of storage which will retain information even after -pron- drop the power and one way to do that today be to buy some nand flash and let -pron- see a typical cost today for this be for about a hundred buck -pron- can get about a terabyte or eight terabit of storage so as an incredible time -pron- live in where -pron- can get so much storage will say not tend to the six not ten tonight at ten to the twelve byte of storage for just a hundred buck should workout what that mean in term of the cost per per bit",
    "idea of non flash where -pron- actually change the property of the material through quantum tunnel the downside of ssd device however be that overtime constantly write and erase bit degrade the device slowly -pron- be unable to completely remove all of the chart that -pron- put across each gate so -pron- can only be write a limited number of time right so the actual device internally have a lot more than just the storage gate however so let -pron- kind of briefly kind of look at what -pron- find inside there so only kind of abstract side let -pron- zoom in here there -pron- go -pron- may desire -pron- ssd to look a bit like this whole load of flash memory",
    "processor these process be can be surprisingly powerful enough that -pron- may be able to run a very very strip down version of linux for example but anyways so -pron- have a little processor inside there and this job be to use this flash memory not only efficiently but give that -pron- wear out -pron- want to make sure that -pron- push -pron- right in -pron- different the physical area of the flash memory overtime so this be call wear leveling so that whole device degrade overtime as oppose to say one particular area suddenly stop work ok inside -pron- device -pron- also need some ram because -pron- be go to receive piece of information to write and yet -pron- flash may not be ready to store that so -pron- need a temporary some",
    "of read request -pron- may choose to read ahead so that -pron- have the next block of datum ready to go when the host ask for -pron- so again -pron- need some some storage space and buffer space and finally -pron- may decide to reorganize how -pron- be store datum on -pron- flash so again i need some some more ram for -pron- processor ok the other thing -pron- have here be the host interface logic so too common interface today be saturn which be -pron- will find this serial ata -pron- will find this in kind of old storage device and probably -pron- be -pron- be spin disk today be use a satta type interface this be an interface design specifically for storage mechanism but -pron- be a little slow today -pron- be fine -pron- have spin disk but today 's solid state storage",
    "than the other alternative switch today -pron- can find an m v e gently remember these initial but these basically connect directly to the pci bus or pci express bus so ssd chip can talk directly to the cpu so -pron- be much fast to be able to shuffle information from the ssd into main memory or even directly into the gpu as well so this do come important if -pron- be ever decide to upgrade -pron- pc or build -pron- own pc pay attention to the actual physical or electrical connection that -pron- device will support ok so that be the kind of a quick abstract design as -pron- can see that of -pron- device to this get many different unit here be what -pron- may look physically",
    "storage area that -pron- break the chip -pron- have actually get physical connection down here and in the middle here will be the device controller ok so now let -pron- think about kind of software that -pron- actually may want to run on -pron- little processor ok so here be the thing that -pron- want -pron- ssd to be able to support ok so for starter overtime -pron- may discover part of -pron- storage be no long function correctly for example -pron- be no long able to write to a particular block so rather than simply declare the whole device as dead -pron- can use what be call bad block mapping or sometimes bad block remappe where -pron- delivery section off part of the physical storage and so that -pron- do not appear inside be kind of abstract version of what",
    "-pron- talk a little bit about this with google 's case and the idea that -pron- want to be able to cope occassion with error when -pron- start have device that can store ten to the twelve bit -pron- be not that unlikely to start to see very a small error and if -pron- use an error correct code for example a simple paraty code or well a reed solomon code then -pron- can actually detect and correct single bit error ok i think some other thing i want to do be do thing like block erase when i finish with the block i do not want to have to erase each individual byte instead i want to erase say four thousand ninety six byte all in one go -pron- have already talk about wear leveling -pron- want to make sure that -pron- be use -pron- be write to the whole storage area as a whole so that -pron- do not excessively wear out one particular area of -pron- -pron- want to do some read white cash -pron- want the fast",
    "a synchronous read so imagine -pron- be pull all the byte for a video file i just want to get in say four gigabyte of datum as quickly as possible or for example -pron- be start up the operating system or -pron- be load an application -pron- just want to move in as many byte as possible one after another or random so -pron- have random read write access pattern where now -pron- want to jump to jump around a file or jump between many different file and now the amount of datum -pron- want per request be relatively small but now -pron- have thousand of request per second but -pron- want to handle be garbage collection so what do -pron- do when -pron- declare that particular block be available how do -pron- store that and finally maybe -pron- want to do some encryption so that if the device fall into a bad actor hand -pron- do not actually have the private key to be able to decrypt the information on that and",
    "as well so -pron- be much hard to discover what actually what be on the disk right so -pron- see -pron- have talk about saturn and that typical satyr speed today be six gigabyte per second so pretty fast but day an ssd can easily exceed that so not only do -pron- want to measure the actual number of bit that -pron- can shovel through for more storage -pron- also want to measure iops which be input or output operation per second so basically how many different request can -pron- make per second as -pron- may imagine this be important when -pron- have a lot of random read and write to do so for example suppose -pron- be compile -pron- compilation require -pron- to open hundred or thousand of different",
    "so -pron- can measure iops and -pron- can measure a sustained bandwidth that -pron- can measure kind of random bandwidth etc so if -pron- go to review today on a ssd -pron- will see all the all of these different measure which one be appropriate for -pron- particular use case depend upon the nature of whether -pron- care about sequential or random access ok today in the quest for more bit per dollar today -pron- can actually pack more than one actual bit per cell that -pron- can store on this so in the beginning -pron- will still find some memory delight this today each cell each part that could receive a single bit of information be use literally to store one piece of information",
    "a large number of time a hundred thousand time now in fact -pron- do not just rewrite that particular cell in fact the way that that ssd 's work be -pron- erase an entire block so if -pron- have get say block let -pron- say four thousand ninety six byte but -pron- could actually be a different size and -pron- decide to change one bit then that whole block be now invalid -pron- be go to have to actually to write the entire block again with that single bit changed and later on -pron- processor inside the ssd the little controller can mark this single piece of area single block as available again and can electrically reset that entire set of cell",
    "program just set one bit but -pron- have to actually write more than four thousand ninety six byte or however big the blocksize happen to be on the device which be much large than one bit but anyway so if i have the single bit purcell then empirically i can do about a hundred thousand light for sale before that sell do not accept anymore write ok today however in the quest to make of memory cheap more byte per per dollar -pron- actually do not write a single bit per cell on a typical especially commodity device -pron- will see that instead there be what be call multi level cell where now -pron- can store two bit or even triple level cell and as of two thousand and nineteen there be now quad level cell as well ok where -pron- store four bit ok but here be the cost -pron- pay that when -pron- want to read",
    "circuit of course there be noise of course the exact amount of chart ultimately be store there can can vary so -pron- need to be able to have a very clear signal as to which particular charge level be store in that sell so as the number of this go up four bit -pron- be go to have to have be able to disambiguate very reliability to to the to the four to the fore -pron- e sixteen different charge level and that be why the rights purcell actually go down -pron- become hard and hard to be able to measure these very small different level in charge as the device start to degrade -pron- become hard to reliably write",
    "ok so today that be where -pron- be with quad the widely chase however be that -pron- can buy more storage per dollar alright so there be very brief introduction to ssds the i guess the last thing -pron- will just mention be that that today when -pron- buy one not only do -pron- look for whether -pron- will not see any us satyr or pci type interface -pron- also want to see what kind of technology be be use and the endurance all of the cell and insurance be usually measure not in term of right purcell but if -pron- can eventually be eventually find this information -pron- be usually write in term of total number of right so for example -pron- may be a hundred and fifty terabyte right so if i have a device today that be say one terabyte in",
    "and fifty time before i expect -pron- device to die to stop work and probably go to like a read only mode that seem pretty low that be any one hundred and fifty time the total content of the cell so that may be enough for -pron- particular case -pron- may not be one thing to put this into perspective however be that if -pron- assume -pron- device be go to be say use over three three day so at three year then three year about a thousand day so so that mean that -pron- be to make -pron- to last on average three year -pron- mean -pron- would expect to write about a hundred and fifty terabyte over a thousand day in other word -pron- be write over the the entire content of the disk what be that probably about every"
  ],
  "4cadee54-ee1a-49c8-b696-1968feee37b3": [
    "hi ok so let -pron- talk about when -pron- can generate bus signal an memory alignment issue suppose i tell -pron- -pron- have get some memory for an integer k so here -pron- go -pron- can have a little pointer to -pron- memory there -pron- go -pron- will give -pron- an address and then -pron- say ok great and now i want to use that -pron- be go to store an integer there so let -pron- right into that piece of memory and -pron- will write some value like seven ok wait so -pron- and i know that the number of byte write there go to be save four byte if -pron- integer on a particular platform for bite ok now what if i have give -pron- an interesting address suppose -pron- 'd say something like here have not address like -pron- core malloc -pron- will get -pron- some bite so -pron- will get four thousand byte or so and then -pron- be go to add three to that to give -pron- an odd number address who or perhaps i explicitly calculate address",
    "on some system the code would still work -pron- would still the cpu would still be able to store the bit pattern common spending to seven and -pron- 'd be lucky -pron- would work however be performance may not be as fast on early chip there be actually quite a significant performance penalty that -pron- would take twice as long -pron- would take twice as many action over the memory bust in order to store or read that value so congratulation -pron- just make -pron- program be twice as slow but on other system -pron- would be bad -pron- would crash the cpu would refuse to memory system would refuse to store a four byte value at such an evil location -pron- be not store four byte value start with an odd address and in fact therefore -pron- need to actually think about this idea of natural alignment and the idea be very simple that if -pron- have get a primitive such as an int which",
    "in other word dear dress that -pron- be use should be zero modulo four and if -pron- have get something which be say take eight byte like double or a pointer on a sixty four bit system then i need to store that on an address which be an eight byte boundary so the alignment requirement depend upon the size of the actual type the thing that -pron- be try to store if -pron- be just store character there -pron- can store -pron- in any any possible bite if -pron- be store short to bite short then i need to make sure -pron- be store and even address for example ok so that be a great idea about natural alignment and ignore -pron- at -pron- peril so this mean that any address that -pron- return for malloc better be align to a sixteen byte boundary case so with that in mind then what will",
    "and in fact this be what the c library do on a sixty four bit system so if -pron- do this if all of -pron- allocation be always conceptually in sixteen byte block then will ensure that will always be return address which be align to sixteen byte and if -pron- be line to sixteen byte that should be a good enough nearly all primitive so intent short double etc etc so -pron- turn out that a modern cpu do have a couple of native type which be large than sixteen byte but -pron- will not worry about that for -pron- memory allocator today alright so -pron- have get -pron- have get this challenge be say how -pron- run up to sixteen byte here be -pron- basic plan let -pron- calculator",
    "request that -pron- be go to do so -pron- want the size in byte but here be what -pron- be go to do -pron- be go to add fifteen to this and then divide by sixteen if -pron- prefer -pron- could use bit shift operation to say i want to shift to the right four time and like little lemming there be four little bit fall off the edge or -pron- could allow the compiler optimize be to convert this divide by sixteen to into a bit shift operation for -pron- so -pron- have add fifteen divide by sixteen so what be the effect of that that mean that if -pron- request any value between zero and fifteen then -pron- be go to assume that -pron- actually mean to ask -pron- for sixteen byte and simply for -pron- ask -pron- for any value between sixteen and thirty one i be go to assume that really -pron- want just thirty two bite but -pron- will notice i do not actually",
    "to write -pron- -pron- lock code now always with regard to these sixteen byte boundary so conceptually now -pron- be go to stop think about -pron- -pron- -pron- memory in term of byte for the rest of -pron- malloc code i want to think about -pron- now as all of -pron- distance and space be actually go to be conceptually sixteen byte so now when i do any point arithmetic or talk about size -pron- be go to talk about -pron- anymore -pron- be just go to actually think about -pron- in term of these block where each block be sixteen byte wide and if i kind of keep that convention then -pron- start to make -pron- -pron- lock code a little bit easy if -pron- have kind of declare at the outset this be how -pron- be go to do -pron- then i do not need to worry about -pron- when -pron- be do internal memory pointer"
  ],
  "4cdc54a1-22f0-4dcc-b071-570ac31d7e39": [
    "hi welcome to let -pron- nineteen so -pron- can develop what be call the reader writer implementation in fact -pron- be go to develop something call writer priority implementation before -pron- jump into any code there be actually think less sketch out what -pron- 'd like to see ok so for this look good blank piece alright so what do -pron- get let -pron- give -pron- a data structure ok so right now there be no one munching on -pron- datum structure that one visit -pron- but will say this just live in the center there -pron- go and occasionally i have reader come along so here be a reader right there not interact with the datum structure yet but if -pron- let -pron- ok -pron- can jump inside the data structure so maybe -pron- will open some file go through a link list that kind of thing and so right now -pron- be in there go through that datum structure eventually -pron- will find what -pron- want and -pron- can leave and of course i could have multiple reader so here be another reader that be come along well let -pron- go through and -pron- can have more than one reader",
    "reader come in here and -pron- need to find some information ok right so -pron- can see that -pron- have get a very active set of reader always try to use -pron- data structure here ok so occasionally -pron- have a writer so now -pron- be time to change -pron- datum structure ok so here be the writer on the scene but -pron- be go to have to wait why because -pron- have get a whole load of reader which be currently inside that data structure so -pron- be only when these reader thread actually leave the data structure meaning that -pron- do not have anybody that actually inside there will -pron- let -pron- read writer change so ok right and now -pron- can go into the data structure now -pron- have get the writer in there let -pron- clean this up a little bit to purdue purdue purdue right just get into -pron- old reader if any new reader be wife key i guess -pron- better put up datum structure back here -pron-",
    "-pron- allow to actually enter the building until -pron- have finish change -pron- ok so well swim change the maze around or maze runner have to wait ok so there be stick outside -pron- be go to let -pron- out once this particular writer finish so if -pron- want to do ok there -pron- go right only when this righteous come out when -pron- let anybody else into the data structure ok and simply if another right appear on the scene -pron- would have to wait until no one else be update -pron- so once that be once -pron- be available -pron- get to go in ok so that be the sketch of the logic that -pron- need notice that there be several kind of moment that -pron- may need to block thing so here be -pron- first block -pron- need to block reader if there be any writer around right -pron- want to stop",
    "because there be always a new reader go to be arrive there be never a good time to actually update the datum structure there be always at least one read -pron- in there so -pron- first plan be to say the moment that -pron- see one writer up here than any new reader need to be hold back at the very front right so this be like the bouncer that be place way ahead downstream to say ok sorry people -pron- can not even come close yet -pron- be go to stop anybody new arrive so that be -pron- first block the second block -pron- talk about be for the reader so for the right be that writer have to be block if there be any exist reader in there so whilst -pron- have get old reader work through this data structure i have to block any writer that want to scene and -pron- be go to let -pron- go once that the exist reader have leave the writer -pron- be go to make",
    "into the data structure so -pron- get a lot of logic to think about and the way -pron- be go to do this be to keep track of several thing here -pron- be go to have the number of actual reader that would like to read so here -pron- be be all -pron- reader thread that be either wait to read or currently read and then a subset of those be actually in the datum structure right now and so -pron- will call this the number of active reader so the number of active leader could never be large than the number of reader k there -pron- do and i may have the case where new reader be block because a writer have just appear similar less by symmetry also keep track of the number of writer",
    "writer can only ever be either zero or one ok -pron- be not go to support multiple writer change -pron- datum structure so that be go to be -pron- four variable and now -pron- need to implement block code to ensure that -pron- correctly implement the read lock and the right lock so let -pron- go to have a go at do that right so let -pron- choose a new color here ok right i get ok that will do alright so here be -pron- variable -pron- have get the number of writer on the scene of those a subset zero one will be actually perform writing currently -pron- have get the number of reader currently access the datum structure so whilst that be non zero -pron- writer be go to have to wait and also the number of reader -pron- would like or want",
    "ok so with that in mind -pron- be actually kind of see how -pron- have sketch this out ok obviously -pron- have some mutex lock to ensure that -pron- update these variable atomically but the very first thing -pron- be go to do then for each of these section be to be to either call preferred mutex lock or unlock so for a few microsecond -pron- hold onto a log but that be only for -pron- to do some accounting either -pron- will immediately a scape can have through this code or -pron- will end up call peter condition way in which case -pron- release the mutex anyway ok and down here -pron- will see that the last thing -pron- do be -pron- want to again acquire the mutex just once -pron- be update -pron- variable so again that mean that work",
    "so let -pron- reacquire the mutex lock so that -pron- know for sure that -pron- be currently only one thread run when -pron- be change -pron- variable -pron- be go to think about who -pron- want to wake up here and then will unlock the mutex so yes there be part of -pron- code where only one thread can truly be run at a time but that 'd be for a very very short period just for a few microsecond for example and most of the time in this be actually go to be when -pron- actually read the datum structure so for example consider a link list or map or maybe something on disk actual reading and writing be go to be a lot heavy than take more time than the actual code that -pron- have write here for -pron- lock ok so let -pron- let -pron- think about how -pron- want to do this for -pron- reader remember what -pron- say about -pron- reader be that -pron- be go to put a bouncer in the way to say",
    "just arrive -pron- be sorry -pron- be go to have to wait and so -pron- be not the case that -pron- want to wait for any active right know anyway even if -pron- be just appear and not yet write -pron- will force know reader to wait so as soon as i see a writer there not yet write -pron- just appear on the scene if there be at least one of those so i could say great than zero but technically i could just wait right then -pron- knew reader will will go to sleep little call peter condition wait right and of course there be list mutex lock and when -pron- do eventually wake -pron- up what happen well the first thing -pron- will do be will go round this while loop and -pron- will see if the right account have get to zero so -pron- only let the sheep through the reader after",
    "no point wait for both of these because let -pron- look at the logic over here where -pron- will see that -pron- be where implement vitus and then write and then when i finish perform this i decrement both right so the logic i want to use today be to say i be not wait for a writer to be actually do the surgery on the data structure no be just mere presence of want to write mean new reader have to wait ok so -pron- have do that right so let -pron- imagine that -pron- have get however some old reader that have already come through this so when -pron- arrive in this method here -pron- lock the mutex lock but there be no writer yet so -pron- just happily go through an -pron- update the count now of the active reader by one and now -pron- be currently inside here perform -pron- reading ok so now with",
    "-pron- have notice -pron- have unlock the mutex lock -pron- be only hold onto -pron- whilst -pron- be modify -pron- variable ok so the writer and -pron- write have arrive can -pron- continue can -pron- actually perform some surgery well not quite because right now -pron- know that there be an active reader someone actually walk through -pron- link list and -pron- can not change that link list right now so one of -pron- condition here be if there be anybody actually read ok so notice that -pron- be use the reading not the reader this be critically important because what have i do over here be if there be a reader that have arrive -pron- be right descent into sleep and so -pron- do not want -pron- writer to be wait on on those people because there wait on -pron- so instead -pron- be only go to wait for the one which actually inside the datum structure",
    "actually only one thread time can be run the code that -pron- be write here so -pron- could make strong reasoning strong inference about the state of each thread -pron- can say this either kind of wait to enter this code because of the mutex log and i currently have to slog or that -pron- be inside a condition wait either way -pron- do not have the mutex lock so so that be -pron- first condition can -pron- guess what the other one be so either reading be non zero so let -pron- just be explicit there today ok there be a now the reason why -pron- may want to send a writer to sleep what be -pron- ok so hopefully -pron- work out that the other reason be if there be another writer actively write so if there be another writer modify the datum structure",
    "let -pron- say or so if there be anybody write then go to sleep so the only way -pron- can get out of this loop excuse -pron- will be when there be no one left actually use the datum structure for either read all writing ok otherwise -pron- new thread go into this p threat condition wait ok so know writer yes -pron- be go to get priority as student -pron- have arrive on the scene the reed have to wait but only only one of -pron- be go to be able to continue to see why remember that each time a thread be work up outside condition wait remember be hold the mutex lock only one thread be run and so the very first writer that that have evaluation of false here get to continue",
    "one so now when -pron- unlock and then proceed to change the data structure if another writer evaluate this condition so imagine -pron- work -pron- up in three p three condition wait or -pron- have just arrive -pron- will see an expression here that be true and so -pron- will go into p three condition wait so that -pron- can be sure that this condition must be false in order for -pron- to continue ok so eventually that right oh will finish change the datum structure and then -pron- get down here again so -pron- wait to acquire the mutex lock hopefully as a very just a few nanosecond maybe a microsecond and then -pron- can say great -pron- be out of here right so let -pron- decrement the number of thread writing let -pron- talk about the number of writer and then exit but before -pron- exit maybe -pron- be time to wake some people up ok so the most loud code would be to call peter condition broadcast on both the both condition variable so notice -pron- have",
    "condition over variable here for all the reader so all -pron- sheep can stay inside the sheep pen and then -pron- could just call broadcast on both of those and not worry about any logic let -pron- see if -pron- can do a little bit well than that ok so for example why may -pron- be that -pron- need to wake somebody up over here alright so -pron- could be that that because i be the last reader -pron- could be there be now a writer that be wait to move forward so one thing -pron- could do here be look at the condition i have for writer and say look if -pron- just document the count down to zero then maybe there be a reader so -pron- be",
    "time to wake up ok so let -pron- wake up say one writer so if if -pron- do be zero and what well there be at least one writer then wake -pron- up now -pron- could do that but if -pron- only wake up one writer i better make sure that when i write code down here that uh this code also wake up those writer so yes i could do this just wake up a single writer by call p three condition signal but suppose there be two right in the coffee shop then -pron- have only wake up one here and -pron- 'd have to make sure then that when that first writer exit -pron- end up also call the writer so so that be i could do that but if i want to not think so hard and just make -pron- code tiny bit less efficient i just could call p thread condition broadcast on all other writer so let -pron-",
    "up but then -pron- will see that the somebody write so -pron- will go back to sleep ok so this be the most performant code but -pron- be pretty confident that -pron- release -pron- always always go to wake up all the writer once -pron- have -pron- have get the active reader out of here so let -pron- type i think about the writer again i could just wake up everybody the code will certainly function like that but the cost but there be a cost there be actually pay for the cost twice because now -pron- be ask this system to signal many many many reader of writer and secondly i think about what all those thread be go to do -pron- have woken -pron- up but -pron- be all go to test -pron- condition for example be although no writer around and then",
    "reason must be zero so anyway let -pron- think about what -pron- should do here when should i wake up reader well if there be no right if there be no other writer then i think -pron- be time to wake up reader how many of -pron- all of -pron- ok so if -pron- number of writer have now drop to zero notice i say writer not write then -pron- be time to wake up the all of the reader so if writer be now zero then -pron- be go to call p threat condition signal ok and who do i want to signal the meter ok where be -pron- there inside percent r c v ok otherwise if there be a writer that still around let -pron- wake up just one writer ok so let -pron- call p threat",
    "there work at wait app so the writer condition available ok and i can see that there be go to be like a domino cascade effect that every writer that leave be go to wake up another writer until the very last writer in which case -pron- call up all other reader and say ok -pron- time to wake up and so now -pron- have actually write the right implementation -pron- see that actually -pron- can go back here and make -pron- code a little bit more efficient -pron- only actually need to wake up one writer because -pron- can now reason that that writer will wake up one more later as -pron- exit and then that right will wake up one more writer etc etc etc etc ok so great -pron- have now get a version which allow writer to have priority when there on the scene all new reader will get stop but be -pron- possible",
    "have a little bit of thought -pron- could see that if -pron- use of this data structure change if -pron- have now have always have writer then then -pron- poor reader will never get a chance to continue so -pron- have make a data structure which be great in the case that there be many many many more reader an be only occasional writer so -pron- tend to read more than -pron- right ok so that be -pron- implementation for cs two forty one and as i hope -pron- can see be that -pron- have now -pron- have actually get along way from when -pron- first talk about a kind of a simple synchronization idea of use p thread mutex lock and unlock ok so -pron- advice to -pron- be see if -pron- can write this implementation from scratch start with"
  ],
  "4d347210-3ea8-47bc-bc01-d7e1cbc6d868": [
    "ok this one be fun to think about let -pron- suppose -pron- have be an internet provider so maybe -pron- work for a big company like at and t or comcast or maybe even a small set up like -pron- own a coffee shop for example right -pron- may decide one day that -pron- can not stand certain kind of communication for example perhaps -pron- hate bittorrent so what be bittorrent -pron- may ask -pron- be a communication protocol that allow -pron- to share bite between two client and -pron- be often use to share pirate movie but -pron- also have some bona fide reason as well for example -pron- can often share open source software such as an entire linux distribution use bit torrent as well so let -pron- go back to -pron- problem in hand how can -pron- as internet provider actually prevent this this traffic from occur right so let -pron- give -pron- some idea and one thing i want -pron- to notice as i do this be to realize that -pron- work at different level so first of all -pron- want to be able to say identify",
    "netflix traffic web traffic email traffic etc etc etc right so one thing -pron- could do be to say look i know the bittorrent traffic tend to happen on -pron- own specific port so i could use port filter in other word if i see that a packet be destine to arrive at a particular port that be use for bit torrent i could start to do exciting thing the simple thing i could do be simply drop the packet just make sure -pron- never actually get to the other end i could do more than that though i could inject -pron- own fake packet or i can deliberately set the tcp bit to generate again kind of fake information about that connection protocol so for example i could",
    "this be the last packet that -pron- be go to deliver so these ok so these be four kind of tcp and port filtering work for udp or tcp ok the other thing -pron- could do be to say -pron- know -pron- be perfectly happy for -pron- client to connect to bbc dot com or netflix dot com or -pron- website dot com what i do not want be to for -pron- to connect to each other so i can now think of -pron- internet not be just owner anderson more for set of machine that can talk to each other maybe i want to divide -pron- internet up into say look",
    "instead -pron- be only go to allow packet which go to say bona fide external host which i know be serve any bit torrent traffic so but if i see any packet for example appear to go between two bit torrent client -pron- be go to drop that packet ok so this again be filter and now -pron- be base on the actual address so this be ip filtering and of course -pron- could talk more specifically for example -pron- could talk about maybe -pron- be go to implement -pron- filter just for ip six packet or just for ip four four packet and this effectively make all of the be the client all of the other peer here invisible there be no way that i can easily determine -pron- existence because all i can do be directly communicate to service that be outside of this pool of machine so there be",
    "quite exciting be call deep packet inspection and if -pron- actually look at the data content and -pron- look definitely to be bit torrent piece of traffic then let -pron- do some exciting thing like -pron- could drop -pron- drop -pron- specific packet -pron- set the connection as -pron- see again or -pron- could fake -pron- own datum as well -pron- as the network owner -pron- can see exactly what the synchronization number look like so -pron- can immediately jump in and start make fake packet that appear to come from the other side ok so this this deep packet inspection idea where -pron- actually look at the actual datum be send from",
    "look like say http protocol for that definitely look like vpn packet vpn time information be mean that -pron- be actually look at the raw datum the unencrypted datum that be be send between two client even if -pron- try to encrypt -pron- datum so that i can no long actually say oh yes that be definitely bit torrent traffic i can still play a similar game i can still look at the metadata so the metadata include some of the thing -pron- have already talk about like the ip head be but -pron- also can include other thing like the size of the packet how often -pron- occur i could certainly for example tell the difference between packet that look like someone type in -pron- password where there be pattern",
    "a movie and now i can start say oh look here be a megabit per second of datum and -pron- be come like clockwork then i look to -pron- like there probably kind of get some movie datum for example so all of these effect be possible because as an internet provider -pron- can actually see exactly the content of each packet and when -pron- arrive and where be -pron- be go so the big takeaway from this be that as a mere mortal that connect to the internet realize and appreciate that -pron- be at the mercy of -pron- internet provider ok and one final comment be ok -pron- have talk about all of this in abstract do any of these thing happen yes absolutely -pron- have get work example of many of these kind of traffic snoop and traffic filtering that ever occur in real life"
  ],
  "4e573abf-cf71-448e-9c87-e47ce02c5bf0": [
    "ok right so let -pron- have a play with -pron- pipe and -pron- be go to do be try to close one end and see if the other end notice . so here -pron- go let -pron- make a pipe so -pron- have do that so far . and now -pron- will -pron- will make a couple of variable second -pron- that the read end be the first file descriptor so let -pron- fds[0 ] and the write_end be fds[1 ] so -pron- know -pron- can always kind of read thing from a pipe \" -pron- do thing like \" \" ok tell -pron- the number of byte -pron- \" \" read \" \" \" ok and will call read ( ) . so read ( ) ... here be the read end the first file descriptor of -pron- pipe and here be a buffer and here -pron- can use all of the buffer this time ok i do not care about turn that into a null terminate string . let -pron- print out the number of byte read ok so why -pron- be read ok and i can only do ' % d ' or alright i could use",
    "ok , let -pron- have a new line there as well ok right so .. right now if -pron- run this program -pron- would simply block on read ( ) , so what -pron- be go to do actually be close the write end . so let -pron- say there be no more byte that -pron- want to write into this file descriptor into this pipe right so that mean -pron- be do what do -pron- think will happen when -pron- get to this read call ok let -pron- let -pron- try -pron- . let -pron- compile -pron- and run -pron- ok so i need that k right so -pron- be climb for fun and will say i think -pron- be pipe close great and -pron- see the read this time immediately return zero in fact if -pron- be to read the man page of read -pron- discover that return zero be a special -pron- be have magic value -pron- mean that",
    "the last um .... -pron- previous read be the last read that actually give -pron- any byte . ok so -pron- can actually \" check this , -pron- can say \" \" look if bytes_read \" \" be zero then -pron- know -pron- be do . \" \" so let -pron- actually do \" this that be actually put this inside a little loop -pron- be go to keep call read ok so -pron- will have that now as a variable outside . there -pron- go , right , and -pron- will keep go around this until -pron- get to know bite have be read write so otherwise will process -pron- will do be just print out the number of byte regret ok and so this be ' while ' bytes_read be not zero ok ok and -pron- will tell -pron- ' do while ' so that -pron- actually go through this loop at least once right so let -pron- let -pron- actually send something to this little pipe now let -pron- send a little message ok so will",
    "hi that be go to be two bite and another one will say ok how about hi there which be go to be safe i bite have a case -pron- have send those let -pron- hope -pron- do not block -pron- be pretty confident vote on this particular machine because -pron- be less than -pron- experiment early of sixty four kb and then will close -pron- ok so send this byte and then after that -pron- be go to start read from the pipe . ok , so off -pron- go -pron- will compile this k and run -pron- and -pron- will see that yeah -pron- go round exactly twice but notice this notice that i actually manage to get high there all in one go that be the for every right there do not need to be one read in fact",
    "of -pron- in one go there be only limit here be go to be the buffer that -pron- have put in here and i say i could i prepare to accept up to four thousand and ninety six byte in one go ok so do not just assume that each read be go to become one so one right be begin to come one read -pron- do not have to write -pron- just like -pron- have a ring buffer -pron- have put stuff in there and then -pron- be go to want to read the most of byte as possible when -pron- call reed ok so -pron- have learn how to discover when there be no more bite come back no more bite that be go to appear from the pipe let -pron- try this let -pron- try this use up apparently child ok so this time -pron- be go to make -pron- program a little bit more complicated by have a a fork in a little bit here ok so after -pron- have",
    "if i be the if i be the child case so if the child pid be zero then -pron- be the child process let -pron- do -pron- little high -pron- game again ok and will exit at this point so -pron- return from main . ok meanwhile the payment will will read as usual case oh well this kay compile write -pron- correctly read the seven bite but look -pron- do not finish this time -pron- never get that zero . why be that ? what have -pron- break ? ok so all -pron- do be -pron- just move the writing and the close into the child why be -pron- now that -pron- never get that magic value zero ok so well problem -pron- be that the kernel be keep track of all of these file descriptor and the read and write end both exist inside the parent",
    "be write into the right end in both the parent and child could be read from the read end so -pron- close the right end but -pron- only close -pron- in one process so as far as the kernel be concern -pron- be still technically possible for bite to be send down this pipe so -pron- can not yet tell the reader that -pron- be do -pron- be still possible that the parent can send byte because -pron- still have an active file descriptor so if -pron- want to use this mechanism -pron- be important that -pron- close the file descriptor in all process and so if for example -pron- be use this to send if -pron- want to use the pipe to send bite from the child to the parent then immediately after fork -pron- should close the close the file descriptor -pron- be not use",
    "ok so let -pron- close that right and now hopefully -pron- little read trick be go to work now once the charles be close -pron- end as well then the kernel know that future call to read must fail that there can not be any more byte . ok so with that all that little addition . ok , so a parent process will never write ok right so let -pron- do that and now program hopefully a programmer block so compile that and hard right -pron- have recover -pron- functionality again ok so that be the kind of -pron- second gotcher of use pipe the first gotcha -pron- be think about be do not",
    "if -pron- put a slash end at the end of -pron- that sufficient no -pron- need to flush the stream if -pron- be go to use the c library fprintf type call . right so -pron- have do reading from a pipe what about if -pron- try to write to a closed pipe ok so how can the writer discover that thing have go wrong let -pron- have a new program for this case so i i will make a new program let -pron- call -pron- ok let -pron- use touch to just make -pron- file let -pron- call -pron- pipe and -pron- will call -pron- right on clothe case so that touch will make a new file if -pron- do not -pron- do not exist otherwise -pron- just update the modify time ok so empty foil ok so this time -pron- be go to do be close to far descriptor",
    "-pron- write end know the read end ok and then -pron- will try to write to -pron- ok so -pron- will write to -pron- little pipe will say hi here please send two byte ok let -pron- try that right so play pipe like clothe ok and let -pron- run this ok , alright , -pron- do not crash so that be a start let -pron- find -pron- actually what happen ok so if -pron- try to write to a pipe that be not go to accept anymore bite because the reader close actually the moment -pron- try to do that -pron- program be",
    "say printf write byte send k percent -pron- -pron- be write k and that be how do -pron- line in here right so will ok size t but -pron- be be ok key let -pron- see if -pron- ever see that actually appear a case so off -pron- go that be compile this run -pron- and see -pron- never print out anything alright never return -pron- get a signal and that be the end of -pron- if i want too i could use all of the wait macros to find out which signal kill -pron- program but notice this time the kernel sorry the shell do not actually print out anything useful to say hey this be a child process actually",
    "-pron- use pipe a lot in the shell so if -pron- say thing like ok cat all -pron- file then pipe -pron- enter this thing so let -pron- suppose that i use now head which will print out the first ten line ok so -pron- have will read some line but then -pron- will exit as soon as -pron- be print out the number of line -pron- want so what be go to happen to -pron- ' cat ' process here -pron- want -pron- to also exit as well so -pron- want to forcibly kill -pron- so when -pron- attempt to send more byte to the pipe actually -pron- be go to get a sighub sorry sigpipe let -pron- just prove that -pron- remember a little bit about signal right so -pron- can actually see that signal happen rather than just by default kill this process let -pron- set up a signal the signal handler ok so if i get a sigpipe \" k -pron- will call a function like \" \" ohdear \" \" oh no right so let -pron- \" write -pron- oh dear function",
    "will say ok let -pron- have a message ok sleep pipe happen ok wait yeah right -pron- be close enough so let -pron- write that message out case i will write -pron- to standard out here be -pron- message strollin of -pron- message k right so k -pron- have write -pron- i pawn a new line in there ok so let -pron- now run this ok so ok -pron- -pron- need right i need to include a string or as yeah let -pron- do",
    "k right so now -pron- will see get -pron- sigpipe but because -pron- catch \u00a0  sigpipe -pron- -pron- do not kill the process . -pron- byte now return an impossible number so -pron- be quite quite a surprise at wow so -pron- really should do something about that that poor little sigpipe that be kind of process -pron- be go to forcibly exit -pron- process by by call exit in here so exit say do not flush any buffer do not do any cleanup inside -pron- c lobby just immediately exit and will say exit with one ok right -pron- be very surprised by that vat value let -pron- just if -pron- be if a simple integer or less service print",
    "see negative kind of wear down here ok so yeah let -pron- let -pron- cast -pron- as just a point to see what the bit look like low order bit ok right right because -pron- do not see -pron- because i call exit right kate right oh yes ok that be more like -pron- right so yes -pron- get back value of negative one which be a lot more \" reasonable ok because negative one mean \" \" hey write \" \" fail \" \" yes so -pron- can say thing like if -pron- be write \" be equal to ok negative one so i i can say whoop negative one",
    "and will this print out no one ever bite write so something like that ok alright so now -pron- should see that fail key right yes now -pron- have to fail to right ok so that be an important idea that but -pron- get a sigpipe and -pron- get a sigpipe when there be no one listen at the other end so if i be to do this again use a fork so let -pron- suppose that i have now two process right so here be -pron- child fork or if i be the child what -pron- be go to do be stop stop stop -pron- reading ok so if -pron- be the child close -pron- read end that would not be sufficient so i must always close -pron- at both end so",
    "-pron- at the parent as well ok in order for -pron- to see the sigpipe otherwise -pron- will say oh -pron- can happily right bite there be some listing in theory the parent process could could read -pron- as well so let -pron- sum up here -pron- have get get some key point ok do i have a pencil here yeah ok great so close the close the unused end and the reason -pron- do this be so that the kernel can tell -pron- when -pron- be read right be never go to work ok not go to happen right insert useful mean here and remember that -pron- return zero so that be how -pron- can detect that -pron- have read everything from",
    "normal writer because so order the active file descriptor have be close that be go to discover that that -pron- finish and the other one -pron- have see be when -pron- try to write the first time on a pipe that be that where there be no reader remain -pron- get a sigpipe ok -pron- will see this again later when -pron- get to network if -pron- try to write to a network stream where -pron- be impossible because say the client have disconnect already -pron- again -pron- will see this sigpipe so -pron- will need to kind of catch that by instal signal handler ok so -pron- be sick pipe but also if -pron- then handle the"
  ],
  "4f500541-bb78-41b4-8597-24e61e794f81": [
    "ok -pron- be go to finish with the challenge for -pron- something -pron- can discuss on piazza etc if -pron- wish so -pron- be the follow -pron- be the kind of typical have exam question where -pron- put in a whole lot of concept together and the nice thing about this one be that -pron- be easy to write and easy to test as well ok so but -pron- show -pron- demonstrate that -pron- understand file descriptor and exact all this good stuff right so here be what -pron- want to do -pron- want to use fork so -pron- have a child and a parent process and -pron- want to use a buffer so -pron- be go to have a buffer of four kb at a time and the parent be go to copy the content of some file call input dot text and -pron- want to send that to start -pron- in of the child process ok so -pron- got to figure out how to do that how would -pron- like to send send those those byte -pron- so -pron- be go to need to",
    "but then that father script will not be the correct file descriptor so the good news be that -pron- can use dup2 two to re label -pron- to file descriptor zero in order to be standard in of the child process ok so how -pron- get to make this work right so -pron- will let -pron- figure this one out have a great writing -pron- and then -pron- can always test -pron- of course because then -pron- be go to take that and call exec inside the child process and set -pron- as a create a bash shell so -pron- can call exec -pron- will need some version of exec and then price if -pron- be look on the path for example -pron- can call bash but do -pron- remember that -pron- be important to call bash",
    "important to pass in a null pointer at the end here to say ok -pron- be do with the argument right so if -pron- could make this work then -pron- mean -pron- can actually start send a script of command to bash and actually see -pron- be execute so -pron- file input dot text can have thing like ls echo word count etc and -pron- should be able to send these all too a little bash program and see -pron- run but this file -pron- can be very long but -pron- be not load all at one time into memory know -pron- be only go to try to copy four kb at a time just think something to watch out for be be remember that read and write can return well read can return zero when -pron- be do and also -pron- do not want to necessarily send four kb instead -pron- should be pay attention"
  ],
  "500f2f37-cb53-4088-952f-c866acfded89": [
    "ok question for -pron- do the inode contain the file name for ten to the ten to the ten point right so hopefully -pron- say no ok the i know do not contain the file name the file name be just a way to organize -pron- file in term of -pron- directory listing and that be -pron- ok that be the kind of big idea right so can -pron- have the same file appear in two different place inside of file system yes absolutely ok let -pron- do that alright so right now the story so far be -pron- have a little program call program dot c let -pron- link to -pron- use l n on say ok take program dot c and let -pron- create a new directory listing call say another dot c so great let -pron- have a look at another dot c and be exactly the same and in fact if i look at the content of this so -pron- directory ok like -pron- will see that another dot c be i know number end",
    "dot c o k so these two entry be look at the same i node so let -pron- try modify this file -pron- be go to just append to -pron- for example let -pron- append to program the new way -pron- want ok so let -pron- penta this will say if high right and let -pron- append to program dot c l c hide there ok so what do -pron- get still well i still get the same i know entry here ok so -pron- both be point to an -pron- node two nine six one so let -pron- have a look at that however i do program dot c and -pron- will see that -pron- have both both these command modify -pron- exactly the same file right -pron- be talk about the same i know file so i could even do this use a different directory suppose i make a different directory call say subdirectory",
    "dot c and will have entry side sub one call yet another ok right so great let -pron- have a look at sub one and -pron- want the i node number here -pron- go right great -pron- see here be yet another c file which be actually point to the same i know number break -pron- why be this useful -pron- mean of course that -pron- be not use any extra disk space here to store all these file why not because -pron- be the same file so great but the downside of course be that if i modify that particular inode entry all of the file see that change ok so right what about what be go rn do rm actually reducer be the reference count of -pron- entry by one and",
    "not useful anymore and so the disk block that i require to store the content of that file can be repurpose in the future so if -pron- look at the stat of -pron- file ok -pron- will see right now that -pron- be get a reference count of three but if i be to remove -pron- so let -pron- remove what i call -pron- like another dot c o k that -pron- reference count have go down to two so -pron- still need -pron- so that be why -pron- need reference counting just keep track of the number of entry that -pron- appear so -pron- may see how when -pron- do forensic analysis on disk -pron- can look for i know entry which have be delete but which still do not appear inside anyways like",
    "meta information so for example -pron- may be i do delete i know entry can still point to the disk block that be be use to hold the file content so that allow -pron- to do thing like undelete file and find file which have no long list insider directory but -pron- content may still be available on the disk ok so rn be actually what be call unlinke -pron- would simply remove a directory entry in reduce the reference count by one and a reminder that -pron- can -pron- can actually find out the reference count the number of hard link by call stat onefile right so i use use the command here like l n for link in fact -pron- can do this from c as well let -pron- have a look at -pron- quick man page so if -pron- look at man -pron- can look at link cape",
    "section two -pron- be ok so -pron- will find lincoln or some system link at as well where -pron- can say right start with -pron- exist directory so exist file and make a new entry there be only one thing -pron- can not do with hard link and that be to create a hard link to a directory -pron- can only do this for file perhaps -pron- should think about why and -pron- will give that comment in a future lecture oh and another thing -pron- can not do be create link across two different filesystem again perhaps -pron- could think why that be true so make hardlink only work for regular file -pron- can not"
  ],
  "50ebb1c4-4d86-4abe-bcf6-d6d0948214d6": [
    "hi welcome to lecture twenty four -pron- be go to start with a quick code review let -pron- see look at this attempt wait a fix sized ring buffer and -pron- will see if -pron- can figure out how -pron- may go wrong ok so some of the thing that -pron- want to ask be be deadlock possible in other word could -pron- get stick so that be never able to continue be underflow possible in other word could -pron- be that -pron- attempt to write so attempt to read some datum that be not actually inside the ring buffer so will just be read back some garbage information or perhaps overflow as possible which mean that -pron- be able to put more datum into -pron- buffer then -pron- can actually hold so presumably -pron- be go to corrupt something possibly a value that -pron- have not yet write out so what do -pron- get here -pron- have two counting semaphore and -pron- will see the s one be initialize to two hundred and fifty six so this smell to -pron- like"
  ],
  "513bcd38-3d1f-455e-9de0-3a1cb12f8bf0": [
    "ok -pron- have get one other little imagination game here so let -pron- just take a break from deadlock just think back to hey what do -pron- do -pron- this way why be -pron- invest and that be because -pron- care about concurrency -pron- want -pron- machine to be able to do more than one thing at a time now today with the key about this in term of threat but tomorrow behavior think about this the fact that i have a thousand machine or a multiple gpu card or whatever or people even and i want this process to run concurrently so i encourage -pron- to in -pron- spare time next time -pron- be have drift off to sleep chat with friend and an algorithm or an idea pop into -pron- head think about oh how would i apply what -pron- be learn inside cs two forty one to make that run fast to make -pron- actually run concurrently so as a work example remember some of the sorting algorithm -pron- may have see before like merge sort have suppose -pron- want to make -pron- merge sort",
    "ok so kind of let -pron- do this as a little bad example but again there -pron- suggestion to -pron- be be think about -pron- css life and start think about well how can i use multiple thread to make this or how can i use multiple process ok so remember how merge sort work -pron- say if -pron- have get say an array of datum here what -pron- will do be -pron- will use recursion to first of all get the left hand side sort and then the right hand side sort an now all i need to do be combine these which be a lot easy than sort all i get to do be take the topmost card off each one and copy the small number ok so think of like to parcel card so this number be small great -pron- will take this now -pron- build the next number ok so now this number be not as small as the number may from -pron- right hand pile",
    "recursion fairy to do most of the work so of course this happen at all level so if -pron- have start with nice big block of datum say mb of datum then first of all -pron- call recursion ok and so on and so on and that have to be cursively run these ok so how can i now think about do this concurrently right so obviously i can not actually just run all these different level concurrently because i can not actually merge -pron- datum until the low level of recursion have finish but -pron- can see thing like these task here be independent ok so if i have say four cpus maybe when i spit -pron- problem"
  ],
  "51cddab2-570c-440f-8b14-9adb4a3cbf88": [
    "ok so let -pron- make -pron- a server socket now ok so there be an exciting moment right so this be what underpin database cdns web server etc etc this be what allow other people to connect to -pron- so here -pron- go right the what -pron- will do today then be a little bit different from what -pron- see with the client here be the first big change that i want to make what be call a passive socket so passive socket be as -pron- sound -pron- just sit there -pron- wait for client to come to -pron- ok so -pron- do not go out and reach out and try to talk to -pron- remote server no -pron- be completely safin passive -pron- just sit on a particular port wait for those packet to arrive so this be the first big change as to how -pron- specify that -pron- like a server socket right so",
    "-pron- be not go to try to go out to connect to remote machine when i call get address info i do not need to specify a remote address -pron- be not pass in illinois dot edu here i be go to specify a port number now -pron- be possible to specify zero here mean here -pron- will take any port but today let -pron- start with just explicitly choose a valid port number so -pron- will assume that port one two three four be not be use by another process because -pron- can only have one passive socket list on a particular port for particular socket type ok so if this succeed -pron- have get everything -pron- now need to create a socket but here be a here be the new call",
    "so bind say right so far what have -pron- do -pron- have make an abstract socket and -pron- do that much early at the top of the code here -pron- say i need just an ip for tcp style socket thank -pron- very much now -pron- actually want to make that be on a particular port number on a particular network card on -pron- local machine and that be the purpose of mind right so -pron- can pink handcuff or whatever to say hey -pron- be go to actually combine abstract socket to actual port number an actual end point on -pron- machine ok which be clearly what -pron- need to do for -pron- server ok so at this point now -pron- have manage to get that port number one two three four as -pron- passive port number but -pron- have not open the shop yet and that be the purpose",
    "particular port number so -pron- be not go to have about those connection immediately instead of the kernel be go to handle that initial handshake from remote client and -pron- need to give hint to how many remote client -pron- should allow a backlog so if i put ten here that mean that i can do nothing and up to ten customer can walk in the door before i have to start kind of process those customer so if -pron- could like the equipment the metaphor here would be like a server inside the greeter in a restaurant -pron- pass walk into a table and there be no one yet to actually hear -pron- order to actually talk start talk to -pron- but i can have ten customer actually walk into -pron- establishment walk into -pron- port number and the greeter which be the kernel will do the initial handshake",
    "i want a backlog of up to a hundred connection but realize of course that all of this be go to take some resource to build again handle those one hundred conversation ok so so far none of these call will block but -pron- have now set up a valid server if -pron- have get this far then call netcat on this connection or call telnet or call use firefox or chrome etc will make a valid connection and then -pron- will start to want to -pron- be not to send back to -pron- so -pron- well actually start process -pron- client ok so how do -pron- do that and the answer be with accept ok so accept mean please block untill there be a customer for -pron- to serve ok",
    "the big important idea here be that now be that that server socket be the front door to -pron- shop but -pron- be not actually go to be the way that -pron- talk to -pron- client instead when accept return -pron- get a new file descriptor one for each customer which be the private communication channel between -pron- and that client so with this new file descriptor that be how -pron- be go to be call read and write so accept will return immediately if there be customer which have complete -pron- handshake and wait to talk to -pron- or -pron- will block if there be no new customer ready to talk so -pron- may for example write code where -pron- will put this accept insider loop and will process one customer at a time and there be exactly what -pron- be do here perhaps in the future will write a multithreade version where as soon",
    "say a threat just a process that particular customer so let -pron- see what -pron- can do then right with this client -pron- will hear what -pron- have get to say so use this client file descriptor -pron- be go to listen to what -pron- be go to send -pron- ok so let -pron- read up to nine hundred and ninety nine byte and if -pron- give -pron- something valid then ardesta print out but remember what i get be not a c string -pron- be up to -pron- to terminate what what -pron- receive with the zoomer bite ok and will put -pron- up and then i can say something back to -pron- ok so let -pron- now use either right aldi printf ok and so i can only say hello i could if",
    "right so let -pron- just say hello for now and lastly what should -pron- do well -pron- should do two thing -pron- can tell the kernel that -pron- finish use this socket so -pron- want to shut -pron- down so in fact -pron- can shut -pron- down for reading or writing or both so shut down be not immediately terminate the connection because there may already be bite that have not yet be send let -pron- say octet -pron- have not yet be set so that be not the man page -pron- want -pron- want the programmatic way ok and -pron- see that -pron- can say right i want to say that i do not want to receive any more information so i promise",
    "or that i promise -pron- that -pron- be never go to call right on that socket anymore or or both so in this case let -pron- use -pron- do not want to do anymore read or writing so let -pron- edit -pron- code to say -pron- be all do with this connection but the file descriptor still exist so that be take up unnecessary resource so now actually let -pron- kind of reset that ok alright so now -pron- have get -pron- little server finish the last thing -pron- should possibly do be to see if except fail so let -pron- see if the client actually be an invalid number so if -pron- be less than zero -pron- know that -pron- be a bad connection so bad except and -pron- could print out an error message for example",
    "ok so and maybe this point -pron- want to break out of -pron- wild loop or maybe not maybe work just say ok let -pron- keep go but -pron- be go to finish at this point ok right so let -pron- compile this ok and then -pron- will come back to talk about a few thing which i have not yet look over there ok so i want to use clang more so tcp server right now well right ok so great be listen woo right i think -pron- be time that -pron- try to connect to -pron- ok so -pron- will see -pron- be listen on file descriptor three so that be -pron- passive passive port k and let -pron- try to connect to -pron- ok",
    "this point fire fox want to know if there be a favorite icon -pron- should display with this website but here -pron- be actually request just the home page and -pron- be tell us fire fox be tell -pron- a little bit about the client and -pron- say -pron- actually send -pron- into sixty plate just just to request that that home page -pron- also may notice that -pron- keep reuse the file descriptive four so file descriptor three be the one -pron- first make for passive socket all of -pron- connection be -pron- use this file descriptive number four why because -pron- remember to close -pron- down each time so the kernel able to reuse that particular file descriptor",
    "-pron- would fail and accept would would not be able to give -pron- a valid file script anymore so -pron- web server would stop work when i say there be not much of a web server right now because -pron- be not truly actually return web web content not something that be a real web page ok and -pron- be not actually truly talk http instead so let -pron- modify -pron- just use kind of deep printf and talk about some other thing that this thing be do as well ok right so there -pron- go now be deep death k and that be k compile -pron- k and run -pron- again",
    "if i break out this point in try to run -pron- again -pron- will be in for a bit of a nasty shock here that -pron- bind call fail that i get an address already in use oh what be go wrong with -pron- code do i make an error let -pron- try run again and -pron- be still fail ok so let -pron- look at -pron- code figure out why bind -pron- may be fail here ok so this be actually why -pron- be useful to check every network call and print out something useful when thing fail and in fact -pron- code be correct the problem however be that even after -pron- process have finish passively list or one two three four there be a timeout there be",
    "that be actually previously use so if -pron- a little bit long -pron- go see now -pron- be actually work again i do not even touch the code ok so that be one kind of fun surprise -pron- will have with networking will talk about how -pron- can reduce that timeout period to zero second in future lecture but realize that that time out be deliberate -pron- be actually there for security purpose so more about that in the future so anyway -pron- have get a little thing work here -pron- should now try to connect to -pron- let -pron- now try use say netcat so netcat which be netcat or sometimes or some system be just nc -pron- be a netcat i want to talk to -pron- localhost do -pron-",
    "hello right and -pron- will see that -pron- server get the hello there and complete with a new line and -pron- send back this server code be write in year two thousand and eighteen tour -pron- be a whole year old ok right the last thing -pron- can try here be to say what if out kind of all right port zero ok so let -pron- do that right so recompile -pron- k and say oh -pron- be listen on port zero ok -pron- have a problem here that -pron- do not actually tell -pron- which report be connect to support zero here mean hey please"
  ],
  "51d90699-38b0-4f5e-8fa7-adc726deb48b": [
    "ok . hi right so question three -pron- have get a lot of different piece of memory inside -pron- process each time -pron- run -pron- need some memory to hold of global variable be stack variable so that be actually look at that in action right so here be some crazy code that -pron- write this be actually go to illustrate some of these idea right so what do -pron- have ok do i have a little pointer thingy ok great so the first thing be -pron- have get a little variable up here call global do i have -pron- be in text mode ok let -pron- go to squiggly line mode ok ok ok alright good alright so i get a variable here call global now global be dangerous and great at the same time in the sense that once -pron- declare a global -pron- can use -pron- anywhere else in the code below so -pron-",
    "-pron- mean that -pron- code become very very kind of complex and fragile but -pron- be not unusual to have say one or two global variable which may represent a debug flag or something like that and -pron- will see the lot in very simple and small program ok so global variable exist for the lifetime of the process -pron- be not in the heap -pron- be not in the stack -pron- be inside -pron- own kind of memory segment and -pron- can either have an initial value of zero or if -pron- wish inside -pron- code -pron- can of course initialize -pron- to a value right so the next thing to look at be what about all constant here and the code right so also in -pron- process -pron- have something call the text segment and that be go to hold piece of text that -pron- have define inside -pron- program",
    "this cpu all those byte to the cpu be go to interpret as instruction in term of change register read write from memory branch conditional etc etc etc etc all that have to live inside the process somewhere all of that have a memory address and that be all take segment and that be read only -pron- try to write to that memory good luck try -pron- will not be able to on a modern cpu memory texture will kick in and -pron- process will be kick out ok so here be some example of thing which can be store inside the tech segment and if -pron- use the insider program and what do -pron- get well actually what -pron- get here be be when -pron- use -pron- inside an expression -pron- get the memory address of the very first item ok so when -pron- use these inside",
    "to happen first of all let -pron- have a look at t one t one be store on the stack why -pron- be an automatic variable that only exist whilst -pron- be inside and run code inside test so -pron- need a place in memory just a temporary hold all automatic variable be little stack variable here and that include parameter as well ok so what do t what be t one and what be -pron- do well t one what be -pron- type be a pointer to a character and otherwise -pron- be go to hold a memory address and add that memory address -pron- expect to find character right but -pron- be give -pron- this string so actually a t one be go to hold the memory address of that h -pron- be go to point directly into the text segment -pron- be go to hold that memory address which between -pron- and -pron- be go to be a low value the text document be be -pron- near the beginning of the process memory ok",
    "be actually an array -pron- do not bother to specify the size because the compiler can work that out -pron- and the surprise here be actually the compiler be go to write some extra code for -pron- here because rather than just look at that that string literal in memory when -pron- call this function -pron- be actually go to copy those bite -pron- be go to copy the one two three four five six seven eight nine bite include that zero bye to the end into the stack memory forwards so if i be to stop -pron- process an actually use a debugger to have a look around i would find the original abcdefg h and then -pron- 'd find a copy of that inside the stack and the difference between the two of course be that the stack version -pron- can modify as minute mutable because -pron- be just stack memory so let -pron- see what happen next right ok so the online seven -pron- use to but -pron- look like -pron- be use as a pointer",
    "if -pron- use -pron- in a pointer context like this then the variable behave as if -pron- be talk about the very first address of the array in other word -pron- be look at the very first element of the array in the stack -pron- if this be -pron- stack then what would i expect to see i would find let -pron- say t one be here and this be go to take up four byte ok so t one would hold the address of this first bite here and next to that may be above -pron- or below -pron- there be go to be the nine byte -pron- actually need for hold the value of t two so there -pron- go let -pron- imagine that -pron- have get nine inch there so the difference between these be subtle but important that t one do not hold the string high instead -pron- be",
    "on a thirty two bit machine as -pron- can see i use four byte to hold the address of of t one so -pron- have get to follow the money if -pron- like -pron- have get to actually go to that other address if -pron- actually want to see those byte h and i -pron- be not go to be find directly inside the stack versus t two actually have abc carpet into -pron- ok and so on and so on and so on ok up to h and then one last bite for the zero at the end and -pron- will notice i put -pron- address be of the high at the top and the low at the bottom of the page ok so hello line seven -pron- be go to change that first element of the array so -pron- be actually change by stack memory directly here and then line eight -pron- do a calculation that say take two two so treat -pron- as as an address add",
    "in other word change a lowercase b that -pron- put in there into an uppercase b line nine actually do the same thing so these two line be equivalent be just different syntax as -pron- can see -pron- a little bit nice to use square bracket and remember the square bracket mean also right right to those location just as a fun thing actually if -pron- want to confuse -pron- cs two twenty five friend -pron- could write this equivalently by swap the two site so -pron- could also write one square bracket t two and that would compile as well so -pron- could swap these around if -pron- so in client would not do that for real production code but -pron- be great fun for confuse confusing people right now let -pron- look at line tent line ten say ok take the address the t one hold and",
    "actually have -pron- content or so -pron- be go to be a very unhappy here put -pron- little fun smiley face because will try to follow the address that -pron- store inside t one which -pron- point to some read only memory how to change that so the moment that -pron- actually try to dereference this memory actually right to -pron- the cpu will notice and say hold on let -pron- stop program anymore get a segmentation fault the last line here say if -pron- actually get to this last this last line be last line hey malloc i need some heap memory and this be the number of byte -pron- 'd like -pron- 'd like a hundred and twenty three and i promise not to write a extra bite after that point and i promise not to try to write any bite before -pron- start start of the place -pron- give -pron- so if -pron- succeed be actually go to turn an address and -pron- can use that that particular",
    "two for whatever -pron- want to do maybe want to store some integer in there maybe one store that a little picture whatever -pron- want to do maybe once too long string i do not know malloc do not care or black nose -pron- be assign a give -pron- that memory and -pron- promise not to give anybody else that same piece of memory until the day that -pron- say ok -pron- be do with this and how do i say -pron- be do with this i call free and i pass back the same well let -pron- stop draw right past back the same the same address that -pron- get originally from malloc so i call free with t one ok so -pron- code will fail at line ten the only way that -pron- could stop this code from fail at line ten would be if -pron- swap line ten eleven because this be what -pron- can do with pointer with pointer -pron- can say hey pointer point to something else and so if -pron- swap those two line around by call malloc first -pron- would"
  ],
  "527934a0-530d-4125-a5a8-2a5cf05dcd5d": [
    "hi welcome to the first online lecture and the first question ok so let -pron- get start -pron- be go to look at the example and problem from the second lecture here the cc crash ok so let -pron- have a look at -pron- first little first little problem here -pron- have get here be ok so -pron- want to know about the pre the pre processor let -pron- pull -pron- in here ok so what kind of three example of common example first of all what be the c preprocessor be that -pron- be a text replacement tool that run before -pron- actually compile this c code and -pron- can think of be very simple and fairly dump tool that only stand a few understand a few limited command so one thing i can do be that -pron- can -pron- can include additional file so for example if i say ok -pron- utility function then that moment inside -pron- compilation",
    "-pron- util dot h and that better be somewhere inside -pron- project perhaps i want to include some system file for example standard -pron- o dot h because i want to use thing like printf and put s another kind of standard way to do input and output inside -pron- c file and the angle bracket here be just a hint to say this be not part of -pron- project instead -pron- look inside the standard include path of the c library and -pron- system ok so that be the first thing be just a weekend -pron- easy music for include the second thing -pron- will see be -pron- can define macros so for example -pron- can define the fact that if -pron- see life then -pron- should replace that with the value forty two ok so now if i type if life what the compiler be actually go to compile be go to see if forty two i do not see any non zero integer be consider a truthful",
    "macros which take parameter as well so for example i can disable if -pron- see -pron- macro then expect two parameter and then -pron- could do some thing with that so for example -pron- could function like this -pron- could say a b for example and realize then if -pron- type -pron- macro and -pron- then put something in here like some quote have a string and something else -pron- literally will take those and replace that so now the compiler would see two string and number and if -pron- change -pron- macro to say have comma then the compiler would later see value with commerce so -pron- be a very simple text search replacer and the last thing that the professor be commonly useful be weak and conditionally define part of",
    "how shift fine so for example i could say if life now life -pron- be go to be expand to the value forty two so that would conditionally reply include all of the code then i put between that issue if an end if -pron- could also test to see whether even a macro over these symbol have be define or not so for example -pron- may say look if i have compile on a system that be already compliant declare the simple unix or declare say debug for example then do this extra code and where would this process a symbol come from well maybe -pron- have define -pron- early or maybe actually as part of -pron- compilation when -pron- go to compile this inside -pron- make file -pron- may specify some flag so for example -pron- may say ok gcc please compile",
    "to something as well ok so that be quick very quick introduction to the people verse -pron- use -pron- to include thing -pron- use -pron- to define macros and symbol which can be simply replace and then -pron- use -pron- to conditionally compile part of -pron- code alright let -pron- get back to the next part right so also on the compilation step -pron- have this wonderful thing call size of now size of -pron- be evaluate at compile time let -pron- say that again at compile time so if i say size of int the compiler say look on this platform i know that an inch be four byte or eight byte so that actually become a number eight four oh eight if i give -pron- a variable like counter then -pron- will depend upon the type that variable so if a counter be not -pron- again this would",
    "even two on a small embed cpu ok so -pron- tell -pron- the number of byte require to store that value if i have a pointer so let -pron- make -pron- a point to type so here be a pointer to an int ok so on a thirty two bit system there be thirty two wire which represent the address all -pron- addressable memory ok so if i want to talk about a particular address be able to read or write a particular bite i need thirty two bit also know as four byte so on that particular machine i would need four byte to hold a pointer to a particular integer on a modern processor probably -pron- be look at -pron- right now use a sixty four bit processor sixty four bit be go to require a sixty four bit to hold an address in other word -pron- be go to take eight byte to hold that address so so size of can be very useful now when i care about how big something be right so let -pron- actually use -pron- what do -pron- think about",
    "-pron- have just put this put together right so -pron- define size of a divide by size of a back be zero right and -pron- be go to use this as a macro so what do -pron- think this do not count to five be -pron- have to think about -pron- be -pron- ready go ok right so let -pron- think about this -pron- be go to when -pron- use this if i use -pron- and i pass in say some variable let -pron- call -pron- variable x then that would immediately give the compiler the follow would say size of x divide by size of x of zero ok so what how can -pron- make use of this size of x then be go to be the total amount of memory require to hold x right so if be -pron- for bias great but then -pron- say ok x square bracket zero so this make sense when x be an array now see arrays",
    "the compiler when -pron- ask -pron- to do a statically sized array do know the size of that so what do -pron- get -pron- get the size of the array divide by invite divide by the size of one element the very first element of that way in other word this be go to tell -pron- the number of element the or number of thing that -pron- can store inside the array right so perhaps a well name for this would be numb element so for example oh -pron- could use this with a little loop let -pron- make a little array so here be -pron- datum perhaps -pron- be a big enough to hold say thirteen item and now if i do be i less than the number of element of datum then i can just kind of walk through this way access each each element and i know that this number element"
  ],
  "533db1aa-ad5e-40dd-b819-8b989c89b1f6": [
    "ok so -pron- have kind of talk a little bit about this idea before so -pron- could i implement p thread mutex lock just by disable interrupt on on the cpu so the idea here be that if -pron- code be run on the cpu if i disable interrupt then i can not be stop become agent smith out of the matrix that now i own the cpu so no one else can can take -pron- for -pron- so one of the limitation of this first of all that yes -pron- can ensure that -pron- be the only one go into the critical section if one there be only one cpu ok so if i control the one and only cpu and i can not be interrupt then i get to do everything inside the critical section until i give up the cpu ok so provide",
    "-pron- data structure no one can stop -pron- because i disable into app ok the second be that i require an here be a big problem here be that actually require sufficient privilege to disable the interrupt and because this be such a powerful operation by default that be disabled for normal user program -pron- need interrupt in order to make a cpu stop run one thread and start run another in order to handle hardware interrupt -pron- too do to device iot device be ready to either take datum from the system or give datum from the system for example the network card may report that -pron- new package arrive and here be some datum or a disk or solid state disk may report hey -pron- have now finally get the datum -pron- can now read this into memory or gpu",
    "of reason why -pron- in over a normal complex system -pron- can not just disable disable interrupt ok so this be one solution to the critical section but like i say -pron- be not a generally useful solution to the critical section -pron- need to find a way to be able to kind of implement these correctly and will talk about some algorithmic concern about that in the future instead now be what -pron- have get a real challenge for -pron- which be i want to implement a barrier in fact -pron- be go to give -pron- all the code that -pron- need here -pron- be i just want to implement a barrier that will wait until five thread call this method call this function and -pron- have get to keep track of how many there -pron- go and all -pron- be go to give -pron- be the follow code which use a counting semaphore so -pron- get to choose how what -pron- would like to implement what -pron- 'd like to"
  ],
  "553189a9-6ee0-4efd-8e9e-0f57d5500e5f": [
    "hi welcome to let -pron- nine so -pron- be go to start look at how to build a memory allocator in other word -pron- want to implement malloc and calloc and realloc so let -pron- get start and think how -pron- be go to do that right so here be the game plan -pron- be go to need a data structure to keep track of the piece of memory that -pron- have currently allocate plus later when -pron- be free -pron- want to keep track of those for item so that -pron- can provide -pron- for future allocation so the bedrock of -pron- implementation be go to be this little memory structure in here so let -pron- take a look at this right so what be -pron- get well today -pron- be talk about a struct which be a way for -pron- to put a whole lot of information together in this case -pron- be go to have a pointer for the user area of this particular application how large -pron- be and whether this particular entry represent some memory that be currently in use another word malloc have be call in the user use -pron- or be available for future allocation in other word",
    "now a couple of quick point about this be that i do not have to keep write struct metadata entry each time every time i want to talk about this piece of this piece of this structure i have to when -pron- be talk about a link list so here be -pron- link list so that i can chain these together but for other time i do not want to have to keep write the word stripe let -pron- be lazy and for that -pron- be go to use the c word call typedef typedef -pron- can think of be just an alias for example -pron- could typedef float to say number and then later -pron- may change -pron- mind and say typedef a double to -pron- number type so -pron- think of -pron- -pron- be just a simple simple alia which mean that later on in -pron- code i can just use the following type and -pron- be a",
    "ok so so great now -pron- have get this type -pron- can have pointer to memory and also get appoint a memory i can talk about the entry at that memory in particular -pron- point -pron- pointer to some boy to memory that the user can use and how large -pron- be ok alright so here be the game plan then be that -pron- will have these little entry -pron- little metadata entry and when i allocate some memory i will make a note of that i will set the pointer to point to some memory and say hey -pron- go there be some maybe on the hit that -pron- want but as -pron- can see that -pron- have also have a next pointer which would point to -pron- next entry so -pron- will not decide where to put these yet so let -pron- just kind of keep this conceptually as a separate from the actual heap memory that the user see an that will have another piece of memory that the user be use or not etc etc so great use little next point be go",
    "call malloc i can walk through this link list look for available entry and hopefully -pron- have get one which be of sufficient in size and available wait so will need to check -pron- flag for size and free etc to see if -pron- be go to be sufficient for the malloc request and at some point -pron- will get to the end of this and the next pointer work pointer nothing will just set -pron- equal to null which be kind of a standard system program way to indicate that -pron- get to the end of a link list ok alright what else to talk about this i think that be go to be -pron- -pron- can make some convention about how to insert and remove from this obviously only the head pointer that point to the begin of -pron- link list so if i want to insert into -pron- link list insert at the very front -pron- be go"
  ],
  "55699194-1692-490a-a863-a26370265ef7": [
    "ok right quick question for -pron- why do -pron- think p right exist and when would -pron- use -pron- ok so what be p right k so here -pron- be -pron- behave a lot like right -pron- give -pron- a file descriptor as usual -pron- give -pron- a buffer as usual and the number of byte -pron- want to write but -pron- also give -pron- an offset in other word -pron- do not care about the current position in a file -pron- just want to explicitly say where to write these bite by the way there be a similar call call pread ( ) as well so where this become uh -pron- useful be where i have say a whole load of thread which be generate output suppose for example that -pron- run a competition against student from another university and all -pron- have to do be sort some sort of number or i want a well color than that here -pron- go and write as quickly as possible the output to a file ok so maybe -pron- know about threat so great -pron- be",
    "each thread be responsible for the output of the total result and so -pron- need each thread to work independently great -pron- say i remember those two forty one p right to the rescue that now i can tell -pron- first thread to explicitly write -pron- result into the first part of the file meanwhile the second thread over here be start to generate result as well and so -pron- can start write bit of datum over here and -pron- can explicitly say where in the file -pron- want that to go so yep there be pwrite and there be also pread which do a similar thing that -pron- can read from a certain part of the file and directly specify an offset into the file so -pron- be very useful when -pron- want to to do random access and random read into file but also later inside cs two forty one -pron- be go to learn how to memory map file directly into memory where",
    "can actually look at the file as if -pron- be actually part of -pron- address space so that be come up later inside cs two forty one and -pron- be the most one of the most far and most powerful feature of posix and system programming that -pron- will see in this course so the will do what be a name pipe ok how do i make a name pipe for this -pron- can actually make pipe on -pron- file system -pron- can just say make vivo because -pron- behave as a little first in first out queue so let -pron- call -pron- say -pron- queue kate and now if -pron- look on the current directory -pron- will see there be something call -pron- queue so here -pron- be look a bit like a file right now but let -pron- find out some more information about -pron- ok and -pron- will see -pron- have get a magic letter over here that actually -pron- be a queue so i can put stuff into -pron- let -pron- say helico hello pipe that into -pron- queue",
    "now wait to invite those bite -pron- be block why because no one be currently read from that so to be able to read from the this fifa i better set up a new process that can read from this so i will start a new buffer let -pron- get out of that because i want to the current directory so let -pron- grab all that ok run -pron- again and now let -pron- start a new window and -pron- will cd into that directory case so i text a bit big so now what can i do from this pipe i can start read from -pron- ok great let -pron- start read bite from -pron- queue and there -pron- go i get out hello now finally -pron- attempt to echo output into -pron- queue have complete as well so there be useful for when -pron- want to set"
  ],
  "55fa9033-494f-4ca8-a264-154a981f06db": [
    "hi welcome to let -pron- fifteen actually jump in and learn a third synchronization primitive and this one be one of the most powerful thing that -pron- be learn this course -pron- be actually a bedrock for how -pron- can implement other thing as well so in the future when -pron- want to say implement a barrier or complicated condition of when a thread be allow to continue condition variable will come to the rescue so let -pron- get start -pron- can imagine lot of example in life where -pron- need to temporarily stop , like -pron- can not leave the house until -pron- have -pron- key and something else , or -pron- can not say get a ticket from the train until -pron- know which train and where -pron- be go . so let -pron- let -pron- look at how condition variable can emulate this process , emulate this idea , and in particular what condition variable allow -pron- to do be to pause a thread , to say stop , right , do not continue and then later -pron- can wake up that specific thread",
    "condition have change so when the weather be warm -pron- want to run outside in just a t shirt great will wake up all last sleeping thread right so excuse -pron- let -pron- talk about the basic idea than about thread so first thing be how do i send a threat to sleep easy -pron- need condition variable so -pron- will create one of those a little bit but after -pron- have get one or or -pron- need to do be -pron- thread should call p thread p for short p thread condition wait ok -pron- be go to skip on some detail that make -pron- a little bit more complicated but -pron- be go to write -pron- just like this for now there be pass in the address of -pron- condition variable and so again this be a bit like file handle that yes i have a variable in -pron- code but actually refer to something else the actual object"
  ],
  "578b472b-d7f9-455d-b241-95da7faa4f77": [
    "ok so as -pron- think -pron- be much -pron- be very annoying to have to keep make new connection and in fact life be not be even bad than i explain because as soon as -pron- start talk about h ttps in other word to secure version of this then there be even more handshaking that need to occur before -pron- actually get to send -pron- payload before -pron- actually get to say what -pron- want -pron- have get to set up the the encryption channel so why do not -pron- make -pron- so that after -pron- have make one request -pron- could have another and that be the major performance improvement of http one point one so let -pron- think about -pron- cap request -pron- client say hey be service i acknowledge -pron- sequence number -pron- mind the client say ok i acknowledge yours and here be -pron- request and then -pron- get back the html so",
    "and -pron- mind type and -pron- status code of two hundred except -pron- be everything 's ok now on the same tcp connection -pron- can image -pron- to say oh great thank -pron- -pron- have look at the html and -pron- have decide that i want to now request cat dot jpeg and -pron- can get that as well so great -pron- have make -pron- page significantly fast now request a new resource can happen every ten millisecond if -pron- be small resource so now in this little cat example -pron- have reduce the time down to thirty millisecond ok and -pron- can continue to keep this connection alive in fact this protocol flag to do this be call keep alive ok and so -pron- can get a hint as to whether the connection remain alive after -pron- have make one request so that be great and -pron- see a significant improvement in performance",
    "ability to have virtual host with https as well so that i could actually now have a web host business where the same ip address and the same server list on the ip address could be pretend to be multiple thing so for example maybe i could serve the web page for chocolate dot edu or document dot com and start sell favorite candy bar i could have another website that say sells go cart so i guess -pron- be listen all kind of -pron- favorite thing at this point and the same web server on the same ip address can pretend to be these different server so as part of the http request -pron- could now send a header the say please respond",
    "i can specify a name like please behave as if -pron- be go kart dot com for example so that kind of become an integral part of the spec and there be integrate with https as well right so -pron- still have some problem however which be that the cat jpeg can not even be send until the web page actually be send back to the browser and the browser have actually finish look at the content and figure out the cat jpeg be even require plus with each request -pron- make -pron- be not just say hey i want cat dot jpeg there be a whole load of header information for example -pron- may be set cookie information because the cookie disambiguate who be make the request so cookie can represent some session information"
  ],
  "578e3a53-f9ab-41fa-bf8f-4907d8f5ebbe": [
    "ok so think about a typical kind of local call how much work do -pron- have to do so for this -pron- extend the stack ok -pron- put on return address onto the stack so this be the old pc value the program counter this be where -pron- want to go back to after -pron- return -pron- be go to put potentially some parameter on here though for efficiently see today because -pron- can because silicon today be so cheap -pron- may not put all all of the calling parameter onto the stack instead -pron- can pass -pron- directly through register and that be obviously much fast than write to to memory in order to store some parameter and -pron- need to change the stack pointer to say hey old stack be just here this other stuff up here and now -pron- have move down so that if there be local variable -pron- can use this temporary space in the stack down here ok",
    "do safe to return all -pron- have to do be read the old program counter and change the stack frame back to the previous one ok versus rpc what have -pron- see -pron- have get thing like marshalling and that can unmark sling and that can include change bit representation marshall link there so -pron- have get modify representation -pron- have get pause -pron- have get oh yes -pron- have -pron- have get -pron- got to traverse data structure and which potentially involve many cache line or what -pron- be read or write to main memory -pron- have also get ever handle as well so even if -pron- do not take",
    "authorization authorization to do as well so this be authentication authorization session handling so if -pron- discover that the remote connection be no long good -pron- may automatically reconnect as well so the complexity of -pron- curl be about a hundred to a thousand line of code at least compare to a simple local call which be perhaps one expert and i forget one more thing as heat memory as well -pron- may need to do some memory allocation and deallocation so be any surprise then the rpc can be at least a thousand time slow than local court and in fact -pron- can often be ten thousand or even up to",
    "can be a great cost to use rpc however why do -pron- then still use -pron- answer because sometimes -pron- be really useful to be able to run code remotely for example perhaps -pron- have a what be call a thin client meaning that -pron- compute power close to the user can be very small because most of the actual work happen on the remote end so for example -pron- may want to automatically modify video file audio file on a remote heavy due to server that have thousand of core and lot gpu resource and now -pron- can do all of that heavy computational work directly from -pron- much light weight local front end right so that be kind of feel for pc and the other thing -pron- mention the other advantage of course be the security advantage of i can have a different process be with different security model and different amount of trust an access to different resource"
  ],
  "57935b87-3626-4a44-93bd-a923f9a0ba9d": [
    "hi welcome to lecture twenty so let -pron- have a code review where -pron- be go to talk about a little bit of code that use condition variable be -pron- ready ok so -pron- little application be very simple -pron- be just get two thread one thread some point be go to modify this value of x and then call signal another thread be wait for x d b positive so -pron- can think of this basically like a latch and only after -pron- be become positive do -pron- continue right so what do -pron- think about this code right so what do -pron- notice first of all that -pron- code over here on the right really do need a mutex lock before -pron- change value of x and -pron- signal ok let -pron- see why the problem occur be when -pron- call change at the same time that -pron- second thread be actually call in this wait for positive x let -pron- see where the problem could occur so -pron- have get this test here and then later maybe a few",
    "to block so here be the problem scenario what if -pron- have an interleaving of these operation such that change the value of x here happen after this test and call peter condition signal happen before the thread block and wait for signal ok so now what be happen -pron- second thread be go to deadlock -pron- be now wait for a signal that be never go to happen so right now yes -pron- have a small opportunity a chance that -pron- second thread will deadlock how do -pron- fix -pron- by lock on the same mutex because then the only way that -pron- can continue be after the threat have acquire the mutex so another thread will have to wait so now if -pron- do that -pron- become impossible to be execute these two line of code at the same time that these two line be be execute",
    "this if inside here so in practice this can bite -pron- in two different way first of all maybe in other application -pron- have multiple thread call this and -pron- really just want to ensure -pron- x really be positive before -pron- continue and other thing may change value x the second problem with this code be the actual deep condition wait be occasionally may suffer from what be call a spurious wake up -pron- never truly go to sleep ok right so why do that occur well let -pron- let -pron- go back and talk about the implication for how conditioned weight be actually implement right so -pron- have just see this problem of change in value of x and then signal too early before -pron- thread be actually block and wait for that signal to arrive so in practice what do this mean",
    "to behave as if -pron- be an a single atomic operation in other word there be no clock cycle no moment in time between between these two event otherwise the very same argument that -pron- just give hear about these two operation happen just within that now window would apply to all of -pron- cause to p three condition wait ok so -pron- have to ensure that these behave can instantaneously together now in practice that may be impossible there could be a very narrow window between when -pron- unlock the window unlock the mutex and block so in practice if that may occur for example because i really do have multiple cpus run on different piece of silicon then what will happen be rather"
  ],
  "57f1edee-d98f-4b8b-9ca9-c3c66e7774d1": [
    "ok so let -pron- talk about why the nation part of the operating system here that be ass break now if -pron- be to look at the manpage of s break -pron- 'd read something like the follow s break increase the process be datum segment by end bite so when -pron- call s break -pron- can give -pron- a number and -pron- can say hey -pron- 'd like ten more byte please alright so what do that actually mean ok so between -pron- and -pron- as big be not actually use anymore instead -pron- be go to use some virtual memory trick of all the slide this do modern c library use some virtual memory trick that -pron- have not learn yet so s breaker be simply mechanism but -pron- will use -pron- for cs two forty one to implement a simple memory allocator ok so remember how i say that the bottom of the memory -pron- have get the text segment which be the program code and string literal and any other constant -pron- have put in here and above that -pron- have -pron- global variable which live forever alright so",
    "ok -pron- can put any datum -pron- like inside there and by default the total amount of memory allocate to this be g ask sufficient for what -pron- need ok but what about the day -pron- call malloc and say hey -pron- malloc i need another four thousand and ninety six byte please this point -pron- need need to go back to the operating system to the kernel and beg for some more van back for some more real address -pron- do not want to talk to the oblivion -pron- do not want to avoid -pron- actually need those memory address now to refer to some actual memory and that be the purpose of s break be to say yes i know -pron- have get -pron- heap possibly say zero"
  ],
  "580ae97f-7447-4844-927b-098638c01c95": [
    "ok right so this one again be sometimes couple set up in the interview and sometimes cup come up in exam let -pron- have a look at think about what happen here with the kernel when -pron- do something like the follow so here be a kind of typical piece of c code where -pron- be go to make a file pointer there -pron- be and -pron- be open up this particular file so -pron- be go to open up for read ok so of course -pron- could write that kind of code in c but -pron- could also write -pron- in another language like python or rust or go etc java do not really matter what -pron- care about be what be go out with go on with the system at this point ok so -pron- need to think about how -pron- traverse different i nod in order to kind of traverse through different directory in sub directory ok so -pron- be the first thing that happen -pron- have a file system mount at route so -pron- will assume there be not a file system mount",
    "that directory list -pron- be go to get back a listing of directory name like et see and i know number one two three and possibly some other directory as well so for example -pron- would expect like var where -pron- be go to store information about currently run program -pron- may have say a home subdirectory for the user information and then maybe a user directory for user install program for compilation header all that good stuff right so great -pron- find then the directory listing and so the directory entry an ass be arnoud number so now -pron- can go to that i node and say great i want to read -pron- as a directory",
    "-pron- be go to get again that mapping between a name so for example -pron- will be an entry call host annonay node number so host correspond to say three four five k and there may be some other stuff inside here so for example there may be a file call message of the day motd ok that will have a different owner number four five six ok and so great now -pron- find the file now -pron- can actually kind of check that -pron- have permission for that file and also open -pron- so start read -pron- content so let -pron- see what the question here be so uh so -pron- have -pron- have get as far as read the the file and -pron- want to know how many disk block in total have be read again what be assumption assumption the",
    "not cache ok so all the word -pron- get -pron- right so the first directory aside the first disk access be when -pron- actually say ok give -pron- the content of slash and that -pron- give -pron- first mapping save et c to one two three in the other cape and -pron- do not go out there be out again that be all -pron- first read and then -pron- read e t c o k so inside et see what if i get all i get a file call host and -pron- be i know number two three four -pron- have get some directory blah blah blah -pron- be night number of something else baba blah so that be all second directly block weed and then -pron- actually read the"
  ],
  "594d9f66-6e3e-4370-b43a-cf1498062ce1": [
    "ok welcome to part two so meanwhile the story continue with a new hope as year can see princess leia have now enter the story with the two droid talk about -pron- and that to -pron- -pron- look like a very fairy walkie ok alright so meanwhile let -pron- see about create a web client use what -pron- have learn so quickly viewer tcp client and -pron- will show -pron- another kind of trick along the way here ok so what do -pron- get -pron- have get -pron- hint -pron- be send -pron- to zero i want to do everything where i just do by by paper and maybe i want to connect locally or maybe i want to connect to illinois ok so first of all let -pron- try let -pron- try -pron- annoy see what -pron- say if -pron- do this ok so pick an address right so how about cs ok right i remember that the port number must be in double",
    "address of -pron- hint tractor in the address of the pointer so if -pron- fail let -pron- just exit after print out to the an error ok and here be where -pron- be just go to only look at the very first entry so i make a socket with the wright family and the right socket type and then -pron- be go to connect and connect all that need be the socket file descriptor key and the address and the length of of that struct ok so let -pron- compile this then -pron- talk about the remainder of the code key right so ok will stop this i can hit the control square brace there -pron- go in -pron- back into telnet hey turn -pron- please",
    "right ok client off -pron- go wait who -pron- connect a k and what -pron- give -pron- -pron- tell -pron- to go to a different page ok so please refresh this and go to this other web page fine so -pron- 'd write a web server web client now which actually kind of understand this text and follow that link right but -pron- will see that fundamentally -pron- request be ok and -pron- give -pron- back a hundred and sixty three bite of actual content and the content gaver be a web page ok that be the mind type text slash html so let -pron- have a brief look at the remainder of the code to see how -pron- work first of all -pron- be define -pron- request here just use a macro so this time rather than just request a",
    "to behave as if i connect as if -pron- be this other address this other host name illinois to edu here be why today -pron- can have multiple hostname which resolve to the same ip address and so -pron- web server do not know which actual host that -pron- would like -pron- to pretend to be unless -pron- tell -pron- so perhaps if i tell -pron- that -pron- want to connect to behave as ww dot c s dot illinois dot -pron- -pron- may give -pron- a different response hey let -pron- just try that for a moment ok so will compile -pron- ok and will run the client again ok ok nope that be still tell -pron- to go to a different",
    "about -pron- before call d printf ok so d print f be this very strange call be not truly part of the posix standard but -pron- make -pron- life a lot easy what -pron- do be -pron- be equivalent to write in the sense that -pron- take a socket for descriptor but -pron- also give -pron- format information as well so i can do thing like percent error percent d and and start pass in additional parameter ok so if -pron- have get string and integer number do -pron- want to send to -pron- socket remember d printf can be a useful tool here rather than use right directly and then -pron- be go to start read back what the service say so i need a little buffer and -pron- have get -pron- little read loop in here and every time i get some bite back -pron- be go to write -pron- out to standard out -pron- be go to finish if -pron-",
    "there be no more bite for -pron- then i want to stop also if read return to negative one then -pron- be not go to read anymore so this be the simple kind of code right but -pron- be not complete -pron- be not yet handle the case that -pron- get -pron- get interrupt -pron- be also not handle the possibility of the pipe break as well so if if the connection get shut down then a sigpipe signal can be generate as well so -pron- need to handle that event as well because by default sigpipe will simply shut down -pron- application ok the last thing that -pron- be not do in -pron- code be gracefully shut down tcp connection so really -pron- should be use shut down to tell the kernel and the server fail event that"
  ],
  "5ab7cd3e-b52e-4bfc-aa50-687888c3c92d": [
    "ok so remember how the mode bit inside -pron- inode which -pron- can read use the stack call contain all sort of information well let -pron- talk about change those mode bits so for that -pron- have get a little shell command here call chair mod and of course -pron- can do this from c as well and this allow -pron- to specify the access control in particular the read write and execute privilege of different people ok so in -pron- simple world there be only three kind of user that can access the file and the first number here in octal be the be the bit -pron- want to give to the actual owner of the file so how do i read this ok so -pron- have read right",
    "-pron- execute be one in other word to six here mean that the owner be go to have read and write permission the four mean that the group owner have read permission in other word but -pron- can not change -pron- or execute -pron- and anybody else can also read -pron- as well ok so here be another one seven five five what do -pron- think this mean this mean the user can read write and execute the group owner can read and execute and so can everybody else ok so this may be appropriate for example for little utility that -pron- keep create that -pron- want people to be able to run -pron- ad or out or whatever -pron- just make but -pron- do not want -pron- to modify -pron- so",
    "where -pron- can just explicitly set the executional and read and write permission right so great -pron- be part of the matrix now -pron- can go read these octal value there be another way to use the shell version of chamade which be to add or take away specific permission and so for example -pron- may want to take away right privilege for everybody so for the user who own -pron- the group and all other as well or -pron- may want to take away the read write read and execute permission as well for just the owner if -pron- want to add permission then -pron- can use instead of a minor side -pron- can put a plus in here as well so that be kind of standard quick way of use chmod and if -pron- want to use -pron- from code then there be the equivalent system call here again -pron- use a path but this time -pron- actually to specify the mode number",
    "write -pron- own octal number in here ok so but there be not this kind of second form -pron- can not do this from code ok -pron- have to specify a number now -pron- turn out that the mode bit also have two other kind of secret bit that most programmer do not know about so these two other bit be what be call the set uid bit and here be the idea normally when i run a program like say ls or little out just go to run -pron- as the user that be log in there have call fork 's call exec and -pron- be go to run under that user privilege ok but what about a special program like sudo so sudo as -pron- know will run as a different",
    "do thing as the administrator as root for example so clearly the program sudo -pron- need some extra extra privilege which normal program do not have right so the actual program sudo be go to need to special case somehow and be able to do thing that normal user can not do so for this -pron- be actually go to need these special bit here in fact when -pron- run soo do -pron- actually want to not run -pron- as -pron- actually want to run -pron- as a privileged user so that be go to have a look at that this kind of look at the mode bit of pseudo right so for this i will say ok where be sudo ok be store inside user be suit ok so let -pron-",
    "about sue do and -pron- will see -pron- get little s here which mean ok the set effective user id be set when -pron- run -pron- when -pron- execute -pron- -pron- be not only give permission to execute -pron- but on -pron- system sudo will actually run as root not as -pron- right so that be the effective user id little bit there be also one for the group but let -pron- not worry about that today and one example of that be when -pron- want to do so -pron- too could use this for example perhaps -pron- want to write a web server that school -pron- be a web server and -pron- know that -pron- want to run -pron- on a privileged port for example port eighty or port four four three if -pron- want to make a web server which be list for http request or https request and -pron- 'd like -pron- little program -pron- little web server to actually"
  ],
  "5b5cb5f1-f7e4-4e34-b21a-4b055a2c2121": [
    "hi ok right so let -pron- have another go implement a mutex lock but this time -pron- have get a useful little x cpu instruction call exchange and here be what -pron- be define to do -pron- be go to swap two value at two address as an atomic operation music sell uranium power or thorium power know what do -pron- mean by atomic be -pron- be an indivisible uninterruptible operation that be what -pron- appear to be like that be how -pron- behave so rather than write assembly code will imagine that -pron- have get a function here codex exchange that behave as if -pron- be some assembly code ok so let -pron- mock out this code here be how -pron- be go to write -pron- then so right so as usual -pron- initial function be just go",
    "now what -pron- be go to do be for -pron- mutex lock i get a little loop here where i have a loop variable call q ok and -pron- be initialize this magic one so i imagine i want to imagine that be like the hot potato if -pron- like -pron- will see why in a moment because -pron- be go to call this exchange assembly instruction there all these people pretend that this be ok and -pron- will say here be the address of q here be the address of upside i need that scroll set up do do do do do do do k right -pron- go waste be this right here be right on lose there -pron- go i look as n",
    "so why do -pron- do that so let -pron- think about what -pron- be do -pron- have get this hot potato that -pron- want to put into mutex which do not tell anybody but -pron- be go to just treat as an integer and then -pron- be go to keep go around this loop when -pron- read the value of one so when the first thread call mutex lock here be what be go to happen -pron- be go to swap -pron- value of one here with a value of zero so over here here be -pron- mutex lock -pron- be now get one in but the value that q -pron- now have be zero so -pron- escape out of this loop and can continue so that first -pron- can go into -pron- critical section meanwhile as second",
    "-pron- own value of q be one and then -pron- call exchange right but -pron- be just go to exchange a value of one with one because that be what be already inside the mutex log so now -pron- read a value of what again so what be -pron- do -pron- go around the loop again continuously try to get rid of this hot potato right so -pron- be like -pron- have get a one oh what do i do -pron- be go to keep call exchange -pron- be go to keep try to push -pron- into the mutex lock ok so -pron- have only get to escape out of that loop when filing be able to get back a value of zero so where do that happen after the first read have finish with this critical section and write back a value of zero ok so there -pron- get so with this implementation then thank -pron- hardware people be now able to ensure",
    "do this within ten thousand nanosecond in fact rather than just directly call atomic operation today period mutex lock actually do a lot more than this -pron- use a kernel resource call a spinlock and also -pron- have to ensure that -pron- eddie information inside -pron- cache be correctly push back out to main memory so if the actual implementation of preferred mutex lock be a little bit more complicated than this -pron- include memory barrier and performance characteristic but i hope -pron- see how ultimately -pron- need hardware support to ensure that -pron- preferred mutex lock be atomic right and -pron- will last thing will will mention today for this today 's lecture video be the idea that what -pron- be actually",
    "and -pron- want to find way to ensure the only one thread enter the critical section at a time so this be actually a classic operating system problem because critical section occur all over the place inside the kernel because there be so much concurrency go on and can -pron- kind of find a way to write code to ensure that only one thread or process or algorithm can actually manipulate one resource two resource at a time ok so this be kind of the last similar sorry this be a future thing -pron- be go to look at in a different lecture be how can -pron- implement or how can -pron- solve this critical section problem which -pron- have today -pron- solve use mutex lock but how can -pron- solve this in a kind of algorithmic fashion"
  ],
  "5bd8420a-ccee-4ff9-b38e-466d0cfca53a": [
    "ok right sir i remember the next question be go to talk about and -pron- be the follow -pron- be actually a typical kind of interview question where -pron- look at something a power be simple and then say ok what actually happen what all the step so let -pron- take a look at the kind of typical question suppose -pron- open up a terminal and -pron- run the follow so call http illinois dot edu and press return what happen next right so this be an opportunity to show off all of -pron- operating system knowledge and system programming knowledge ok so first of all what be curl right so -pron- well talk about that for a moment ok so curl actually be a bit like cat but rather than say ok tammy cat about a file curl will connect to a website -pron- understand several protocol include http and https and -pron- will make a connection to a web server so great and then -pron- can see -pron- have connect to this and -pron- have get back the kind of basic html document ok the actual body of the response -pron- can probably ask -pron- for more information maybe if -pron- do kind of both",
    "be try to connect to and -pron- will see that uh this be what -pron- be send ok -pron- be send the following -pron- actually can tell curl to send additional information as well if -pron- wish and then here be the actual response header -pron- get back which be a standard http key by the way -pron- web browser will can also kind of tell -pron- some basic cool stuff as well so for example -pron- day the whale say demo that -pron- see and in fact -pron- show -pron- on this web page how that well say image be create that be a system kind of dockerfile script that say ok start from a bun to run these unbuntu thing to install a hollow door stuff and copy some basic stuff into the file system of that image and",
    "if -pron- know one specify what that process name should be if -pron- just run the container ok so that be that be this request now how do -pron- get here well of course if -pron- look at sea on fire fox -pron- want tool web developer and will look at say the network ok so if -pron- look at the network request and let -pron- reload this -pron- can see all of the request that occur all of those get request here -pron- go and i can take any one of these for example and i can copy -pron- as a curl request so now inside -pron- clipboard i can let -pron- clear this place set i can pretend to be very same user agent and if i have some cookie as well some authentication cookie that have be set",
    "this and hit return -pron- do not return anything because in this case -pron- have the information be already cache in fact if -pron- do have both mode -pron- would see that -pron- be return back to say hey actually -pron- can just use -pron- cash version that -pron- have not modify -pron- on the server so just go ahead and use -pron- local copy alright so let -pron- go back to -pron- original question and say how do -pron- answer this how do -pron- answer this kind of curl question right so this be give -pron- an opportunity to talk about the fact that first of all -pron- be inside a shell so inside the shell -pron- have now get this string of letter curl space and blah blah blah and a new turn ok so now -pron- can talk about the fact that -pron- shell be in the middle",
    "so the moment -pron- press return that be when that be go to be give to -pron- -pron- process which what will -pron- do next ok -pron- have get this now inside some buffer maybe on the heap for example and -pron- want to pause this so -pron- be go to tokenize -pron- into argument so -pron- have get curl here and then -pron- have get this argument ok so what happen next well this be mean for -pron- to talk about fork -pron- be go to make a child process so -pron- call fork and -pron- be go to call exec some variant of exact which will use the path because -pron- be go to look for this command call curl somewhere on that set of directory ok so assume -pron- find -pron- -pron- be go to start this new process and pass in this as these as -pron- argument ok so -pron- can now talk about how",
    "to call exact so -pron- be go to load in the bite of cult into memory remember -pron- have a head transplant at this moment goodbye the shell whatever be go on side that side that process because now -pron- be go to be call the main function for curl and -pron- be go to pass in the argument ok so when -pron- start up kerbal purse password give to -pron- and -pron- be v r x y and -pron- will see the string so now -pron- can start talk about finally about some of the network stuff how -pron- have to first of all identify a domain name so -pron- be illinois dot edu so -pron- be go to try to connect to that how do that work ok great now -pron- have an opportunity to talk about dns -pron- be go to turn that into some ip address by do dns what be dns development",
    "can talk about the fact that maybe -pron- have get an entry locally inside -pron- e t c host file or maybe there be a cashed information because -pron- have recently kind of connected to this website but if not -pron- have to make an external request and dns simple dns today just use udp packet so -pron- send -pron- out say hey neighbor -pron- be look for an ip address associate with this host name and whoever can tell -pron- the answer the fast win that be what happen today tomorrow hopefully -pron- be go to have more secure system for example this current discussion about run dns over https so that -pron- be more difficult to forge and not possible for internet provider to sniff all of -pron- dns traffic ok so finally -pron- get back an ip address great so now",
    "ip six socket so ip four socket and then start make tcp connection to -pron- web server -pron- know that http run on port eighty so -pron- have not specify report -pron- be go to use a default poor poor eighty so let -pron- connect to the illinois edu server and then start talk this particular protocol so now -pron- can talk about the fact that -pron- be go to send to the server follow get slash so -pron- just want the base resource and then some protocol so perhaps -pron- may be say http one point one depend on whatever the default for kerr list and -pron- be also go to send say other header like the host etc but eventually because -pron- know http finish -pron- know -pron- be go to see just a blank line so -pron- will see the sequence slash r slash n slash r slash end right and then -pron- wait for the service so now",
    "talk about the network call that -pron- require to do this so -pron- could talk about get address info to make -pron- life easy -pron- could talk about -pron- create a socket -pron- could talk about -pron- have call connect in order to connect to the other side -pron- could talk about then that give -pron- get to far descriptor so -pron- can do all the standard stuff like use right or deep in tf etc etc etc right and then finally have be the other side return and give -pron- back talk to -pron- back in http and that will include a bunch of header in the response header and possibly some content as well which by default call this print out who fantastic do i get the internship that i get the job but i hope -pron- see how if -pron- slow down in these kind of interview question rather than just kind of panic and so -pron- tell the network actually kind of start and take a very carefully about all the thing that happen -pron- actually have a lot to say and so this class c s two"
  ],
  "5c06ea70-4c6c-40b5-828d-a3492fe9fa96": [
    "ok so remember how the mode bit inside r -pron- node which -pron- can read use the stack call contain all sort of information well let -pron- talk about change those mode bits so for that -pron- have get a little shell command here call chair mod and of course -pron- can do this from c as well and this allow -pron- to specify the access control in particular the read write and execute privilege of different people ok sorry in -pron- simple world there be only three kind of user that can access the file and the first number here in octal be the be the bit -pron- want to give to the actual owner of the file so how do i read this ok so -pron- have read right",
    "-pron- execute be one in other word to six here mean that the owner be go to have read and write permission the four mean that the group owner have read permission in other word but -pron- can not change -pron- or execute -pron- and anybody else can also read -pron- as well ok so here be another one seven five five what do -pron- think this mean this mean the user can read write and execute the group owner can read and execute and so can everybody else ok so this may be appropriate for example for little utility that -pron- keep create that -pron- want people to be able to run -pron- ad or out or whatever -pron- just make but -pron- do not want -pron- to modify -pron- so",
    "where -pron- can just explicitly set the executional and read and write permission right so great -pron- be part of the matrix now -pron- can go read these octal value there be another way to use the shell version of chamade which be to add or take away specific permission and so for example -pron- may want to take away right privilege for everybody so for the user who own -pron- the group and all other as well or -pron- may want to take away the read write read and execute permission as well for just the owner if -pron- want to add permission then -pron- can use instead of a minor side -pron- can put a plus in here as well so that be kind of standard quick way of use chair mod and if -pron- want to use -pron- from code then there be the equivalent system call here again -pron- use a path but this time -pron- actually to specify the mode number",
    "write -pron- own octal number in here ok so but there be not this kind of second form -pron- can not do this from code ok -pron- have to specify a number now -pron- turn out that the mode bit also have two other kind of secret bit that most programmer do not know about so these two other bit be what be call the set uid bit and here be the idea normally when i run a program like say ls or little out just go to run -pron- as the user that be log in there have call fork 's call exec and -pron- be go to run under that user privilege ok but what about a special program like sue do so sue do as -pron- know will run as a different",
    "do thing as the administrator as root for example so clearly the program pseudo -pron- need some extra extra privilege which normal program do not have right so the actual program pseudo be go to need to special case somehow and be able to do thing that normal user can not do so for this -pron- be actually go to need these special bit here in fact when -pron- run soo do -pron- actually want to not run -pron- as -pron- actually want to run -pron- as a privileged user so that be go to have a look at that this kind of look at the mode bit of pseudo right so for this i will say ok where be -pron- sudo ok be store inside user be suit ok so let",
    "about sue do and -pron- will see -pron- get little s here which mean ok the set effective user id be set when -pron- run -pron- when -pron- execute -pron- -pron- be not only give permission to execute -pron- but on -pron- system suit will actually run as root not as -pron- right so that be the effective user id little bit there be also one for the group but let -pron- not worry about that today and one example of that be when -pron- want to do so -pron- two could use this for example perhaps -pron- want to write a web server that school -pron- be a web server and -pron- know that -pron- want to run -pron- on a privileged port for example port eighty or port four four three if -pron- want to make a web server which be list for http request or https request and -pron- 'd like -pron- little program -pron- little web server to actually"
  ],
  "5c6032d9-cc7d-468f-82d9-4054bf6258ab": [
    "hi so let -pron- start talk about the reader writer problem this occur in all sort of problem where i want to build a read thing for many different process and thread and occasionally update -pron- so this for example may be a cash -pron- may be -pron- web cache perhaps -pron- have hear today that many -pron- have -pron- web page be not serve by a single server but instead -pron- have hundred or thousand of box set up around the globe already to cash -pron- content and so that be how -pron- can have an extremely responsive an fast that internet by cache the content close to the end user user so great most of the time -pron- just want to do some kind of key base look up so ultimately -pron- have this kind of algorithmically idea but occasionally -pron- actually want to update value into that cash similar example be maybe -pron- have get a sql database or no sql database and i need to do some kind of query on a table",
    "now i want to say right let -pron- say updater or update a particular entry inside -pron- database and i need to make sure i can do this without destroy the validity of -pron- look up 's and so this be a concurrency problem when -pron- be happen all of the time be what power be all of -pron- modern application so if -pron- be to implement this today here be the good news be posix specification include not only p thread not only condition variable but reader writer lock as well ok so here -pron- be that i make not just a mutex lock but a reader writer lock here -pron- be and i initialize -pron- and then before i do any writing i can call the right lock version before i do any reading i can call the read lock version and then when i finish"
  ],
  "5cfcbc81-f386-4c5f-bbdc-4d1995a831ae": [
    "ok great so let -pron- start talk about mandelbrot sets so here be a great wonderful idea i want to choose something which be -pron- be call embarrassingly parallel meaning that -pron- can just set all cpus off calculate something and then -pron- do not need to think about any communication between those cpus -pron- do not need to think about -pron- try to update the same piece of memory at the same time so this be a very easy problem for -pron- to parallelize into play with do understand how to use p thread before -pron- move on to more complicated example ok so -pron- be go to put together a lot of idea first of all let -pron- talk about a little bit of math so here be the plan i want -pron- to think of a number right now -pron- 'd like -pron- to square that number ok and now add the number -pron- first off be -pron- ready now think of that number so in square that an add",
    "then so on and so on and so on now of course if -pron- think of zero -pron- be go to end up with the number zero if -pron- think at the number say two then very quickly -pron- number be go to get exponentially large two four add to get six square at thirty six etc if -pron- think the number one k so one be one time one as those two ok square that and again -pron- be go to see an exponential growth go negative one and negative one square square out become one take -pron- back to zero and if -pron- keep do the same routine -pron- will not escape -pron- will stay value between between negative one and plus one so what -pron- be try to see be this idea that number close to zero go to stay around zero but for much large number -pron- be very quickly exponent get away because -pron- be square -pron- current number so that be why -pron- be actually go to look at here this be -pron- sdr code",
    "kind of ten line of code here -pron- be especially as see actually support sir complex number so -pron- do not think of a complex number or shame on -pron- right so here -pron- go for -pron- -pron- can -pron- see so let -pron- pass in a screen position so that will be of x and y and -pron- will turn that into a complex number somewhere close to the origin somewhere close to zero so will convert be those into some real number and some imaginary component as well right so -pron- have now -pron- have get -pron- constant but -pron- be go to keep add around each time now i just want to play -pron- think of a number game so will start off with a value of zero will try play this game for say like a thousand time also so -pron- will go around this little loop but will quit if -pron- value of -pron- complex",
    "two -pron- know -pron- be go to lose anyway -pron- know -pron- be on the path some exponentially large number ok so -pron- be only go to keep this plate keep play this game then if -pron- stay close to the origin and -pron- have not exhaust the number of maximum iteration be prepared to play this game so here be -pron- game right so just update busy with square with z add the complex number -pron- first think of wait so when -pron- finish play this game -pron- would be nice to play this display this in a nice colorful way so here be what -pron- have get if i manage to stay close to the origin -pron- be go to use a white color so -pron- rg and b value be go to be large as possible otherwise -pron- have get a fun little multiplication function here which will give -pron- a nice variation in color depend",
    "before i have to quit ok so the last thing -pron- need to do that calculate -pron- for one pixel which be why this be go to be so embarrassingly parallel isable now -pron- need to play this game for all of the pixel on -pron- screen so now -pron- have get up here -pron- two nest for loop for however big display and i want to store the result somewhere so let -pron- get some memory let -pron- use calloc right and this time i want to say how many byte exactly i want ansi support these wonderful thing here where -pron- actually say the number of bit -pron- want so today i would like this unsigned buster -pron- hear unsigned integer through two bit please so i know -pron- be definitely talk about a four byte integer and right so use that in -pron- car lock as well to to declare that be a total number of byte so -pron- be go to need per element right so that be -pron- code the last",
    "-pron- want to update the ui somehow in other word take -pron- array of pixel which be just a big block of memory inside the heap and display on the screen so how do i do that i do the follow let -pron- take a tape why mask -pron- with the value fifteen so in other word i only care about the low four bit and if those low four bit be equal to fifteen then display the ui ok so provide -pron- screen size be actually some multiple of sixteen then -pron- will make sure that i update this every sixteen row and i also update at the end if -pron- be not some multiple of sixteen then i should call update gui a one more time before exiting or before finish right so let -pron- have a look at this this actually have a play with this ok so -pron- have compile already -pron- have get a little make file here",
    "get ok let -pron- do -pron- initial manda bring no thread and -pron- be go to compile this -pron- output will be the same name as a target randall zero case so off -pron- go with mandal zero right so when -pron- run -pron- -pron- give -pron- a suggested use like how large how wide number iteration would like to stop -pron- ok so if i run this as do mandal zero say five twelve five twelve let -pron- do two thousand and off -pron- go ah be not that pretty right and now -pron- can see all of the area that stick close to close to zero -pron- disappear because i press the key there -pron- go right so be not that amazing i can not highlight -pron- ok yeah so the -pron- program wait for a key press which -pron- can see that"
  ],
  "5d08e5da-dc37-4280-b939-3b84bb917113": [
    "ok right so let -pron- design a way to do this mapping ok so here be -pron- exciting problem -pron- have get an address that need to be convert into a particular place or inside -pron- actual physical memory ok who be do this answer the memory management unit which be part of the cpu so this happen transparently every time that -pron- code be run every time read a variable every time -pron- be want to read the next operation for the the program counter ok so let -pron- think about how -pron- can do this -pron- planet be for every page here to have an entry inside a large look up table ok so let -pron- think a little bit about how big this look up table be go to be right so -pron- be on a thirty two bit machine and so -pron- have get two to thirty two possible address but hold on a moment -pron- say that the low twelve bit be go to be use on -pron- page offset so actually -pron- have only get thirty two minu",
    "so do -pron- follow that right so -pron- could imagine -pron- know -pron- have get these thirty two wire do do do do do do do to do ok and -pron- say -pron- have a page offset which be nielaus twelve bit because -pron- be divide everything to four thousand ninety six and so -pron- have only get twenty bit leave to actually describe -pron- page ok so that be number of page and so there need to be an entry for each page inside this big giant look up table -pron- can imagine -pron- be just say like an array except that -pron- be not go to write code to actually talk to this array directly instead the silicon be go to be implement to actually talk to this very directly ok so right so -pron- -pron- put in a number or two to the twenty into this giant away so each entry then need to hold which",
    "be contiguous like this -pron- page one could be map to hear -pron- page two could be map to hear page tweaking -pron- may be do so on right ok so how many how much space do i need to kind of hold -pron- index here for -pron- physical frame in other word how many frame number may i actually need to store here ok so if -pron- address space for physical memory be also thirty two bit -pron- may say well -pron- be two to the thirty two of -pron- except -pron- have divide thing up into four thousand ninety six chunk so the same argument apply that after these thirty two bit -pron- just discover in the last twelve bit in other word this only twenty bit remain so -pron- have actually only get twenty bit to play with so -pron- need to store twenty bit for each",
    "entry and each one be go to be twenty bit ok so how big be twenty bit -pron- be two and a half bite alright so be -pron- suggest that -pron- make an array then where each the size of each entry be two and a half bite oh i do not like the sound of that let -pron- run that up let -pron- roll out up to three byte ok hold on a moment i do not like do arithmetic and primitive which can fall on odd by entry so -pron- be go to run that up to four byte ok so now each entry be go to be four byte as a little wasteful but -pron- will make the hardware implementation simple ok so now i want -pron- to imagine then somewhere store inside -pron- actual memory as well except -pron- do not get to see -pron- the hardware or use giant look up table let -pron- put -pron- over here and so what be -pron- look like just lot",
    "byte and so each entry hold a number and -pron- use this by go to a particular entry for a particular page to read out the right physical frame so let -pron- imagine this that be imagine that i want to color ok choose get let -pron- imagine that -pron- be try to read some memory inside -pron- program right now i want to change a bite in -pron- heat for example ok so -pron- convert -pron- physical psychological address the virtual memory address and -pron- see this in page six so let -pron- go to page six one two three four let -pron- imagine -pron- be just here ok and -pron- read this entry right ok page six i see that this correspond to some frame number like let -pron- imagine this be frame forty seven case forty seven forty eight etc",
    "inside the heap -pron- go to this frame and -pron- use the original offset that -pron- have ok so here be the offset those low twelve bit and literally those twelve wire will be -pron- do not touch that -pron- do not even need to think about that what do push -pron- straight out towards -pron- ram and so that -pron- can now actually read the correct but ok so that be -pron- plan but -pron- have just invent be call a page table so -pron- have get a single level page table and -pron- be k and -pron- give -pron- the security of of each process now each process will have -pron- own page table so -pron- have just look at the page table one particular process if another process start to run will have to tell the cpu to use a different piece of memory for the page",
    "kernel so if -pron- call s break if -pron- load more library if -pron- will start get big than this page table need to be update as well right so anything -pron- can do to improve this do -pron- have any problem with this right so the first thing i want -pron- to notice that -pron- remember be that actually for most program -pron- have get lot and lot of address in here that be utterly unnecessary -pron- thirty two bit program like four gigabyte of address space be the time i talk about inside -pron- process most of -pron- -pron- be never go to touch for example -pron- stack may be small -pron- heat may be small and yet i have entry inside -pron- page table for these so maybe a future design can improve upon that a second problem -pron- have get be that congratulation -pron- just make -pron- machine run twice as slow because now every time -pron- program want to use memory -pron- have now make -pron- actually require"
  ],
  "5e0c43a3-3588-4f37-80a2-d3681b4119ea": [
    "ok so let -pron- just do some kind of quick work example -pron- have get a case where -pron- file use ten direct block and -pron- have -pron- dis block number use thirty two bit number ok so the maximum number of disk block which be addressable two to the thirty two and if each disk block be four kb let -pron- just work out how big a disk -pron- can actually use before -pron- run out of addressable space here so what be two to the thirty two minute at home ok so i can think of that as two to the ten time two to the ten time two to the ten time two to the two ok times four kb ok so each one of these make -pron- go for unit so -pron- have get instead of kilobyte megabyte gigabyte terabyte and so this scheme allow -pron- to address",
    "right at that limit that i can already easily by a say twelve terabyte disk right so in practice then ext2 actually provide actually have -pron- limit base on choice of say disk block must be represent use just thirty two bit and each disk block be exactly four kb but let -pron- go back to -pron- scheme here of actually how -pron- reference a information about file and look at how many block and indirect block that -pron- can reference here so for how many indirect block can be -pron- reference -pron- work this out by say i have four space of four kb",
    "because that be the size of -pron- table that can fit inside one disk block right so the next question be how large be the file in block of datum if the indirect block index be half full so what that mean be here be -pron- table that this do not have four thousand twenty four entire -pron- have five hundred twelve ok so how big be -pron- file well -pron- use ten direct block k so -pron- have ten plus five hundred and twelve indirect block so in other word -pron- have five hundred twenty two block be the size of -pron- file",
    "ok so in this example then -pron- have five hundred and twenty two block worth of datum but the actual storage space on the disk be go to be five hundred and twenty three why one extra because -pron- have this overhead of actually store the table and notice i do not bother to consider the inode as as extra block -pron- have already to set aside some space for the inode entry when -pron- format the disk ok what about huge file do -pron- have triple indirect yes do -pron- have quad indirect no ok -pron- be not necessary with triple indirect -pron- already work this out -pron- discover that the large file that -pron- could have here be go to be let -pron- see forty kilobyte for the direct block"
  ],
  "5e4db746-ae92-4bc8-ba83-cf475b89a78c": [
    "   hi ok so initially -pron- have just let -pron- switch to that ok -pron- have assume that -pron- whole process have be load into memory but there still may not be all possible address that map to physical ram -pron- have see this already when say -pron- accidentally try to read or write an invalid memory allocation for example page zero or maybe -pron- program malloc implementation there be a little bit crazy instead of try to re divide into address which do not probably exist yet ok so when that happen what be happen be that -pron- be go through -pron- multi level page table system here and -pron- get to an entry that say no -pron- be sorry i do not map to any one of -pron- actual physical piece of ram so when that happen mmu the part that be read this page table cause a page fault and a page fault be a hardware interrupt to tell the cpu that -pron- be sorry i can not satisfy this",
    "-pron- be try to actually read an invalid memory address but i want to realize that -pron- can now stop play trick on -pron- process be so for example for the long time -pron- have be look at -pron- and for the long time -pron- program have be run code inside define inside this second page over here and -pron- have not actually need any of the code inside this another page because that be all just set up code and maybe some code to kind of save the result at the end but right now -pron- be stick inside a deeply nest for loop and swim in cursive code busy execute all the stuff inside here ok so unfortunately as a just right now -pron- be figure out the answer to life the universe and everything and -pron- need to store that somewhere so -pron- be go to start need the function that the",
    "right so at that moment -pron- try to go to this location -pron- use the page table so -pron- track through the page table ok the upper ten bit tell -pron- to use this table the middle ten bit time -pron- choose this table and this be -pron- be sorry that do not correspond to any memory here be what -pron- will do -pron- will put the process on pause because -pron- have just get a page fault and as i turn around look behind -pron- will quickly fill in the background and so that -pron- will never know -pron- be miss any pointer at this time and -pron- be go to do the same thing in -pron- process so what will do be will identify a piece of physical memory ok out of all of these let -pron- choose this one this one do not seem to be do much right now and -pron- will say -pron- be ok i know where the byte be -pron- be still",
    "the local ssd but i have the content of the program which i can load into memory so i will go to -pron- i o system say hey please can read -pron- this page of memory four thousand ninety six byte and will wait for that to complete so hopefully in just a few millisecond time but -pron- may take long -pron- will actually have those bite now and now -pron- can fix up -pron- page table to say ok do not look at nothing anymore instead this entry be now go to be just here great so now -pron- fix -pron- up -pron- can release process and let -pron- continue and -pron- would be a non the wise -pron- may notice that -pron- program take a little bit long to run at that moment but as far as -pron- be concern those byte will always available there be never a moment when those bite be not act in memory so that be kind of pretty cool trick so -pron- have see two kind of",
    "and the page fault where -pron- have lie to the process and -pron- have to go and grab those bite from the disk so this process be call demand page -pron- pull thing in on demand and in fact there be two part to this there be a page in process this be the part -pron- just describe where -pron- go back to disk to actually read those byte in but let -pron- think about this for a moment what this bike be pull probably be use for something now in linux if there be any spare memory by default lennox will use that actually as a buffer for io operation but -pron- could be that other page be actually use for the process be so -pron- have to choose the good frame physical frame that -pron- want to actually use to satisfy this page fault and -pron- can be that some of these byte yes may already",
    "code but -pron- could also be that -pron- do not yet exist on disk in which point if -pron- want to use this particular page -pron- have to take the current content and copy -pron- out to disk and this be call the page app process so in the bad case -pron- 'd have to do both but obviously that take even more time so hopefully -pron- will not have to choose a page which require a copy out to disk right so -pron- talk about on demand page paging paging out in page fault i hope -pron- see look like a very cool mechanism and the last thing -pron- be go to talk about will revisit this in the future be this i do that there be a set of page that i need in order for -pron- process to continue right now if i give -pron- just the right number of amount of memory -pron- be not go to generate too many page fault for example right now -pron- program calculate"
  ],
  "5e598bf6-90ab-4adf-86a5-0f9204ac0b6f": [
    "ok so the waiter to think about the convoy effect be to sketch out let -pron- choose a new color right sketch out how much time a process need the cpu to actually continue and -pron- be go to see be that -pron- can suffer from kind of poor io even though -pron- actually only need a tiny bit of the cpu so here be the game let -pron- say that -pron- want to do something which do not need much cpu all -pron- be try to do be just do some io so for example -pron- want to run cat so internally do -pron- read from a file and write to say standard output or right to a different file so -pron- have get these kind of read and then a right call and then stick -pron- in a loop so the amount of cpu code the amount of code that inside",
    "buffer or write -pron- out ok so most of -pron- time be actually spend wait for io event ok so -pron- cpu need be minimal so in theory -pron- should be fine if say someone else want to run -pron- fractal program right so here be -pron- fractal program maybe -pron- be calculate over mandel brot picture or maybe -pron- be kind of mining coin but for whatever reason -pron- -pron- be hoard as much cpu time as possible so maybe -pron- be a big numerical simulation but -pron- be go to use as much cpu time as -pron- can give -pron- ok so here be what happen this actually look at time go this way",
    "of time be use up by -pron- cat say just to execute line twelve and thirteen of -pron- program which ultimately call say read so -pron- only need a nanosecond or two of cpu time ok -pron- already call read so then give up -pron- time quanta and -pron- be time for the cpu to do something else so here -pron- go let -pron- give -pron- to the fractal program or whatever -pron- be and -pron- be go to munch on that cpu time for as long as -pron- give -pron- and -pron- would like to use the cpu for basically forever fortunately -pron- do not a little hardware timer go off but -pron- be only when -pron- actually hit the full time quanta too -pron- actually take the cpu away from that process",
    "get to use the cpu again ok now when could have use the cpu when -pron- turn out that -pron- reader right call actually -pron- could use the cpu kind of right here or even possibly early but -pron- do not have access to -pron- and -pron- be go to see this behavior again and again and again so again -pron- go back to -pron- cpu bind job if -pron- be and again -pron- use cpu for as long as possible and ok only then do -pron- give the little bit of cpu for the for the io bind job so what be the upshot of this -pron- mean that the speed at which -pron- can say run -pron- io program like cat or something else be visibly slow be measurably slow because -pron- be not get -pron- cpu when",
    "the cpu job so be an interesting at a second order effect that cpu bind excuse -pron- cpu bind job or process hurt io performance ok and if -pron- sketch -pron- out in term of think about how how -pron- have to wait for a cpu even though -pron- actually need only just a tiny amount of time -pron- can see how this effect arise there be probably some analogy in term of say -pron- just need a moment of the bartender time or the usher time or -pron- waiter time but because -pron- be busy service other table -pron- need happen"
  ],
  "5f3d6627-e0d7-473c-920e-5f3d6584e568": [
    "ok let -pron- review this one what do -pron- think the follow code will print ok so how can -pron- analyze this right so -pron- have get a pizza -pron- create an -pron- be store somewhere the fed id 's and -pron- be go to say ok i want to thread that be go to start function and let -pron- start function be and -pron- be go to pass a void pointer the address of the string literal so the address of the capital a and address of the cadillacs to each one right so what will function be do function be then get this pointer and so -pron- be give -pron- the address of xyz so when this run and -pron- be not quite sure when -pron- will run -pron- will print out xyz now what about function a so functionally when -pron- run let -pron- see be give the address of abc ok but -pron- do not do anything instead -pron- just simply exit this thread and -pron- return an address so -pron- take the",
    "in memory abc and a zero bite if -pron- be ok and -pron- take that caster character add one in other word -pron- just calculate a pointer that now point to the b ok an -pron- return that so if and when these two thread run -pron- know that the first first one return a pointer to bc string and the second one print be xyz right what be the rest of the code to write so equal p thread join on thread a and grab the result and so in store that in there area code result ok so what what be go to be put inside this result so this line be go to wait be go to wait until -pron- be able to join p thread so that mean -pron- wait until functionary have finish at which point -pron- set this result variable to be a pointer and -pron- be",
    "-pron- print out ok so this will print bc add a new line ok right so now -pron- hopefully -pron- can conclude what this code be go to print right so if -pron- say -pron- be go to print bc or the new line then -pron- 'd be correct if -pron- say -pron- be go to print bc in a new line and xyz -pron- 'd be correct if -pron- say be go to print xyz with a new line and bc -pron- 'd be correct yes so what code be actually indeterminate fethard create make no promise about when these thread now go to stop maybe in a microsecond maybe in a millisecond time there be a very real chance that the first thread thread a could could start up exit and main thread could join on that -pron- could print out",
    "be particularly true on sale really busy system or a system that be only get one cpu core be poor threadbear -pron- have not have a cpu schedule yet and so -pron- main thread be do before -pron- another chance to start up ok right so all those those as possible if -pron- modify -pron- code so that -pron- include p three exit on the main thread then -pron- know that that mean that because -pron- be never return from maine now -pron- program be go to run until both those thread finish so now -pron- expect both the bc to be print and the xyz to be print though -pron- can not actually say definitively what order these two thing can print -pron- can make a guess as to which one more likely but -pron- have not actually make -pron- program fully determinant in term of -pron- out but -pron- have not enforce the idea that be seed must"
  ],
  "5f473d50-4d3a-49d3-8c52-1affccadabf1": [
    "ok so -pron- would not be fun if -pron- could to any program say do not tell -pron- about singe right now i just block those signal put -pron- off do not even have a steel handler to print something out no -pron- actually want to stop these thing at the door do not let -pron- be deliver ok let -pron- see how -pron- can do that right so -pron- be go to play with a sig proc mask here -pron- be and what -pron- be go to do be first of all to say hey signal put mask tell -pron- about the current signal which be currently block no practice there probably be not any but here be one way to actually ask -pron- with cig pop mask -pron- can say optionally -pron- can say here be the new master i care about all -pron- can give -pron- the address so that -pron- can actually determine the current set of signal which be block so basically -pron- have a new and old here so great when this return -pron- have copy the comment mask the process mask into this little variable here this set off signal ok now i want to",
    "-pron- can think of this set as just a set of kind of little bit and -pron- happen to be modify one bit ok now -pron- have get a new signal set with that bit set let -pron- go back to cig pop mask and say hey cig dot press let -pron- replace -pron- can not process mask where the one -pron- be go to give -pron- so set mask to say ok -pron- be go to tell -pron- all the signal that i care about be block which will be whatever -pron- originally get plus sigint ok so now -pron- have get -pron- defense against the dark art -pron- be not go to allow cig in into -pron- process so let -pron- have a go with this summer play with this and -pron- have get little program here that be go to countdown from from ten and will sleep for a second after each time but only after five second have elapse",
    "here be what -pron- be go to do let -pron- modify that set of bit ok that do not do anything that simply change this variable which -pron- can think of be just a little kind of opaque integer here but -pron- have ensure that one particular bit of that entity value have be reset have be set to zero and now -pron- can say ok sleep mask -pron- be go to give -pron- the bit set here -pron- be and i want -pron- to use this as the new process mask so -pron- be lower -pron- shield -pron- be pull down the drawbridge for sigint so at that point -pron- should see that signal be deliver immediately so let -pron- have a play play with this ok so -pron- will compile -pron- ok if -pron- go and now let -pron- run -pron- ok -pron- say hi there go right and nothing happen i can press ctrl c as many time as",
    "point great the signal get deliver and -pron- be default behavior of course be to to stop or program -pron- could change this to to instead run a signal handler so let -pron- do this so i want to say sigint ok so will say control c press could be -pron- little piece of asynchronous code that be go to be run ok and what should -pron- make -pron- do how about -pron- print something out to to stand -pron- out and -pron- could say let -pron- say three hash there right ok so right that be good this compile this right so now ok right there -pron- go wait what do -pron- notice do -pron-",
    "lot of time yeah so to remember that signal can not be queue i can have a set of different signal wait to be deliver but the actual specific signal -pron- be not queue here -pron- just get that delivery of one once again event so let -pron- do what -pron- do -pron- instal a signal handler here use signal all -pron- do be print out three hash be ok but nothing happen initially because -pron- block sigint by set the process mask and -pron- do this in kind of couple of stage first of all -pron- work with a bit set but -pron- be only call sig pop mask do -pron- actually get to change the actual process be mask -pron- first call up here do not do anything because -pron- want set the the new one instead -pron- be simply use -pron- to grab the exist process mask"
  ],
  "60132500-ca65-443c-a48b-78c3732e652a": [
    "hi ok so let -pron- take a look at some code that i find on the internet that claim to solve -pron- dining philosopher and -pron- will analyze -pron- and see what -pron- think ok so here -pron- go -pron- use all the good stuff that -pron- now understand -pron- have get a little structure here call philosopher and -pron- can see -pron- be go to be type deft so that -pron- can just say philosopher later on inside that -pron- be go to have a pointer to the left fork and the right fork and of course a philosopher have a name and associate with -pron- ap thread and some output variable say whether -pron- fail or not ok -pron- have a global variable to see whether this program should keep run or not ok and let -pron- have a look see how thing get initialized ok so -pron- have get a new way of character pointer and that be just a name of five philosopher would like today -pron- be go to have five mutex lock -pron- be go to be -pron- fork and five philosopher ok so",
    "initiate or four five mutex lock here -pron- go and so -pron- just get five meter lock initialize great and then further down great let -pron- actually initialize -pron- philosopher so that be just a simple stack away -pron- be ok to do this on inside the main threat because -pron- will see all of -pron- thread which be go to run finish before -pron- exit make right so great let -pron- get -pron- a philosopher will get the i th one will initialize -pron- name will initialize -pron- leave hand and right hand fork to be one of -pron- five mutex lock look -pron- be use modulo arithmetic so that the fifth philosopher wrap around and get to zero for kid game right after set that all up let -pron- start off threat will call preferred create will",
    "run some multithreade code which will look at in a moment i learn the rest of -pron- main thread do not do much -pron- sleep with forty second then change run and now just wait for those five threat to finish if something fail in other word if this will flag be set for eight five plus versus inside that struct will print something out that something do not work otherwise will exit ok so that be -pron- main threat now let -pron- let -pron- have a look at the code that -pron- get that be run by each philosopher oh yes and here be -pron- source ok so each philosopher be go to be give a pointer to -pron- little struct there ok so each plus be go to get -pron- own unique name etc right so -pron- also have some local stack variable which mirror what -pron- find inside the",
    "-pron- little thread go to do here so for forty second until that global variable be change the first thing that -pron- -pron- philosophy do be sleep in other word thank a bit so will print out -pron- name then will sleep for and amount of time so in this case let -pron- sleep for say some two one and eight second alright and then the philosopher go to pick up the two folk alright so let -pron- declare that the philosophy be hungry and then -pron- will try try to pick -pron- up ok now this look a little bit more complicated than -pron- may expect let -pron- look at this carefully ok so whilst uh whilst be still run and this be a do while loop which mean -pron- be only go to well feel i think -pron- should be not fail but let -pron- see all chill at the moment ok so -pron- be go",
    "after -pron- run through this code once i know notice -pron- be fray i apologize the logic as give incorrect let -pron- have a look see what -pron- do first of all philosopher waist to pick up the fork on the left ok so that be only go to proceed once -pron- get exclusive access to that particular fork alright and then -pron- be go to change this local variable fail to base on on what happen when -pron- try to pick up the the fork on the right so notice that initial value of try leave be too so actually -pron- be go to call this function call trilok which -pron- have not see before trilok never block instead rather than block if -pron- be unable to acquire this mutex -pron- just return an error number return a non zero value so the very first time that -pron- run this code with twice leave equal to two if -pron- catch acquire that",
    "fail -pron- immediately unlock the left hand thread great -pron- say this look a lot like -pron- be not go to implement holding wait -pron- be not hold onto the fork on the left -pron- be definitely release -pron- so then what do this code do well -pron- -pron- actually swap the meaning of the left and right fork so i like to think of this as the false for crosse -pron- arm or uncross -pron- arm because -pron- be go to go around this loop again but this time -pron- be go to grab the other one first ok so this idea of what be on the left be actually just be swap over by crosse arm and -pron- decrement try by one k so -pron- repeat this on the third try however -pron- do not use trilok instead -pron- call mutex lock so the only way to get out of this loop be when -pron- have truly manage to acquire the left and right mutex lock what do -pron-",
    "say want nine second want to eight point eight second and then -pron- release both look ok then -pron- go round the loop -pron- keep go until -pron- have hdr forty second be up so what do -pron- think about that be that code correct do -pron- correctly implement ok so with a little bit of thought -pron- could say actually no this do not prevent deadlock now -pron- may agree that deadlock be unlikely but -pron- could imagine a scenario where for the first two time all philosopher hit this trilok and fail because every philosopher be hold onto -pron- left fork and then when -pron- all try again there now hold onto the other folk but the trilok each time fail on the third time or philosopher first lock -pron-",
    "on the right in other word -pron- all get block so yes there be a chance that all -pron- possible will will deadlock because all wait for resource -pron- be never go to be release so oh dear this apparent code on the internet be not smart enough to solve this problem so yes lady and gentleman as a cs two forty one student now smarter than the internet ok so -pron- can prove -pron- can show the circumstance in which deadlock be can occur this actually see if -pron- can actually see that occur if -pron- actually run this code in practice so here be here be the same code that i prepare early i want to get out of this and go to handout but code k there -pron- go right go to code but i need cs two forty one lecture code right",
    "p thread ok finally great let -pron- ok off -pron- go oh alright look at this -pron- have run into deadlock where all five be hungry at exactly the same time so in practice causing this be actually actually difficult let -pron- just run -pron- one more time will see if -pron- can generate -pron- so -pron- can see no expense spare on the graphic -pron- have get five philosopher go through the state of either hungry eating or sleep and yes -pron- run into deadlock again this actually kind of take a look at this code because i want to show -pron- that i actually have to work a little bit hard to make deadlock occur here so i want to reset -pron- group right and let -pron- pull",
    "ok so right right so i have to do thing like introduce an extra moment in time between when -pron- first do the first lock and when -pron- attempt to do the second lock so i implement thing like a slow pick up here in order to give great opportunity that all five thread word acquire the left hand lock that be interesting be that right now -pron- be record this so one of -pron- cpu core be busy capture the lecture content the video content so i be actually surprised that so quickly run into deadlock the other thing that i do to try to make -pron- more likely be -pron- be use micro sleep too actually sure that -pron- have an opportunity for deadlock",
    "or so over forty second window so opportunity for deadlock be be only handful of time order of ten time or so -pron- would like -pron- to be much high alright so yes i have i can run -pron- in slow motion let -pron- see how -pron- do that -pron- can see -pron- ok so set also certainly buffer so that -pron- do not have to wait for for a new line to print -pron- ok so i get slow motion if i do -pron- s k so be go to see and -pron- be in there ok right so let -pron- just run that ok and -pron- will say slow motion so now -pron- can see off -pron- go right ok so that be dine philosopher -pron- be relatively easy to write solution which appear to work but"
  ],
  "603b0b01-6f4b-4c59-b606-c075dd30516e": [
    "hello welcome to lecture five do -pron- know anybody that be have a head transplant because that be exactly what -pron- be about to do to -pron- program here so let -pron- imagine that -pron- have get a running process -pron- be perfectly fine -pron- be have a great time but then -pron- say hold on a moment think about this process think about all the memory -pron- have get here -pron- have of course the stack somewhere up here -pron- have get -pron- heap somewhere down here -pron- have also get variable space -pron- global variable underneath that -pron- have get some read only memory to hold -pron- program code for the cpu and all the constant as well that -pron- define what if -pron- say right process stop do this -pron- want to remove all of this stuff and the memory and actually give -pron- a completely new program to load and this be exactly what exec do so -pron- do not create a new process know the exist process keep on run but -pron- give a head transplant to this process -pron- rip out the color instruction that be execute",
    "those malloc call there be long go that memory memory value no longer exist right so that be actually how -pron- can do new thing with -pron- program and actually exec have come in several flavor -pron- can specify the argument for exec use a whole lot of parameter or -pron- can give -pron- in a way -pron- can also say this be specifically the program that -pron- want to load from disk or -pron- can ask the system to search the path bad to find a match program name so let -pron- have a look at this alright so let -pron- pull up all man page and will say ok man tell -pron- about exact and the first information -pron- get ashley be not very useful be actually a build in command for bash -pron- do not want that -pron- actually want in section three will find exact so and will see that that -pron- have kind of many many slight variation of exactly end with different letter",
    "one share with a p here -pron- be go to give -pron- a simple file name for example -pron- may say -pron- would have run cat and -pron- do not say where in the file system catch that -pron- find -pron- will use -pron- path environment variable to look for -pron- also this version -pron- just keep specify parameter so -pron- may say cat and then include save the file name that -pron- want to print out all the version with an array here -pron- pass in appoint to away now there be a couple of big gotcha to watch out for -pron- here be the first one how can exact know when -pron- be lovely parameter array have finish so here be what -pron- have to do if -pron- be use the version where -pron- just write out the parameter here as argument",
    "particular -pron- be go to be a character null pointer ok so remember that zero be just another word for null in fact as exact one oh point who be and if -pron- decide to create -pron- own array or pass the pointer to a new way of string pointer the way last entry have to be null ok great and -pron- can kind of scroll down here so the exciting thing about exec be that -pron- never return if -pron- be successful the next line of program code that -pron- write will never be execute all that have disappear like -pron- say -pron- be the head transplant -pron- be go to give up or little process so -pron- be only go to turn if an error code and a common error would be -pron- could not find the program that be look for so -pron- think -pron- be time to play with this so let -pron- take let -pron- get start on right on a little program here right so be colic exact demo dot c and right so -pron- will have unique standard h -pron- will have standard",
    "method and today -pron- be not go to declare what the argument be for maine so -pron- be just too little prince be there so what should -pron- do let -pron- print something to say -pron- be about to get start so i can say for example say one one one i remember put be just equivalent to say print out with a new line as well and after that -pron- will exact something ok so exec and i will use the version where -pron- just write -pron- out in full ok so not use the path so let -pron- just start with exec and i think -pron- be exact will find out in a moment ok so what should i look for -pron- be go to look for something that do not exist -pron- be go to call -pron- cat right and what about -pron- argument now here be the second gotcher for use exec remember when -pron- be print out the argument to the process to very zeroth one the",
    "give -pron- a name here what would -pron- like to call -pron- program well typically by convention -pron- may be the same name of the file that -pron- want to load but -pron- do not have to be so i could have something call say alright ok and do i want to give some argument no -pron- be do now so the very last thing member be let -pron- have a point at the end which be another pointer ok so what do -pron- want to start with that if -pron- succeed -pron- will never see this line but if -pron- fail -pron- will say so will say oop exact fail ok now if -pron- actually want to print out more information about why a system call fail -pron- can use pierre and -pron- will tell -pron- about the last system call that do not succeed so i can put a little little message in here and -pron- will supplement that with whatever -pron- find out the last error occur right so will do that and then -pron- can",
    "ok right and -pron- do not use the right version of exact so let -pron- check -pron- exact version again ok and let -pron- see -pron- need constant character custom character and so on until a character at the end so i get pretty good to maine let -pron- go back and check to see if -pron- have -pron- have uni standard ok that be go to see why -pron- mess -pron- up because i can not type that be why right so -pron- want to cast that to a character let -pron- jump forward two o'clock to that close parenthesis there -pron- go and put -pron- asterisk in there ok and this ass trick can go alright much more reasonable case i will compile this way let -pron- run -pron- what do -pron- see ok if -pron- be that one then whoops exact fail nothing happen why i think -pron- be time to fix this program do not -pron- ok so let -pron-",
    "a program call slash be slash cat ok so let -pron- let -pron- let -pron- run that ok k so will compile this -pron- run -pron- again and oh look -pron- never print anything more that be why because -pron- process become that cap program the system load that process get program from the disk create -pron- image and then all of the memory inside that exist process and what do -pron- do well no actually run the cap program which if -pron- do not give any argument simply echo back what -pron- say to -pron- if i say hello -pron- should say hello back to -pron- right now have to know that i should have run -pron- program inside the program be look for be actually inside",
    "use the path version of this so now if i use the path version i can just say right please find -pron- a program call cat ok so -pron- can run this and now -pron- look like -pron- work and i can say hello again and -pron- print -pron- hello back let -pron- prove this actually truly use the path so -pron- be go to change -pron- current path variable here be -pron- current path foeke dollar i can sit let -pron- change -pron- to something else whilst or the old path in case i want to get -pron- back right so let -pron- put that inside another bash variable and now ok bash i want -pron- to change this about -pron- environment here i want to change path so -pron- be a just the current directory ok right so what have -pron- do if i say cat do not work inside bash if i say a dog out",
    "do not need to put foot dot and a forward slash on -pron- but -pron- actual program when run fail -pron- could no longer find cat because -pron- change the path of that program i think i bet if set -pron- old path back old path back to try again this export the path to be the old path and now if i run -pron- then i have to put the start in the four slash in there to explicitly talk about -pron- program and now -pron- can find cat again and run cat ok so and the other thing to point out be look here be the message to pierre be print out for -pron- the first part before the colone be -pron- be the text i type and after the cologne that come automatically from the particular error that happen most recently all right so -pron- have see a little bit of cat now i want"
  ],
  "6294f981-6e83-4197-a055-9b34816b1257": [
    "hi so let -pron- look at how -pron- can figure out who -pron- be and who be -pron- parent so -pron- turn out there be two wonderful little call -pron- one be i want to know -pron- own process id which will give -pron- a small non negative integer add practice for all program and process that so that -pron- start -pron- be go to be great than one unless -pron- be use dog but that be another story anyway so -pron- be go to get a small little integer here from get pid but if i want to know -pron- parent id then there be a similar call call get pid stand for get parent process id and between -pron- and -pron- i do not think this be actually great design as an api because -pron- differ just by a single letter -pron- would be very easy to go to miss type this and not notice that -pron- would actually type pid or just pid so when -pron- go the other one so now -pron- can do this -pron- can discover who -pron- be and who be father be an hour"
  ],
  "631bb988-4152-4a20-a77e-bcd5ee36e8bd": [],
  "633f10ed-2038-4da2-9855-c3cad245559f": [
    "ok i bet -pron- be wonder how many of these language record well actually -pron- be go to do -pron- for now but if -pron- do not actually have a go pause the video and see how much -pron- have retain and use the manpage to actually have ago write this honestly -pron- will learn more if -pron- try -pron- -pron- but for those of -pron- that actually have have to go let -pron- let -pron- see how far -pron- get so -pron- be go to try to do this quickly alright so here be what -pron- need -pron- need a main method -pron- be go to start with a new program let -pron- meet hello world ok write some thing remember first of all -pron- need what -pron- need the peace red library so -pron- p thread dot h and also remember when -pron- compile -pron- to set that flag as well so -pron- will need standard i oh ok right and i need -pron- little run a method or case so let -pron- have -pron- little program call say shout right except -pron- need to be something that p thread can understand so let -pron- make -pron- a void pointer and take a void pointer be right so what should -pron- shout",
    "-pron- can shorten this code to just print percent s and then -pron- arg let -pron- and let -pron- k let -pron- do rather than have a new line let -pron- flush and -pron- out today just to prove that -pron- can do normal c code there be nothing special different inside these thread compare to the main thread for an important idea be that all the thread great equality there be not an idea of a parent and child relationship any any thread can join another thread any thread can create new thread -pron- one big happy clan of thread ok so -pron- have flush something else and now will exit so what be use pthread_exit just practice ok so -pron- have get something -pron- can shout stuff out great now i need -pron- main method so let -pron- not declare the argument today will be a bit lazy and -pron- want to call shelt so shout hello right and then shout",
    "so -pron- will try -pron- ok and i remember to say o p thread and -pron- try -pron- and -pron- print hello ann nothing else why not well then -pron- actually only have the original main thread -pron- actually do not create any new thread so now -pron- want to convert this into actually start some new threat service a p thread create ok i need the address of a little variable but today -pron- be go to use a little away so i be pizza -pron- hype ok so i need tds will have two of -pron- so now here i can say something like i want the address of the first entry oh four code -pron- can do well than that that of course be just the begin of the array so -pron- be just go to say",
    "the function or be that be that the right way round let -pron- check to -pron- man page -pron- go pee thread create ok well -pron- find k -pron- be the thread then the attribute so yes that be correct so now and then -pron- say shelt right but -pron- do not just pass the argument there no -pron- be go to say hey pthread hold on to this pointer for -pron- and give -pron- to that shelt function later when -pron- actually find -pron- get -pron- get around to start -pron- ok so there be one and i want another one that be go to say world so the second id well go in the second slot so let -pron- add one and address point arithmetic come to the rescue rescue and i want to use that trick of just say p thread exit here so i will never return from maine ok never return so so exit never happen wait",
    "c librarie exit ks so be -pron- good let -pron- try this right and then -pron- two little thread be go to run that an exit -pron- case so ok right will compile -pron- again ok and bad and -pron- get hello word right and some other stuff -pron- will put an early inside that and in new line space and -pron- have get now ok hello world thread style yes the one of these slow version be pretty hello world but -pron- could make -pron- slow if -pron- use process instead right so that be kind of a quick demo of do -pron- hello world and covering up most thing -pron- may say what happen to the exit",
    "beef in here for example let -pron- cast that or what would happen if i just return the argument well sure -pron- can do these thing remember all -pron- doing be return memory address petere -pron- be not little peek at that memory so -pron- be perfectly reasonable to store to return sainul that that will be those value will be remember until someone call p thread join on that thread so right now -pron- be create thread zombie as -pron- two runner finish -pron- two program to cite two thread finish -pron- exit but but -pron- do not clean up no one ever clean up after -pron- -pron- have get two thread on this and inside that -pron- make a note of the exit value for this little program -pron- do not matter because in a moment -pron- be go to finish all thread and at that point the whole process be go to like a black hole just disappear and so -pron- do not care about the thread zombie anymore alright"
  ],
  "63aafada-b118-41b8-a266-44bcb09d9eca": [
    "ok right so let -pron- analyze this challenge ok so -pron- have get a global variable call firework here and inside -pron- main method -pron- be go to do -pron- be go to create a whole load of pizza -pron- be ok and make a note of -pron- thread i ds pass in the firework function ok and then after -pron- have do that -pron- will set firework equal to one and then will call precondition signal so -pron- know that be go to wake up one thread now -pron- want to wait for all thread to finish here so i could write a for loop to call p thread join on all of -pron- thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that -pron- never return from maine so i could call p thread exit here key right so great -pron- have implement that now actually let -pron- have to think about how -pron- can implement the firework right so what do r firework do k right well",
    "for for sure have so -pron- have get -pron- have get the mutex lock and all thread that run this code again to acquire the same lock and then -pron- say well while firework be zero corporate recognition weight in other word if -pron- firework thread start up here and -pron- start up early then -pron- be just go to block -pron- for but -pron- be go to ask -pron- to release the mutex lock and lock inside here so go back to the kind of first code remember -pron- create all of the thread initially back when be firework variable with zero -pron- be only after -pron- have create all five well -pron- say ok now -pron- be time for the firework ok so let -pron- get down here ok right so what do -pron- do after this point ok when -pron- escape out of here where a scaping",
    "zero and the very first thing -pron- do be call p three condition broadcast in other word re that fire bell wake everybody up in this may be sleep inside this condition variable ok so now all five of -pron- thread definitely work up ok so i implement increment the value of firework i print out oh and that value and then i decrement -pron- ok so what be go to be the large value this code will print one two three four five six what do -pron- think so just as a reminder -pron- have get five thread run this and the only way -pron- can escape out of this code be after firework be no long zero so what be the maximum possible value that -pron- may see from this first to run this hundred or thousand to a million time what be the large integer that would expect here ok so think about that pause this video and make -pron-",
    "think about this for five second and then -pron- will review the answer ok wait time up so let -pron- let -pron- have a look at the key key detail here the key detail be a mutex lock -pron- mutex lock allow -pron- to reason strongly about the number of thread which be actually run in this code because -pron- have acquire mutex lock mean that any other thread that want to run have to also require -pron- so all of these line of code can only be run by one thread at a time if the thread have go to sleep inside p thread condition wait there only allow to escape out of that after -pron- reacquire the mutex log so that be the key idea that only one third of the time can be run this piece of code and -pron- allow -pron- to actually reason about",
    "first thread will see of firework value of one because -pron- change -pron- upstairs in the main method so -pron- implement so -pron- increment -pron- to two case of wig the first escape out of here will will print out too and then -pron- decrement -pron- down to one again and then -pron- unlock the mutex ok so the next step that come out of here will only escape out of p three condition wait after -pron- have unlock the mutex so -pron- will also see a value of firework of one -pron- also do a big forecast wake everybody up and most be too and so -pron- will print out the value of two etc right and so on the next thread will come out check the condition for the while loop ok that be no longer true so -pron- come to an do the same thing increment -pron- from one to two and then two to one and then unlock the mutex which allow the next set to escape -pron- check the value and so on",
    "to kind of prove -pron- right so -pron- have ok compile -pron- eh why be -pron- machine slow ok there -pron- go -pron- get out all right and -pron- see every firework every thread wanna see the value of two and -pron- could do that through this strong reasoning thank to the mutex log ok wait a couple of quick question be why do -pron- see all the firework go well remember -pron- work up one of -pron- here and then that far work be not man work up the rest now do -pron- have any possible race condition here yes -pron- do so -pron- actually just talk about a version of this in the previous video that there be a small race condition small possibility that these two line of code here can i move that over or to keep throw box right when i change the value folk and then i call peter condition that could happen",
    "right inside there if that just that moment in time then what be go to happen -pron- have actually call precondition signal but no thread be yet sleep no thread be yet block inside condition wait ok so be to fix for that and the answer be to actually log on the same mutex here so if i call pete say mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread be acquire mutex or after the all the thread have call pizza hut or so at least at least a threat be currently get mutex will then call pre take additional weight",
    "the mutex and then -pron- get to run as well another thing this code be kind of highlight be that that -pron- can create thread but peter create do not wait for -pron- to actually start so this this code be an attempt to say ok let -pron- create all these thread and actually -pron- be go to make -pron- own barrier inside here so -pron- will not let anybody go until -pron- have actually create or five thread and also kind of start up so but this line of actually change the firework to one here could still actually technically occur before this five thread of actually start all -pron- have just simply say be to say ok create -pron- and at some point in the future please run alright so lot of interesting interleaving"
  ],
  "64320885-c055-41b4-9516-16a7910a1baa": [
    "so how do -pron- get datum into -pron- process maybe -pron- be from a file maybe -pron- be from what -pron- type maybe assume network and underneath all of those idea be very simple and useful little have cold here could read and notice look -pron- take a file descriptor just like right do and this be the mechanism by which all of the thing -pron- have see in c in c plus plus and python java etc read from file and other source this be how -pron- get information stream into -pron- process and -pron- be a very simple concise interface -pron- look a lot like right let -pron- take a look at -pron- first of all to use -pron- -pron- need to have a far descriptor and between -pron- and -pron- when i push the start -pron- get three to pick zero one or two and -pron- happen to be that far descriptive zero correspond to standard input and then -pron- have to say where do -pron- want this day to arrive so -pron- need to give -pron- a memory location a memory address now read do not care about a type -pron- simply go to say hey start put bite into this particular",
    "then use the success of the address after this location -pron- be useful to say however how large be buffer -pron- do not want -pron- to overwrite all of -pron- memory and start change other variable so -pron- be go to put an upper limit if -pron- like the capacity that -pron- be prepared to accept now this be not necessarily the number of byte -pron- be go to be actually \" write -pron- will notice that \" \" read \" \" have a return type \" this s size underscore t the s size here the extra s here mean -pron- be a sign value because -pron- may return negative one mean so i do not give -pron- anything but if -pron- do return a positive value then -pron- know that bite have write into a buffer space and -pron- know that that value will be less than the equal to or less",
    "first of all read the manpage the second be that if this return zero then this be a strong hint to to say that be -pron- -pron- can expect no more byte so zero be use as a special case to say that no more byte be come from this stream perhaps -pron- have reach the end of the file perhaps the pipe be be close at the other end perhaps the network socket -pron- be not go to be receive anymore bite from the other end of the network socket so -pron- can use that -pron- can test for that condition and then act accordingly \" one thing -pron- would not do after that point of course be call more read because there be not anything else come down now here be the second type type of thing about read which be perhaps surprising be that -pron- can block so -pron- be default behavior be to wait until there be some bite ready to give -pron- in other word",
    "cpu time -pron- can give the cpu to other process and other kernel task that need to run so realize that this read be what be call a block call that -pron- do not return immediately when -pron- return -pron- know that something be happen be time to process -pron- -pron- be not go to go into a full detail have read today will wait until the end of the course but today -pron- will remember that if -pron- do return a negative value -pron- be go to negative one and -pron- be go to treat the street that be a kind of generic error condition to say hey something go wrong the usb key be pull out -pron- network connection be close i could not read anymore bite into file whatever -pron- will treat that as a time to stop right so what kind of call exist as -pron- may have guess -pron- be a system call that to do all of these thing -pron- need help from the kernel -pron- need to escape from -pron- process space and actually use -pron- to the system so let -pron- see how -pron- can use -pron- for this let -pron- actually write some code",
    "and i need to declare -pron- i do not need to write that i can just i know that -pron- be inside -pron- unistd.h right so now -pron- have a little main method high maine and -pron- take the number of argument and a pointer pointer rv fight ok so let -pron- just read from standard input right now i need a place for that i need some bite well i could call malloc to get some bite on the heap i could have a global variable such as an array or i could have a stack variable read do not care or re care about be hey give -pron- an address and tell -pron- how",
    "buffer space here pick a random number like four thousand ninety six ok so now -pron- know that if i just use the variable buffer without push the square bracket then that be go to evaluate the very first bite of that away or the stack be not a pointer -pron- be an away and array can not be change to look at somewhere else so i can not say ok variable start look at this other memory location -pron- can not do that but -pron- can use -pron- in a pointer context so let -pron- do that let -pron- call size t and will say result and say ok read now at this point i need that file descriptor be go to want to standard input which be zero there be a constant -pron- 'd have to look -pron- up but i now need to say -pron- actually go and -pron- want to put -pron- into the buffer and how many byte while -pron- be use an array so if i use the variable name i can actually find out how big -pron- raise so",
    "-pron- print out the result of the return value of result so how can i do that i can say printf and then result be and -pron- could treat -pron- say as assign simple integer right and for that i will cast -pron- to a simple int because -pron- result actually may be large than -pron- but today -pron- just for demo purpose this will be sufficient right and with anything else -pron- want to do well ok what do -pron- think about this let -pron- see -pron- have get some bite but -pron- do not necessarily get a c string what -pron- get be just some byte be not actually go to be null terminate so how could i actually see those byte well one way be to use every right to say give spit out those particular bite but let -pron- start use as a c string how can i do that and the trick",
    "at the number of byte read that will definitely be one more by after the number of byte -pron- get and what i want to put in there i want to put in a null byte ok so this be now in dangerous territory i hope -pron- can see why but now if i do actually get some bite -pron- have terminate -pron- so now i can use -pron- as a c string so i can do thing like put -pron- in print f and i can say and and -pron- give -pron- write a little string here right now i need to say buffer and -pron- know that printf when -pron- ask -pron- to predict string will start at -pron- location keep send out this bite until -pron- see that no bite -pron- could also have use put s as well so that would do something similar and include new line as well ok right so let -pron- return that -pron- be successful and -pron- little program ok so what do i call -pron- read demo",
    "-pron- to fail one reason be that i do not actually declare what printf so let -pron- go and fix that alright hash include standard io dot h k ok right -pron- get compile without give any error -pron- could check to see if the rewarding so one way to turn most warning but not all warning honestly say minus w all let -pron- just check that ok no warning other great so now i think -pron- be time to fight -pron- off -pron- go so what happen nothing -pron- be wait that read call have block -pron- process be not consume any cpu -pron- be now freeze in time wait to return from that kernel call ok so i think -pron- be time -pron- type something in like abc and press return and ah look i recall be return the kernel do the follow for -pron- first of all return the value",
    "only type in three letter well actually what -pron- get be everything in this case -pron- the result include abc and that new line character which be why -pron- be see all of this extra space in the output that -pron- actual string be abc anna new line so of course -pron- take five byte to hold that ok let -pron- just try -pron- once more and -pron- will have some other fun with -pron- let -pron- uh this time just press ctrl d immediately so that there be no input ok and now -pron- result be zero so actually the string length of this be just an empty string -pron- with a little care week -pron- could deliberately kill the input before anything arrive and generate a negative one but i want to ask -pron- this this problem let -pron- have a look at -pron- little demo and say what do -pron- think will happen if i do not terminate the string",
    "to think about that i will compile -pron- and run -pron- ok off -pron- go this time -pron- be go to type say cde anne would -pron- see now right so i say cde -pron- have get this other garbage be print out this this second ib as well ok why do that occur why do -pron- see extra letter so the answer to this be that the content of -pron- buffer in the stack be just go to be the whatever happen to be in those stack memory location and -pron- do not actually set any other to zero so when -pron- ask to print -pron- out as a string printf and put i say fine -pron- will do that -pron- be go to keep work until like happen",
    "there happen to be a zero just a few byte later but of course there be no guarantee about where that zero bite will be ok the other thing -pron- may have notice be a very subtle memory bug here let -pron- take a look at how many byte that -pron- be prepared to accept -pron- be prepare to accept four thousand and ninety six but in -pron- original code how many byte do -pron- actually right well potentially if i type in four thousand ninety six byte put in that zero byte would have go past the end of -pron- buffer i would have have buffer four thousand ninety six here so i would have go past the end of -pron- way the very last valid entry be four thousand buffer at four thousand ninety five oh yeah ok so how can -pron- fix this let -pron- ensure that the maximum of byte -pron- get be one lesson -pron- have get space or not no bite if that ever have occur what would what would -pron-",
    "variable and so -pron- may have see a subtle error later on in -pron- code because -pron- change different variable or bad perhaps -pron- change a pointer in memory of the return address for something so now -pron- code crash or do something unexpected and exciting ok so that be a little kind of demo with read every time i call read be go to wait for some new bite basically -pron- be like go up to a service counter and say ok please go to have some more food thank -pron- very much and this be where to put -pron- so if -pron- be fully process what -pron- have in the buffer there be no need to keep get more memory each time i can overwrite the content of that that buffer and then have a very fast high performance program that can just continually use the same piece of piece of memory provide i do not care that the content of -pron- read be overwritten each time i call -pron- right that be enough",
    "make sure -pron- code work if -pron- do return negative one that if -pron- do return an error then i do not want to write into buffer at minus one i should stop before that moment so let -pron- do if result be minus one let -pron- get outta here right let -pron- put something to standard error so hey if i could not read from standard in ok and maybe want to quit a program so i could call exit for example or i could just return from maine -pron- do the same thing ok and by convention there let -pron- have value which be non zero to say an error occur ok right so now -pron- be look pretty good let -pron- write this and commit -pron- and -pron- can play with -pron- too ok right so -pron- will see -pron- in the next video when -pron- go"
  ],
  "6469a892-5a29-4895-b922-8ef54fabb1a8": [
    "ok something which be a lot more useful be this little program call e n v -pron- have probably already see -pron- as a way to modify environment variable and print -pron- out but perhaps -pron- have also see -pron- at the top of shell program so if i give -pron- a little script file to run with a python interpreter or to run say with bash i may put the following at the top another common one actually would be perl as well so let -pron- change color here right so for example the very first line may be user bin env and please run this program use perl and the whole line actually start with a hash and a bang as well so what be the purpose of -pron- usr bin env well the idea be that perhaps where -pron- store perl on -pron- system be different from -pron- so rather than",
    "say user local -pron- perl right -pron- would just be great if the system could find the right version of perl and run -pron- automatically ok so that be the purpose of e n v -pron- be go to look on -pron- path for an executable call perl and pass this the remainder of the script into perl so -pron- can -pron- can execute the script right ok some other quick thing how do -pron- make hidden file that be not list by ls -pron- talk about this before easy give a file name that start with a dot so if -pron- look in -pron- home directory -pron- will discover there be lot of example of this the windows file the windowe file system tend to",
    "inside -pron- also for example -pron- may find a subdirectory cause dot ssh for the secure shell and there be useful thing inside there for example -pron- can set up a whole load of alias inside config so that rather than have to do ssh and then a long name -pron- can just have a nice short name -pron- can do thing like say ok for this particular host connect on this unusual port number or forward these other port as well so that i can say directly connect to a database that be list on a port on -pron- server and make -pron- appear as if that database be actually ready to be connect on -pron- local machine so ssh be kind of very powerful and -pron- be all configure by these kind of little hidden hidden text file let -pron- get rid of that plus ssh -pron- can make public private key pair -pron- can even specify particular public private",
    "so lot of stuff -pron- do not normally see and like i say ls by default do not display the file and directory that begin with dot unless -pron- explicitly ask for -pron- for example by say ls minus a l that will now give -pron- everything and a whole lot of detail about everything inside a particular directory ok some surprise about directory so the surprising thing about directory be that -pron- have the execute bit set ok so what do that mean what do -pron- mean to execute a directory well -pron- want to be able to think about directory in two different way -pron- want to be able to say -pron- know i just want to be able to list -pron- content so wait a moment remember",
    "and all -pron- have be a name inode name inode name inode so i just want to read the file for that so if i have the read bit on -pron- directory then i can enumerate the list of thing inside a directory name so if -pron- have get a directory ok say call suba and -pron- l s on suba then i should be able to list everything and what be i do -pron- be actually read open a file that file suba as a directory and -pron- be pull out -pron- content display the path but if i actually want to go inside suba for example perhaps inside this directory there be a something else let -pron- say there be a picture of a cat then now i need permission to be able to navigate into or inside this directory in order to actually go and see these"
  ],
  "6500319c-14b4-4a6e-a714-3cf7e49e96a9": [
    "ok -pron- go live ok great wait let -pron- talk about the program argument so let -pron- suppose -pron- want to write a compiler right do -pron- say well -pron- know what i need to pass in some argument like one dot c and minus d for something ok how be -pron- go to get these thing which people add after the program name and where do -pron- go right so to that -pron- need to understand argv and argc so every time -pron- start -pron- program this \" two important variable here call argc and argv . argc be the count of number of label and argv actually tell -pron- -pron- value so look at this look pretty scary a pointer to a pointer ok so before -pron- panic here be what -pron- start the first thing -pron- see be just that work backwards like oh i have a pointer in other word all argv be be just hold a memory address and that be -pron- could stop there and say ok point just something so that be all obvious -pron- be go to be eight byte on a sixty four bit machine",
    "out a little bit k so do i have a great i do ok so if here be -pron- variable call argv for value -pron- hold the address of another pointer there -pron- be but actually that be not the whole story ok so what do this pointer hold -pron- actually point to a string just like -pron- have have other variable so far that point district and this one actually hold the name of the process be run so for example -pron- may be gcc or a dot out but -pron- have some other argument as well so this i have another pointer which point to the second argument case and maybe -pron- have get like well -pron- know one here or something ok and then the next but next to bite for bite or eight byte will point",
    "up here to tell -pron- -pron- finish and this pointer be a null pointer in other word -pron- be address zero do not try to follow that because if -pron- try to read or write to that location -pron- program will crash with a segmentation fault right so now -pron- can answer these question about what special argc[0 ] be go to be the process name so that be always there and argv[argc ] will be the null entry as well so -pron- do not expect to have to read that one either -pron- can be useful if -pron- want to write a little pointer loop a little loop that use pointer and when -pron- get to that null value -pron- know -pron- can stop so let -pron- have a go let -pron- actually try that out ok so i will get out of that mode and grab -pron- main here let -pron- go and write a little program to print out all the argument ok right so call -pron- print arg light",
    "and that should be enough ok so -pron- can do this in a couple of different way let -pron- do -pron- just use a simple for to begin with ok so i would say for int ( i = 0 ; i < argc ; i++ ) go to go around a loop and look at each entry ok so -pron- could do printf and then if i want the value of -pron- and inside there i could print out what i find so i could use -pron- as a pointer but i could also use -pron- as a string so will actually do -pron- two different way ok so -pron- want the value of -pron- whoop i do not mean percent -pron- be in percent d furniture ok so happy and percent s right ok there -pron- go right so i want the value of pi and then let -pron- find out",
    "an array start at the i think locally i th location so that be equivalent actually to say oddly plus i remember -pron- do pointer arithmetic so if -pron- be add one two or three well actually advance far enough to move on to the next pointer case so -pron- get -pron- to another pointer but then -pron- dereference -pron- ok so and then if i actually want to print out a string i would say ok here be the same pointer except i just for fun let -pron- mix up let -pron- replace that with -pron- equivalent expression which be just argv of i write and -pron- be go around let -pron- return zero which mean success be the value of the nonzero value be conventionally use to mean ok here be an error code right not bad i",
    "like a new line at the end here ok so will compile this print arg compile run -pron- and right now -pron- have just a single augmon as -pron- can see -pron- be a pointer an inside this memory -pron- have -pron- will help now let -pron- try one two three ok an -pron- get as -pron- can see -pron- different argument and each one be separate by a space unless -pron- put put -pron- in quote right so that be one way will do -pron- one other way let -pron- let -pron- open this in something which little bit more viewable ok make -pron- large ok let -pron- let -pron- instead right will use arc preprocessor trick so if hash of zero do not compile this ok and instead let -pron- use pointer arithmetic -pron- case so while let -pron- go and see"
  ],
  "662ac3ea-798b-43f9-bf91-290620d22337": [
    "ok so for way that thread can be terminate right so what do -pron- get so -pron- may have that the thread call p thread exit -pron- may have that the thread return from -pron- start function ok what else so the other way be that a thread could be terminate as if -pron- terminate the whole process so that may happen gracefully for example any thread -pron- do not need to be the main thread any thread call exit for example the main thread return from maine so those be equivalent the main thread -pron- turn from maine ok ok anything else well how about a signal so if a signal terminate the"
  ],
  "66f7d2a0-017d-4176-a5b6-a307cc73a392": [
    "ok right so let -pron- analyze this challenge ok so -pron- have get a global variable call firework here and inside -pron- main method -pron- be go to do -pron- be go to create a whole load of pizza -pron- be ok and make a note of -pron- thread i ds pass in the firework function ok and then after -pron- have do that -pron- will set firework equal to one and then will call precondition signal so -pron- know that be go to wake up one thread now -pron- want to wait for all thread to finish here so i could write a for loop to call p thread join on all of -pron- thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that -pron- never return from maine so i could call p thread exit here key right so great -pron- have implement that now actually let -pron- have to think about how -pron- can implement the firework right so what do r firework do k right well",
    "for for sure have so -pron- have get -pron- have get the mutex lock and all thread that run this code again to acquire the same lock and then -pron- say well while firework be zero corporate recognition weight in other word if -pron- firework thread start up here and -pron- start up early then -pron- be just go to block -pron- for but -pron- be go to ask -pron- to release the mutex lock and lock inside here so go back to the kind of first code remember -pron- create all of the thread initially back when be firework variable with zero -pron- be only after -pron- have create all five well -pron- say ok now -pron- be time for the firework ok so let -pron- get down here ok right so what do -pron- do after this point ok when -pron- escape out of here where a scaping",
    "zero and the very first thing -pron- do be call p three condition broadcast in other word re that fire bell wake everybody up in this may be sleep inside this condition variable ok so now all five of -pron- thread definitely work up ok so i implement increment the value of firework i print out oh and that value and then i decrement -pron- ok so what be go to be the large value this code will print one two three four five six what do -pron- think so just as a reminder -pron- have get five thread run this and the only way -pron- can escape out of this code be after firework be no long zero so what be the maximum possible value that -pron- may see from this first to run this hundred or thousand to a million time what be the large integer that would expect here ok so think about that pause this video and make -pron-",
    "think about this for five second and then -pron- will review the answer ok wait time up so let -pron- let -pron- have a look at the key key detail here the key detail be a mutex lock -pron- mutex lock allow -pron- to reason strongly about the number of thread which be actually run in this code because -pron- have acquire mutex lock mean that any other thread that want to run have to also require -pron- so all of these line of code can only be run by one thread at a time if the thread have go to sleep inside p thread condition wait there only allow to escape out of that after -pron- reacquire the mutex log so that be the key idea that only one third of the time can be run this piece of code and -pron- allow -pron- to actually reason about",
    "first thread will see of firework value of one because -pron- change -pron- upstairs in the main method so -pron- implement so -pron- increment -pron- to two case of wig the first escape out of here will will print out too and then -pron- decrement -pron- down to one again and then -pron- unlock the mutex ok so the next step that come out of here will only escape out of p three condition wait after -pron- have unlock the mutex so -pron- will also see a value of firework of one -pron- also do a big forecast wake everybody up and most be too and so -pron- will print out the value of two etc right and so on the next thread will come out check the condition for the while loop ok that be no longer true so -pron- come to an do the same thing increment -pron- from one to two and then two to one and then unlock the mutex which allow the next set to escape -pron- check the value and so on",
    "to kind of prove -pron- right so -pron- have ok compile -pron- eh why be -pron- machine slow ok there -pron- go -pron- get out all right and -pron- see every firework every thread wanna see the value of two and -pron- could do that through this strong reasoning thank to the mutex log ok wait a couple of quick question be why do -pron- see all the firework go well remember -pron- work up one of -pron- here and then that far work be not man work up the rest now do -pron- have any possible race condition here yes -pron- do so -pron- actually just talk about a version of this in the previous video that there be a small race condition small possibility that these two line of code here can i move that over or to keep throw box right when i change the value folk and then i call peter condition that could happen",
    "right inside there if that just that moment in time then what be go to happen -pron- have actually call precondition signal but no thread be yet sleep no thread be yet block inside condition wait ok so be to fix for that and the answer be to actually log on the same mutex here so if i call pete say mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread be acquire mutex or after the all the thread have call pizza hut or so at least at least a threat be currently get mutex will then call pre take additional weight",
    "the mutex and then -pron- get to run as well another thing this code be kind of highlight be that that -pron- can create thread but peter create do not wait for -pron- to actually start so this this code be an attempt to say ok let -pron- create all these thread and actually -pron- be go to make -pron- own barrier inside here so -pron- will not let anybody go until -pron- have actually create or five thread and also kind of start up so but this line of actually change the firework to one here could still actually technically occur before this five thread of actually start all -pron- have just simply say be to say ok create -pron- and at some point in the future please run alright so lot of interesting interleaving"
  ],
  "67bd4b3a-2f54-49a6-9c31-ff5dd35bf7d9": [
    "ok -pron- have some fun with this i do about -pron- but be not -pron- annoying when -pron- actually have to ask -pron- program to be compile suppose -pron- actually write a program now that continuously try to compile the code that i be write and the moment that the compiler succeed hey let -pron- run -pron- -pron- can do all that today with everything -pron- have learn from this system programming course so let -pron- have a look at that let -pron- look at the code that -pron- have start and workout how to complete -pron- ok so what do -pron- get first of all let -pron- define the compiler that would like to use -pron- be go to choose gcc but -pron- could choose c lang or -pron- can choose a different compiler and then decide -pron- main method let -pron- check to see if -pron- be be use as -pron- as -pron- like so do -pron- give -pron- right number of argument and then if -pron- do not let -pron- kind of suggest usage text like -pron- should tell -pron- that the source code that i should be attempt to compile",
    "-pron- madness here be the c file that -pron- would like to be compile automatically ok and so here be what -pron- be go to do -pron- have a little while loop now with fork ok now i have to mention this be kind of dangerous to wait to have a fork inside a while loop because if -pron- start loop continuously or the child also immediately jump into the loop then -pron- have get very quickly and infinite attempt to make an infinite number of process that can bring down a system make impossible to log back in make -pron- impossible to fix etc so let -pron- make sure that -pron- write this code very carefully so the point out where particularly where that be important ok so will get the id back from fork and remember the catch phrase here",
    "if the child id -pron- get back be zero then actually -pron- be the child so if this be zero -pron- could also write just exclamation point child so if that child to do -pron- then great -pron- be the child now in the child then -pron- plan be to invoke the compiler so stop be this program code and start be something else and this be the moment where -pron- have to pause and remember the exec lp can fail and if -pron- do -pron- do not want to immediately go round the loop try to fork again because child work -pron- -pron- cry try to create more process instead do not go round the loop do not pass go instead exit so if exact fail do not continue alright so how do -pron- call exec what -pron- have to remember here be that -pron- be actually go to use the program name twice first of all as the thing -pron- 'd like to load",
    "the process name so -pron- have get compiler and then maybe i want to give gcc some option for example hey please compile with debug information could turn -pron- on and then what be the name of dot c file -pron- want to compile -pron- be store that inside little variable call target ok right so off -pron- go -pron- have give -pron- a little head transplant and the child process will now merrily run attempt around the compiler so what should -pron- do inside the parent inside the parent -pron- need to wait until that compilation have finish in other word until that child process be finish so -pron- will call wait pid that be turn -pron- into and i can i backwards right wait pid and as usual will need the child",
    "ok and there be no option today ok sue if the child successfully manage to compile the program then at some point -pron- be go to break out of this loop and actually run the program if the compilation fail then -pron- want to wait a bit and try again so how can -pron- detect if -pron- fail well the compiler like other good program actually set the exit value depend on whether -pron- be successfully compile -pron- program or not so -pron- can just check -pron- return value from maine or exit value feel like -pron- know how to do that now with two wait macros so let -pron- do that let -pron- actually",
    "down here be -pron- escape out of this payment process will now do something else -pron- will actually run this so let -pron- fill that code in for real now k r u need compiler art today let -pron- use textmate and i may be a little bit large k right so -pron- need to write this in -pron- have -pron- if -pron- be a child -pron- be go to call exec p to say please run the follow compiler compiler compiler g and the target and do not forget to include the last argument",
    "that come and the wait period -pron- will wait for the status so the status will either be the status from the compiler or for the compiler -pron- never manage to actually find and run the compiler will see this this one here that -pron- put as -pron- exit value online twenty four ok right so now let -pron- check to simply should break out of this loop meanwhile back in the parent -pron- should check to see hey do -pron- to exit part of properly so if exit on the status ok and exit status value with zero -pron- know -pron- can finish ok right so now let -pron- if -pron- break out of the loop -pron- will print this running -pron- program and if -pron- be just run -pron- on the terminal then this will automatically flush because -pron- have",
    "process to run -pron- ok so without all in mind let -pron- compile this gcc compiler and -pron- will call -pron- i need to give -pron- a name that be not a drought so have a auto compiler ok great what be -pron- current present working directory ok -pron- be this because now -pron- be go to need to use two window right in this window let -pron- run the little auto compiler -pron- be ask -pron- for a program so -pron- will say ok -pron- can keep try to compile program dot c o k so if -pron- go now the first surprising thing be that actually osx lie gcc be not actually on -pron- macintosh laptop actually -pron- be a version of clang and as -pron- know clang as part of llvm which have come from this little midwest university call uiuc and -pron- be still an amazing",
    "get clang every five second -pron- be ask -pron- to compile client complaint that -pron- can not and set the next value so now let -pron- change that let -pron- start another little window over here and i will ok i make -pron- a little bit large cd into the right directory and now -pron- need to start write -pron- program so great let -pron- use cat hey pipe -pron- output into program dot c and now look five second later the compiler have read -pron- stock c file but can not actually run that program yet ok fine -pron- can change this -pron- can start write thing like hash include standard io dot h return i get save to disk then will do say maine at what should -pron- do here how about will do print f and -pron- can see -pron- be",
    "hello everyone alright and i can then hit close brace ok and before -pron- have even close out -pron- little editor here by auto compiler here actually successfully compile -pron- and so therefore run -pron- so -pron- be not a kind of fun cool thing to do that now -pron- can actually run program at the same time -pron- can keep -pron- running program and the structure of this be very close to do -pron- this way see compiler the structure of this be very close so what -pron- need to implement the shell there be just go to be one thing -pron- have to be careful off which be when -pron- call fork -pron- actually need to make sure that just before that -pron- flush the standard input as well"
  ],
  "682ea22a-c797-434b-a768-f7e9a7769709": [
    "right great ok so unless some implement a stack and will implement stack but be bound by two thing first of all -pron- will see that i data store here -pron- little array here can only handle ten item also -pron- can not pull anything from the stack if -pron- stack be empty so now push and pop method need to block if -pron- be unable to continue right so let -pron- let -pron- have a good figure out how -pron- be go to implement this first of all let -pron- just pretend that with i cs two twenty five or some other course right and right than on the single threaded version ok so what be -pron- go to have -pron- be go to have thing like the push method will be take -pron- datum structure -pron- ray and after -pron- have use the value of n increment -pron- and density equal to be ok right what else -pron- want to do so for multithreade",
    "end otherwise two thread may call this code at the same time and both right into the same slot the same entry inside the away so less use mutex lock for that so -pron- be definitely go to need mutex lock soapy say mutex lock and as luck would have -pron- -pron- have already get -pron- variable up here ready to go right so let -pron- call peter mutex lock on -pron- mutex there -pron- go so that may block for a short while if someone else be currently acquire the lock which be why a later on -pron- be go to release -pron- ok so thank -pron- very much luck -pron- be do with -pron- anybody else that be wait can now continue right so great so now -pron- have get code which where only one third of the time can push thing what about if -pron- array be full of what if i stack be full so remember step",
    "busy check this right so while while n be equal to the maximum number go round the loop now -pron- know -pron- could put a sleeping here if -pron- want to -pron- know that right now this be a terrible test because -pron- be hold the lock if all of -pron- code use a lot no one else will be able to do this fortunately for -pron- -pron- be go to be use p thread condition wait and that will release the lock whilst -pron- be block ok so here be -pron- condition variable that be go to sleep in and watch be sleep unlock that mutex and then before return lock -pron- again so the big idea here be that in all the code that -pron- write let -pron- do i make a highlighter well let -pron- do -pron- like like a",
    "that -pron- be in the matrix log so -pron- could reason that -pron- be the only thread that continue to run so great -pron- have get all these other thread run at the same time but -pron- head do not need to explode thinking about the possible interleaving of all of these expression from this thread and another third because -pron- own the mutex lock right and anybody else have to wait until -pron- finish so -pron- simplify reason about this back down to just simple single thread code again alright so great -pron- have get -pron- push method to work ok let -pron- go back to -pron- kind of blueish color right so if anything else -pron- need to do yeah well -pron- be write a method which both to push and pop can can block so if i just put something onto this onto -pron- way -pron- could",
    "-pron- be go to call p threat condition broadcast ok and say hey everybody wake up all right and there -pron- go so if there happen to be someone sleep in on this condition variable because that waiting to pop then now -pron- can wake up so -pron- could for performance reason a little bit more about this and say the only time -pron- need to do this the only possible time that someone could be block while pop from this away would be if the value of n be zero so in other word -pron- have just increase -pron- up to one otherwise there be no way that anyone could be sleep right now so -pron- could weight use about that and -pron- could also reason that -pron- have",
    "as well but i would have to be a lot more careful about reason about that so -pron- be go to use p thread condition broadcast just in case there be multiple thread go to sleep -pron- want to make sure that if -pron- be only go to wake up in that transition that -pron- work -pron- all up so right i i think -pron- can now continue and will write to the next one so the pop ok so what should -pron- pop method look like ok so first of all let -pron- write the code which be go to return value k so -pron- turn -pron- v where do become from -pron- be go to have something like double v equal so i go to -pron- way now i want to pre decrement -pron- value of n there -pron-",
    "-pron- need something like look if -pron- value of n be zero then go to sleep ok right so -pron- be go to have -pron- p thread condition wait ok do -pron- do today and here be -pron- condition variable -pron- 'd like to sleep in and do not forget that mutex lock ok what be the mutex lock code look like be right so -pron- have see this before that be just annotate -pron- in a different color -pron- be go to obviously have a lock here k and unlock at the end ok right be -pron- do no -pron- may need to wake up some thread so let -pron- put that code in as well about this kind of dark publish right so let -pron- in here wake up any thread switch may be sleep on the condition variable",
    "all right and again -pron- could reason about this -pron- could say if there be if there be any lock if there be any thread sleep on this waiting to push the only time that that can occur be if the reach the maximum number so if any be equal to now nine then i know that -pron- have just decrement -pron- off the off the very top so time to pee time to broadcast however this be kind of a optimization -pron- be very easy to get these wrong -pron- be very tricky to start model think about this when -pron- have get multiple thread which may call pop of multiple thread which may call push get a little bit easy to think about if -pron- have only get one thread of each kind so -pron- advice be treat these optimization with",
    "if -pron- do not care about absolute performance just call prefect ingram forecast that performance head be not that great ok so -pron- have get some working code -pron- think let -pron- actually have a go at testing this ok so here be -pron- code that be go to actually run this and -pron- have get some test code where -pron- producer be go to call the push say ten thousand time but -pron- be actually go to do that with two thread and then -pron- have get a consumer method that be go to call pop twenty thousand time be just one of those today so let -pron- check that -pron- actually get all value",
    "that -pron- know that -pron- be go to push in the help for help in the background ok great so -pron- know -pron- be go to push in the value zero up to nine hundred and ninety nine nine have enough ninth ok right and so if -pron- be just go to some these so -pron- have the sum of value from zero up to that number there ok but in fact -pron- be have two thread actually push all those value in so -pron- be go to sum up the integer and if -pron- know -pron- be sure -pron- have see this inside once every three right or -pron- can do -pron- recursively -pron- can do this inductively or -pron- can do -pron- with lego as well -pron- know that the sum",
    "word -pron- expect a total of that right by the way i say -pron- could do -pron- with lego block here be the reasoning with lego block if -pron- still some lego block from -pron- young sibling -pron- can build something that look a bit like this ok that be ok that be -pron- integer one two three four five and then just to make -pron- mad -pron- build that again so right want a different color all right there -pron- go -pron- have to do to do right so -pron- build this again great so what do -pron- get -pron- get now -pron- have get a rectangle of size n times n plus one ok and the area of that be exactly",
    "integers be go to be end time n plus one over two there -pron- go i actually use this mentally to remember whether -pron- be end time n plus one or n times n minus one etc so that be kind of cute little lego block prove there right so let -pron- let -pron- actually have a go at run this ok so do -pron- have code right so -pron- call -pron- block and let -pron- let -pron- run this thing ok -pron- will notice that -pron- only exit after -pron- manage to join all three threat so will compile -pron- stop the cake monster stop consume cake ok wait finally -pron- be finish ok good so -pron- want to compile ok block right so let -pron- do that",
    "k alright and great -pron- get the correct some who be so be -pron- convinced that -pron- code work or like i say -pron- have firm give -pron- a fair shake -pron- call the push and pop in a tight loop and -pron- call -pron- for ten thousand time so empirically -pron- have show that maybe if there be a likelihood of -pron- fail -pron- have at least test -pron- to the kind of point one percent level but be that be that be that do that give -pron- confidence to put this into production no -pron- 'd actually want to kind of actually do a code review and think carefully about how -pron- code work so so in multithreade code -pron- be a very important -pron- have strong understanding about how -pron- code work and rather than just simple go to lightweight testing and say oh yeah great"
  ],
  "689b84d6-86d5-4519-8312-97bd8c8fecd0": [
    "hi , so let figure out how -pron- can write a version of a strdup . this idea be to duplicate a string . perhaps -pron- have get a string that be only read only , or perhaps -pron- have get a string that be not go to be around for much long - perhaps -pron- be about to go out of scope , perhaps -pron- do not control -pron- lifetime - so -pron- want to get a copy of that object ok so let -pron- have a go at this there be be an attempt here , -pron- have get some problem . first of all that be not how -pron- be go to calculate the size of a string . a size of source here be go to look at the type . and what be the type of src for source ? -pron- be a pointer to something and so pointer to thing be go to be four byte or eight byte , so however many bit be require to actually talk about -pron- addressable memory . so on a 64 bit machine , -pron- need 64 bit , i.e. eight byte . so that be not go to be helpful , -pron- may work in very simple testing of try to create small string , but that be not how -pron- get the size . and -pron- also",
    "lifetime of -pron- function . and of that , of course -pron- be go to need some heap memory . ok , so let -pron- have a go at that . the last thing -pron- notice be that this look a bit suspicious to -pron- . be these the right way around ? turn out -pron- be not . how can -pron- confirm that ? answer : use the man page . so , if i use the man page of strcpy , -pron- would discover that the destination go on the left . ok , so with that in mind let -pron- write -pron- own version of strdup . ok so -pron- will skip that and go to [ indistinct ] . right , so -pron- will write mystrdup ok . here -pron- be . so -pron- want to write mystrdup , and -pron- can return a character pointer . ok , mystrdup and -pron- be go to take a pointer to a constant character . -pron- promise not to change that character or anything else use this pointer . ok , so first of all let -pron- figure out how many",
    "\" ok , so -pron- be go to say , \" \" hey malloc , -pron- need the following \" \" number of byte . \" \" -pron- want strlen to count the length \" of -pron- string , but remember , alarm bell should go off at this point . anytime -pron- use malloc request memory , let -pron- make sure very carefully that -pron- actually get the right number of byte . and in this case , -pron- need one extra because -pron- need space for that null byte at the end . right and now that -pron- have get -pron- a pointer to the beginning of that memory allocation area , -pron- can now copy thing across . so , -pron- be go to call strcpy , and -pron- want to go into the result from -pron- source . and finally , let -pron- make sure -pron- return the correct thing . -pron- [ only?actually ? ] want to return -pron- newly mint string . -pron- do not want to return the source ok , so what do -pron- think about that ? well , -pron- be go to work and would be sufficient provide -pron- ignore the possibility of error . so there be a chance , for"
  ],
  "68eae3bc-b156-461c-8392-ea61a730464c": [
    "ok good morning welcome to lecture twenty seven so -pron- be go to start talk about file soon but first i want to cover just a couple more thing to do with the tcp and server socket so let -pron- have a look right so -pron- story so far -pron- have make a server socket let -pron- just check -pron- have get laptop mode there -pron- go right so remember how to do that the trick of course with use get address info be first of all zero -pron- all out throughout all the field will have a tcp ip four so -pron- want address family inet so in other word that be go to be an ip four socket -pron- want to use tcp so -pron- will have a stream base protocol please right there -pron- go so that be go to tcp and to make sure -pron- have a server socket -pron- want a passive socket here for the flag ok so -pron- have settable or hint -pron- could get -pron- address info and right now -pron- be go to say please listen on port",
    "-pron- to think about what be a thousand twenty four look like in hexadecimal so remember port number two bite two octet so -pron- can have any result from zero or zero zero zero if -pron- wish up to ffff anyway so that be a little teaser because -pron- will see something interesting in a moment right so let -pron- do some error checking remember that -pron- get address for fail will use -pron- own little helper function to print an error but -pron- be also go to check the return value of all of -pron- other network code as well and if something go wrong with one of these call -pron- turn negative one -pron- be go to just quit so -pron- quick function be very simple -pron- just print out the error no message together with -pron- little message of what happen and -pron- just exit so that be that be quick very come to civil program there simple simple function",
    "will use the result this time to say there be -pron- family so expect that to be a fine -pron- be the only one -pron- want will have the socket type in there and will have a protocol which be actually usually just the value o of for -pron- regular tcp ip type socket right ok so -pron- have make -pron- suck -pron- will check to see if -pron- work if -pron- get a valid file descriptor now let -pron- bind that to an actual network port ok so this be when -pron- actually start say right i want to use a particular port ok so -pron- have do that ok now -pron- turn out that if -pron- have not actually specify an explicit port in other word if -pron- just ask for zero -pron- would be nice to know which port -pron- be actually bind to so -pron- can do that the surprising thing be rather than be call get sort port be actually get socked name",
    "code to know about get information about -pron- socket so here be what -pron- will do -pron- have this little structure here call socket address in call and because there could be different kind of socket -pron- have to pass through these kind of function not only an address of -pron- struct but how big -pron- be as well so that be a little bit of code here -pron- do not say ok i want to know the size of this and while the amusingly -pron- pass in the address of this as well ok so notice there be some casting go on here be cast -pron- to this base class if -pron- like except corsi do not really have inheritance so -pron- have to do explicit cast there right so out of this one let -pron- print out the actual port number ok which should be the same as the port number that -pron- ask for which be a thousand",
    "say that -pron- be prepared to accept a backlog of up to one hundred one hundred connection from hundred client in other word if i do not call accept at all the first hundred people be lucky but after that one hundred and first person -pron- get turn away ok so here be -pron- little service loop here -pron- be go to do be when someone connect great will have now a client file descriptor will print -pron- out and -pron- could immediately tell this socket hey by the way -pron- refuse to read anymore -pron- be just not listen anymore to any byte be go to arrive on this socket that will actually also give a hint to the client as well to say hey stop send anymore bite then will say hi will write three bite which be nature nine in new line to the client and because -pron- do not want to say anymore let -pron- shut down now that client file descriptor for write as well and then finally because",
    "the file descriptor so -pron- can reuse -pron- ok and then -pron- will go round again so let -pron- compile this and run -pron- a case so off -pron- go like will run -pron- and -pron- will see that -pron- say oh bind to port four now can -pron- guess why because -pron- be pretty confident if i connect to port four be not go to work let -pron- just have a quick quick play here i use telnet today and -pron- say no unable to connect there be nobody listen on that port and so so i could try -pron- with netcat as well for example and that be not go to work either just immediately return but -pron- and i both know that actually -pron- be connect to port thousand be a listing on port thousand and twenty four so there -pron- go -pron- see that finally accept return give -pron- a father scripter and -pron- go rather loop and decide to block again ok if i use instead of netcat if i use telnet the same thing right so -pron- great -pron- connect -pron- print",
    "how come that everything seem to work except that the port number -pron- get back the point -pron- put -pron- out here be incorrect -pron- print out four that be uh annoying in the current code where -pron- actually explicitly put in thousand and twenty four but even big problem when -pron- actually say -pron- know what just find -pron- any of freeport because -pron- be do some development and i do not want to specify the port right now just find -pron- a free one ok so now -pron- have a big problem that if i run -pron- this port number be completely wrong so if i try to connect -pron- do not work right so what do -pron- forget what do -pron- miss what -pron- miss be that this low level c structure that -pron- be get information about the socket bed -pron- be information",
    "just simply print out the port number like -pron- be attempt to do here the bit that be inside this field of this structure be not in the correct order to represent the right integer -pron- need to convert -pron- how do -pron- do that -pron- need to say ok i want to go from network to host and port or equivalent to sixteen bit of the word -pron- want this short ok and let -pron- convert that right and now -pron- should give -pron- the correct result so let -pron- try that ok so -pron- will recompile this run -pron- again and ok now -pron- have get a port number let -pron- see if -pron- believe -pron- ok so -pron- will get back over here and will try to get to -pron- and congratulation now -pron- work now -pron- be give -pron- the correct port number ok so that be kind of the",
    "etc in the network byte order and use network representation which may or may not be different from the way that -pron- cpu represent integer ok in this case -pron- want to go from network to host hence end to hs if -pron- be set up the c structure explicitly because -pron- do not want to get address info -pron- may go the other way -pron- may go from host to network right so i think that be all i want to say -pron- talk about shut down -pron- talk about why -pron- close the file descriptor and let -pron- just for file let -pron- before -pron- close out this video let -pron- not close -pron- or case so off -pron- go right and the other thing -pron- will do be before run this loop",
    "ok so -pron- will compile this and k run -pron- so i can now already so i can get there in time yeah connect right notice that i successfully connect to the host that be because -pron- have already call listen and so the colonel be willing to be the welcome auto collapse in a restaurant that kind of welcome -pron- there right and then right please to meet -pron- and shake -pron- hand right -pron- do the protocol handshake so that be so that be listen in action -pron- could have up to a hundred people arrive or reston before -pron- call -pron- call accept and now if i keep connect -pron- notice on the other side -pron- be start to use up -pron- file descriptor here let -pron- connect again right"
  ],
  "692302bd-49d3-4d62-bbc5-f1d4ce6e3684": [
    "ok so -pron- have get -pron- struct now let -pron- think about how -pron- can use -pron- when -pron- be run the program -pron- need to keep track of -pron- little linked list so for that let -pron- have a variable here call head here i can sort -pron- right so -pron- be go to see a reference to that and what be -pron- -pron- be a pointer to little strike that -pron- just define above -pron- have also declare this variable to be static and what static do be -pron- hide the variable so that only the code i write inside this compilation unit in other word inside the dot c file that -pron- be currently writing will actually see this variable so that be the safety measure just in case -pron- decide to have a global variable call head as well then there actually refer to do different variable and -pron- also ensure that -pron- implementation detail be not go to leak out into the rest of the code right so -pron- have get -pron- global variable and initially of course i do not have anything allocate now let -pron- think about how -pron- want to implement malloc",
    "see if -pron- have any available apartment which be large enough and available to satisfy the request for the so many byte that -pron- need if that fail then -pron- will go back to the system and say timetable be some some more heap memory please and for that will use sbrk so will only happen in -pron- plan b -pron- go to go there if -pron- can not find useful piece of space to be allocate early that be now free ok so let -pron- have a look at that right so scroll up here right so -pron- be go to need , first of all , a way to iterate through -pron- link list and this keep track of two thing thing where -pron- be in the link list that be -pron- little point appear and the good apartment -pron- find so far so remember those be placement strategy that be what -pron- want",
    "ok so if -pron- have a pointer to this type and this structure type which get a lot of information how do i pull out the individual part of what be there in the memory remember -pron- have get thing like whether how big -pron- be in other word the number of byte that the user could actually store there well that be inside -pron- size variable and whether this particular entry represent something which be available which be free or not ok so -pron- will notice -pron- be now use this little operator this kind of arrow thing which mean hey go to some memory and do not treat -pron- as just float or an integer instead i want -pron- to use -pron- type and inside that type there be an offset and so many byte in order to be able to read this variable so when the compiler first see this struct -pron- need to allocate offset to each of these",
    "size may be save four byte eight byte later free may be another say four byte eight byte later the compiler free to put some padding between variable so the alignment of each of these variable make sense and realize that these entry just like member variable inside a c plus plus class or field of a java object be go to coeur each time all -pron- need to know be the base address of where that struct be go to start ok so right let -pron- go have a look at this in so -pron- need a little loop that say well so -pron- be look at a valid entry in -pron- link list so keep go until i get to the end i need to consider the current apartment that -pron- be look at be a good one so -pron- first criterion and this be important of course be that -pron- be currently free ok what else well -pron- need to make sure that -pron- be sufficiently large right so how can i write that ok let -pron- get a little pen here right so",
    "how strict be big enough so size have to be at least as large as the request size that mark have be call with right so this be just the size of the malloc call ok so great if -pron- find a candidate let -pron- see if -pron- be actually the good candidate by good weather can be different thing to remember -pron- have get different placement strategy that -pron- can use and so take a look at line six scene and figure out which placement strategy have i implement here so -pron- have get thing like look if i have not choose any apartment debt yet then then -pron- be definitely go to use the count count entry",
    "so what do -pron- think about the follow ok so so decide what be that go to do and decide which placement algorithm operate while still do that weird be go to keep go around the loop let -pron- pull up that next pointer and keep iterate round if -pron- get there -pron- if -pron- be successful then when -pron- exit that while loop -pron- have change choose to no longer be null so -pron- be a non zero value right so -pron- do not need to do much there be one thing that be very important to do which be the follow right do -pron- remember to mop out apartment block as now that apartment have now take otherwise -pron- will be tell other guest and to go and visit the same apartment and that would be a mistake so -pron- be important to update -pron- record here so that future",
    "-pron- would be an error just to return the actual pointer to -pron- metadata because then the code that be call -pron- would overwrite -pron- struct instead inside -pron- struct -pron- have get a pointer so let -pron- use that let -pron- return the value of pointer that will tell the caller exactly which piece of heap memory -pron- can use so that be all of account that -pron- be go to need for first part of malloc alright so let -pron- go back to this line of code here and let -pron- talk about what -pron- be do so -pron- be say let -pron- look at the current size each time around this loop of this entry and see if -pron- be less than the choose size ok now -pron- talk about this code be that first of all -pron- have get an ore here so by short circuiting -pron- be only go to evaluate the right hand side of this or if choose",
    "and and be superfluous that must be true trosa must be must be non null in order to get to the right hand side ok so when can the right hand side be true in other word when -pron- update choose with the current apartment ok -pron- be when the one -pron- be currently evaluate be small so what do -pron- implement here that be right -pron- have implement implement good fit ok right so this be an example of the good fit placement right now let -pron- have a look at the second part of -pron- code alright so if -pron- get outta here then -pron- do not do the early return online twenty five instead where -pron- have give up an have to kind of get some more space ok so actually turn out -pron- need space for two thing i need space excuse -pron-",
    "on the heap here be some code that attempt to do that what do -pron- think of this alright so let -pron- take the size of -pron- struct notice i do not put an astrex in here that would be that would be mistaken if i put a pointer here -pron- 'd only get enough space for four or eight byte how -pron- make a point -pron- be so let -pron- not do that ok -pron- cut that away there -pron- go instead will actually evaluate this to be say that twenty four byte or thirty byte however big be little structure and then -pron- be change the size of -pron- heap memory here by call s brick and that be go to increment a high watermark serve this be the amount of heat member -pron- have get so far in -pron- hip -pron- have just increase -pron- by say thirty two bite and -pron- metadata choose be go to be",
    "use those thirty two byte to actually as a metadata entry so sometimes -pron- take a bit of get use to the idea that i can just talk about a memory address and then immediately say ok now put these filter filter over eye and do not think of -pron- as just bit and byte actually think of -pron- as a piece of a data structure or actually think of -pron- as an int or a double or something else see do not care the compiler do not care the cpu do not care up to a point more about that in a bid -pron- can say at this particular address i want -pron- to treat -pron- as if this particular object or primitive value so great -pron- be go to use those byte as a metadata entry right so there be a few thing -pron- need to do here -pron- need to set up those field -pron- have get a pointer and a size and a free so let -pron- make sure that -pron- do the easy",
    "that be the actual number of byte the user can use and -pron- be important for -pron- as well to set the fact that this entry in -pron- link list be go to be unavailable -pron- represent some memory there be actually be take ok and use right so what be this other piece of code do back online thirty one here so -pron- actually need to get some memory for the user right so let -pron- find out the current top of the heap so that be go to be up here let -pron- change color red ok so point to here be go to be look at the top of the heat right now and then -pron- call s break for a fourth time to say alright and the user need let -pron- say two hundred byte so there ya go right so -pron- have just push up the top of the heap now by another two hundred bytes byte right",
    "that the user after a lot of memory and that fail so this let -pron- check to see if -pron- do not actually get that memory at which point -pron- lock implementation be go to return null right what be the last part that -pron- have not talk about oh yeah -pron- have not actually update be link list so let -pron- do that first thing -pron- be go to do be for -pron- new metadata entry choose one -pron- be go to change this next pointer to look at the old head in other word the original first entry of -pron- link list then let -pron- change that global variable head that -pron- look at about look at the very beginning with that static variable so -pron- now look at -pron- knew entry and finally -pron- need to return something to the user should -pron- return choose now that would be a mistake that would be the wrong memory address return -pron- actually want to return the piece of memory that -pron- allocate",
    "so what do -pron- think about that do -pron- work yes -pron- do but there be a couple of bug here so -pron- will talk about one and then -pron- will talk about some of the other in a little bit so one quick problem be -pron- be actually pretty slow look at all of these system call or call s break here as break -pron- esport here as break -pron- perhaps surely -pron- can do well than that well yes actually here be one quick way there if -pron- actually read the description of how s brake work -pron- return the old position of the end of the heap so actually i could completely delete there -pron- go this one and this one and i could make choose for example equal to return call of the next expert in fact not leak -pron- reduce"
  ],
  "6ad1ba5c-6f3e-4ca6-b80b-2f7d444e23ef": [
    "hi so -pron- be quite common to put aside a little bit of heat memory in order to define exactly what -pron- want -pron- thread to do so i want to give -pron- an example of that and then talk about how would set -pron- up right so here be the idea suppose i have an away and i want to be able to kind of process all the element in -pron- way and fortunately -pron- task be embarrassingly parallel some part of -pron- be mean that i can easily just spit up -pron- datum and say ok thread -pron- do this half and another thread ok -pron- do that half so right now what if i get so -pron- have get method then that i want or function that i want to speed up i want to make multithreade here -pron- be be -pron- little calc method here and -pron- be give a pointer to an integer ie the very first element of -pron- array and the number of item -pron- 'd like to process ok so if -pron- be go to speed thing up let -pron- just split",
    "thread to say work on all the even index item and another fair to work and the odd indexed item that would not be very great for cash there be much well to split -pron- down the middle ok so will calculate the half of -pron- and then game plan then be to create a thread or two to do this so for example -pron- may do the follow this call p thread create -pron- be go to make a note of the thread id -pron- do not pass -pron- do not need pass any attribute today and then here be the actual image calculation method that -pron- be go to use that -pron- be go to use to actually do the calculation i just need to when i call that actually kind of pass some hint about what -pron- should be do so let -pron- make a little task and put that on the heap so -pron- will have a little pointer here call say task one key which will represent what would like that thread to do ok so let -pron- set this up right so what kind of information",
    "would want to send the actual datum so in this case this be just a pointer to the datum so that can be datum and then i need to decide or define how i want to specify the range that i want to work in there so i for example i could could specify the datum always point to the beginning of the array and then provide a start and an end just like -pron- do with the tile before alternatively i could say that because -pron- be just a simple contiguous array i could say that point go to pass into here be always the beginning of where i want -pron- calculation to start i just need to say the number of item so let -pron- put another squeeze in here another item in here so -pron- have get the number of item that i actually want to work on that case so this would be a size t and again will be numb item",
    "so let -pron- create a couple of example of this so now when i create a task i -pron- be go to create that today on the heap so let -pron- do that i can say right -pron- will have a task pointer ok i like a t one and all this make -pron- wanna little bit nicer though t one equal now i need to get some memory sir let -pron- call malloc an as usual let -pron- make sure -pron- slow down and check the number of byte that -pron- actually want so i today want not navigo size of i do not want ask pointer only give -pron- eight byte or four byte i actually want enough byte to hold this little struct so there -pron- go task underscore t right so now -pron- have get that back good error checking would check to make sure that",
    "that malloc work right ok t one i want to set the number of item so this will be half the array ok right ann and the ok and the number of datum that -pron- want to work on ok so that can just be the ok the same as what -pron- be call all right so -pron- have set up and now -pron- can ok cool that as -pron- argument here ok now how this memory be free in fact -pron- can delegate that to -pron- image calculation so once that actually have complete -pron- can call free on this argument so -pron- be perfectly fine to create memory inside one thread will create heat memory inside one thread and release -pron- inside another just",
    "in the future all right so -pron- have create one and -pron- could do the same thing for another task as well so i will not bother to write all that down but i will sketch out one problem here which be be careful if -pron- item be an odd sized -pron- would end up write something like this -pron- would say right number of item that -pron- actually want should be -pron- parameter an item minus the half that the low half that the first thread be go to do for -pron- ok so that be take care of a potential off by one hour and in this case -pron- be go to pass in the datum ok now -pron- can use pointer arithmetic let -pron- make sure that -pron- be point to the right kind of thing -pron- just want to offset by half so -pron- could imagine write this in a loop as well so that -pron-",
    "create threat alright so what do i need to finish well obviously i need to put another p thread create here and then a whole order pizza join to make sure that -pron- do not continue until all of all of those thread have finish otherwise the caller will assume that the datum have be properly and manipulate and the output be ready ok so do not forget to do the join down here and in a sense what -pron- have create be a barrier that -pron- have start all these thread be go to let -pron- earn independently but then this thread do not continue until -pron- be certain that all those be the pet be finish ok one last comment here be that -pron- could actually implement this just use one additional thread",
    "so -pron- could directly call say image calc on -pron- here so -pron- could say ok image calc and here be t two and so that would reduce the overhead of create a second thread in this example do that save -pron- alot little tiny bit but create thread be pretty cheap and -pron- be try to create ten of thousand of -pron- so the much cheap than create a process so great now -pron- can actually walk into an internship and say right assume -pron- code i will speed -pron- up i will make -pron- run twice as fast except as mckenna discover -pron- never get quite as much at speed up as -pron- claim so -pron- can use marketing speak ceo will be up to twice as fast because -pron- be pretty confident that there be go to be some additional"
  ],
  "6bda4161-ec8d-403f-b5c5-d510d46fe230": [
    "ok question for -pron- darcy i know contain the file name for ten to the ten to the ten point right so hopefully -pron- say no ok the i know do not contain the file name the file name be just a way to organize -pron- file in term of -pron- directory listing and that be -pron- ok that be the kind of big idea right so can -pron- have the same file appear in two different place inside of file system yes absolutely ok let -pron- do that alright so right now the story so far be -pron- have a little program call program dot c let -pron- link to -pron- use l n on say ok take program dot c and let -pron- create a new directory listing call say another dot c so great let -pron- have a look at another dot c and be exactly the same and in fact if i look at the content of this so -pron- directory ok like -pron- will see that another dot c be i know number end",
    "dot c o k so these two entry be look at the same i node so let -pron- try modify this file -pron- be go to just append to -pron- for example let -pron- append to program the new way -pron- want ok so let -pron- penta this will say if high right and let -pron- append to program dot c l c hide there ok so what do -pron- get still well i still get the same i know entry here ok so -pron- both be point to an -pron- node two nine six one so let -pron- have a look at that however i do program dot c and -pron- will see that -pron- have both both these command modify -pron- exactly the same file right -pron- be talk about the same i know file so i could even do this use a different directory suppose i make a different directory call say subdirectory",
    "dot c and will have entry side sub one call yet another ok right so great let -pron- have a look at sub one and -pron- want the i node number here -pron- go right great -pron- see here be yet another c file which be actually point to the same i know number break -pron- why be this useful -pron- mean of course that -pron- be not use any extra disk space here to store all these file why not because -pron- be the same file so great but the downside of course be that if i modify that particular i know entry all of the file see that change ok so right what about what be go rn do rm actually reducer be the reference count of -pron- entry by one and",
    "not useful anymore and so the disk block that i require to store the content of that file can be repurpose in the future so if -pron- look at the stat of -pron- file ok -pron- will see right now that -pron- be get a reference count of three but if i be to remove -pron- so let -pron- remove what i call -pron- like another dot c o k that -pron- reference count have go down to two so -pron- still need -pron- so that be why -pron- need reference counting just keep track of the number of entry that -pron- appear so -pron- may see how when -pron- do forensic analysis on disk -pron- can look for i know entry which have be delete but which still do not appear inside anyways like",
    "meta information so for example -pron- may be i do delete i know entry can still point to the disk block that be be use to hold the file content so that allow -pron- to do thing like undelete file and find file which have no long list insider directory but -pron- content may still be available on the disk ok so rn be actually what be call unlinke -pron- would simply remove a directory entry in reduce the reference count by one and a reminder that -pron- can -pron- can actually find out the reference count the number of hard link by call stat onefile right so i use use the command here like l n for link in fact -pron- can do this from c as well let -pron- have a look at -pron- quick man page so if -pron- look at man -pron- can look at link cape",
    "section two -pron- be ok so -pron- will find lincoln or some system link at as well where -pron- can say right start with -pron- exist directory so exist file and make a new entry there be only one thing -pron- can not do with hard link and that be to create a hard link to a directory -pron- can only do this for file perhaps -pron- should think about why and -pron- will give that comment in a future lecture oh and another thing -pron- can not do be create link across two different filesystem again perhaps -pron- could think why that be true so make hardlink only work for regular file -pron- can not"
  ],
  "6c4c517c-e925-4d55-ac5a-58757254b2f6": [
    "hi so a big idea be that most file system device be what be know as block base device mean that at the hardware level -pron- do not ask for a single byte from a disk instead -pron- have a convention and -pron- say -pron- know -pron- 'd like give -pron- the first block of byte please will give -pron- the second block of byte or -pron- have like to update this block of byte with some new value so for performance reason -pron- do not make request down to just very small unit -pron- much prefer to say to a disk system an external system give -pron- a whole bunch of byte and useful idea to make the same disk block the same size as -pron- memory block in fact what -pron- be go to see be all over -pron- system example where the block be base around four kilobyte chunk or -pron- will find example where the chunk be slightly",
    "on this main convention here so in other word -pron- be throw around four thousand ninety six byte anytime i want to load or read something from the disk so -pron- have probably be talk about kind of cache line and this idea that if -pron- make a request in main memory for one byte -pron- be go to get say the whole cache line which may be sixty four byte or thirty two bite or hundred depend on the system a whole load of byte be free -pron- all come across right depend on the width of the actual physical number of line between main memory in -pron- cpu so -pron- get all these bit for free the so the same thing apply for -pron- file base system and -pron- be kind of at the low level say hey i want",
    "make these same size be -pron- virtual memory be because think back to -pron- virtual memory table where i need to have a mapping from virtual address to physical address and the very first thing -pron- do be -pron- take -pron- physical memory and divide -pron- up into these chunk into these ram into these disk sorry into these memory block here and -pron- need to do thing like say well these byte right now i do not care about no one seem to be use word to paginate table so all that code inside here be just waste ram so why do not i evict -pron- out of -pron- memory meanwhile -pron- have get some other stuff that i would like to have inside -pron- ram inside -pron- memory so i want to page that into from disk into memory maybe",
    "structure that i have not need for several minute but now -pron- be start to work on that part of the document or now -pron- be render this now -pron- be inside of game inside a new area of the world -pron- be time to bring that stuff into memory so -pron- want to be able to make -pron- disk block line up neatly with -pron- memory block and like i say for most operation today -pron- be go to be talk about four kilobyte block as -pron- standard unit in practice system may actually support small block for example a hundred and twenty eight byte often at sector but -pron- be go to ignore those particular implementation dip implementation detail and all will stick with four kb 's as a kind of standard unit when -pron- kind of work through some example wait so with this in mind give that i can now store a file by say right let -pron- store the content in block number seven block number nine block number",
    "for each file that -pron- want to store -pron- have actually get the content state of byte of the file but what else would -pron- like ok so -pron- have mention a few of these before maybe -pron- want some kind of access control so -pron- may want to say if -pron- be the follow user -pron- can read -pron- if -pron- be the follow user -pron- can write -pron- if this user belong to a certain group -pron- can delete -pron- so the simple form in linux today consider user to be in three different kind -pron- have the owner -pron- have a group and -pron- have everybody else so the rest of the world or other and -pron- can describe different different to access",
    "-pron- have read write and execute read write and execute and -pron- and -pron- can specify these separately so for example -pron- may say hey -pron- file can be modify by -pron- because i own -pron- people inside -pron- group can also read -pron- and everybody else do not have any access at all so that be the simple kind of access control that -pron- may have there be more complicated version today in other file system what else could -pron- have well in addition to the actual content -pron- have probably care about -pron- size or some interesting meta information cape -pron- may care about the mind type so what kind of thing be this file and today -pron- represent that use these type for example -pron- have already see a few of",
    "-pron- be minetype be text slash html -pron- can have a mine - type for image in -pron- own type for gift for jeff depend how -pron- 'd like to pronounce -pron- -pron- have a mind type of jpeg image -pron- have a mine - type of a word document etc so these be all different type of file -pron- can also talk about some timing information so for example -pron- may care about hey when be this create and -pron- may care about hey when be -pron- modify and -pron- may care about how often this file be access when when be -pron- last access for example because file which be kind of very rarely access perhaps -pron- would be good candidate for archive perhaps -pron- should compress -pron- perhaps -pron- should move -pron- to a slow portion of the disk for example ok so -pron- may care about how often or how recently these event occur -pron- also may care about who",
    "-pron- who modify -pron- and who access -pron- modern linux system specially the fast -pron- be go to look at do not keep track of who access the file but -pron- be assume that whoever create -pron- be also the current owner file but actually -pron- turn out -pron- can change that later so one person may have create the file but later -pron- could say actually let -pron- reassign the ownership of a file to someone else ok so -pron- have get these kind of event timing -pron- could also store thing like how about -pron- name ok so presumably a file be go to exist and -pron- need to be able to refer -pron- -pron- do not want to keep say hey why do not -pron- load file number seven while file number",
    "to give -pron- file some kind of name -pron- also may want to store some other additional meta information so -pron- may have kind of search meta information so for example there may be key value pair like who be the artist if -pron- be a gps coordinate of where something be store or find maybe if -pron- be an image say the camera setting what len -pron- use that kind of stuff ok so -pron- can have an arbitrary key value pair to help come search right so -pron- could kind of keep go on here and -pron- could keep kind of brainstorm a whole load of thing that -pron- may want to store about the file but i want to kind of simplify -pron- back down to what linux do and what -pron- see in most file system ok right so let -pron- choose a new colour let -pron- let -pron- go for this yellow",
    "of this meta information about when -pron- be create modify even if -pron- wish -pron- can keep -pron- access there in practice today -pron- will find that this be actually rarely use in fact -pron- be disabled because -pron- may for performance reason not want to keep update -pron- disk all solid state drive every time someone touch a file so every time someone read a file access control like -pron- have already mention be kind of simplified down to just kind of a single group single owner and everybody else yes -pron- definitely want the size yes of course -pron- want the content but no -pron- do not use mine type so as much as mine type would be useful today -pron- have much clunki system which be to either look at the extension so for example will claim that a file that end with say gif be a gif or jeff dot png be a png file",
    "microsoft word document so will just look at some extension or -pron- may look at the first few byte of the file and try to infer from those byte as to what -pron- be likely to be but both of these system be kind of clunky compare to actually have real mine - type the other thing -pron- be go to have be always nice meta search information or regular filesystem do not give -pron- that but here be the big one that i want to kind of surprise -pron- with be that that file actually -pron- do not have a name so i want something much more kind of exciting than that right but no -pron- be not go to store the name as part of the file that -pron- file yes have content have size have some of this kind of meta",
    "-pron- be go to discover -pron- be -pron- file have this wonderful thing call and inode number so that be go to replace how -pron- think about datum be store on a disk and a name be just something that which live inside directory list so if -pron- happen to be inside a particular directory for example -pron- happen to be inside say directory call sub two then inside that particular directory there be go to be a whole load of name that be -pron- directory list an each name be go to map to an inode number so the inode number become the authorative way to talk about a particular file on a particular file system . a name be just a kind of secondary add - on . a name be just a cute way for -pron- to be able to have",
    "ok so -pron- be get down to this next part here that right so what be an inode this be the definition of how -pron- store a file on disk and -pron- have certain meta information -pron- tell -pron- about the size that file -pron- tell -pron- about who own -pron- and thing like when -pron- be last modified -pron- also tell -pron- kind of where on disk be the datum -pron- actually need to get to the content so kind of where where be the datum so in other word be which disk block should i go to to actually start read the content of -pron- cat dot jpeg so -pron- be a kind of key if -pron- like into the actually read",
    "become actual file -pron- can not have a file without have an -pron- node ok now -pron- have probably already use stat in several case -pron- may have use -pron- early on in the shell mp -pron- may have almost certainly use -pron- when -pron- start think about kind of parallel make because now -pron- care about modification time and whether file exist and -pron- can get that by use stat and stat be read the inode so of course -pron- do not usually say ok please stat for -pron- a particular inode number so please tell -pron- all the meta information about kind of inode number seven say twenty three instead -pron- write a particular"
  ],
  "6c7e145f-442c-430a-a17d-cd3630fbce96": [
    "hi ok so let -pron- talk about critical section of function which be not necessarily thread safe in term of -pron- implementation so here be a little example base on some real code where -pron- want to be able to internally log error so -pron- do not want to display -pron- to the console now -pron- actually want to store -pron- on some file so let -pron- have a quick look to see how -pron- work so when -pron- call -pron- log error function -pron- take an error number some integer and an optional message which eventually -pron- be go to save to a file so -pron- will see down here -pron- call f printf -pron- be go to store -pron- in this file handle when -pron- have just get a string of the message and some error string as well and then finally let -pron- flush that as well so -pron- be actually definitely write out of the file ok now let -pron- look at some of the other detail first of all notice that -pron- lazily open the file handle so if -pron- -pron- file up here be null so if not file then that be when",
    "-pron- a file call error log dot text and i want to append so if there be any other content down there let -pron- zip to the end of the file first ok so if two thread be call this at the same time -pron- could imagine where an interleaving of instruction where both thread see value of null because -pron- have not open the file yet so both thread decide to call f open and then write that result into the single file handle the global variable there so that would not be great -pron- only want one thread to ever call ever open so that be certainly a critical section the time between actually test whether -pron- be null and change -pron- -pron- do not -pron- do not want to be interrupt during those time there be a second question in here as well however which be how do -pron- generate a character",
    "i wonder if this be safe to call for multiple thread at the same time and of course one of the reason that -pron- kind of suspicious about this be because -pron- take an inch return a character pointer and -pron- do not look like -pron- need to free that character pointer so i wonder if -pron- be go to internally use some static memory or something so warm way to find that out on a linux machine be to go and check the thread safety of the function that -pron- actually use so i want to mac right now so i pull up the lyric version of stuart error and will see a couple surprising thing first of all there be a whole lot of additional version with under school be underneath and -pron- will may be useful to -pron- in the future but i right now i just want to kind of scroll down and -pron- will see something down here that talk about",
    "unsafe there -pron- go right so -pron- be not safe to be call by multiple threat at the same time right so how do -pron- fix this well one option of course be to use these other version to underscore art another be to use lock so for example -pron- could use -pron- mutex lock to lock a mutex at the beginning and unlock -pron- at the end so if -pron- want to make sure that i know of thread could also effort therefore flush at the same time to -pron- file then i would unlock afterwards so that would be one way to look at the beginning unlock one thing -pron- 'd be concern about though be that though i be sure to capture error"
  ],
  "6edb53ee-a4a5-45f0-ac64-fcf9b4cbf53f": [
    "hi ok so let -pron- take a look at some code that i find on the internet that claim to solve -pron- dining philosopher and -pron- will analyze -pron- and see what -pron- think ok so here -pron- go -pron- use all the good stuff that -pron- now understand -pron- have get a little structure here call philosopher and -pron- can see -pron- be go to be type deft so that -pron- can just say philosopher later on inside that -pron- be go to have a pointer to the left fork and the right fork and of course a philosopher have a name and associate with -pron- ap thread and some output variable say whether -pron- fail or not ok -pron- have a global variable to see whether this program should keep run or not ok and let -pron- have a look see how thing get initialized ok so -pron- have get a new way of character pointer and that be just a name of five philosopher would like today -pron- be go to have five mutex lock -pron- be go to be -pron- fork and five philosopher ok so",
    "initiate or four five mutex lock here -pron- go and so -pron- just get five meter lock initialize great and then further down great let -pron- actually initialize -pron- philosopher so that be just a simple stack away -pron- be ok to do this on inside the main threat because -pron- will see all of -pron- thread which be go to run finish before -pron- exit make right so great let -pron- get -pron- a philosopher will get the i th one will initialize -pron- name will initialize -pron- leave hand and right hand fork to be one of -pron- five mutex lock look -pron- be use modulo arithmetic so that the fifth philosopher wrap around and get to zero for kid game right after set that all up let -pron- start off threat will call preferred create will",
    "run some multithreade code which will look at in a moment i learn the rest of -pron- main thread do not do much -pron- sleep with forty second then change run and now just wait for those five threat to finish if something fail in other word if this will flag be set for eight five plus versus inside that struct will print something out that something do not work otherwise will exit ok so that be -pron- main threat now let -pron- let -pron- have a look at the code that -pron- get that be run by each philosopher oh yes and here be -pron- source ok so each philosopher be go to be give a pointer to -pron- little struct there ok so each plus be go to get -pron- own unique name etc right so -pron- also have some local stack variable which mirror what -pron- find inside the",
    "-pron- little thread go to do here so for forty second until that global variable be change the first thing that -pron- -pron- philosophy do be sleep in other word thank a bit so will print out -pron- name then will sleep for and amount of time so in this case let -pron- sleep for say some two one and eight second alright and then the philosopher go to pick up the two folk alright so let -pron- declare that the philosophy be hungry and then -pron- will try try to pick -pron- up ok now this look a little bit more complicated than -pron- may expect let -pron- look at this carefully ok so whilst uh whilst be still run and this be a do while loop which mean -pron- be only go to well feel i think -pron- should be not fail but let -pron- see all chill at the moment ok so -pron- be go",
    "after -pron- run through this code once i know notice -pron- be fray i apologize the logic as give incorrect let -pron- have a look see what -pron- do first of all philosopher waist to pick up the fork on the left ok so that be only go to proceed once -pron- get exclusive access to that particular fork alright and then -pron- be go to change this local variable fail to base on on what happen when -pron- try to pick up the the fork on the right so notice that initial value of try leave be too so actually -pron- be go to call this function call trilok which -pron- have not see before trilok never block instead rather than block if -pron- be unable to acquire this mutex -pron- just return an error number return a non zero value so the very first time that -pron- run this code with twice leave equal to two if -pron- catch acquire that",
    "fail -pron- immediately unlock the left hand thread great -pron- say this look a lot like -pron- be not go to implement holding wait -pron- be not hold onto the fork on the left -pron- be definitely release -pron- so then what do this code do well -pron- -pron- actually swap the meaning of the left and right fork so i like to think of this as the false for crosse -pron- arm or uncross -pron- arm because -pron- be go to go around this loop again but this time -pron- be go to grab the other one first ok so this idea of what be on the left be actually just be swap over by crosse arm and -pron- decrement try by one k so -pron- repeat this on the third try however -pron- do not use trilok instead -pron- call mutex lock so the only way to get out of this loop be when -pron- have truly manage to acquire the left and right mutex lock what do -pron-",
    "say want nine second want to eight point eight second and then -pron- release both look ok then -pron- go round the loop -pron- keep go until -pron- have hdr forty second be up so what do -pron- think about that be that code correct do -pron- correctly implement ok so with a little bit of thought -pron- could say actually no this do not prevent deadlock now -pron- may agree that deadlock be unlikely but -pron- could imagine a scenario where for the first two time all philosopher hit this trilok and fail because every philosopher be hold onto -pron- left fork and then when -pron- all try again there now hold onto the other folk but the trilok each time fail on the third time or philosopher first lock -pron-",
    "on the right in other word -pron- all get block so yes there be a chance that all -pron- possible will will deadlock because all wait for resource -pron- be never go to be release so oh dear this apparent code on the internet be not smart enough to solve this problem so yes lady and gentleman as a series two forty one student now smarter than the internet ok so -pron- can prove -pron- can show the circumstance in which deadlock be can occur this actually see if -pron- can actually see that occur if -pron- actually run this code in practice so here be here be the same code that i prepare early i want to get out of this and go to handout but code k there -pron- go right go to code but i need cs two forty one lecture code right",
    "p thread ok finally great let -pron- ok off -pron- go oh alright look at this -pron- have run into deadlock where all five be hungry at exactly the same time so in practice causing this be actually actually difficult let -pron- just run -pron- one more time will see if -pron- can generate -pron- so -pron- can see no expense spare on the graphic -pron- have get five philosopher go through the state of either hungry eating or sleep and yes -pron- run into deadlock again this actually kind of take a look at this code because i want to show -pron- that i actually have to work a little bit hard to make deadlock occur here so i want to reset -pron- group right and let -pron- pull",
    "ok so right right so i have to do thing like introduce an extra moment in time between when -pron- first do the first lock and when -pron- attempt to do the second lock so i implement thing like a slow pick up here in order to give great opportunity that all five thread word acquire the left hand lock that be interesting be that right now -pron- be record this so one of -pron- cpu core be busy capture the lecture content the video content so i be actually surprised that so quickly run into deadlock the other thing that i do to try to make -pron- more likely be -pron- be use micro sleep too actually sure that -pron- have an opportunity for deadlock",
    "or so over forty second window so opportunity for deadlock be be only handful of time order of ten time or so -pron- would like -pron- to be much high alright so yes i have i can run -pron- in slow motion let -pron- see how -pron- do that -pron- can see -pron- ok so set also certainly buffer so that -pron- do not have to wait for for a new line to print -pron- ok so i get slow motion if i do -pron- s k so be go to see and -pron- be in there ok right so let -pron- just run that ok and -pron- will say slow motion so now -pron- can see off -pron- go right ok so that be dine philosopher -pron- be relatively easy to write solution which appear to work but"
  ],
  "6fa7868f-bbe1-47f6-bee8-22507dfcc8c8": [
    "hi . so , ok , -pron- have talk about a scanf ( ) which would read from default from the standard input but guess what -pron- can do a lot more use the same idea so -pron- call -pron- the scanf family just like printf have a family -pron- can say instead -pron- know what i do not want to just read from standard in i want to specify which file to read from which filestream so this f scanner for that or -pron- may say actually guess what -pron- have get some byte in memory that i do as a c string and i want to pass the output from that so in which case i can use snf and all i need to do be pass in the address of -pron- c string right so let -pron- have a play with this then because guess what on up here -pron- have get a little csv file call -pron- data dot csv -pron- get some value in -pron- and i want to be real read those and then start process",
    "want to turn -pron- off and start write some code right and i will call -pron- say if i need to look up which way of skf work so let -pron- get the user man page for that i have to remember to put the file at the beginning of the end ok -pron- go at the beginning ok so let -pron- next -pron- step by step over that now ok so get sqf demo right still alive dot h and i should put this into a macro or something right in argc char argv be right ok good so -pron- game plan then be -pron- want to say hey see lightly please open the follow so -pron- be go to use to see lobby version now which underneath be go to call open but -pron- be also potentially go to buffer -pron- input as well for well performance",
    "at a time the c library will read many more bite in an attempt to have well throughput so -pron- can load -pron- file in quick right so -pron- have get -pron- a file for good error checking i could see -pron- fail so if f be be null -pron- could do something about this -pron- could see could not open whoop i want to send a little error message to the standard error could not open datum file okay and let -pron- quit at that point so i could also type to return one right so now i want to start read -pron- datum and i need a place to put -pron- now for demo purpose then today -pron- be just go to have a fix size buffer and for example why do not i try to read all of -pron- x and y value into a single",
    "hundred item ok and now i want to start read in and put putting those value into the right spot case so let -pron- have a number of item read so far ok and -pron- will have a little loop so while the number read be less than -pron- may be tempt to right size of datum but that be only go to tell -pron- something like four hundred byte actually want the number of element and -pron- actually wait a macro for that -pron- remember how to do that or well perhaps i just uh i pass have a well variable actually represent that capacity so let -pron- have available compact code call capacity and will go back and fix that one hundred in a moment ok so whilst -pron- have not get to the end yet",
    "well remember -pron- be go to say hey sdf do not read from standard input instead read from -pron- little file handle here and i expect to see at integer comma and another integer and now i need to give -pron- some address so before -pron- use ampersand x but now -pron- be actually go to need to calculate a place inside -pron- way so what do -pron- think of datum plus the number of red so -pron- be do -pron- so -pron- be do pointer arithmetic which mean the compiler be go to make use of the type and -pron- know that data be an array of integer so every time -pron- add one -pron- be actually go to bounce by four byte or however big an interview be well that be not bad but i have to decide where i actually want to put -pron- datum on all the x value together and then all the wise or maybe i want to do xy xy xy xy let -pron- do the xy xy xy xy so so if i do that then every time around this loop -pron- be actually go to",
    "two and similar datum plus n red time two plus one for -pron- second value right so -pron- could keep go until -pron- run out of value until so this this stop ok so -pron- should check a few thing right so if if the if the result be two then great -pron- be happy -pron- what should -pron- do -pron- will declare that the number of red have be incremente successfully so will advantage by two and -pron- want to get down the go round the loop again so -pron- could say continue for example alright what other possibility other if -pron- only manage to read one value that be a problem so maybe -pron- should print something out so",
    "-pron- may want to continue or maybe -pron- just want to exit ok other some other possibility yes maybe -pron- have actually get to the end of the file and snf do not need anything or maybe return something else negative want to set fail so let -pron- for now this lot though all those together and will come back and work out how to do eof correctly and another video when -pron- use f eof test so for now -pron- will just break out of -pron- loop ok so -pron- can break here right and ok that be -pron- little wallop and let -pron- just print out some useful thing like number of item that will be set d and -pron- call -pron- anywhere have a new line",
    "ok and -pron- can exit or turn zero from maine same thing ok so let -pron- try that -pron- get anything to fix yeah -pron- have little capacity thing to fix so i could declare that as a macro so here be -pron- capacity will have one hundred and -pron- will fix this so i want to let -pron- use beam feature so let -pron- substitute on the current line one hundred and what change out to the word capacity ok and global just in case -pron- be more than one i could do that as well ok so great now -pron- have get -pron- some code let -pron- try compile -pron- s connect demo k now -pron- be try to use exit but -pron- never include standard lib so let -pron- fix that right hash include standard lip and",
    "-pron- sure off -pron- go right so will run -pron- say could not open data file ok so that be -pron- first hint that something go wrong let -pron- have a look at -pron- code and shape be try to open the right file which one be open file call -pron- data dot csv do -pron- have such a file no -pron- have something call datum dot csv so -pron- can let -pron- either fix rc code or change -pron- file -pron- will use medidata to change the file i want to move datum dot csv to -pron- data dot csv ok so now let -pron- run -pron- ok and see how -pron- go around that loop seven time if -pron- actually look at the datum -pron- data dot csv -pron- will see that -pron- have get seven item seven rise here to read so great -pron- have successfully manage to read"
  ],
  "708df333-e9ad-4b1c-8f24-df23dcfb4811": [
    "ok sir how could -pron- be the celcom malik take the same amount of time well the answer be -pron- depend -pron- depend upon actually which operate system -pron- be talk about and also actually just now talk about implementation choice base on implementation toy choice -pron- will find inside bsd and linux so let -pron- give -pron- kind of two two explanation how this could possibly be true and first of all let -pron- do the the bsd one here be what bsd say bsd say -pron- know -pron- want to be very security conscious and that in fact be go to be -pron- guide principle that -pron- want to make -pron- secure operating system as possible so if a process have finish with a page of memory here then there could be important secret inside that memory for example maybe there be a public private key information inside there maybe there be a password that -pron- type in",
    "the ram so -pron- would be unfortunate if that datum get copy or access at some point in the future by a malicious process or malicious actor so what vsd do be to say -pron- will have a background process to scrub all old piece of memory so -pron- be basically go to zero -pron- all out so everyone be happy so that now -pron- have get -pron- put that as a little zero here a piece of memory that have be clean prewashe ready to go so if -pron- call the kernel and say hey i need -pron- to map please map some some page of memory for -pron- how many be let -pron- say two hundred thousand byte then -pron- can say hey that be great -pron- know what -pron- already have some memory ready to go so just allocate some memory to -pron- process will not take very long at all because -pron- have already get",
    "can make these two call appear to behave the same do -pron- have any idea ok well how about -pron- lie how about -pron- use copy on write so also know as the tabakow c o w copy on write ok so here be what -pron- could do let -pron- make use of the virtual memory machinery to lie to -pron- poor process so for example -pron- ask for two hundred thousand byte all zero out to be equal to zero i could cheat at this point and say this be what -pron- address base look like be -pron- regular virtual address in the order as lot of -pron- and -pron- can of course divide this into page",
    "here be with some zero in and now the big trick be to map this so that the different part of the address space all map to the same piece of ram and -pron- little process will be none the wise if -pron- just simply look through all of these different address -pron- will just see a lot of zero even though in practice i set up -pron- hardware so that -pron- actually go back to the same piece of main memory ok so that be a wonderful electric i actually only need a single page four kilobyte of memory and i can easily give -pron- now two hundred thousand byte of memory where be all be zero out just by play this game with the mapping between virtual memory",
    "-pron- memory that appear to all have be zero out -pron- be only the moment that -pron- attempt to change a single byte inside a particular memory do -pron- actually have to do any work so the moment that -pron- decide that -pron- want to start write site into this particular page here then i need to do a copy on write in other word let -pron- find a new piece of ram here which initially be go to be all zero and update -pron- mapping scissor here there -pron- go so that tennis be -pron- off so that now this page point to -pron- own piece of memory so now if -pron- want to modify a little bite inside here -pron- can without affect anybody else but notice all of this stuff about duplicate"
  ],
  "714fd6aa-ef81-4bbb-bc38-fac32ba091c6": [
    "ok let -pron- have some fun with this let -pron- consider three gardener that perhaps take cs two forty one an gave up a keyboard for a shovel and decide to anyway to work together but -pron- first need to pick up -pron- tool from a garden shed and -pron- can imagine all the tool be lay out in some kind of way of course there be never enough tool but -pron- want to make sure that -pron- do not hit deadlock so fortunately like i say these gardener actually take cs two forty one at some point in -pron- life and -pron- know about the coffman condition so for fun -pron- decide to break the potential for deadlock by break just one of the kauffman condition let -pron- see if -pron- can think of some amusing way that -pron- could achieve this right so let -pron- go through these so for example suppose -pron- agree to not have exclusive",
    "what would -pron- gardening look like if -pron- do not have exclusive access well now -pron- gardener be go to be happy to both hold onto a shovel no -pron- take a shower that -pron- will take that now -pron- be not go to be stick in the garden share wait for the other one to return the shovel ok so -pron- be go to agree to share share -pron- tool alright what about come back how about how should -pron- break let -pron- say hold and wait ok will hold a weight occur when -pron- gardener need to pick up more than one tool so maybe -pron- be go to pick up the pot soil and a small trowel and -pron-",
    "and wait for the other resource to be release so one option then be -pron- gardener agree that -pron- be either acquire all all lock every tool -pron- need and if -pron- can not do that then -pron- will just leg over i think the world would drop everything so -pron- break hold and wait now in practice of course i get be actually want to get something do so maybe -pron- be go to have a coffee or tea break at this point and try again in a little bit so -pron- may run into some livelock issue where -pron- walk into the share pick up the thing -pron- need then discover i can not grab the snipper or the branch local office software through everything down and come back in half an hour 's time and try again",
    "any progress right so anyway -pron- prevent deadlock by say -pron- be not go to hold onto -pron- tool unless -pron- can grab order -pron- and if -pron- discover -pron- can grab boredom will let go so thing can -pron- break ok so -pron- have get no preemption ok so how can -pron- how can -pron- actually have preemption so no preemption be the idea that a garden be not go to voluntarily give up a resource while wait so instead so how can -pron- break this rule well -pron- could have a senior",
    "i know -pron- be still wait for other stuff but -pron- be go to forty oh never take -pron- out of -pron- hand or require -pron- to take -pron- out because -pron- have get another garden over here that really want -pron- so maybe -pron- have some kind of seniority where the more important gardener with the old gardener all the filter gardener whatever can can look down a different garden say right -pron- be more important than -pron- -pron- be go to force -pron- require -pron- to let go of that lock valve just wait forever ok so there be some kind of ranking of the gardener or some ability to take control of -pron- and to force -pron- to give something up an what do -pron- miss what be the last one that -pron- need here ok so -pron- -pron- will give -pron- a clue right -pron- be the cycle",
    "well i give -pron- a big general clue in a previous lecture -pron- talk about the resource allocation graphs can remember what what -pron- do so here be the big idea let -pron- let -pron- -pron- will put -pron- a little asterisk    this be an important one be involve here -pron- go let -pron- put of tool in some kind of rank order and all the gardener will agree on this order and agree to acquire the tool in this order so perhaps will put -pron- in the order can just be say -pron- distance from the door right as -pron- walk into the shed ok so if -pron- need tool one two and three -pron- will be acquire"
  ],
  "7196be55-e5f8-41a0-9dd7-3eacbf66ed4d": [
    "ok welcome to lecture 22 . so -pron- be go to make a new kernel object today . -pron- be call a pipe and a pipe be a stream and -pron- can use -pron- to communicate between two process . now -pron- be go to start with what be call ' unnamed pipe ' where the only way -pron- can talk about -pron- be just use file descriptor , but later on will have a quick look at create ' name pipe ' where -pron- actually exist in the file system . right , so let -pron- get start . okay , do -pron- have a ... great . so -pron- know that -pron- can do thing like call write ( ) and in fact when -pron- call printf ( ) , fprintf ( ) , and fread ( ) , fwrite ( ) , etc ... underneath -pron- all -pron- be \" talk to the kernel to say \" \" hey , -pron- want to write to a \" \" particular file descriptor . \" \" ok so here be -pron- file descriptor \" and that be typically a small number say 0 , 1 , or 2 for standard in , standard out , and standard error and then if i start make file with fopen ( ) , -pron- be go to have some more ... 3 , 4 , 5 , etc .",
    "and -pron- also will see these again when -pron- actually want to make network code as well . so this will be the way that -pron- send a byte over the network say to a server or say back to the client . right but today -pron- be go to use this with the pipe . so , -pron- need a way to create a pipe and each -pron- anonymous pipe have an input and output . so that mean -pron- have two file descriptor , ok . so let -pron- make a little array with just enough space for two file descriptor . ok , so there -pron- go . and right now these be not initialize to anything . but if -pron- call pipe ( ) then -pron- can pass in the start address at -pron- two integer . ok that be easy . -pron- be just ' fds ' . let -pron- call -pron- ' fds ' . right for -pron- two file descriptor . and if that succeed then now -pron- have create -pron-",
    "remember rw because -pron- say read and write . then the first file descriptor will be the one that -pron- want to read from and the second one will be the one that -pron- want to write to ok so let -pron- actually do that let -pron- actually kind of have a play with this . right there so -pron- will start write some code . so -pron- will have -pron- file descriptor . \" ok and then -pron- will say \" \" -pron- need to pipe , please \" \" and here be \" -pron- integer well code would check this succeed to do check ok right and now that be actually print this out so will decide to see what -pron- look like right so ' fds of zero ' be ... ok .",
    "-pron- will spit those out ok and will return . ok , so -pron- main , by the way , just have open close parenthesis and in c that do not mean this argument take no argument -pron- \" actually say \" \" -pron- be not go to specify what argument \" \" this take \" \" so that be actually more ambiguous if -pron- \" really want to say that take zero argument -pron- would write void here for a function but -pron- be just be lazy because i do not care about argv analogously today right so -pron- have save that let -pron- compile this ok -pron- need large window and do that the wrong way let -pron- let -pron- make -pron- small and then make the font large ok right that be more like -pron- ok bit more",
    "ok so yeah great -pron- have get something which be work now -pron- have get as -pron- can see -pron- be make to file descriptor so great let -pron- actually use these i can try to read from the first one and write to the second one ok so let -pron- do that let -pron- have a buffer here right i will have a buffer say over hundred byte k and -pron- will try to read from fds zero kay and -pron- a buffer and -pron- can have let -pron- say up to ninety nine byte ok or if i want to say well would say size of buffer minus one ok let -pron- see how many byte -pron- actually get ok so this",
    "be case so numb rhett and will just cast that student ok so off -pron- get what do -pron- think be go to happen right so let -pron- compile this and kate dot slash i can not type this morning let -pron- try again and look at that -pron- be block yes so -pron- course to read and write by default can block in other word -pron- can take forever so in this case -pron- reed call be wait for bite to appear but -pron- be a pipe and no one write anything to those bite yet ok so let -pron- write some bite so what do -pron- think about the following let -pron- write an remembering the right be the second file descriptor case so one",
    "to send let -pron- send one two three four five one two three k let -pron- do -pron- let -pron- do six byte and say hello in exclamation point but not the super bite at the end ok what do -pron- think about that what be go to happen now ok so if i exit this and try to run -pron- of course -pron- be still block because -pron- right call never return -pron- thread be still stick inside here ok so what could i do what i could now make this a multithreade program and execute -pron- right order different thread all i could i do not want to fold that i or i could let -pron- do -pron- right early so let -pron- let -pron- put that put that right call early ok so now when -pron- compile -pron- ok -pron- can see great -pron- get back -pron- read return dad -pron-",
    "-pron- could print that out now -pron- would be dangerous to treat -pron- as a c string because there be no guarantee that a ) -pron- would get order those byte in one go and b ) -pron- never even send a zero byte so -pron- be just go to print -pron- out directly use right today so if none read be at least positive integer let -pron- actually display -pron- right so -pron- be go to print -pron- out to standard out and i want this kind of here be -pron- buffer and here be the number of quite so -pron- actually want to display ok so -pron- be use lot of fire descriptor now -pron- have send hello down the pipe and eventually -pron- get to read -pron- ok so let -pron- run this and prove that print out hello ok great there -pron- be -pron- program be shuffling bite through a pipe -pron- read -pron- and then -pron- display -pron- . right but -pron- can now actually use a pipe to communicate between different process so let -pron- take -pron- write",
    "and i want the child . ok , so let -pron- call fork ( ) and if -pron- child be 0 then -pron- know that -pron- be the child ! right and inside the child -pron- will call the write and then will do nothing else ok let -pron- immediately exit so -pron- can return from maine k or equivalent i could call exit ok so will compile this and meanwhile then the the parent will will will read ok so just for fun let -pron- make the child not do this straight away but will make the child do something else for two second ok just to prove that -pron- parrot",
    "hey ok now -pron- parent be able to continue . if -pron- want to actually send something back to the child , -pron- would need a second pipe . so for example let -pron- make another pipe right and will make that a pipe k so now for fun let -pron- actually make -pron- parent just be echo so in addition to write -pron- out let -pron- instead yeah that be not right -pron- out to standard outlet actually just send -pron- down the other pipe ok so i want to use the second defile descriptor so that be another one right and meanwhile -pron- -pron- child let -pron- read from that so -pron- will",
    "call buff right and -pron- will just read from then the other pipe right and -pron- want to read from the read end ok -pron- buff -pron- size of buff minus one right and this time yeah ok let -pron- get the number of byte return and will print that out gay so number of byte read by child be gay right so let -pron- let -pron- give this a shot so hopefully -pron- have make a little echo now so -pron- send that bite to the parent and then -pron- will send -pron- back ok so compile this -pron- look like -pron- make a mistake so what have -pron- do here approach definition of i get another buff here right",
    "k let -pron- see -pron- conflicting with something else ok i look like buff be already declare inside a header so -pron- will call -pron- say -pron- buff right there -pron- go let -pron- try that no -pron- be still like that -pron- have miss out a semi color somewhere i have that be -pron- first error right with a different type ok oh there -pron- care right so yeah what -pron- mean i can not read i can not write code this morning different character type where be -pron- error so oh look at this ok right too many parenthesis ok that be",
    "send -pron- and then -pron- send -pron- back great so -pron- could use pipe now to do all sort of fun thing for example perhaps if -pron- have get a child process -pron- be run that child process could start send -pron- result or perhaps if -pron- want to shut -pron- down -pron- could use a signal but -pron- could obviously use a pipe as a way to control -pron- so for example -pron- send maybe a quick message or perhaps -pron- send job to that pipe ok so -pron- be quite often however -pron- want to be able to send more interesting datum than just kind of hello so briefly talk about how -pron- can do that right so there be two easy way to send more interesting datum",
    "with a file handle so for example -pron- can do thing like fdopen ( ) so if -pron- call fdopen ( ) -pron- pass in a file descriptor so for example if -pron- want a file handle to wrap standard out -pron- could do that but let -pron- wrap one of -pron- new file descriptor like the write end . here -pron- be . and -pron- want to use this for write ok so now what i call fdopen ( ) rather than open a file all -pron- have do be ask to c library to wrap one of these low level thing to give -pron- one of these c library file handle one of these file pointer ok so this make the life little bit easy . -pron- will call -pron- ' easy ' right , because now i can use fprintf ( ) so now -pron- can say thing like ok i want to ... \" print out a number so \" \" print this follow float \" \" point number \" \" right or print -pron- in scientific so say three \"",
    "answer to life etc be ok . so now -pron- can do format output more a little bit more easily . ok so there be some gotcha here however . -pron- want to make sure that this output be flush and just by put a new line that be not enough if -pron- be output be not go to a terminal , so remember with these thing that -pron- be good to call fflush ( ) and in fact so let -pron- put this down inside like code here so that -pron- be now send datum that way right and in fact there be another kind of gotcha that now if -pron- be use file handle with fork -pron- be important to flush -pron- so that be if -pron- 'd make -pron- file handle before call fork -pron- be always important",
    "there -pron- go . -pron- will flush -pron- because -pron- be call fork ok so and if -pron- be use standard out and standard in -pron- can flush those as well so -pron- could call .. flush on standard out , flush on .. what else be -pron- use .. standard out right ok so that look a bit more posix compliant so now -pron- have make -pron- server file handle and -pron- be go to call that right so let -pron- run this and off -pron- go after two second yeah great -pron- get thirty character back and then -pron- send -pron- back to the child ok so remember this trick that -pron- can convert from a low level file descriptor to sea level four handle use fdopen ( ) right that be enough for one video in the next video"
  ],
  "7292aa1d-0d99-46a1-8077-9688f41b785d": [
    "hi so let -pron- actually think about write a version of get line will sketch -pron- out here and -pron- will add the complete code to the repository there be some gnarly little point inside here so -pron- have use get line a few time this be -pron- signature where -pron- have point to a point to remember an a pointer to a size variable so those be the variable that -pron- have -pron- call get line -pron- be pass in the address of all line and the address of -pron- capacity right so the value which be actually go into get line or the memory location of those two variable so just to be clear what -pron- be do be -pron- be dive in to get line and pretend that -pron- actually need to write this little function ok so here be the plan -pron- need to start read character and -pron- want to be able to keep read character until",
    "at which point great -pron- can return but -pron- have to be careful because -pron- line may be very long and actually the area of memory that be right into may not be sufficient ok so let -pron- see how this solution be go to work here so i need a little sketch here great so the first thing -pron- will do be hey let -pron- let -pron- see if -pron- buy any memory at all so -pron- need an expression in here to say look look like this be line point two and then have not be initialize so one way to write this may be for example look if star when be zero that be pretty useless there be this be nothing there ok so i well actually call malloc can make a note of that another would be to say look let -pron- check the line pointer and see if actually that be equal to null so mistake would be to say the following",
    "here and see if that be equal to zero why be that why be that incorrect ok well hopefully with a little bit of thought -pron- would have realize that be very variable inside here do not point to heap memory be actually point to that little variable that be on the outside that that be actually go to hold the result so that be not what -pron- need -pron- actually need to use that pointer there -pron- go and actually follow -pron- so if that be like look at all then -pron- know -pron- have no heap memory to actually hold the result so -pron- may wait that if -pron- do actually end up call malloc then i actually want to change that variable so again same idea -pron- would be mistake just line pointer inside here yes that will change -pron- little -pron- little variable here but that be not what",
    "something like that now -pron- be actually twice start try to read some character and the trick here be to know about the follow be that i can actually read one character at a time and i can read -pron- into a little integer variable and the reason to read -pron- into an integer be the f get see will return a negative value if -pron- fail ok so let -pron- a little while loop here to keep go provide there be no error so if i take -pron- file handle here ok so where do filehandle that be just what be be pass in so if there be no current error and -pron- have not reach the end of the file then let -pron- keep -pron- go around so that be one way that -pron- will escape from this now the reason to escape from this at loop would be hey -pron- have just finish read a new line so -pron- be go to need some code down here that say look after -pron- have put that see",
    "kay break out of that loop but -pron- also want to store that new line inside the result so let -pron- always store the value of c inside area so -pron- need to say something like ok hey line pointer i know that -pron- be look at case of man heap queso dereference that little variable ok -pron- be go to do that first after dereference -pron- now great -pron- have actually look at the heap memory and that be where i can now start write thing in so let -pron- now treat that as a way of bite and i can use -pron- bite rate k light red to make sure i update that heat map in the right spot",
    "read to be incremente i want and let -pron- store the character that -pron- have just read for -pron- input stream and each time around the loop then efficacy be go to give -pron- the next character from the input stream if i have not type anything there an f get see or block -pron- will wait until a new character be give to this process how do -pron- think that happen what be ultimately call yeah that be right actually underneath&nbsp ; fgetc&nbsp ; end up call read for performance may not ask for just one bite -pron- may say yeah guess what the c library have lot of space that be a full thousand six byte or something for for a buffer area -pron- in order to make the code performance alright be -pron- do now -pron- have get a little bit more work here because -pron- could be that the number of byte -pron- have read actually be go to exceed -pron- buffer",
    "a little bit careful however because -pron- be go to need to return a c string so at the end of -pron- code kate be disappear right anyway code that be the case -pron- be go to write -pron- for real the enemy code -pron- can get way there -pron- go -pron- have get one last thing to do which be -pron- need to take -pron- i line pointer dereference with now look at the heap memory and then put a null byte at the end to ensure that what -pron- return be a proper terminate c string so let -pron- go bite weird and -pron- would say sure ok but when -pron- do that -pron- have get a little bit of work to do first of all right now -pron- be turn negative one"
  ],
  "729584e4-abeb-48b5-8aa2-e4cd25428f98": [
    "ok so let -pron- finish with some very very basic idea about how -pron- can communicate between two different machine so -pron- have probably hear of ip4 or sometimes this be write as ip version four and there be no ip version five in existence that be be use today but there be a ip aversion six that be start to be use more about that a little bit so -pron- p four be an address scheme and -pron- take four byte or more correctly if -pron- want to talk to networking engineer four octet so four eight bit number so i pv four be a thirty two bit address scheme and the idea be that hey that should be enough everybody unfortunately today the number of people on this world be great than two to the thirty two so -pron- can not have each individual address for each person and of course each of -pron- test come around more than",
    "-pron- be worried about use too many octet too many byte to represent address be worried about the overhead of make -pron- address base too large so if there be one thing i wish -pron- could change and vince cerf agree -pron- here be that -pron- wish that -pron- early address scheme have decide to use a big address space for -pron- network packet then just just the thirty two bit so today these thirty two bit be describe as octet so an octet be just eight bit so if i can spell out text correctly i think -pron- need another see inside -pron- octet and so when -pron- talk about address such as this one hundred and",
    "be just a four number each number be go to be between zero and two hundred and fifty five because each number refer to eight bit and this particular address here hundred and twenty seven point zero point zero point one be a very special address -pron- be no place like home this be equivalent to localhost if -pron- start create network packet that be destine for this address -pron- can be sure that -pron- will never leave -pron- machine with lot of virtual machine or physical machine this address be special -pron- actually mean the current host or the localhost ok so if -pron- create packet with this destination -pron- be not go anywhere that actually target the current machine so next time -pron- meet hacker why do not -pron- suggest that -pron- actually try to hack this specific address so back to ip four",
    "where to send internet packet and these packet -pron- could be base use carrier pigeon that -pron- could be base on electrical pulse that could be use light pulse ip four do not work at the level of describe exactly how -pron- be go to send this information rather -pron- be an idea about how -pron- want to communicate between two endpoint between two machine and so -pron- can talk about -pron- address game then as just a number thirty two bit 's ok and if -pron- want to start send packet then typically -pron- be go to describe then start point and ending point so -pron- will have a source address and a destination address ok so -pron- be already up to four byte or let -pron- be precise four octet for each one so overhead be already octet worth of information before -pron- have even specify",
    "ramp up -pron- have now get this overhead so if -pron- just want to start send individual character because -pron- want to send a packet for each time -pron- press something on the keyboard already -pron- have get this overhead of these additional byte or to be precise additional octet which be go to be require for every packet that -pron- set right so this be ip four -pron- be a very very simple idea of let -pron- have a thirty two bit there be a little bit more to -pron- -pron- can actually start talk about address space within that -pron- can talk about subnet etc and how -pron- divide up this total address space of two to the thirty two possible address -pron- can reserve different part of -pron- from i do not get there today instead i want to talk a little bit about ok so i send a packet from one",
    "i mean for example pass packet be for -pron- web browser perhaps -pron- be for -pron- service etc so i want to have a database perhaps i want to have a web server or run on the same machine so how do -pron- differentiate where this particular packet should go for that let -pron- think about if -pron- take a steam ship to california -pron- may end up a different port ok so -pron- will have one other piece of information which be actually what to do when a packet actually arrive on particular machine and will differentiate where -pron- should go by a port number and a port number be pretty small be actually only two octet in other word sixteen bit ok so -pron- have only get number between zero and two to the sixteen minus one possible port number and",
    "time -pron- set a network packet typically will have a source port and destination port as well so let -pron- complete -pron- little diagram in here ok so -pron- have get the ip four address which be go to be make of eight octet for both the source and the destination and then -pron- be go to need a port number as well for the source and the destination ok so when -pron- want to send these packet in practice -pron- need to specify how -pron- want to wrap up -pron- datum so -pron- need more than just an ip for protocol in fact -pron- will quickly discover that there be two protocol base on top of ip4 one of -pron- be tcp and",
    "to -pron- packet to allow -pron- to stream information ok so -pron- will look at the actual detail of this at least some of the idea of tcp where the protocol -pron- specify a whole additional set of byte octets in order for -pron- to be able to ignore the fact that -pron- be actually send individual packet so with tcp -pron- behave a lot more like the pipe that -pron- have already see -pron- behave a lot more like a stream this idea that i can set up a connection between one machine over here ok and another machine over there and -pron- can just start call write to send datum into this connection -pron- will magically travel over as a packet",
    "and see the original cat picture or whatever set of byte that -pron- want to right over here and -pron- will get the same byte out over there now the number of right and recall do not need with the same i may make many write call and say read all those byte in one go or similar i may write once and that ultimately end up become many more read call on the exit because the datum arrive in small piece so let -pron- back out of this picture and realize that in practice -pron- will say see people talk about tcp ip protocol because -pron- be use ip say version four for -pron- addressing and tcp in order to implement a pipe in order to be able to use read and write on the",
    "first of all can -pron- program be listen on any port ok the answer be new so the port less than a thousand and twenty four be call privileged port so zero two thousand and twenty three thousand twenty three of what be call privileged port and -pron- need to have administrative access spell this correctly privileged port and so on a unix system that mean -pron- need to be run as root so the idea here be that this give -pron- a hint to a client that if -pron- be connect to a low numbered port so for example port eighty four unencrypted web access so i expect to be able to speak http to port eighty or",
    "this be a big hint that -pron- be talk to a process that have at least root access so if -pron- trust the machine -pron- at least to trust the process that be run on this low number port if -pron- be connect to port number great than a thousand and twenty three then -pron- these process be can be run by any mere mortal on that machine so basically -pron- now trust that any user on that machine be not go to do anything nefarious without with -pron- datum ok so -pron- will port number -pron- be specific to the protocol so if -pron- be talk about a tcp protocol then listen on port twenty three will be the ssh service so i can log in use ssd or if -pron- be listen",
    "to a web server there be another kind of protocol that i briefly mention which be this udp protocol and udp be very rarely use because -pron- do not make any guarantee about the arrival of the information so if i send out a udp packet -pron- can think of -pron- as a bit like a classic telegram hey let -pron- send out -pron- telegram let -pron- hope that -pron- arrive to someone listen at the other end however telegrams can be lose in transit there be no guarantee that -pron- will actually ever arrive , similarly , actually -pron- can be duplicate in transit so -pron- may discover -pron- send out one udp and -pron- get to arrive at the other end also if i send out two udp packet ok so let -pron- send out one and then another one with one",
    "to what order these packet will arrive in perhaps this second packet will arrive before the first one or maybe a duplicate alive etc after the second so this be very much the kind of wild west of the internet will make good effort to send information but udp do not behave like a stream so if i send a picture of -pron- cat and i break -pron- up into udp packet then u d piece oh yeah ok today i get -pron- another packet i get another package -pron- have get another packet and -pron- would have to write additional code to kind of re assemble these and look for duplicate and even look for miss packet so udp be useful for streaming information when -pron- do not care about miss piece of information so for example suppose -pron- be write a game server and -pron- be continuously send out update about where the character the avatars have",
    "if -pron- have lose some packet rather than wait for those miss packet -pron- know that hey in twenty five millisecond time -pron- be go to be receive update about the new position anyway so -pron- 'd rather -pron- 'd rather that information get losse -pron- also see udp for stream video and stream audio service where again real time information be more important than that lose packet so if there be a drop in signal for a moment that be ok -pron- 'd rather have stream information about what the person be say now compare to what be go on say a second ago right so that be why udp exist but -pron- be not as useful as tcp tcp hide all of this nasty network stuff where packet get lossed delay where packet arrive out of order and instead tcp say be handle this all for -pron- -pron- will pretend",
    "pipe where -pron- can send stuff in and -pron- will get the same byte out eventually in the same order by the way one difference on tcp compare to the unix pipe -pron- see so far be that both the client and the server can send and receive so -pron- behave as a full two way communication medium so i can from the client sense after this server to request a web page and on the same connection the server can write back information and -pron- will appear outside eventually to the client again ok so that be very quick introduction to some basic idea from udp -pron- talk about ip four -pron- be the most common kind of packet -pron- will see today on the internet -pron- talk about this special ip four address and -pron-"
  ],
  "72f91574-339a-40e1-9278-a3dc18f62a35": [
    "hi welcome to lecture twenty so let -pron- have a code review where -pron- be go to talk about a little bit of code that use condition variable be -pron- ready ok so -pron- little application be very simple -pron- be just get two thread one thread some point be go to modify this value of x and then call signal another thread be wait for x d b positive so -pron- can think of this basically like a latch and only after -pron- be become positive do -pron- continue right so what do -pron- think about this code right so what do -pron- notice first of all that -pron- code over here on the right really do need a mutex lock before -pron- change value of x and -pron- signal ok let -pron- see why the problem occur be when -pron- call change at the same time that -pron- second thread be actually call in this wait for positive x let -pron- see where the problem could occur so -pron- have get this test here and then later maybe a few",
    "to block so here be the problem scenario what if -pron- have an interleaving of these operation such that change the value of x here happen after this test and call peter condition signal happen before the thread block and wait for signal ok so now what be happen -pron- second thread be go to deadlock -pron- be now wait for a signal that be never go to happen so right now yes -pron- have a small opportunity a chance that -pron- second thread will deadlock how do -pron- fix -pron- by lock on the same mutex because then the only way that -pron- can continue be after the threat have acquire the mutex so another thread will have to wait so now if -pron- do that -pron- become impossible to be execute these two line of code at the same time that these two line be be execute",
    "this if inside here so in practice this can bite -pron- in two different way first of all maybe in other application -pron- have multiple thread call this and -pron- really just want to ensure -pron- x really be positive before -pron- continue and other thing may change value x the second problem with this code be the actual deep condition wait be occasionally may suffer from what be call a spurious wake up -pron- never truly go to sleep ok right so why do that occur well let -pron- let -pron- go back and talk about the implication for how condition weight be actually implement right so -pron- have just see this problem of change in value of x and then signal too early before -pron- thread be actually block and wait for that signal to arrive so in practice",
    "block a waiting for that signal have to be -pron- have to behave as if -pron- be an a single atomic operation in other word there be no clock cycle no moment in time between between these two event otherwise the very same argument that -pron- just give hear about these two operation happen just within that now window would apply to all of -pron- cause to p three condition wait ok so -pron- have to ensure that these behave can instantaneously together now in practice that may be impossible there could be a very narrow window between when -pron- unlock the window unlock the mutex and block so in practice if that may occur for example because i really do have multiple cpus run on different piece of silicon then what will happen be rather"
  ],
  "734339b1-3010-43a2-9cfa-55d690efddab": [
    "ok so let -pron- think about how -pron- can write a malloc so have -pron- can may realloc right so the story so far -pron- have be call with position to an old pointer and how much space -pron- would now like k now let -pron- get rid of one edge case to begin with which be just if -pron- read the man page of real ac one thing -pron- have to think about be what if there be no current space in other word if old be null ok then -pron- behavior should just be like -pron- like malloc so let -pron- do that let -pron- just rely on malac to implement that force ok so there -pron- go well let malloc handle that right now there be actually a couple of possibility here -pron- could be that the new size be large than the current allocation at old oh -pron- be small so let -pron- let -pron- think about what this mean that if realloc be be call to say i actually i need so much space",
    "byte into a new area so let -pron- just kind of think about how this may go wrong let -pron- write a really kind of simple implementation of real to begin with which always just copy to some new memory ok so -pron- do something like the follow here be a simple idea let -pron- get malloc to do all the work flow will get -pron- have already write be malloc link list code that seem to be work so let -pron- just rely on that ok so -pron- be go to say right -pron- log get -pron- some new space and -pron- be just go to copy everything across ok so this will be -pron- -pron- result and i want to copy some bite so -pron- will use mem copy into result from old and how many byte know size key and then return result be -pron- do almost k -pron- have get a few little trick here -pron- actually should remember to free up the old space ok so whoop so the -pron- have get something then that will work be very simple simple sometimes simple be great",
    "error check here to see if malloc fail secondly what if -pron- actual size be this new size be big than the old size then -pron- have just copy a lot of byte from the old location in fact -pron- technically copy more bite than be necessary so maybe -pron- should do here be to make sure -pron- do not accidentally read from some invalid memory be -pron- need a minimum size which be the minimum of the old than -pron- ok so now -pron- want to start think about the minimum size of number of byte tiny i should be copy be go to be yes to new size and of the old size ok at this point",
    "go to get that right so somehow i need a way to get -pron- link list entry for that give so somehow i need to go from the old tube the link list now -pron- have show -pron- one way to do this before with three where -pron- just walk through the link list look for -pron- entry until -pron- find one with until the pointer of the link list the point of entry of that link list datum actually be equal to the user area but maybe -pron- have actually make a decision to have a well perform malloc and free so that the metadata entry can be find in order one way maybe -pron- have say that the metadata be directly before the user area ok so how would -pron- write this code so for that here be what -pron- will do",
    "cast -pron- to an entry type k so if -pron- have get that there be not look at the right spot yet but -pron- know just before that -pron- store -pron- metadata entry so great -pron- find now the real datum entry now be -pron- sure about that well let -pron- put in a few assert ok so let -pron- double check for example the pointer really be look at what -pron- expect let -pron- check for example that the window correspond to some memory that be have be take -pron- current year allocate right so now -pron- have get that entry i can look at the old size so let -pron- pull -pron- out the old size entry size ok and so now i can copy the right number of byte which be great so -pron- be go to be more performant if -pron- only copy the correct number of byte and -pron- will not accidentally try to read or write into some invalid memory area",
    "for moment about the kind of request -pron- can get ok so -pron- have get the idea that -pron- have already get an allocation with some user datum in -pron- ok there -pron- go and now reality have be call to say actually -pron- have change -pron- mind i do not want a thousand byte i only want to say five hundred byte or actually -pron- have change -pron- mind i do not want to thousand byte i want one thousand five hundred byte or two thousand byte so how can -pron- make this more efficient well -pron- could be that the the space that -pron- already have give to the user actually be actually already large enough so this call to malloc be unnecessary so let -pron- have a look at that let -pron-",
    "actually big than new size then hey there be no point get a new block -pron- can just keep -pron- happy by by leave -pron- where -pron- be ok -pron- be not go to update this size of -pron- metadata entry base on what the user be ask for and just go to let -pron- sit where -pron- be so ok so because remember the size in datum entry actually correspond to the capacity not necessarily how much to user truly use -pron- so -pron- say that there be no point use -pron- ok so -pron- be only go to move if that be not true if -pron- be not enough space there be some other option that be high performance that be more performant version may may use for example perhaps -pron- could be that rather than call malloc",
    "-pron- so so here be a data that the user currently use maybe the piece of maybe next to -pron- over here be actually available so there be nothing there nothing in that second block in which case maybe -pron- time to do some block coalesce in here -pron- could change -pron- so that -pron- pointer in -pron- own block rather than jump to this one actually jump to -pron- pointer to -pron- next pointer and -pron- get rid of that metadata entry and so now the user have all this extra space to expand into so -pron- could do that now the possibility be imagine for a moment that -pron- have huge apartment here or say two megabyte but now -pron- be lock have be call to say actually -pron- only need",
    "even small than that ok say i will not bother to move -pron- datum but now -pron- have get all this waste memory over here that be never go to be use -pron- just tell -pron- that -pron- want to shrink so maybe this space now be just waste memory how could -pron- deal with that but one thing -pron- could do be do the opposite of -pron- little diagram here which be that if -pron- decide to the reality be be call an ascending be fifty percent of the space then or less then maybe -pron- be time to put in a new metadata entry here and mark this entry this unused ram as available for future malloc request if -pron- start implement thing like that there be one little gotcha which be imagine that the amount of space that be go to be leave be tiny so yes so user may be call real octa say yeah -pron- have decide that",
    "mean that -pron- have now get another four byte here which available well that be not enough to store metadata and have any space leave over actually be useful so do not start try to carve up new block if the space be too small and that should be a parameter in -pron- in -pron- model to see what kind of performance difference -pron- can get if -pron- decide to implement this so let -pron- go back to -pron- code and see what -pron- have -pron- have get the idea of there -pron- go there -pron- go -pron- have get the idea of only use malloc if -pron- truly need to -pron- have get the idea of try to not move datum around unless -pron- absolutely have to let -pron- just try to kind of implement or sketch out then how -pron- may proceed if -pron- look like there be go",
    "ok let -pron- calculate let -pron- see if the new size be a lot small so for example if the old size ok be still much big than two time a new size then -pron- have get again clearly that the amount of space be be a lot small but less anybody would do anything if the difference be actually significant so perhaps like if the old size minus the new size be great than some threshold so what would that threshold look like good question let -pron- say a thousand and twenty four byte right so i would if this be production code i would definitely put that into a variable ok so in which case now -pron- know -pron- have get some spare space arm -pron- be at least as big as a metadata and even",
    "at this point ok so here be the kind of wonderful thing be that i could make a pointer to any memory i want and declare this truck there so i can say ok this be -pron- -pron- new entry here and that will be where -pron- exist data end so what would that look like well -pron- may look something like this what do -pron- think about the follow -pron- have get the exist entry entry -pron- be currently talk about and i just need to go to the end so that would be ok that be go to be just know size ok right whoop this be a great example of forget about pointer arithmetic the type here be not a void pointer -pron- be pointer to one of these entry strut so -pron- be not add just one -pron- be add a very large number here but this",
    "do exciting and unexpected and undefined thing whoopsie just from do simple well point with matich so be very careful of that kind of stuff but anyway let -pron- sketch out what -pron- may do here so i now have a idea of where i want to put a new entry now set this up so i do thing like ok this need to point the pointer here need to point to where the start of the user entry will be so -pron- know that will be a new entry plus one and this time -pron- be actually get pointer arithmetic correct -pron- be go to be a new entry which represent available bite so let -pron- remember to do that and the last thing in -pron- struct be to say ok -pron- size and -pron- next so let -pron- be able to do everything also this how big -pron- be ok so now i need to do some calculation that be go to be thing like gnu size minus old size minus size of the entry space that -pron- have ok this be",
    "ok so last thing be what about the next pointer so i want -pron- to look at where -pron- current entry be look so -pron- can look at -pron- and -pron- entry will look at -pron- so let -pron- update -pron- entry next pointer to b new entry so great now -pron- have insert -pron- into -pron- link list chain ok there be other way to calculate the size -pron- can do difference be two pointer if -pron- do that as usual remember to always be work with void pointer or character pointer void pointer -pron- be not suppose to do pointer arithmetic on but in practice all modern c compiler will support that okie right so -pron- scare out some idea here as -pron- can"
  ],
  "73c03049-aa68-4e80-86c4-2fe840200860": [
    "ok hi right so question three -pron- have get a lot of different piece of memory inside -pron- process each time -pron- once -pron- need some memory to hold of global variable be stack variable so actually look at that in action right so here be some crazy code that -pron- write this be actually go to illustrate some of these idea right so what do -pron- have do i have a little ok great so the first thing be -pron- have get a little variable up here call global do i have -pron- be in text mode let -pron- go to squiggly line mode ok yeah ok ok good alright so i get available here call global now global be dangerous and great at the same time in the sense that i once -pron- declare a global -pron- can use -pron- anywhere else in the code below so -pron- really have global scope so that be not great engineering",
    "-pron- mean that -pron- code come out kind of complex and fragile but -pron- be not unusual to have say one or two global variable which may represent a debug flag or something like that and -pron- will see the lot in very simple and small program so global variable exist for the lifetime of the process -pron- be not in a heap be not in the stack -pron- be inside -pron- own kind of memory segment and there -pron- can either have be an issue value of zero or if -pron- wish inside -pron- code -pron- can course initialize -pron- to a value right so the next thing to look at be what about -pron- constant here and the code right so also in -pron- process -pron- have something call the text segment that be go to hold piece of text that -pron- have define inside -pron- program",
    "the code -pron- so the instruction require for this cpu or those bite that the cpu be go to interpret as instruction in term of change register read or write from memory branch and conditional etc etc etc etc all that have to live inside the process somewhere all of that have a memory address and that be all take segment and that be read only -pron- try to write to that memory huh good luck try -pron- will not be able to on a modern cpu memory texture will kick in and -pron- process will be kick out so here be some example of thing be go to be store inside the text segment and if -pron- use the insider program then what do -pron- get will actually what -pron- get here be be what -pron- use inside the expression -pron- get the memory address of the very first item ok so when -pron- use these inside",
    "go to happen first of all let -pron- look at t one t one be store on the stack why -pron- be an automatic variable that only exist whilst -pron- be inside and run code inside test so -pron- need a place in memory just a temporary hold automatic variable be little stack variable here and that include parameter as well so what be t one and what be -pron- do what t one what do this type be a pointer to a character and otherwise -pron- be go to hold a memory address and add that memory address -pron- expect to find character right but -pron- be give -pron- this string so actually t one be go to hold the memory dress of that age be go to point directly into the text segment be go to hold that memory address which between -pron- and -pron- be go to be a low value the text segment be -pron- near the beginning of the process memory now there be a surprise however with t two t two",
    "that out -pron- and the surprise here be actually the compiler be go to write some extra code for -pron- here because rather than just look at that string literal in memory when -pron- call this function -pron- be actually go to copy those bike -pron- be go to copy the one two three four five six seven eight nine byte include that zero bite at the end into the stack memory forwards so if i be to stop -pron- process and actually use a debugger to have a look around i would find the original abcdefg h and then i try to copy of that inside the stack and the difference between the two of course be that the stack version -pron- can modify -pron- mutable because -pron- be just stack memory so let -pron- see what happen next right ok so the online seven -pron- use t two and -pron- look like -pron- be use as a pointer",
    "context like this then the variable behave as if -pron- be talk about the very first address of the array in other word -pron- be look at the very first element of the array in the stack -pron- if this be -pron- stack then what would i expect to see i would find let -pron- say t one be here and this be go to take up four byte ok so t one would hold the address of this first bite here and next to that may be above -pron- or below -pron- there be go to be the nine byte -pron- actually need for hold the value of t two so there -pron- go let -pron- imagine that -pron- have get nine entry there so the difference between these be subtle but important that t one do not hold the string high instead -pron- be",
    "on a thirty two bit machine as -pron- can see i use four byte to hold the address of of t one so -pron- have get to follow the money if -pron- like -pron- have get to actually go to that other address if -pron- actually want to see those byte h and i -pron- be not go to be find directly inside the stack ok versus t two actually have abc carpet into -pron- ok and so on and so on and so on up to h and then one last bite for the zoo at the end and -pron- will notice i put -pron- address be the high at the top and the low at the bottom of the page ok so hello will -pron- live seven -pron- be go to change that first element of the ray so -pron- be actually change by stack when -pron- directly here and then line eight -pron- do a calculation that say take two two so treat",
    "be follow the money the astrex here actually use that address so in other word change a lowercase b that -pron- put in there into an upper case b line nine actually do the same thing so these two line be equivalent just different syntax as -pron- can see a little bit nice to use square bracket and remember though the square bracket mean also right to those location just as a fun thing actually if -pron- want to confuse -pron- cs two twenty five friend -pron- could write this equivalently by swap the two site so -pron- could also write one square bracket t two and that would compile as well so -pron- could swap these around if -pron- so in client would not do that for real production code but -pron- be great fun for confuse confusing people right now let -pron- look at line tent line ten say ok take the address that",
    "a t one do not actually have -pron- content or so -pron- be go to be a very unhappy here put -pron- little fun smiley face because will try to follow the address that -pron- store inside t one which -pron- point to some read only memory and -pron- be not allow to change that so the moment that -pron- actually try to dereference this memory and actually write to -pron- the cpu will notice and say well hold on let -pron- stop the program anymore get a segmentation fault the last line here say if -pron- actually get to this last last line hey malloc i need some heat memory and this be the number of byte -pron- 'd like -pron- 'd like a hundred and twenty three and i promise not to invite extra byte after that point and i promise not to try to write any bias before -pron- start start of the place -pron- give -pron- so if -pron- succeed be actually go to turn an address and -pron- can use that particular address and that address up to one hundred and twenty two for",
    "in there maybe will store the little picture whatever -pron- want to do maybe want to still a long string i do not know malloc do not care or ballot nose -pron- be assign a give that memory and promise not to give anybody else that that same piece of memory until the day that -pron- say ok -pron- be do with this and how do i say -pron- be do with this i call free and i pass back the same well stop draw right pass back the same the same address that -pron- get originally from malloc so i call free with t one ok so -pron- code will fail at line ten the only way that -pron- could start this code from fail at line ten would be if -pron- swap line ten eleven because this be what -pron- can do with pointer with pointer -pron- can say hey pointer pointer something else and so if -pron- swap those two line around by call malloc first -pron- would"
  ],
  "7466bd20-538e-4aeb-b004-1fa8fb518f9f": [
    "hi so -pron- be go to start look at a wonderful library call pthread now pthread have be a while around for quite awhile -pron- be extremely portable that -pron- have other alternative today for example c plus plus have -pron- own thread primitive c now have -pron- own thread primitive however there not as versatile as the p thread version and -pron- be not configurable anna not as portable so today if i be to start a new project and i really want to make sure that i could tweet thing for example how much stack space that particular thread may need -pron- first choice today would be p thread so that be what -pron- be go to look at -pron- be also the standard part of posix -pron- be also find in many many project so yes whilst i encourage -pron- to maybe look at what be currently do with -pron- be new -pron- be new threading library there be relatively new and p thread be still hold the throne as as the most",
    "ok so there be several thing -pron- want to be able to do -pron- want to be able to create a new thread of execution and when -pron- do that be very different from folk when -pron- do this -pron- want to be able to say ok start run from here so for example i may want to say right in the background i want to start run a thread that be go to mine bitcoin so please -pron- be go to have a function call mind for example -pron- be go to use -pron- spare cpu and i do not care about the environment and -pron- be not pay for electricity that kind of thing obviously do not do this all the university machine but i want to be able to say ok peter head start on -pron- function call -pron- right now i would not actually write mine like this because this mean coal mine instead i need the address of -pron- function and surprisingly if -pron- just give the name of a function then that be actually",
    "which be go to download something in the background so maybe -pron- have get a function call to know download update or do something else useful for -pron- in in the background ok so then -pron- be just need to somehow to say hey system -pron- have get this function please assign a new cpu to this function and start run -pron- and that be the purpose of pthread create so this create a new thread and for this -pron- be go to pass in a function where -pron- want to start for so -pron- be very strange to say please start from maine instead -pron- be go to write -pron- own function and that be where -pron- will start ok so how do -pron- then wait for that function to finish for example suppose i have a function that render a manageable picture or find -pron- a bitcoin now i want to wait for that to finish before continue",
    "so join be the idea that hey -pron- have be run along let -pron- do -pron- let -pron- do this where time go to the right so -pron- main function be start and then i call pay through -pron- create so at the same time now and -pron- function starts and -pron- be run along do a calculation but at some point -pron- finish ok so now -pron- want to make sure that in -pron- main thread -pron- do not continue until -pron- be sure that other function finish so -pron- would call p thread joint here ok and now -pron- be not go to continue until that be true so so in -pron- first or diagram here -pron- new thread finish early but -pron- could imagine separate scenario where -pron- keep on run take a lot long to find a bitcoin this time ok so now nothing be go to happen until the thread -pron- be join on have finish as quick and then i can continue so please join can block",
    "to do anything on -pron- program for potentially along time and in fact the colonel will give that cpu to another thread that would like to run or tell that can not cpu core to shut down and go into low power mode ok so pthread_join can take a long time right now how do -pron- say if -pron- actually inside a thread hey -pron- be do i do not want to do anymore ok so for this -pron- need to say -pron- 'd like to exit please so \u00a0  pthread_exit right so the peace road exit be the last thing -pron- thread will ever do there be no return from p thread exit -pron- be do -pron- cpu cause ok -pron- be go to wash -pron- hand of this thread i know that there be nothing else be go to happen so p thread exit be a one way ticket do not try to execute anymore code after p call",
    "let -pron- call -pron- say -pron- to continue that silly idea at some point i want to quit so i would call p thread exit by the way if -pron- return from that function in other word if there be no more stack frame then that be equivalent of call p thread exit so i may have some code in here this may call other function call air from that cause g and that cause premier fanatic or something else etc -pron- open file whatever but eventually if any of these call p thread exit then all -pron- return from here that thread be do ok so there be a bit of a kind of mind moment here that i want -pron- to realize that now -pron- write code on a page but -pron- be important to think about which thread be actually run that code and of course by default",
    "start up in all of -pron- program which execute maine and -pron- be up to -pron- then to create additional thread when -pron- want -pron- so and just like rp for example when -pron- return from maine -pron- also finish out thread however the one exciting piece of news be when -pron- return from maine that kill that be the end of -pron- process that be the equivalent to call exit not p thread exit but process exit and when -pron- do that everything disappear all of -pron- other thread disappear ok so i think -pron- be time for a demo soon but first of all let -pron- actually kind of have a look how -pron- can use p thread and detangle this ok so let -pron- have a look at what the manpage tell -pron- and -pron- will see the follow kind of thing so let -pron- for example take care p thread exit and type -pron- into man page ok so man p thread x copy so",
    "right and -pron- can read about this and -pron- can see that all sort of wonderful thing ok do i have a little shiny thing here ok great i do alright so what do i have i take full thing eight pointer to this type i another point some attribute so -pron- be not go to use these attribute inside cs two forty one but here be where -pron- can say thing like -pron- know this thread may do a lot of recursion i need a lot of stack space and then this really gnarly look voidstar starve start routine voidstar let -pron- talk about that in a moment and then finally avoid point be to arg yes -pron- get a pirate amongst -pron- ok so let -pron- talk about this lot ok let -pron- just get back to -pron- slide here right so -pron- have i want to i want to talk about this nasty thing this",
    "the cpu hey please start run this particular function and the kind of function that peter support be something that take a void pointer and return a void pointer so hopefully this be no long look quite so so gnarly right so -pron- can see this return a void pointer and take a void pointer -pron- still look pretty awful and that be because -pron- be a -pron- function definition in c so let -pron- talk about that when -pron- want to talk about pointer to function first of all just write down what kind of just imagine -pron- be write down the function declaration so for example suppose i want a function that -pron- turn a double ok and -pron- will call -pron- calc ok and let -pron- say that -pron- take a double ok right so that be -pron- function declaration how can i now create pointer that point to these kind of",
    "have to do be put an asterix before the name and surround that with parenthesis so now -pron- can read these thing right now -pron- can see oh -pron- want to talk about pointer to function and the kind of function -pron- care or once -pron- take a double and return a double and that be exactly what -pron- have here for a start routine -pron- want to talk about function that take a void pointer and return a void pointer now the take and return avoid pointer p thread do not actually care about those value -pron- be for -pron- benefit and in fact when -pron- say hey colonel please start -pron- other function for -pron- on a new cpu core i want to be able to pass something into the start routine",
    "hand over a pointer to say when the cpu finally start -pron- mining function or whatever -pron- be go to be give -pron- this value as -pron- parameter so eventually when -pron- start routine actually start so -pron- do not know when that may be -pron- may be the millisecond time or -pron- may be practically instantaneous but at some point in the future -pron- -pron- know that the function take a void pointer and so this be the value would like to pass in ok and the return value that be go to be the exit value from the function so if the thread never call p thread exit -pron- return value will be the thread exit value ok so let -pron- go and actually kind of demo demonstrate this now right so i need a little bit of a program ok so here -pron- go right here be -pron- very first program this time -pron- actually use the exit success rather than say return zero -pron- do not need to wait",
    "with threat so i need of course the preferred library so let -pron- include that hash include p thread to h -pron- get that from the band page now let -pron- have something which actually run separately ok so let -pron- do i know -pron- have to return a void pointer and i will call -pron- let -pron- say hello alright and key and -pron- know -pron- take a void pointer right so what should -pron- little program do i will make -pron- little thread wanna do a big calculation yeah -pron- will get -pron- to just call sleep for a second ok and then -pron- will get -pron- to say something so how about -pron- call printf from here and -pron- can say right hello what so now -pron- need to make -pron- to to finish what should -pron-",
    "return say null alternatively i can call p thread exit now so -pron- be equivalent statement nothing happen after this point and -pron- be important to bear in mind that anything else any other thread that be run will continue to exit -pron- be just that one thread that happen to be run this hello code ok right so -pron- could now start to kind of create create -pron- thread here so let -pron- do p thread create and at this point i need to give -pron- a pointer to a thread id so i need the address of -pron- little variable here will make that in a moment the next thing be the attributes and i do not need any of those wait be that the way -pron- round let -pron- check yet the attribute yet and now -pron- need the function pointer",
    "to -pron- ampersand hello and the c compiler just ignore the ten percent so that be hello hello parenthese otherwise -pron- will be evaluate -pron- will be call hello on the main thread and that be not what -pron- want -pron- actually just want the address of a function ok and what would -pron- like to pass into hello how about a banana ok right so remember be not go to do that be go to take the address of this string literal i could also do -pron- like the follow i could say that -pron- have get some pointer here and for -pron- pointer and i could come up with an address like dead beef or i could say use this string there -pron- go and that of course will be the very first with the address of the first",
    "if -pron- can guess what be go to happen ok so let -pron- let -pron- start this and will try to compile -pron- ok so i call -pron- p thread demo now an important idea here see -pron- be not quite that thread demo gcc thread demo ok an important idea here be -pron- need to give a hint to the compiler that -pron- be now go to work with thread so for example any call to malloc and printf should be thread safe meaning -pron- do not want to program just crash in surprising way just because two thread call malik at the same time so -pron- want to say hey gcc please realize from use p thread so there be actually an option for that be like a p three p thread i have to check -pron- yes ok so let -pron- do that right now -pron- have",
    "sleep so let -pron- fix that and let -pron- fix -pron- thread id ok so -pron- need an argument here -pron- need to include uni standard for sleep ok and what be -pron- last issue oh yes that id so i need available for that third -pron- thread on -pron- guilty and i call that tid ok wait oh -pron- come puzzle be -pron- ready let -pron- run -pron- and -pron- get nothing be -pron- surprised let -pron- have a look why do -pron- think -pron- get nothing ok so what -pron- actually have here be a race condition -pron- ask the people i be to start a new thread but before -pron- have a chance to actually print anything out so those be sleep second here -pron- be go to be execute",
    "from maine at that point -pron- program -pron- process exit and threat live inside a process let -pron- say -pron- again -pron- live inside a process so that be really important idea without the process without there be no memory there be no file thread have nowhere to exist ok so -pron- think about -pron- as memory and now -pron- be co opt a whole load of cpus to come and work on -pron- program together if -pron- turn out that -pron- do not actually really have say two cpus on -pron- -pron- machine then the operating system lie to -pron- -pron- give -pron- -pron- play a game where -pron- pretend that -pron- have get an infinite number of cpus versus really in fact what -pron- have be like a a short order cook that be able to quickly work on one job and then go and work over here and then go and work over here and if -pron- keep",
    "-pron- will never know really there be just one cook in the kitchen ok so let -pron- let -pron- fix this by wait around for -pron- ok so will say sleep for two second here right and now let -pron- run -pron- and ok all look at the one second -pron- print hello right ok can -pron- prove that -pron- really be do two thing at the same time sure how about i create another thread ok so let -pron- have two thread i ds here through an id to ok what and off -pron- go and i run -pron- to one second -pron- both print out hello ok well how about -pron- try to get -pron- to print out different thing ok so for that let -pron- pass in a different value right so let -pron- pass in less actually start to use this value here so rather than just say hello here let",
    "remember this argument -pron- have get here well that point to some memory and -pron- and i know that at that memory be a secret message so let -pron- have a pointer now a character point to do that for -pron- to then use -pron- code k right so i could now just start write the normal code i have and ok let -pron- run this and now -pron- both say hello pin on be so great so now i can change one of -pron- to be case some other fruit let -pron- have tomato k so now after one second -pron- both -pron- both run and -pron- get hello banana hello tomato now there be a chance actually that this program could print out tomato and brown be in a different order be not very likely but maybe if -pron- be run on a busy system where there be not a cpu immediately available for that",
    "pizza create and many program unfortunately in the world today will work by accident so the fact that -pron- happen to run because -pron- happen to be wait long enough do not give -pron- a nice warm fuzzy feeling inside but unfortunately today many program real program in development and actually in production i have little delay loop in an attempt to -pron- to make sure that -pron- work right but as a ui uc student i hope -pron- can do well than this so let -pron- actually now do a well job in this sleeping for two second -pron- want to make sure that -pron- wait for both of these thread to actually finish so how can -pron- do that ok so let -pron- do pizza hut join on right and now i need to say the on the thread that i want to join about so -pron- be go to wait for third one ok and i need a k return value on and",
    "let -pron- have a look at p thread joint and p thread join and -pron- will see -pron- take a pointer to a pointer to avoid star ok so the idea here be that -pron- actually give -pron- some memory that be go to write into so here be -pron- voice dial pointer ok return value one here be another one ok and -pron- want the address of these variable because -pron- be go to be change ok so just to kind of see that -pron- be be change let -pron- dump actually look at -pron- value so i can say thing like printf right return value one be now if i do percent p -pron- can get thing print",
    "and so -pron- can now will only print out return value after both these thread have finish ok so let -pron- compile -pron- ok well run -pron- after a second -pron- both run and -pron- will see oh -pron- get return value of zero zero now do -pron- believe -pron- hold on a moment maybe that be the arbitrary value of these before so let -pron- prove that -pron- be work let -pron- let -pron- return something here ok so why do not for example i make i return ok i can return x deadbeef ok but i can not spell there there -pron- go and -pron- will say here be an integer hexter write in hexadecimal notation but i want -pron- to treat -pron- as a memory address and -pron-",
    "ok after one second -pron- both finish what return value one be zero what do -pron- do ok so see void pointer why do that fail be a good question wait oh because yes do -pron- see why ok -pron- never get to return statement yes -pron- p three at exit take away -pron- thread never to return ok so now let -pron- prove that dead code here right so i well spell that code as a hexadecimal value ok so let -pron- let -pron- see if if -pron- can make these thing",
    "-pron- be just care about the first character if that first character be eighty because -pron- be tomato i want to run down here ok wait so let -pron- run this now ok clear ok and ok sure cast -pron- right ok ok so after one second great now -pron- have a return value of dead beef and if i be to look at the other one -pron- would see dead code so that last part of -pron- demo right case so return value two be ok there ok right so one thing i hope i persuade -pron- be that yeah -pron- get deadbeef here and dead code there ok so one thing i",
    "thing at the same time -pron- have get one thread over here call function printf and all that kind of stuff independently because -pron- have -pron- own stack -pron- own thread of execution so that thread have -pron- own variable call message and there be another thread with a different stack with ok so different part of memory that take a different argument an run to a different sort of execution be go to end up in p thread exit so just kind of prove that these variable be live in different place let -pron- actually print out the address of -pron- local variable here so -pron- message be at let -pron- actually look at the address of of -pron- local variable so there -pron- go message there and just to make -pron- life a little bit saner let -pron- put some new line in here as well ok so now -pron- be go to look",
    "stack be of these different different thread ok so let -pron- clear this compile -pron- ok right and -pron- will see that -pron- live in different area and if if -pron- do a bit of math -pron- could actually figure out how space apart -pron- be and first impression be be that -pron- be actually not that -pron- be not space apart that much actually so be careful just how much recursion -pron- do on these thread ok so write anything result -pron- want to say about this -pron- see how -pron- can return value and then obtain those value while np thread joint there be one common culture and let -pron- make a typo here so some common typo be the only time -pron- need to take the address of a thread id be at the beginning here so in all the case all other case -pron- need -pron- value",
    "on one of these line so for example if i do peter create here then -pron- have lose the the original id and i never set td two ok so let -pron- run that ok and now -pron- will see that -pron- have get issue here that return value be not correct because -pron- -pron- be not wait now on on a valid thread id and in fact the behavior can be bad than that -pron- can crash for example right so be very very careful if -pron- be just copy pasting this kind of code much much well to have raise and and and be very careful about about typo when -pron- copy paste code alright so -pron- have make -pron- first program that can run two thing at the same time in"
  ],
  "74e03522-c6e8-4e59-84ba-95a62ce5f3fd": [
    "hi welcome to lecture twelve ok so let -pron- get start -pron- have get a little challenge for -pron- take a look at this code and here be the challenge be -pron- want to figure out where in memory will -pron- find some memory that actually be map this see variable here ok so let -pron- say analyzes code and see what -pron- can see right so -pron- be go to have look like three new thread create and inside -pron- main method -pron- be go to have an array of these thread i ds ok so -pron- look like -pron- need to fill in some code here right so what should be right here -pron- need something to to create -pron- thread so let -pron- see if i can get -pron- a some text ok so -pron- have that be not very large how do -pron- make that large todo todo ki toy rk as more like -pron- so -pron- want to say something like p thread create and now -pron- need an address to store",
    "and td ampersand td bracket but there be no point -pron- can just say hey treat this as the tid as the starting address of the array and i want an offset of i right next -pron- need to do -pron- have any attribute and what function do -pron- want to call ok so -pron- do not have any special thing -pron- want to do with this stack today but -pron- do want to tell peter create where the other cpu should start ok so -pron- would like to start at this function call start ok so why be -pron- that -pron- do not call -pron- little recursive function directly ok so here be an idea where -pron- have already get a function that -pron- 'd like to use but remember p thread create only light to start function which take avoid parameter and return avoid parameter",
    "where -pron- be very simple wrapper this piece of gift wrapping here that do not do not care about the parameter and be only job be to actually delegate all the work to this recurse function ok so -pron- be go to call start and that be the last thing be the parameter value that be go to be pass in when -pron- do finally get round to start a new thread will go in here so that null be go to be the value of this pointer if -pron- have say something else like an address of a variable again that void pointer would have take that address ok so great -pron- be start three thread and then after that loop -pron- be go to call p thread exit and as -pron- know what do p thread exit do ? -pron- be the point of no return -pron- be the one way ticket to oblivion for -pron- poor little thread and in this case -pron- be do -pron- on the main thread which mean that -pron- will never return from this call that be the end of the line for this cpu",
    "-pron- will not exit the process at that point so instead -pron- process be go to continue until all -pron- other thread be complete ok so right what do -pron- do inside recurse three well inside because three -pron- have a little stack variable here call c o increment -pron- value and then provide the parameter value be great than one -pron- call -pron- again with parameter minus one ok so -pron- question again be can -pron- sketch in memory where there be these value of c where -pron- find -pron- ok -pron- will give -pron- ten second to think about that maybe have ago -pron- actually sketch -pron- would -pron- expect to see ok right so remember each thread have -pron- own stack",
    "there be nothing in there that -pron- care about the array for -pron- tds but -pron- be not go to find any value of c in there and then -pron- have this stack of the very first thread that -pron- create so let -pron- put this down a bit here k -pron- have get one stack frame associate with start not much inside there in theory that may be that parameter ptr if -pron- be pass that by memory but -pron- be not go to leave see there but then -pron- call -pron- recursive function so now -pron- have inside that the value of c o k so -pron- get value of c of ten there which be quickly cause go to be document to increment -pron- to eleven and -pron- do no because -pron- make -pron- recursive call so",
    "process counter for the for the pc but now -pron- have get another stack frame where -pron- have create another value of c k which be initially ten and i change that two eleven and then i make another recursive call ok so let -pron- just keep track of the parameter value when i first call -pron- -pron- property value be three that would be in memory inside -pron- all inside register cpu register and then -pron- make a call -pron- with value of two ok and finally -pron- -pron- call -pron- little recursive function with one case -pron- have get another value of c inside here which be ten and then change to eleven ok be -pron- do no that be just for one thread ok so this be kind of the big important idea that be the whole point of this example be that -pron- be look at the stack of just one thread here but in fact -pron- be go to start three",
    "thread that -pron- start and these could all be run independently so in fact -pron- be go to see the value of c nine time so -pron- see -pron- three here and -pron- know -pron- get three thread down here another three here and then lower down in memory another thread that -pron- start and -pron- be go to see the value of c a three more time so each of those us stack frame because -pron- have recursive function -pron- be right so that be a lot of c value and hopefully -pron- have get the point across that even though -pron- have just write this once inside -pron- code -pron- may see -pron- many time inside a memory but wait -pron- say i happen to know something about compiler i mean i happen to know this be real tail recursion and the compiler could have optimize this to actually just be a loop -pron- could have change value program and just go around the loop and run again so in fact i would not actually be there in memory three time well yes -pron- be correct -pron- could also say but wait the compiler can notice that see never actually use and so therefore -pron-"
  ],
  "7515c79a-82da-4b96-90bc-a6cbb5ee3e36": [
    "hello ok welcome . welcome to lecture thirteen . so in this lecture -pron- be go to start talk about thread safety and in particular -pron- be go to start look at how -pron- can use mutex lock to ensure that only one thread of the time alter -pron- datum structure . or if -pron- be modify a data structure another thread can not read -pron- . ok so let -pron- get start . let -pron- there be a little warm up have a look at some multithreaded code that -pron- have write to download two thing at the same time so this be what -pron- get so far here be -pron- main method -pron- be go to use two p thread today so -pron- can see -pron- have get two thread i ds and when i call pizza hut create -pron- be go to pass in the address of -pron- two little variable there and i be say ok p thread please create a thread for -pron- and i want to start with -pron- download function that -pron- be go to pass in a string so -pron- first new thread be go to be give this string and -pron- second youth thread thread be go to get to this this",
    "kind of look at -pron- download function here -pron- be so -pron- be go to be give a url and -pron- will start by get some heat memory ok so both -pron- thread or how many thing i make will get -pron- own heat memory here this malloc call right and then -pron- will have some code in here that -pron- be not talk about yet to actually start download those byte will get to that when -pron- start talk about tcp and other network idea great so -pron- have get -pron- a few byte here now i want to save those bite to a file so will calculate some kind of short name from that url and let -pron- -pron- can have some market ok great so i want to open a file of f open and now assume that work and assume that -pron- have manage to get some bite from -pron- download then i should i should save",
    "save -pron- heat memory and the number of byte -pron- have manage to download here some number between zero and two thousand forty eight k will talk about f right in the future but -pron- just want to save -pron- to a file but -pron- have do that be always a good thing to close resource so let -pron- say ok now -pron- be do with this file and finally let -pron- get out of here so how do i finish -pron- thread just by return from this function so may say return -pron- memory if someone else want to use -pron- or i may equivalent discord pizza at exit remember -pron- do the same thing but -pron- say that this thread do not need to run anymore ok great so if i run this -pron- have get a potential race condition can -pron- see where ok so -pron- race condition be that -pron- main method may",
    "i actually now want to wait for these thing to complete how would i do that ok so hopefully now -pron- could write this code in alright so hopefully -pron- now know there be two way to do this -pron- could call p thread joint so -pron- will dis yp for shorthand pizza join and pass in the thread i ds so -pron- be go to wait ampersand but be that correct no i do not want the address i want -pron- actual value so i actually want -pron- thread id one and do i care about the memory well right now i do if i do not want to a memory leak so i would have i would have the same memory one from the first one this be where the spanish dollar be go to go ok at least up to the first two thousand forty forty eight byte ok and if i want to wait for the other one same thing",
    "why i always wonder why that percent k thing say i do tooth p thread id two and here be the address of memory two so great -pron- have do that and now now i i can do whatever i want with that memory perhaps at some point however i should fit ok so let -pron- free memory one there -pron- go and similar for for two as well so ok so now go to a program that will wait until both do download have finish but the great thing be -pron- great -pron- be do -pron- independently now -pron- listen to text here so this should be two way for these story to complete yeah the other way would be just in -pron- main thread if that be the only thing i want this program to do be i could call p thread exit and the the word -pron- be ask -pron- main thread to not do anymore work ok so i go to say pizza exit null and",
    "ok by the way this twist -pron- create can cause create -pron- own thread right i get to question for -pron- let -pron- go look at this code at the top here suppose someone say -pron- will hold on a moment -pron- be kind of confused because be not there a race condition as well with this this malloc and the fact that -pron- have get -pron- have get a stack variable here i mean be not -pron- possible that both thread may end up use the same piece of heap memory so can -pron- see why that be not true why be -pron- that both thread will always end up with -pron- own heat memory why be not -pron- say that -pron- do not end up share this mem variable k so why why be -pron- that -pron- both get -pron- own heap ok so some thought that hopefully go three of -pron- head should be something like list ok so first of",
    "in other word -pron- be go to see two malloc course operate on the two different threat and the great news be that -pron- lock will see those two thread and will definitely give each one -pron- own memory malloc be what be call thread safe and how do -pron- do that with something -pron- be go to talk about today call mutex lock -pron- actually -pron- could do -pron- with other way but mutex lock would work if -pron- implement malloc for a real programmer be multithreade -pron- two would need mutex logs or somebody equivalent mechanism some other equivalent synchronization mechanism to ensure that even if malloc be quote exactly the same time the same nanosecond the same clock cycle that ultimately -pron- become one malloc request and another malloc request that end up with two different piece of memory secondly ok the result come back -pron- look like -pron- be store inside the same map inside the same variable but remember this be actually a",
    "get -pron- own stack so the value of memphis tag for thread one be different from the value of member thread two so no -pron- be -pron- be go to be completely independent right so this be nice embarrassingly parallel problem again where -pron- two thread do not need to interact the only synchronization -pron- have to worry about be at the very end when -pron- have to wait for both of -pron- to complete -pron- be go to get a little bit more complicated when -pron- start want the thread to share datum alright so the last thing be can -pron- fill in this why be -pron- that -pron- can call malloc from two thread and by the way be a hint do not forget when -pron- compile -pron- get to give a hint to the compiler to say alright -pron- need p thread support please load the version of the c library which include malloc that support multiple thread"
  ],
  "75f9edda-e9ef-4983-8421-b05c1beb5f32": [
    "ok so -pron- have -pron- have talk about e x t two and how -pron- can represent a small and large file efficiently so what do x t three nxd four giver so -pron- have already mention one thing which be that -pron- be expand to allow much large file but ext3 gaver be journale which be the ability to make sure that -pron- file system be always in a good state so a file system of course have to keep track of unused disk block so -pron- want to make sure that even if there be a power failure -pron- do not accidentally start rely on bad information that if -pron- idea of which disk block be available be incorrect that oh -pron- may start overwrite valid file so ext3 implement this idea call journaling which be that i can consider in time all of -pron- write to disk to be modification to -pron- disk so i can have checkpoint",
    "be in a well know state whatever be actually physically store on the disk surface be in a consistent well know state i can make some modification -pron- be write little delta in here during these time there may be inconsistent state for example -pron- have already write the the datum -pron- have make modification to -pron- directory to say there be a new file that exist here but i have not yet update say the disk block which be no long available that kind of thing so -pron- have get multiple right i need to -pron- disk and -pron- be only when i get to second checkpoint do i know that all of the change have be complete so if a power outage occur or some other revenge or something else prevent -pron- from get to the second checkpoint then when i remount the disk when i save restart -pron- machine or plug -pron- disk drive",
    "these change and revert -pron- back to a know good state so that be what e x two three give -pron- this idea of journaling e x t four as a lot more kind of feature -pron- get well performance -pron- get encryption -pron- can now start to set some new limit like -pron- want to limit the number of fast per directory but -pron- give -pron- a new problem which be what be call the delay datum right problem so let -pron- have a look at a common pattern that people use inside existing program so -pron- code may be write inside the c layer but -pron- know that ultimately that get translate into low level system call so let -pron- have a look at kind of a standard standard pattern of behavior here so let -pron- have a look at this first version where -pron- say -pron- finish edit a file",
    "do -pron- open the file and -pron- be go to overwrite -pron- so let -pron- just send the option to say -pron- want to truncate -pron- of course there be go to be some other option in here as well but this be just a sketch and then i write to -pron- file descriptor -pron- new datum and then i close -pron- so if -pron- look in time kind of ghost and stuff so there be a problem with this which be that if the power go out between say -pron- right corner make clothe and the actual datum be write to disk then tomorrow when i restart -pron- machine i would discover that hey -pron- entire file go because the only thing that be happen be i manage to truncate -pron- so many program",
    "instead of just overwrite the exist file let -pron- save all of the datum to a temporary file so will open this temporary file will write -pron- datum or close -pron- and then after that be finish will call rename so will rename the template file to the file and that should be an atomic operation so back when -pron- have xt three this be happy scenario because there would always be a valid file either the old disk or the new disk in e x t four however unfortunately there be a problem which be that due to performance improvement the actual datum for the new file be write later than the update to the directory",
    "find that or when -pron- restart this -pron- have manage to rename the file yes but the datum that -pron- think -pron- have written be not actually on the disk yet so there be still a small corner case where -pron- could lose all of the content ok so this be not unhappy situation for awhile and the fix be to actually to provide a new option for xt four where -pron- could disable delay datum right so there be a trade off in performance to say actually -pron- want to make sure that all of -pron- data content happen before -pron- update kind of directory information so that be kind of kind of cute little example of how in the quest for well performance -pron- hope -pron- expose -pron- data loss in these",
    "of why create file system that be perform and secure be difficult the last thing i will mention be here be another when -pron- start this section when -pron- just brainstorm a list of feature that -pron- would like ok let -pron- have a look at a real list of feature of a real modern filesystem and this be just kind of a high level feature list of two two file system that -pron- will probably hear about one be zfs and this support thing like raid what be raid ok will talk about raid in the future -pron- actually want to be able to work with different pool of file so -pron- want to be able to have kind of enterprising",
    "file system so -pron- have this idea of different storage pool so -pron- have introduce abstraction layer between the physical disk and the actual kind of virtual disk disk pool that -pron- actually may want to manipulate for application -pron- want to have good cache -pron- have not a thirty two bit model but now one hundred and twenty eight bit model for size that should be big enough for everybody -pron- want to implement thing like copy on write an make -pron- transactional -pron- want snapshot -pron- want clone -pron- want to be able to send these snapshot from one disk to a different disk -pron- want to be able to stripe physically -pron- be store -pron- -pron- datum across different part of a disk -pron- want to have variable block size be -pron- want to make -pron- lightweight -pron- want to be able to modify -pron- cash -pron- want even potentially different endianness for performance and of course -pron- want thing like deduplication encryption right so that be go",
    "that then export today yeah -pron- want space efficient index and packing of very small file while be able to support very large file -pron- do not want to have to make choice at format time how many i know -pron- want again -pron- want snapshot beat -pron- vest have checksum to make sure that the datum and the metadata or can still correct -pron- want different compression algorithm -pron- want paraty to be able to check that -pron- data be store correctly -pron- want to be copacetic with -pron- actual physical storage mechanism so for example -pron- should work well with ssd and have other optimization associate with physical hardware -pron- want to have incremental backup that work efficiently -pron- want to be able to kind of scrub -pron- disk for and look",
    "so on and so on and so on so that i just want to go blow -pron- mind or expand -pron- mind in term of ok this be all that cool stuff that be real modern day file system can kind of give to -pron- ok and unfortunately however beta office be still only begin to be use for real enterprise system because realize that these feature can start to bite -pron- in the corner case that -pron- have just see even with relatively simple file system like e x two three n x t four if the corner case that case for example where -pron- disk be now full or suddenly -pron- have get one disk go down and a quota change play and something else happen at the same time that people be paranoid about that the last thing i want to do be how to lose all of -pron- datum or bad have a data corruption that be not even aware of if -pron- lose all -pron- datum then ok in the bad case -pron- have last saturday of business and -pron- can hopefully restore -pron- but what be scary be to say -pron- have get a bad"
  ],
  "76432ce8-d67d-4e28-9ec9-d38527969358": [
    "ok welcome to part two so meanwhile the story continue with a new hope as year can see princess leia have now enter the story with the two droid talk about -pron- and that to -pron- -pron- look like a very fairy walkie ok alright so meanwhile let -pron- see about create a web client use what -pron- have learn so quickly review tcp client and -pron- will show -pron- another kind of trick along the way here ok so what do -pron- get -pron- have get be hint -pron- be send -pron- to zero i want to do everything where i just do by by paper and maybe i want to connect locally or maybe i want to connect to illinois ok so first of all let -pron- try let -pron- try -pron- annoy see what -pron- say if -pron- do this ok so pick an address right so how about cs ok right i remember that the port number must be in double",
    "address of -pron- hint tractor in the address of the pointer so if -pron- fail let -pron- just exit after print out to the an error ok and here be where -pron- be just go to only look at the very first entry so i make a socket with the wright family and the right socket type and then -pron- be go to connect and connect all that need be the socket file descriptor key and the address and the length of of that struct ok so let -pron- compile this then -pron- talk about the remainder of the code key right so ok will stop this i can hit the control square brace there -pron- go in -pron- back into telnet hey turn -pron- please",
    "right ok client off -pron- go wait who -pron- connect ok and what -pron- give -pron- -pron- tell -pron- to go to a different page ok so please refresh this and go to this other web page fine so -pron- 'd write a web server web client now which actually kind of understand this text and follow that link right but -pron- will see that fundamentally -pron- request be ok and -pron- give -pron- back a hundred and sixty three bite of actual content and the content gaver be a web page ok that be the mind type text slash html so let -pron- have a brief look at the remainder of the code to see how -pron- work first of all -pron- be define -pron- request here just use a macro so this time rather than just request a",
    "to behave as if i connect as if -pron- be this other address this other host name illinois to edu here be why today -pron- can have multiple hostname which resolve to the same ip address and so -pron- web server do not know which actual host that -pron- would like -pron- to pretend to be unless -pron- tell -pron- so perhaps if i tell -pron- that -pron- want to connect to behave as ww dot c s dot illinois dot -pron- -pron- may give -pron- a different response hey let -pron- just try that for a moment ok so will compile -pron- ok and will run the client again ok ok nope that be still tell -pron- to go to a different",
    "about -pron- before call d printf ok so d print f be this very strange call be not truly part of the posix standard but -pron- make -pron- life a lot easy what -pron- do be -pron- be equivalent to write in the sense that -pron- take a socket for descriptor but -pron- also give -pron- format information as well so i can do thing like percent error percent d and and start pass in additional parameter ok so if -pron- have get string and integer number do -pron- want to send to -pron- socket remember d printf can be a useful tool here rather than use right directly and then -pron- be go to start read back what the service say so a little buffer and -pron- have get -pron- little read loop in here and every time i get some bite back -pron- be go to write -pron- out to standard out -pron- be go to finish if -pron-",
    "there be no more bite for -pron- then i want to stop also if -pron- return to negative one then -pron- be not go to eat anymore so this be the simple kind of code right but -pron- be not complete -pron- be not yet handle the case that -pron- get -pron- get interrupt -pron- be also not handle the possibility of pipe break as well so if if the connection get shut down then a sigpipe signal can be generate as well so -pron- need to handle that event as well because by default sigpipe will simply shut down -pron- application ok the last thing that -pron- be not do in -pron- code be gracefully shut down tcp connection so really -pron- should be use shut down to tell the kernel and the server fail event that"
  ],
  "781c2c19-58df-4f6e-9dcf-99e51f685f66": [
    "hi ok so let -pron- jump to a different level let -pron- jump back into the c library perhaps -pron- wanna write some very portable code -pron- do not require on require to think about these low level posix interface be -pron- just want to write code that work say in window as well maybe -pron- kind of other operating system that support the c library and which be kind of everything so let -pron- have a look at how -pron- can kind of jump around in file now i big word of caution here be that the function be go to look at only work where -pron- can specify the position of file in term of along so say on a typical machine today a long may be assign value represent use four byte in other word the same as be be in today so -pron- can only really represent file up to two gigabyte so bear in mind that be a kind of big limitation of the function be go to cover today right so",
    "about to f seek and f tell right so f tale tell -pron- the count position of where i be be a stream so if -pron- have open up a file use f open i do not always want to read byte from the very beginning or maybe if -pron- be like a movie file the movie file actually would have some index information to say oh well if -pron- want to find say the audio stream go to this byte offset or if -pron- want to find the beginning of the first video stream go to this file offset or if -pron- want to find the first frame go to this other offset so there be lot of example where i need a random access to a file so if -pron- file on a disk or network disk then great i can start jump around -pron- file so that be what -pron- be go to be able to do with this fc can ftl so f tale tell -pron- -pron- current position so that be useful if -pron- want to kind of come back to where -pron- be an f seek allow -pron- to seek to a new position",
    "the trick be to know what be this this whence an what do rewind do ok so -pron- will get to rewind and a little in a little moment notice -pron- do not take any parameter but -pron- will let -pron- kind of guess what that may do in a moment ok so let -pron- talk about how this fc quirk right so -pron- be go to pass in a a filestream that c base in the fast ring if -pron- try to use this on standard io like stamp instead -pron- out instead of there -pron- be not go to work those be not seekable but -pron- will work with this regular file so -pron- pass an offset and that offset be go to be offset to something that -pron- specify in here and -pron- have get three option either be an absolute offset in meaning that -pron- be with respect to the beginning",
    "or -pron- can be an offset relative to the end of the file and notice this offset can be positive or negative so -pron- can let -pron- pick a nice bright color ok -pron- can set this little go thing to three different value bring -pron- down here -pron- be -pron- have get seek set which be there -pron- go ok i just want to specify as an absolute position sikur mean i want to specify relative to -pron- current position or seek end which mean i want to specify -pron- relative to the end of the file typically if -pron- want to use this weekend -pron- may say ok go to the very end because now i want to start immediately append to the end of the file or -pron- may use a negative value for example i want to read the last one hundred byte of the file",
    "how big the file be and then start read all of -pron- ok so let -pron- have a play with this right so -pron- will need a new file here let -pron- let -pron- not do all of that stuff start simply ok i will grab -pron- usual include here and or -pron- will need a ok get out of that so -pron- will need a new let -pron- have a file here call about touch see can tell right ok and actually -pron- be use f seek right and dell ok ok so -pron- need standard -pron- o h",
    "lobby please open -pron- data file katie datum say csv and -pron- can open -pron- for say reading and i want to reserve some space for may -pron- file so -pron- 'd like to know how big -pron- be now one way -pron- may have see already be simply to use stat stat tell -pron- all sort of great thing about a file -pron- size which file system be on the number of hard link -pron- have not talk about yet modification time and all that good stuff but let -pron- just stay within the c library today for the most portable code and figure out how big the file be so -pron- trick would be to go to the end of the file so go to the very end right so will call f seek k and which file this be -pron- file handle ok where i want to go to the",
    "end now i can tell where i be so let -pron- say hey f tell right tell on the file k so that tell -pron- -pron- current position so that also tell -pron- then the number of byte that i would need so i can do thing like if i want to have some space on the heap i could say ok malloc give -pron- that number of byte now for brevity -pron- be skip a whole load of error checking but i just want to kind of sketch out the code so great -pron- have now get a some space and now i can read everything into -pron- ok so how can i start read -pron- bite well i can use something call fread but -pron- be not go to do that today instead -pron- be go to concentrate on this this little problem in here which be if i start read -pron- be now currently the end of the",
    "ok so how can i do that well i need to use f seek again otherwise -pron- future call to read -pron- will say oh -pron- be sorry -pron- at the end of the file so let -pron- go back to the begin right so i use a position of offset zero but this time i want to use from use the absolute position so that be sick set ok yes there be other way i could have write this i could have do something like ok use a negative position from the current position that would have work as well ok or -pron- could have say ok go that negative number of byte form the end as well that would have work as well although there be one other way -pron- could do this which be rewind and rewind hark back to the day when"
  ],
  "78b152f6-1621-4792-8595-2687dfbc6aa9": [
    "ok hello welcome to lecture eleven so this be exciting moment -pron- be actually go to make -pron- program be able to do two thing at the same time or as i like to jerk out -pron- can crash twice as fast yes -pron- be go to start look at thread the ability for -pron- process be to actually make use of all those great core that be machine have the fact that the cpu today may have two call for call or even thirty two core or high mean that -pron- should be able to write program to make use of all those order that cpu power perhaps -pron- want one core for example be calculate the next physics step in -pron- simulation perhaps -pron- want another call work on the ui interaction so when the user press a button -pron- can do something about -pron- immediately perhaps another core be go to be download an update perhaps another one be go to be do a page layout lot and lot of thing -pron- should be able to at the same time and so this open up a wonderful world of concurrency and synchronization as well so as soon as -pron- start to have two thread",
    "-pron- for example -pron- do not want to -pron- do not want to update a datum structure be another thread be try to update the same data structure so with great power come great responsibility so -pron- be go to start -pron- journey today just look at how -pron- can actually do two thing at the same time so fasten -pron- seatbelt and off -pron- go right so -pron- first idea be to look at what be -pron- mean for to have the thread of execution so let -pron- have a look at about a little bit of code here where -pron- have get zoom in a bit there -pron- go where -pron- have get a little function call f and -pron- can see -pron- take a whole bunch of parameter that little bit of calculation then then return something so let -pron- think how this actually kind of actually work for machine perspective ok so now i have screw realize kay greathouse greedy line ok so what i want to think",
    "track what -pron- be do because when i make a function call i need to remember what i be do before and i also need to pass parameter into a function may need some extra space for -pron- local variable and then eventually to return and go back to what i be do before so let -pron- look at this function and think how -pron- may implement -pron- so -pron- be go to need a stack there -pron- go right so on -pron- stack -pron- have get an idea in memory will remember -pron- be go to put -pron- high up in memory because -pron- be go to have to heap in low memory right so this other stuff above here presumably for whatever call f right so -pron- be go to need some space for all these parameter so -pron- be go to need for bite for a four byte for v one for boat for v two etc right and -pron- can keep go right so -pron- have a whole load of those up to say v twelve",
    "-pron- stack now and what else could -pron- put in -pron- stack well when -pron- return -pron- have to tell the cpu what instruction to go back to in other word -pron- be go to change that program counter so -pron- better have some sort of return address so let -pron- make a note of that on this stack as well so the return address when -pron- return where should -pron- program counter be set to ok right so that be enough information to to pass in what about -pron- local variable ok well -pron- can assign some space beneath that so for example -pron- may say -pron- be go to need four byte to hold be as well right so that be all kind of basic design a couple quick comment on this first of all that in a real cpu real cpu have many register and so part of the design decision be perhaps for speed rather than save to memory all of the parameter value perhaps -pron- should just pass -pron- inside some of the",
    "so for example -pron- may say look the first three there be no point store -pron- in the stack -pron- can have well performance if -pron- just pass inside or register ok the other thing that -pron- may need be additional space so if -pron- be calculate a really complicated expression perhaps -pron- do not have enough register to keep track of all the intermediate result so there may be additional need for the stack here to hold some intermediate value ok if during that -pron- calculation not for f but for another function -pron- make another function call then what -pron- be go to do -pron- be go to extend -pron- stack and play the same game again -pron- would put -pron- parameter for the function that -pron- be call whether -pron- be printf or recursive function or something else -pron- be go to need to put that one on the stack the parameter there and return address for what -pron- be do etc etc etc so -pron- can this be just a sketch -pron- be not go",
    "quite a few of -pron- and there be actually some fun stuff as well like the red zone which give to a function a hundred and twenty eight extra byte to play with which be guarantee not to be change by anything else so well let -pron- not look at those detail but let -pron- just understand that for the currently active function there be the idea of the stack frame there -pron- go which be all the stuff that -pron- need to pass in and also the stack pointer which be something that -pron- can keep extend anasol stack be go downwards -pron- be go to get low in memory as -pron- need more space and so the total size of the stack actually represent the total number of function that be currently active and as -pron- return from thing for example if -pron- do a deeply nest recursion -pron- be",
    "course so call free in these variable when -pron- go to stoke scope be easy be actually look like that memory pool remember that remember that actually when -pron- return from the function all -pron- need to do be just change -pron- stack pointer to go back to the previous area and change a return value so that be why stack variable be so much fast to allocate and deallocate compare to variable on the heap there be so little work to be do with just change change the pc register and everything be go so great -pron- have get an idea of a thread of execution and -pron- could trace this through -pron- program so if i want to make a second thread if i want another cpu core to be run at the same time then -pron- be go to need space inside -pron- memory for another thread and so each thread then -pron- be go to get -pron- own stack right and these be inside the same memory address space but -pron- be go to be",
    "and then the last quite common be why do -pron- call -pron- the thread of execution be because literally -pron- could draw a line -pron- could thread through where -pron- cpu be currently act so if i have a function call x and inside x -pron- call say f two and inside f two there be a moment that call f the function below -pron- could trace this -pron- could say i look this be the history of -pron- cpu -pron- be common to hear -pron- be currently in this step so literally could paint a picture of -pron- current moment and of course with modern debugger -pron- can actually see that thread of execution both by single step -pron- through and actually follow -pron- and also by look through this stack trace the stack trace give -pron- a moment in time of why -pron- be come inside this current function who call -pron-"
  ],
  "78b23023-0958-47d0-90f2-41607cd135b3": [
    "ok let -pron- review this one what do -pron- think the follow code will print ok so how can -pron- analyze this right so -pron- have get a pizza -pron- create an -pron- be store somewhere the fed id 's and -pron- be go to say ok i want to thread that be go to start function and let -pron- start function be and -pron- be go to pass a void pointer the address of the string literal so the address of the capital a and address of the cadillacs to each one right so what will function be do function be then get this pointer and so -pron- be give -pron- the address of xyz so when this run and -pron- be not quite sure when -pron- will run -pron- will print out xyz now what about function a so functionally when -pron- run let -pron- see be give the address of abc ok but -pron- do not do anything instead -pron- just simply exit this thread and -pron- return an address so -pron- take the",
    "in memory abc and a zero bite if -pron- be ok and -pron- take that caster character add one in other word -pron- just calculate a pointer that now point to the b ok an -pron- return that so if and when these two thread run -pron- know that the first first one return a pointer to bc string and the second one print be xyz right what be the rest of the code to write so equal p thread join on thread a and grab the result and so in store that in there area code result ok so what what be go to be put inside this result so this line be go to wait be go to wait until -pron- be able to join p thread so that mean -pron- wait until functionary have finish at which point -pron- set this result variable to be a pointer and -pron- be",
    "-pron- print out ok so this will print bc add a new line ok right so now -pron- hopefully -pron- can conclude what this code be go to print right so if -pron- say -pron- be go to print bc or the new line then -pron- 'd be correct if -pron- say -pron- be go to print bc in a new line and xyz -pron- 'd be correct if -pron- say be go to print xyz with a new line and bc -pron- 'd be correct yes so what code be actually indeterminate fethard create make no promise about when these thread now go to stop maybe in a microsecond maybe in a millisecond time there be a very real chance that the first thread thread a could could start up exit and main thread could join on that -pron- could print out",
    "be particularly true on sale really busy system or a system that be only get one cpu core be poor threadbear -pron- have not have a cpu schedule yet and so -pron- main thread be do before -pron- -pron- have a chance to start up ok right so all those those as possible if -pron- modify -pron- code so that -pron- include p three exit on the main thread then -pron- know that that mean that because -pron- be never return from maine now -pron- program be go to run until both those thread finish so now -pron- expect both the bc to be print and the xyz to be print though -pron- can not actually say definitively what order these two thing can print -pron- can make a guess as to which one more likely but -pron- have not actually make -pron- program fully determinant in term of -pron- out but -pron- have not enforce the idea that be seed must"
  ],
  "798dfc68-4c27-4294-b5d2-be44d2f85516": [
    "hi ok so let -pron- talk about this code right so the challenge be to workout what this be go to print what be go to happen right so do i have -pron- little pin ok great ok so let -pron- do a few quick check here -pron- have get preset create and yes -pron- be write -pron- into two different variable and remember at the top here just get out of that mode -pron- have get two thread i ds tid one ti eighty two animal text look ok so let -pron- see -pron- do with this lot so peter create and -pron- be go to give -pron- the address of this good and no attribute and -pron- be go to say when -pron- start a thread please start -pron- this function and the initial value to pass in will be null right to do that twice and then let -pron- just check for no copy paste error so good tid one tid too great so -pron- be not go to get down to line",
    "check out -pron- code what do -pron- do well each thread be go to call -pron- folk each thread have -pron- own stack and -pron- own value of i so if -pron- wish -pron- could kind of paint a little picture to say here be one stack and here be another white change color exciting so so -pron- have get inside here and i inside there ok for stack waterstock to thread warning fit two right what do -pron- do when -pron- initialize -pron- to zero -pron- go round like a million time as a million and each time around -pron- increment the counter but hold on inside this loop let -pron- imagine that -pron- first thread start first and get to get a list line first ok so what be -pron- do -pron- acquire the mutex lock be the first mutex be the first thread to do so so great",
    "next on this very same thread well let -pron- imagine for a moment that thread two be start up ok so thread two get -pron- own value of -pron- and very soon -pron- will get to the same peter mutex lock all right so what do -pron- do -pron- go to grab the duck but the duck have be take the mutex lock have already be acquire so -pron- will be block right so thread too because -pron- be the second thread to try to acquire the lock will be block all right and -pron- look like -pron- be go to be wait forever because thread one be never go to release that in fact -pron- get bad than that because what destroy one do well -pron- carry on so -pron- increment the global counter and then",
    "and block forever because that mutex have already be acquire now -pron- and i know that that mutex ashley hold by thread one but -pron- have not set -pron- have not create any special kind of meeting log -pron- have not enable debug -pron- have not enable recursion so in this case thread one be go to go to sleep and will stay asleep until the day that the holder of the lock release -pron- by call unlock unfortunately -pron- and i know that that be thread one ok so -pron- have reach call deadlock where both red one and thread to have become stuck and will stay stuck forever right and notice how olympic effect as well if i get something that be wait for thread two to say finish result right to file print something out then that be go to be wait forever as well and so be quite often to see",
    "piece never complete ok so that be what -pron- think be go to happen right do -pron- agree with -pron- because -pron- be go to run -pron- now and see what really happen be -pron- ready let -pron- go so this be the same code here -pron- be and if i can compile -pron- there -pron- go wait whoop do i do i actually compile with preferred yes i good ok so now let -pron- run that ok and do -pron- crash wait forever no -pron- do not deadlock in fact -pron- finish and in fact -pron- just print out an arbitrary number why be that ok so the key thing here be that -pron- forgot to initialize -pron- mutex and so there -pron- have variable be just like a file handle -pron- do not actually refer to anything and so rp thread mutex",
    "the return value of rp tape mutex lock so if -pron- be wait really bulletproof robust code production code -pron- may do that but instead because -pron- forget -pron- do not do anything so let -pron- let -pron- fix that let -pron- go and update this key so -pron- will ok take -pron- line off key and till i use yeah let -pron- use vim ok so how can do this remember -pron- can do thing like by say ok -pron- mutex be p thread mutex initializer here -pron- go ok so compile -pron- want -pron- again and this time -pron- get stick as -pron- hope -pron- would alright so finally let -pron- fix -pron- code here let -pron- after -pron- finish modify",
    "ok and -pron- want to say unlock ok and compile -pron- where -pron- ok and finally now -pron- do produce the correct value of two million now when -pron- actually run this early when -pron- have an initialized mutex -pron- solve value switch variant and -pron- be certainly not two million so here be an example of a race condition that -pron- can easily detect and the reason of course be that ninety nine point nine percent of the time cpus be modify this data structure so -pron- go and hit that critical section many many many many time and so likelihood of two thread be inside a critical section be extremely high because that be the only thing -pron- be basically do be be keep incremente"
  ],
  "7a7590a3-2294-4d27-89ff-d625512f82e5": [
    "hi -pron- have get a challenge for -pron- let\u2018s do a code review of the follow code and see what error -pron- can spot in this and how -pron- could improve -pron- ok so get -pron- little pen out here let -pron- choose a new color or go for let -pron- go for this be kind of yeah let -pron- just do dark blue ok try that ok ok great so what can -pron- see right so ok -pron- like the fact that -pron- be test to see if the number of right number of argument have be supply and what this program be try to do be implement a simple version of cat in other word reader file an start print -pron- output to standard out so good be check that the argument be two and print out little usage message and send -pron- to standard error look good stuff however this program continue -pron- should have exit there so how should -pron- do that well after print something out here -pron- should have an exit but -pron- could also have",
    "i do not like the fact that this code do not have any brace in here because -pron- exit then would not be enclose within the condition there -pron- go so -pron- also want some brace in there ok now -pron- call f open so -pron- be use the c library to pass in an argument and -pron- already be confident that that be a non null pointer because -pron- know now that be go to be at least two item inside argument to read < br > and -pron- be say ok i just want to open this for read only great -pron- have little documentation here say maybe turn all but -pron- do not actually ever do anything with that so well code would actually test the result of f open and if -pron- return null then let -pron- not continue let -pron- print something out and stop at that point ok so now -pron- be go to start read line at a time and this be pretty cool -pron- actually go to print outline number alot like well -pron- have line number",
    "the width of the space the number of empty space to automatically add to the area for that particular variable right and -pron- be use a side effect of each time to add one to the line number where do -pron- get in these line from -pron- be use getline alright and -pron- be pass in the address of two variable that be great way to use getline where be -pron- be -pron- up here and -pron- be pass in that file handle as well ok and -pron- only escape when -pron- actually read a negative one so -pron- do not know where -pron- be go to be the end of the file or whether -pron- be go to be someone unplug the usb drive be -pron- be print -pron- out but for whatever reason get line can not continue and i like the fact that at the end here -pron- be free up the memory that line be point to so -pron- never explicitly call malloc but -pron- know that get line do call malac",
    "release the open file stream that -pron- create early alright good so what be miss -pron- will give -pron- a hint there be two error still leave in this code can -pron- see -pron- -pron- will give -pron- twenty second to see if -pron- can find -pron- be -pron- ready go time almost up ok right so the first one be that -pron- never initialize the value of -pron- capacity variable so if -pron- look back here -pron- have get a stack variable an stack variable will just take whatever bit pattern happen to be in the stack of that time maybe will be all zero bit",
    "right so what may happen then well imagine for a moment that capacity be be a non zero value then as get line start reading from standard input -pron- may believe that the pointer -pron- give to line here actually correspond to however many capacity bite be available to be write into that that location thus -pron- may actually cause get like to fail ok so what -pron- should have do be to say absolutely not there be nothing there at the current location right so -pron- should have fix that be the second error i will show -pron- that when -pron- actually run the program ok so let -pron- get start let -pron- edit r code here right -pron- want to exit at this point just to remind -pron- that",
    "to do be to say look if rf open fail so if file -pron- be a null pointer -pron- want to print something out that be useful like could not open or whatever file -pron- say for read ok and i need the file name on v one maybe -pron- should put that inside of variable would be clean code and -pron- do not continue do not pass go instead return and let -pron- have a different error code just for fun the last thing -pron- want to change be to also set -pron- capacity k two super alright so -pron- get -pron- bike red -pron- check return value and if -pron- be negative one -pron- stop ok so and -pron- want the free in here as well so free the line pointer ok alright so let -pron- compile that",
    "white so will fix that -pron- cat dot c k here -pron- be like thirteen course i could always type thirteen g just to go directly to -pron- and w to advance by one word ok there -pron- go i want to insert here so -pron- be a standard dot that right let -pron- run like apollo again great and now will run -pron- so -pron- do not say anything and -pron- princess suggest usage so now let -pron- give -pron- a filename so hey little program why do not -pron- have a look at -pron- blue and great -pron- actually print out something useful now let -pron- give -pron- a real file name -pron- cat dot c ah and -pron- work be print outline number look there nicely a justified be add an extra space here for"
  ],
  "7aab9397-22c3-4ad5-beca-764e7308dfdf": [
    "ok so let -pron- talk about why the nation part of the operating system here that be ass break now if -pron- be to look at the manpage of s break -pron- 'd read something like the follow s break increase the process be datum segment by end bite so when -pron- call s break -pron- can give -pron- a number and -pron- can say hey -pron- 'd like ten more byte please alright so what do that actually mean ok so between -pron- and -pron- as big be not actually use anymore instead -pron- be go to use some virtual memory trick of all the slide this do modern c library use some virtual memory trick that -pron- have not learn yet so s breaker be simply mechanism but -pron- will use -pron- for cs two forty one to implement a simple memory allocator ok so remember how i say that the bottom of the memory -pron- have get the text segment which be the program code and string literal and any other constant -pron- have put in here and above that -pron- have -pron- global variable which live forever alright so",
    "ok -pron- can put any datum -pron- like inside there and by default the total amount of memory allocate to this be g ask sufficient for what -pron- need ok but what about the day -pron- call malloc and say hey -pron- malloc i need another four thousand and ninety six byte please this point -pron- need need to go back to the operating system to the kernel and beg for some more van back for some more real address -pron- do not want to talk to the oblivion -pron- do not want to avoid -pron- actually need those memory address now to refer to some actual memory and that be the purpose of s break be to say yes i know -pron- have get -pron- heap possibly say zero"
  ],
  "7c19bcb8-2e74-423d-94b8-77b2b5ccb983": [
    "oh i forgot to say one little thing about erino down here which be when be -pron- set ok so here be a big idea be that -pron- set to zero when -pron- first program first start up -pron- value be change whenever there be an error with a system call and -pron- read the man page to learn more about that but -pron- be never reset back to zero so if i have a whole lot of call let -pron- say that i try to read from warm particular file descriptor and then try to write those bite somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can not actually tell -pron- whether where the error curd maybe -pron- happen early on inside -pron- read maybe -pron- happen inside -pron- right or maybe -pron- happen even early so just think of be a global variable that if an error occur -pron- change -pron-"
  ],
  "7c96669f-3968-4af3-b08d-c28d80ecf477": [
    "hi welcome to lecture twenty five . ok so let -pron- talk a little bit about networking then right so here be the big idea be that -pron- can actually kind of describe -pron- networking idea in term of different level of abstraction at the low abstraction level -pron- have get how -pron- actually represent individual bit so this be the kind of physical medium layer so -pron- may be represent use say a particular voltage or particular amount of light or perhaps a certain frequency or up down event etc right so -pron- have get to actually define how -pron- want to transmit individual bit ok above this -pron- now need to describe how -pron- assemble these bit into chunk of information so -pron- have get this datum link that maybe i want to describe start and end bit for example that kind of old modem -pron- may actually send ten bit for every kind of eight bit that -pron- actually send in order to",
    "of low level idea instead -pron- story start here with the description of the packet of how -pron- wrap thing around the network ok so -pron- have already mention ip version four -pron- be the most popular kind of route today in -pron- network but as -pron- know -pron- be actually run out or have run out of ip version four address because -pron- address be only limited to those four octet so today -pron- be start to see a rise in the new version of the ip address internet protocol addressing which be ip version six so there be other for example there be still appletalk which -pron- may find possibly in a lab full of apple machine i suppose but today most of -pron- packet be use ip four or ip six",
    "of create packet with an address define a particular protocol -pron- be use and send -pron- on -pron- way ok connect with this however be -pron- actually want to specify some actual datum and the two common way to do that then be to use tcp and udp and notice that this be at a different level so now -pron- be talk about how -pron- actually transport so when people talk about the transport level this be at the level of ok -pron- have get some datum within -pron- host and i want to get -pron- from one host to another so actually make a choice between send -pron- use tcp or udp and -pron- will talk about those in a little bit ok so usually at this point -pron- discussion about ok how -pron- networking should send byte will usually finish however actually there be more stuff to discuss above this",
    "for example i may login use ssh and i can continue to send byte make great communication happen as part of that log in authenticate session be -pron- do no well ok -pron- just type a character but how be that character represent -pron- be so use to think about the fact that -pron- be write in say ascii or utf eight that do not actually have to be the only way that -pron- can represent -pron- datum so for example perhaps -pron- want to store and send picture use a jpeg format or perhaps -pron- want to send a text use this ebcdic format which be a different way to represent character or perhaps -pron- want to use png so perhaps -pron- want to do movie etc ok be -pron- do no at the top most level be the idea of the application",
    "api -pron- get to define how -pron- want to access remote file and resource and describe thing like directory service as well so this top most level this be where -pron- start talk about ok i want to be able to access web resource use http which -pron- be a protocol that grow out of a simple file transfer protocol and another well know protocol here be smtp which be a way for -pron- to send email simple mail transfer protocol so smtp allow -pron- to send very simple message or to send email with attachment for example ok so these different level of abstraction allow -pron- to work independently so for example tomorrow i may decide that as -pron- want to access a web page not over tcp but over udp of course if i do that then"
  ],
  "7d923e20-7168-4cea-b7dd-1ffabc4e892c": [
    "ok right so -pron- want to send stuff to a file do -pron- ok well remember that -pron- be actually write this and -pron- have define -pron- what this file structure look like this be a reason -pron- be do this be to try to model how the c library work and to think about the kind of buffering that -pron- may do ok so -pron- can look at what effort be suppose to do be suppose to be put s which mean send all of these byte plus a newline and rather than just send -pron- to standard out -pron- want to send -pron- to this particular file so once -pron- have get this work -pron- will be easy for -pron- to implement put ( ) because -pron- can just implement that in term of call fput ( ) but will tell -pron- to use standard up first file ok so what be -pron- plan by default -pron- do not want to call right instead remember -pron- be try to buffer or this information so let -pron- just copy the byte to the",
    "-pron- believe about space and -pron- will see why in a moment -pron- have already get some bike inside the buffer so here be the buffer and -pron- now want to take this string and append -pron- to the end of the byte that -pron- be currently use so how about the follow let -pron- use mem copy to copy -pron- bite into the buffer so what do -pron- need here let -pron- first of all figure out how many byte -pron- actually have case so -pron- will actually find the length of the string let -pron- just do this once so let -pron- take a stroll in of the string -pron- have give -pron- -pron- well not give -pron- a null pointer otherwise that will crash ok and now let -pron- copy some bite into the right spot when i wanna copy -pron- right at the very beginning the buffer because -pron- have already use size of -pron- so -pron-",
    "now look up mem copy to find out how to use -pron- ok so ok clear and -pron- will do man mem copy ok man and copy let -pron- try that right and -pron- see -pron- take this destination first alright great ok so back to -pron- code and if i rely on the c compiler i can just there for provide -pron- buffer be either a void pointer or character pointer i just add these two together to calculate the correct address of where -pron- where -pron- want to write to ok so let -pron- do that right be this due to do can i know i can not ok as hope i could just draw square round this stuff to get rid of -pron- ok",
    "so -pron- want the following -pron- want to copy into ok the buffer but not necessarily the beginning of the buffer because i have already use some of the byte so let -pron- add the size -pron- can use that as an offset and what be i try to add ok so -pron- -pron- need the source so that be go to be stre ok and how many byte well i want to copy everything but not the zero bite so that mean -pron- be just go to copy len byte k hi all -pron- do no -pron- need to also put a new line in -pron- as well so where should that go well let -pron- do -pron- buffer",
    "into the correct spot ok so i could write -pron- size plus the length of -pron- string ok and i want to write a in new line in there ok and lastly let -pron- update -pron- buffer so that ok so that future call to write stuff out will actually be go to the right spot in -pron- buffer so the size i now want to add to that len plus one ok right so what do -pron- think about that be -pron- always go",
    "problem here so first of all -pron- have assume that the string be not go to generate any kind of buffer overflow error so for example suppose -pron- already exhaust most of the buffer -pron- have not even check today the capacity of the buffer and so -pron- be just happy call mem copy and if -pron- be exhausted say there be four thousand and ninety six byte -pron- be go to start write arbitrarily into memory ok so what can -pron- do about this well one attempt may be to do the following so -pron- could say let -pron- once -pron- have calculate the length so can i move all this stuff up new let -pron- go back there -pron- go once -pron- have -pron- have calculate the length be go to exhaust -pron- buffer so okay",
    "ok the buffer be -pron- call capacity right so ok let -pron- take a look at the capacity and see if -pron- have exhaust that so if the capacity be less than the length of the string then do not even bother try to copy -pron- into the buffer instead let -pron- just write out the whole thing so -pron- could -pron- could do that so -pron- could write call inside here to say alright right out to the string directly to the to the far descriptor but what do -pron- think about that what kind of error be -pron- run into that ok so the problem with that approach be that -pron- still get stuff inside the buffer that -pron- have not yet actually flush out",
    "ok so actually turn out this be not quite as easy as -pron- first think instead -pron- need to do thing like flush the current buffer and -pron- can only add to -pron- if -pron- be sure that there be enough space so this actually cade of add to the buffer be the exceptional case where there be enough space and -pron- be the string -pron- be less than the complete size of the capacity of -pron- buffer here ok so instead -pron- want to do thing like before attempt to write -pron- want to do thing like ok let -pron- flush flush this file and the active call flush will flush",
    "when do -pron- need to do that ok so couple of idea here one be if the string -pron- have give -pron- anyways large the capacity the other one be that in try to add this string -pron- have exhaust the size of -pron- buffer anyway so the other possibility would be if the length plus the size in other word how big -pron- current buffer be exceed the capacity so be -pron- length plus the size plus -pron- have get an extra character because i get that new line as well if that be great than capacity then let -pron- give up try to bar for that content let -pron- actually now flush what be in a car in there and directly right what",
    "those be true -pron- actually continue to use the buffer also notice that -pron- have have to do a mem copy here so that be the performance cost of of buffering which be now -pron- be copy byte into memory so if -pron- be so -pron- have trade one performance hickup for another so yes -pron- can improve performance a little bit because -pron- be not make lot and lot of lot of call to the system for every little character in every little string that -pron- be try to send out but the expense but the way -pron- pay for -pron- be to now copy thing into a single buffer so this be have some performance improvement but i hope -pron- can see that for really specialized case this distill have some performance penalty and so -pron- could still do even well than that if -pron- want to take control"
  ],
  "7dd4705a-6995-4f39-a32c-12a1174bd04e": [
    "hi take a look at the follow code -pron- get quite a few thing go on first of all -pron- be actually use fork and remember what fork do focus hey take this current process and duplicate for kit and now that -pron- have get the original parent process and a child process and these two process look very similar to one another -pron- have the same variable setup -pron- have -pron- have some stack memory -pron- have heap memory -pron- have all of the program code but there be one little difference one easy way to tell whether -pron- be in the parent on the child and the answer to that be what be -pron- value of fork return so one way to think about this be that -pron- have immediately step into a mirror world now there be -pron- and the new -pron- and -pron- 'd like to know whether -pron- be the actually the original -pron- or the new -pron- so let -pron- put that result into a variable and in fact what -pron- give -pron- be",
    "the parent the original process will see if -pron- be the new copy if -pron- be that doppelganger then actually what -pron- get back here be zero so that be the easy way to find out if -pron- be the original or the dastardly clone ok if -pron- be the child process ok so let -pron- print out there be actually print out the result of fork and -pron- actually see that so now -pron- be go to actually have multiple process run both compete to print thing to -pron- little terminal so actually expect to see that line of print twice just like if -pron- be run gcc and i be run gcc hey both of -pron- be go to produce output the difference of course be that now both those process be connect to -pron- terminal so -pron- be go to see a lot of confuse output from two process",
    "go to call rand which be go to generate some kind of random number and i only care about the low four bit today so -pron- be go to bitwise and -pron- with this hexadecimal number which be fifteen which be in binary one one one one and so as a result of call that ampersand that bitwise and -pron- be just go to end up with a value between zero and fifteen so the last thing that -pron- process -pron- two process be go to do in dependently be to print that out -pron- be go to print out -pron- value of -pron- but -pron- be also go to print out -pron- current process id so i just want to show -pron- that every process have a unique process process id so now -pron- can see which output be come from which process because -pron- have actually ask each process to show -pron- processor",
    "do not know which one be actually go to appear first completely up to the scheduler as to how much cpu time each of -pron- two process go to get in on this particular machine i actually have a cpu with more than one core so i can truly run these two process at the same time -pron- be pretty cool ok the last thing to notice here -pron- have get a little line up here that be go to seed the random number generator because -pron- little random number generator be not actually generate true random number instead -pron- be a mathematical function that generate a sequence that look approximately random satisfie some basic statistic property that -pron- expect a random number to satisfy and -pron- be just go to seed -pron- base on the current time ok so let -pron- run this -pron- be call and i kind of broken gcc broken and off -pron- go what do -pron- see right so -pron- have",
    "-pron- win process fork return a number which be the process number of the child and in fact -pron- expect to see that number twice because here -pron- be here be the child talk the child say this be -pron- process id and -pron- be three and in fact when the parent call when the parent evaluate random number -pron- also generate three so let -pron- -pron- be say into this right so -pron- could for example print out a whole load of random number right so let -pron- that key and print out kind of two random number case so will call this r two ok and the other kind of fun thing will do here be that if -pron-",
    "ok and i be a child i i want the child to wait around a bit so let -pron- just ask the child to sleep for say five second ok so only the child be go to execute that code the parent as -pron- be execute this code will have a different value for this variable and an important idea here be just like if -pron- be run gcc and i want to see if -pron- want a cat and -pron- be run cat or ls or whatever right the variable inside that process be not share so that be what be go on here immediately after that fork be two process go to have different destiny -pron- have originally at that moment of creation of that create that that child that child stack and heap look just like the parent stack and heap but go forward -pron- be no long connect -pron- have clone -pron- have duplicate everything",
    "ok so will compile -pron- and run -pron- ok so -pron- fork return two five five and the so the case where be -pron- right so -pron- fault value be two five four nine nine so -pron- know that the parent be speak at this point -pron- be see a non zero value return from from for cat that positive integer -pron- now know that process idea pad so meanwhile the parent continue right so here be the parrot talk and say -pron- have get a two and a nine and if the parent and the child be play poker at this point i really sure that the",
    "be go to say and if outlook here as a child talk now so here be a child with a different with the process id number that -pron- expect say -pron- number be two and a nine yes so so the parent can actually predict what the child be go to do here even though -pron- be just call random random function because how do that random number function work yes be actually a pseudorandom number and in order to generate the next number inside -pron- process memory there be a state several bit sixty four bit maybe more that -pron- use to multiply and shift in order to generate the next random number and -pron- process be start with the same seed and so -pron- change -pron- still -pron- have independent memory -pron- run the same set of step aside apparent that the child be also"
  ],
  "7dec3665-e1bb-4bf2-a909-d43c2937b24b": [
    "ok right let -pron- remind -pron- about some http which be the bedrock of how -pron- display web page and other item on -pron- web today so why be -pron- that web page be fast use http one versus one point oh so at this point -pron- should remember that one point oh be a very simple protocol and -pron- do not support a key feature which be keep alive mean that if -pron- want a second resource -pron- be go to have to open a new tcp connection which as -pron- know take time because before -pron- can send anything with tcp first of all -pron- send over a packet with -pron- synchronization number then the server send back to the client and acknowledgement of that plus -pron- own synchronization number so -pron- have get this latency lag of backward back and forth before -pron- can even start make -pron- request so -pron- be",
    "something now ok but -pron- have already waste say ten millisecond in set up this connection and -pron- need to do this for every new possible resource that -pron- want to load on a page versus if -pron- can negotiate keep alive then after -pron- finish get one resource -pron- can then say oh and another thing i would like some dessert thank -pron- very much waiter and i will after -pron- bring -pron- back -pron- dessert i may ask for something else as well ok so that be kind of a key idea about why one point one simple protocol change actually -pron- see a very large increase in the performance of -pron- web right what about a more modern protocol like version two point oh can -pron- think of some advantage here versus http one point one there be several let -pron- see",
    "-pron- be a binary protocol which mean that few network bite be require to be send in order to transmit what -pron- want -pron- have get header compression remember that http be quite verbose -pron- send thing like ok the the name of the web browser in -pron- version the kind of -pron- tight be prepare to accept whole lot of other stuff like if -pron- have cash -pron- some tag value associate with -pron- local cache -pron- have get a lot of information -pron- want to send up to say kb stuff or more if -pron- get lot large cookie -pron- would be great if -pron- could be significantly reduce that down so that -pron- take less time to transfer that information ok but what else -pron- get here be -pron- favorite one -pron- have get multiplexe mean that i can make several request so -pron- 'd like this cat picture that picture that dog picture etc",
    "in bring in different part of -pron- food all over the same tcp connection so i can ask for multiple thing at the same time and -pron- can be deliver piece meal as -pron- ask the kitchen start to prepare -pron- ok what do -pron- miss oh yes and lastly server push that hey the chef in the kitchen really would like -pron- to have this desert -pron- do not even know that -pron- be go to choose chocolate pudde cake yet or ice cream or whatever that server just have a strong suspicion that -pron- be really go to need this resource so -pron- can actually help -pron- create -pron- web page fast because when -pron- do suddenly decide that oh yeah i really do need that cat jpeg -pron- have already get -pron- locally right so -pron- be just kind",
    "call head of line blocking and the idea here be remember how tcp work that the kernel will reshuffle datum so that if there be something miss ok -pron- have receive this stuff so far but right now this piece of datum be miss -pron- have get these piece the kernel will not release the future datum to -pron- be read call will block in other word until the day that finally this miss datum have arrive and that may take awhile so versus what i do -pron- would have happen be that hey be those other resource that javascript file -pron- be try to download on all the stuff that be not actually connect with these packet -pron- would be great if -pron- could have give that already to the client and then -pron- web browser would have be fast"
  ],
  "7fdcfa9d-8d8a-4615-9be7-3c2492321893": [
    "ok so -pron- game be to determine be that deadlock here right so let -pron- sketch this out -pron- will start with some black just to put down -pron- process be so -pron- have get process one process to process three and this time a process four be well ok right process one get a then be right so -pron- get a an b lucky process one and -pron- can see that there be no more request for process once so in fact process one will be able to complete -pron- do not need to wait for anything else so i could keep those there but -pron- can agree that at some point those be go to disappear but right now -pron- have not actually formally say that -pron- have be release so -pron- will leave those there for now and then process to request see and then be right so purse two request see",
    "have see whoop -pron- hour away go back there -pron- go like -pron- go push this to -pron- get to see today but -pron- be not go to give -pron- be so let -pron- do that in a different color because that be already take so alright process two oh i want i want to read out just so -pron- can kind of keep track of there -pron- go here -pron- go process two -pron- be wait for that ok and now what about process three person three -pron- request be as well oh my goodness be or popular today wait so will draw that in right process three there -pron- go -pron- be wait for that as well and process for -pron- request see ok so -pron- want see k and -pron- will be request be in the future but",
    "right so be there deadlock well process one can continue as -pron- mention that before so at some point in the future process one can release those resource ok so what happen next so now process two -pron- set -pron- lock be go to be so the access to this be go to be fair and so process two -pron- ask first ok so the so now will swap that around and -pron- get to eat the chocolate ok there -pron- go alright so now process two have everything -pron- need ok so ok so now process two at some point can continue -pron- not wait for anything so now finally -pron- can see that process three will get be ok so that will be assign that way ok and finally that will end up and then finally"
  ],
  "802abd70-0cc9-49a1-8916-5ff1c0a98738": [
    "ok right so let -pron- have a look at what version that do not work too well so here -pron- go let -pron- run -pron- ah i look -pron- almost work be kind of ninety nine percent of the way there most of the line be render correctly unfortunately get a few missing one but -pron- never mind let -pron- just run -pron- again and maybe eventually -pron- may get something that kind of work k let -pron- try say two thousand do that help ah have make -pron- bad ok so let -pron- see what happen to -pron- code what what cause -pron- alible program bug right so let -pron- go actually do a code review ok so right so here -pron- go right this probably should cause some concern here right that -pron- be look at line that say do not delete this line and",
    "machine that do not do not fill -pron- with a sense of confidence quite the opposite i can sense of dread now how do this code possibly work that be just try delete that line ok so -pron- be go to just comment -pron- out right and will try compile this ok see how -pron- work now ok -pron- still look pretty bad ok what about if i delete this line as well ah that be even worse ok so -pron- look like somehow for some reason these delay and there be print f actually useful for let -pron- despairing printf back see what be happen ok right segmentation fault ask no good oh this time -pron- get oh dear what be awful program clearly there be something",
    "be -pron- that this line whether -pron- include print out or not seem to be change -pron- program whether add this delay or not since -pron- be change -pron- program i think -pron- be time to delve into see exactly what this program be do ok so let -pron- see what -pron- do right -pron- initialize the gui will check out in a little bit -pron- call kelak and -pron- seem to be get enough memory to hold air these thirty two bit integer and -pron- also go to have another way on the heap for all of -pron- threat that -pron- be go to have a height number of thread and each one be size of p thread t ok so again not a point -pron- look good so far right now i get to comment could offer alright this be give -pron- a suspicion that -pron- may have have a steak inside here somewhere that be how look so -pron- call patty at create -pron- have pas in the address",
    "the address of y all right so what be the address of why well why be -pron- variable here from -pron- for loop ok so why could that be a problem ok because -pron- just call pizza create and then -pron- run through the same code that -pron- see before -pron- be just go to go through and calculate a whole row why do -pron- think -pron- be run into problem with this code -pron- see segfault -pron- have see miss line but -pron- have also see line which seem to work correctly so what this be a great example of be a race condition r code behavior depend upon lock basically do -pron- feel lucky that -pron- have a race between different thread",
    "-pron- be give -pron- the address of why so -pron- be not read the actual value of white instead -pron- be say hey here be the address or something -pron- may need and if -pron- go and look at calculator here be what -pron- do -pron- say thank -pron- for that void pointer but i do not want to avoid point i know there be an integer that location so let -pron- cast that argument as an end pointer and the only reason i need to write -pron- like this be just because peter create create require -pron- to have a void pointer argument and avoid point of return value so great now -pron- have get an integer value at that site interpoint sure i know there be never there so let -pron- read -pron- so that be the purpose of line ninety eight -pron- have get -pron- that y value from the for loop and then i go ahead and calculate all -pron- pixel so what do -pron- expect to find that memory location ok and here be the problem that now -pron- be talk about multithreaded program so -pron- have get to main thread",
    "be create a thread be do a test -pron- be call sdr delay so this value of y be go to change as fast as -pron- possibly can ok meanwhile -pron- be go to ask to create a new thread so that new thread will read that memory location read the value of y as soon as -pron- can but -pron- do not know when that be go to be so this all this print s stuff and sdl delay the reason that appear to make -pron- program work correctly be simply because -pron- be slow down this loop so that be a great chance that when the thread create when the thread start -pron- would actually see the intend value of y however -pron- be not certain and in practice -pron- be go to see thing like two thread see the same value of why because of when the increment happen because when the value of y change and as -pron- see uh there be no guarantee that that thread",
    "get a completely arbitrary value of y here ok so this kind of pull in print statement and notice that -pron- code work or do not work because of the side effect and -pron- side effect here be the time -pron- take to do this print be very common experience when -pron- be try to debug incorrectly write multithreade code or can count code even code -pron- have multiple process even code which run on two different machine where the fact that -pron- appear to work sometimes be purely down to luck so kind of great example of race condition and soon -pron- be go to start talk about how -pron- can prevent these how -pron- can actually get a handle on make sure that thing happen in the order that -pron- want -pron- to but for now -pron- have see pthread_create , -pron- have see pthread_join and this be a great introduction to incorrect program like with that i wish -pron- luck"
  ],
  "8078f738-b531-4bab-83c7-0facaf3ee1bf": [
    "ok hi so let -pron- see what happen if -pron- have a hundred thread right so how can -pron- implement this well this be how -pron- have how -pron- have attack this right i need an array to capture all of those thread i ds -pron- be go to hundred of -pron- today and so when i call pthread_create ( ) i need to pass in a pointer to that memory so i could write something like i need the address of -pron- array and i take the i th element but i can simplify that to just the pointer arithmetic on the array name and that give -pron- the address ten of the element inside that work so great and then for each thread -pron- be go to ask -pron- to run little function call shout and -pron- be go to pass to shout when -pron- start when -pron- finally get a cpu core to run -pron- be go to pass in the follow memory address so what be that well -pron- be a global variable",
    "be run inside one process and -pron- can see memory outside of -pron- own stack space ok so here be that shout function -pron- be go to pass in as something on the stack of the thread this pointer and -pron- do something with that so for example i could print -pron- out as a pointer so arg be now hold a memory address so let -pron- print out that memory address or flush -pron- and what exit wait and then when i want to wait for all -pron- fear to finish i could just call pizza at exit on -pron- main bird instead less use pizza joint here and comment that well be careful because in the other function i actually want the thread id not a pointer to that memory -pron- only need to do that before because -pron- be go to change -pron- now then i actually want to refer to to an entry inside murray and which be over here",
    "there -pron- go but instead i prefer the kind of use the array syntax instead and -pron- want to find out what the thread exit with so here be the address of a variable that will take that ok between -pron- and -pron- -pron- know that -pron- be go to be exit with the value of null so -pron- be just go to write not into that that variable there alright so let -pron- run this and see what happen ok so i need to compile -pron- k wait let -pron- turn -pron- off right so gcc one hundred and do not forget to say oh by the way compiler -pron- be use p thread great -pron- work less -pron- run -pron- all right and -pron- produce lot and lot of output wait a moment today really do -pron- really get a hundred",
    "up may put -pron- know what -pron- would be helpful i save -pron- yes always a good idea so now let -pron- try -pron- ok alright that look a lot more like a hundred output will check in a moment notice that yeah -pron- be happily print out the address of -pron- ray and the address there look kind of reasonable that -pron- look like a low number that be go to be part of -pron- global variable so how can i check that really do app print out other thing what do i pipe the output into a little program call wc wc will tell -pron- the number of line the number of word and the number of character as well and if i wish i could actually just say ok only tell -pron- about the number of line that -pron- see so yeah great -pron- have confirm that -pron- manage to make a hundred thread and each one of -pron- be responsible for print out one thing now -pron- may have guess that -pron- laptop here do not actually have a hundred core so the operating system cheat virtually -pron- can pretend that -pron- have a hundred different cpus running but",
    "or three or four cpus i get inside this machine actually go to be ask to keep change from one thread to another thread so when a thread make do something which block for example -pron- cause sleep for example -pron- cause read or write and those operation may take a while because there be no datum get ready or be unavailable to send the datum yet then will assign the cpu to something else -pron- could think of this like a cook in the kitchen that be always busy work on different order and at some point one order well -pron- have get to wait for the fish to fry or the pea to boil so -pron- will send -pron- cook off to work on a different order and when at some point that cook have to kind of come back of course -pron- cpu core will keep switch about every millisecond so from human perception point of view -pron- may believe"
  ],
  "8258d360-0ce7-4e09-93ba-dbde1dba4781": [
    "ok so -pron- be go to start head towards networking and for that -pron- really do not need to understand how to work with error and how to print out error and how to discover when thing do not work so network be tricky because with thing do not work where -pron- actually want to understand what -pron- problem with the client or the server be there a problem in set up the connection and so deal with error become quite important area can be because of code area -pron- have make but -pron- also can be say because the client have finish the connection before the server have finish say everything -pron- want to say unvoice versa ok so let -pron- start talk about error that right so -pron- want to put out some error ok so here be first way -pron- have probably see thing like ok i can use p error to print an error to standard error and i can include piece of text here which get include along with",
    "a way to get just a simple string and this be -pron- -pron- can say store error and i can ask for a the string associate with a particular error number like one two three four five etc etc etc ok but perhaps -pron- want to know what be actually just go wrong with -pron- program and so if -pron- want to find out the air associate with a recent system call guess what there be something call ever know urdu there -pron- go so i could say please tell -pron- the these string associate with the most recent system ever ok so in fact -pron- could re implement pm so if -pron- need to write kind of piero -pron- -pron- may do something like the following -pron- may say ok so peer error i just want to print out to standard error cater to do and now will have",
    "ok and then another string ok and then -pron- will need whatever use say so -pron- little message there follow by stewart ever of ever so ever know be this little global variable that -pron- never know that -pron- have -pron- be be there all along -pron- be be inside -pron- c program -pron- will be inside -pron- python and -pron- node program ok be just a standard part of the process so something like that maybe -pron- will put in new line there as well but as -pron- implementation of pierre right so there be a one big surprising gotcher however with string ever and if the follow if -pron- actually",
    "ok so video surprise right here -pron- be use this low function inside here and -pron- think -pron- could do everything -pron- want inside -pron- thread -pron- be not thread safe key and if -pron- instead -pron- actually want to write code that be two s dave then ok -pron- actually should use something else which be stewart ever underscore r and then -pron- pass in some integer like eleanor ok so the reason for that be that stre air -pron- may return just a hardcode string literal safe error number one two three four five six etc but if -pron- pass an arbitrary large number -pron- actually construct the string -pron- and how -pron- may do that well -pron- could",
    "a pointer so instead internally have some static static memory that -pron- reuse from one call to the next ok so that be -pron- problem that if -pron- be go to use this in multiple thread i could have one call to store arribe be enter by another call to stuart error on a different thread an oh dear both of -pron- be now try to use the same piece of static memory so one hour be go to override the other one right so this kind of common with some of the early call inside posix that -pron- be not build with with thread in mind and so threat support the ability to work with multiple thread have kind of be reverse engineer back into some of these api call so stroit error -pron-",
    "the integer or no instead -pron- also pass in a pointer to -pron- memory that -pron- would like -pron- to use so here be some memory and typically as well -pron- impasse in how much many as well so -pron- could pull up a terminal window to see the exact order of these thing but what i want -pron- to learn yeah there be quite a few of these kind of underscore be variation or variant of exist course and -pron- be add later to posix in order to make -pron- more thread safe now the last thing -pron- may have be think about when i be talk about this be hold on a moment what about earner what be this other thing and win -pron- set ok so oh no be set by most system call that can fail",
    "go wrong so if -pron- call right and -pron- do not work then oh dear -pron- will return negative one but -pron- want to find out more about what go wrong so that information be encode inside this global variable but wait a moment if -pron- have get a multithreade program surely -pron- be go to be really hard to figure out which particular thread on which system call cause evernote change yes -pron- be correct and now -pron- be force to tell -pron- that actually ok that ever know actually for multithreade program be a very special variably behave like a global variable but actually -pron- be three use thread local storage which mean that each thread get -pron- own copy thread local storage each thread get -pron- own copy of error -pron- still behave like a global variable but the value"
  ],
  "82687def-c053-4955-8eef-1d80e8bf31da": [
    "ok so -pron- be go to start head towards networking and for that -pron- really do not need to understand how to work with error and how to print out error and how to discover when thing do not work so network be tricky because with thing do not work where -pron- actually want to understand what -pron- problem with the client or the server be there a problem in set up the connection and so deal with error become quite important area can be because of code area -pron- have make but -pron- also can be say because the client have finish the connection before the server have finish say everything -pron- want to say unvoice versa ok so let -pron- start talk about error that right so -pron- want to put out some error ok so here be first way -pron- have probably see thing like ok i can use p error to print an error to standard error and i can include piece of text here which get include along with",
    "a way to get just a simple string and this be -pron- -pron- can say store error and i can ask for a the string associate with a particular error number like one two three four five etc etc etc ok but perhaps -pron- want to know what be actually just go wrong with -pron- program and so if -pron- want to find out the air associate with a recent system call guess what there be something call ever know urdu there -pron- go so i could say please tell -pron- the these string associate with the most recent system ever ok so in fact -pron- could re implement pm so if -pron- need to write kind of piero -pron- -pron- may do something like the following -pron- may say ok so peer error i just want to print out to standard error cater to do and now will have",
    "ok and then another string ok and then -pron- will need whatever use say so -pron- little message there follow by stewart ever of ever so ever know be this little global variable that -pron- never know that -pron- have -pron- be be there all along -pron- be be inside -pron- c program -pron- will be inside -pron- python and -pron- node program ok be just a standard part of the process so something like that maybe -pron- will put in new line there as well but as -pron- implementation of pierre right so there be a one big surprising gotcher however with string ever and if the follow if -pron- actually",
    "ok so video surprise right here -pron- be use this low function inside here and -pron- think -pron- could do everything -pron- want inside -pron- thread -pron- be not thread safe key and if -pron- instead -pron- actually want to write code that be two s dave then ok -pron- actually should use something else which be stewart ever underscore r and then -pron- pass in some integer like eleanor ok so the reason for that be that stre air -pron- may return just a hardcode string literal safe error number one two three four five six etc but if -pron- pass an arbitrary large number -pron- actually construct the string -pron- and how -pron- may do that well -pron- could",
    "a pointer so instead internally have some static static memory that -pron- reuse from one call to the next ok so that be -pron- problem that if -pron- be go to use this in multiple thread i could have one call to store arribe be enter by another call to stuart error on a different thread an oh dear both of -pron- be now try to use the same piece of static memory so one hour be go to override the other one right so this kind of common with some of the early call inside posix that -pron- be not build with with thread in mind and so threat support the ability to work with multiple thread have kind of be reverse engineer back into some of these api call so stroit error -pron-",
    "the integer or no instead -pron- also pass in a pointer to -pron- memory that -pron- would like -pron- to use so here be some memory and typically as well -pron- impasse in how much many as well so -pron- could pull up a terminal window to see the exact order of these thing but what i want -pron- to learn yeah there be quite a few of these kind of underscore be variation or variant of exist course and -pron- be add later to posix in order to make -pron- more thread safe now the last thing -pron- may have be think about when i be talk about this be hold on a moment what about earner what be this other thing and win -pron- set ok so oh no be set by most system call that can fail",
    "go wrong so if -pron- call right and -pron- do not work then oh dear -pron- will return negative one but -pron- want to find out more about what go wrong so that information be encode inside this global variable but wait a moment if -pron- have get a multithreade program surely -pron- be go to be really hard to figure out which particular thread on which system call cause evernote change yes -pron- be correct and now -pron- be force to tell -pron- that actually ok that ever know actually for multithreade program be a very special variably behave like a global variable but actually -pron- be three use thread local storage which mean that each thread get -pron- own copy thread local storage each thread get -pron- own copy of error -pron- still behave like a global variable but the value"
  ],
  "82fd59dc-808f-40f4-a0bc-0ccf6eb76e78": [
    "right ok so here be some good news the pthread actually already implement barrier for -pron- so this be how a barrier work -pron- be very very simple -pron- will not necessarily use -pron- inside cs two forty one because inside two forty one -pron- be go to ask -pron- to actually write -pron- own barrier but outside of this class now -pron- actually understand the ground rule and how these actually work next time -pron- need to write some code that need a barrier hey just turn to pthread and -pron- have already get one out of the box ok so what do -pron- got when -pron- create a barrier then -pron- call pthread barrier initiate -pron- pass in one of these type and -pron- say how many thread need to arrive at this barrier before -pron- let -pron- carry on so for example that let -pron- say that -pron- be go to say write five thread need to arrive at this barrier and when -pron- finish there be also destroy method as usual so how do -pron-",
    "call pthread barrier wait and at that point -pron- thread will block and -pron- be go to block until in this case for other thread also call p thread barrier wait on the same object on the same barrier right so now i can start holota thread work on -pron- matrix download different file and as each one continue finish -pron- little task -pron- can call preferred barrier and will know that -pron- will get stick in there like a little holding pen and will only continue when -pron- all arrive at that point so if -pron- like be like a little kind of party to say ok will get this party start only when all of -pron- friend have actually arrive \" at the barrier and the nice thing about pthread barrier be be that -pron- be reusable so after the fifth thread have call barrier wait -pron- will get release and",
    "-pron- will get stick until -pron- four other thread for other friend and colleague have also call p thread barrier wait wait there be one little kind of fun thing by the way about pthread barrier be that one thread will get a magic value here call p thread serial thread and that be useful if -pron- want to do if -pron- want one thread to do something special all of the other thread after return from p third barrier wait just get a value of o ok so if -pron- want to annotate one particular thread to do some special just take that return value see if -pron- return this and -pron- can then say ok special thread -pron- can go off and also download this other thing or perhaps save something so for example be quite common that -pron- may have multiple calculation thread and then after -pron- have all finish one thread -pron- have"
  ],
  "83887d4e-f5b2-4f94-9e3f-4d3c19d88dd9": [
    "hi so what be the difference between a process anna thread oh answer many thing so the first of all let -pron- think about the performance of create a process versus create a thread a thread be a very lightweight object -pron- can create one in microsecond that -pron- only take a few thousand instruction or so to create a thread and then ask -pron- to be schedule to be run so a thread be much light to create compare to process a process -pron- have get to clone all the memory -pron- have get to prepare for a much large thing right and realize -pron- self -pron- the process have many item -pron- have get -pron- have get security item to talk about -pron- have get signal handle to talk about so a process that be much heavy way object the other thing that -pron- have see be that a thread can finish but the process -pron- can continue so let -pron- talk about",
    "a process -pron- have see example where if i call exit or if i return from main then the whole process be do and of course if the process disappear all of the cpu thread be go to disappear as well because now -pron- do not have any memory for -pron- to run on versus a thread -pron- see how -pron- create -pron- and then destroy -pron- through either p thread exit or by return from the function -pron- will just say the starting start function from return from the start function where basically where -pron- originate -pron- so once -pron- stack have go to zero or -pron- be -pron- be do ok the -pron- can have many many thread inside one process"
  ],
  "838e7f44-0162-44a2-bc9a-9896d00d13e1": [
    "ok so -pron- design the little page table and let -pron- just think about how big -pron- be hopefully -pron- be go to be a bit small than that gigabyte version that -pron- design in the beginning so let -pron- do some calculation here -pron- know that each entry be four byte and -pron- know that -pron- need two to the twenty entry because there be a up to two to the twenty page ok so this give -pron- a page table of size two to the twenty two k two to twenty two byte right how can -pron- be that off well as usual remember the two to the ten be thousand twenty four so two to the twenty be a megabyte or meg ok so what if i get here there be four megabyte alright as a massive improvement over -pron- first design in other word there be an overhead or four megabyte",
    "tiny even if -pron- only take one hundred kb actually -pron- be go to give four megabyte of space that i need to find inside -pron- real memory to hold this page table and bad -pron- need to be four megabyte of contiguous memory as well in order for the hardware to do be look up so -pron- be ok but maybe -pron- can do well than this and so a key idea be maybe -pron- should actually make not just a single level page table but a double level page table ok so let -pron- think about how that may work and this be kind of maybe a little tricky the first time -pron- see -pron- ok so here be the plan let -pron- let -pron- do -pron- here ok so here be -pron- kind of thirty two thirty two wire here and so far -pron- say that the low twelve one two three four five six seven eight nine ten eleven twelve area right",
    "ignore -pron- will just make that the frame offset as well and here of on the left hand side the twenty bit let -pron- divide this into exactly two half so one two three four five six seven eight nine ten so -pron- have get ten bit over here and ten bit over here so here be the plan let -pron- have a top level page table there be only go to be use as input these top most bit so -pron- can think of this like a directory into some other page table look up 's as well so ultimately -pron- be still go to do a mapping from a page number to a physical frame but -pron- be go to do -pron- in two stage these kind of top level ten bit ok will go into this first look up table",
    "of other look up table so how big be this look up table well -pron- need remember -pron- be use ten bit as input into this thing so -pron- need to be to the ten be two to the ten entry ok and if each entry be four byte then the total size of this be go to be two to the twelve in other word four thousand ninety six byte or in other word four kb ok so that be -pron- size in memory so this little directory will fit really neatly into a single frame be not that great a single page or look what happen to answer right so anyway so -pron- first invites will give -pron- an enter inside here and not entry be what -pron- be go to do be full of the money",
    "and -pron- second read then will say ok also in main memory somewhere there be none other entry another table here ok and as input -pron- be go to use these middle unused ten bit here here ok so these ten bit green here so same argument apply -pron- have get two to the ten entry here and as usual each one be should be attend each one be four byte ok so again this little table will fit snugly inside four thousand ninety six byte so for example the one -pron- be currently draw may just happen to live inside -pron- physical memory just here right and then finally when that when -pron- read that out or other when the hardware but instead out finally -pron- say ok this be the actual physical frame",
    "ok and that be why i say the heat bite be all the program bite or whatever -pron- be ok so why be -pron- do this madness otherwise so one be to notice that these frame no longer need to be contiguous -pron- could be place anywhere in memory also conceptually think of this be ok if i get a thousand twenty four entry i could kind of sketch this out here as lot and lot of table long here a whole bank of table to do a thousand and twenty four of -pron- ok let -pron- have a different color ok and here be one of the top here another one -pron- be get thousand twenty four and depend on the topmost bite would be which one -pron- use for the middle ten byte but here be the cool thing some of these do not actually need to exist let -pron- go back to the very first argument and remember that",
    "next of -pron- -pron- have get some heap -pron- have get then lot of space and then at the top -pron- have get thing like the stack and argv obviously that kind of stuff but there be a whole load of space which be unused so -pron- only actually need to instantiate limited set of these secondary vlookup ok the one which actually cause one door idea valid memory dress so now i do not need that full four megabyte of space to actually perform the look up so great -pron- have save a lot of space -pron- have make -pron- so that -pron- look up table can be a lot small for small program there be one little downside though do -pron- notice what be happen to the performance of -pron- machine"
  ],
  "83c8c367-376a-4574-bc73-6b7b742d1b47": [
    "hi ok so -pron- be go to attack the follow problem -pron- want to write a function to return of item in -pron- into two away before the value of negative one be find and to make -pron- tricky -pron- be not go to use any counter -pron- be just go to use pointer arithmetic ok so here be the challenge denton right so -pron- be go to take a memory address which will be the value of where this array start in memory -pron- be actual memory location and i want to keep walk through that read each integer until i find negative one so -pron- head will do this then so -pron- will have another variable -pron- little pointer here and that be what -pron- be go to keep change and will keep incremente -pron- until -pron- get to that negative one so -pron- be so i want to see the value of the current address so let -pron- use that point to remember pointer be mean to be use most of the time let -pron- actually dereference -pron- let -pron- actually go and read the stuff at that memory right so once that be not equal to negative one what i want to do",
    "next value so i could write pointer equal point oh plus one but i could shorten that two plus plus and with pointer arithmetic if -pron- add one the compiler go today or this pointer point to integer so i need to move -pron- not just one bite forward but enough byte forward so that -pron- can actually access the next integer so the type be always use with the pointer arithmetic right so -pron- be go to go round and -pron- be go to keep move forward read integer hopefully -pron- be go to find that negative one at some point which point how can -pron- discover the integer well so i discover the number of item -pron- need to read so item into the interval before validate be find so here be kind of the big surprise if i now take that address and subtract off the other address of where -pron- start then that subtraction again be pointer arithmetic"
  ],
  "8407548d-d06c-4cbe-a5c3-2f290c519b7c": [
    "ok -pron- recording yes great ok right so what do -pron- got -pron- have this time -pron- be go to have three process so let -pron- kind of sketch out again alright so -pron- be go to have process one over here and then process two process three ok an -pron- sketch out a timeline of event that -pron- 'd like to simulate and -pron- be go to see if -pron- run into deadlock at some point ok or if -pron- manage to go through all of this without run into any issue so process one request ea ok so here be -pron- resource a this nice chocolate inside the middle of the box here ok so process one yeah -pron- could have the chocolate ok no one need -pron- right now ok so there -pron- go right and then process two request be ok so yes -pron- get sure where -pron- line be so curvy today right -pron- should i want to draw straight line i know that be why yeah let -pron- do that so put three request see ok which place although",
    "go right so process three get get see in fact i like that that line so much -pron- be go to order -pron- like that ok so process one yeah -pron- get a process to -pron- get be process three -pron- get see ok so -pron- have do the first three now -pron- start to get interesting so process two be go to ask for c but -pron- can see that be not go to happen ok so let -pron- start during these in different colour come so process to -pron- want see -pron- be do this line here key ok what color so -pron- be go to have to wait right so -pron- be look longingly at this box alright and then process three would like a ok so choose a different color for that ok so process three right and this grubby hand all the way over there",
    "do that and now process wear request see ok so process one alright let -pron- -pron- have do blue yet so let -pron- do that right process one -pron- request see ok so write down -pron- go ok right sir from this situation do -pron- have deadlock ok so let -pron- see kevin anymore process be currently complete well process one can not complete because -pron- be still wait for c process two complete because -pron- be still wait for c as well and process iii can not complete because -pron- be still wait for a and that be take by process one so -pron- can see that none of -pron- process",
    "in the wait for graph in other word can -pron- follow these hour around to actually generate the cycle so let -pron- see if i can choose a new color will go for say this line color here right so right so where be -pron- cycle right so -pron- can see that i actually have this this kind of cross figure here that -pron- process wall be look at see ok but see be hold by process three which be but process three be wait for a which be hereby process one which be not go to go anywhere because -pron- be wait for c which be hold by process three so -pron- have get this little kind of boat -pron- be not here where -pron- have get these two process unable to continue -pron- both hungrily stare at each other resource in order to continue and what about process to process",
    "the reason for the deadlock ok yeah -pron- be wait for c but if -pron- be to delete process two right now -pron- would not help -pron- with any of the other problem ok versus if be to delete process three or process one then the remain force could continue so -pron- kind of be not important idea that that -pron- will see this kind of chain reaction that now because -pron- have get two stuck process which will never get there give up -pron- resource if i now have other process which also dependa pawn those resource -pron- get stick as well so for example suppose i now have something else which be relate wait for this resource be then -pron- be go to be stick wait forever for process to to give -pron- up but process two will never give -pron- up because -pron- be get -pron- now wait for still wait for a resource c and so on and so on and so on so yes in",
    "dot book that be a great question the answer yet the deadlock actually occur definitely depend upon the order in which -pron- process be request a resource for example suppose the ordering have be that process one have obtain all of -pron- resource that -pron- need so if for example -pron- make process one obtain see up here right so suppose the interleaving of these operation be different then process one would have get everything -pron- need would have this chocolate and that chocolate ok and then -pron- could have complete -pron- task and then process one would not need these resource anymore and so then process three could have continue as well so yeah the ordering of how -pron- process be request resource be critical"
  ],
  "8459ee6a-30aa-499c-9226-74f97c8f7ce4": [
    "hi welcome ok so -pron- be go to do two fun thing unless make a program that be self aware and print -pron- out and a second one which be the most powerful program in the world be -pron- ready let -pron- go so here be here be -pron- first challenge to -pron- be -pron- want to change this program so that -pron- actually can print -pron- out how can -pron- do that well -pron- may be tempt to do the following let -pron- change the argument to cat to be ok i need the program name here -pron- be just exact demo dot c like what do -pron- think about that will that work ok and the answer be let -pron- find out so -pron- want to compile gcc exact demo and -pron- run -pron- and -pron- do not work instead not hello -pron- can tell -pron- back to -pron- that be not the desire behavior what do -pron- do wrong what -pron- forget be that when -pron- use exec the very first argument -pron- give to -pron- process be what be the process name case so -pron- could for example put",
    "as -pron- would discover that be arg arg v of zero be equal to cat alright so now for -pron- on this key compile i have a little program that can print -pron- out print out -pron- be -pron- own source code so i think -pron- be kind of cute but let -pron- not stop there how about a version of a program that be just powerful as anything -pron- write -pron- can write any program on -pron- machine and -pron- program will be just as powerful as -pron- and short two here be why -pron- little program all be go to do be run -pron- program and i need to generate to do that so what -pron- be go to do be -pron- be go to use a version of exec where -pron- can specify less -pron- want to look for the path and -pron- also want to care about the what -pron- can look in the path but -pron- also want to specify use an array all of the argument that -pron- be go",
    "where -pron- see this with in term of arcv of -pron- main method case so when here -pron- go when -pron- when -pron- call maine maine be call for -pron- what be go on with the argv well remember that i have a little variable this hold the address put in one way let -pron- try again right so -pron- have there -pron- go right some memory here -pron- be divide up k into pointer each of those pointer be go to be look at different string except for the last one where this point be go to not be look at anything -pron- do not but i have a variable -pron- argv and -pron- be point to the very first entry the very first point two in there and inside that pointer be what that be right the name of the conference so what i want to give to exec be not that pointer i actually want to give to exact a pointer that be look at the next",
    "of that right and i need a new program here case so let -pron- call -pron- exact powerful dot c and -pron- will descrip this much ok right so this time i do need -pron- argument specify from maine -pron- have get account and point to a char argv and -pron- will have a nice program which print out little useless message so if -pron- do not tell -pron- what program to run let -pron- print something out right so if -pron- go see that arc see -pron- need to be at least two item because will have the process name and the argument give -pron- if -pron- be do that then -pron- get problem service if -pron- be less than two then let -pron- print usage message so&nbsp ; fprintf to standard error or little use message",
    "let -pron- actually find -pron- out from the process name so i can say percent s and program to run and maybe -pron- want to specify some optional argument to pass that program ok let -pron- have a new line at the end ok watch that percent sp -pron- should be the string at that very first entry of that little table -pron- draw ok after that do not continue do not collect two hundred dollar etc do not play monopoly instead exit with an error code right so down here now -pron- want to call exec so -pron- be go to call exec and i want to use -pron- version i want to use a path please so -pron- do not have to specify the exact location on the file system ok so in here i need to program dayton let -pron- have a variable that do that and then what about -pron- array well i do not want to start at the beginning i",
    "the beginning i want to move forward by one i want to give -pron- process name i want to pass in whatever i want to pass in where -pron- table start and the first thing be give -pron- the program -pron- want to run ok so -pron- do argv plus one -pron- want to move advance to that second pointer in that away and let -pron- hope -pron- fail -pron- be sorry succeed if -pron- fail then -pron- be go to get to line eleven time to print something out so -pron- can say exact fail and maybe go to find out a little bit more about why and then again let -pron- exit with an error value k right so what do -pron- think about this well -pron- be use exec here so better include i think -pron- be c string send liberal standard dodge ok and i do not declare what program dangerous so can -pron- guess what how i should declare a little viable here program name or should be look at if -pron- say",
    "and compile -pron- clear gcc exact record powerful ok and -pron- get a little problem here oh yes so fix -pron- pointer ok so i move to the second entry but actually i want to follow that i actually want to pull out the i do not want just that address i actually want to follow that as a pointer so how can i write that well -pron- may say k let -pron- dereference -pron- like this calculate one and then move forward but -pron- and i know that -pron- can write that more simply -pron- can write -pron- can use the square bracket to say ok argv be look at the beginning of a ray let -pron- move forward what -pron- should not do in these situation be simply say -pron- know what -pron- be just go to cast something until -pron- appear to compile know the compiler type information",
    "there be a strong hint that perhaps -pron- do not dereference a pointer or be not work with the correct variable so now -pron- have get something which be go to work and let -pron- compile -pron- right and off -pron- go so great -pron- usage work -pron- print out suggest way to to use -pron- so let -pron- do that let -pron- run a program well call a wonderful program call sleep which wait for a certain number of second if i could say sleep and say sleep for three second for three second there be glorious silence for yes what happen be little process here stop run -pron- code and become the sleep program instead so just the last kind of fun there with this be what do -pron- think will happen if i run -pron- all out on -pron- but -pron- know -pron- be go to do"
  ],
  "8485219d-b168-4bd7-a966-b4688125a726": [
    "ok so let -pron- make -pron- a server socket now ok so there be an exciting moment right so this be what underpin database cdns web server etc etc this be what allow other people to connect to -pron- so here -pron- go right the what -pron- will do today then be a little bit different from what -pron- see with the client here be the first big change that i want to make what be call a passive socket so passive socket be as -pron- sound -pron- just sit there -pron- wait for client to come to -pron- ok so -pron- do not go out and reach out and try to talk to a remote server no -pron- be completely passive -pron- just sit on a particular port wait for those packet to arrive so this be the first big change as to how -pron- specify that -pron- like a server socket right so",
    "-pron- be not go to try to go out to connect to a remote machine when i call get address info i do not need to specify \" a remote address -pron- be not pass in illinois.edu here i be go to specify a port number now -pron- be possible to specify zero here mean here -pron- will take any port but today let -pron- start with just explicitly choose a valid port number so -pron- will assume that port one two three four be not be use by another process because -pron- can only have one passive socket listen on a particular port for particular socket type ok so if this succeed -pron- have get everything -pron- now need to create a socket but here be a here be the new cool",
    "so bind say right so far what have -pron- do -pron- have make an abstract socket and -pron- do that much early at the top of the code here -pron- say i need just an ip4 tcp style socket thank -pron- very much now -pron- actually want to make that be on a particular port number on a particular network card on -pron- local machine and that be the purpose of bind right so -pron- can think handcuff or whatever to say hey -pron- be go to actually bind -pron- abstract socket to an actual port number an actual end point on -pron- machine ok which be clearly what -pron- need to do for -pron- server ok so at this point now -pron- have manage to get that port number one two three four as -pron- passive port number but -pron- have not open the shop yet and that be the purpose",
    "to start to accept in connection request on that particular port number so -pron- be not go to hear about those connection immediately instead the kernel be go to handle that initial handshake from remote client and -pron- need to give hint to how many remote client -pron- should allow as a backlog so if i put ten here that mean that i can do nothing and up to ten customer can walk in the door before i have to start kind of process those customer so if -pron- could like the equipment the metaphor here would be like a server inside the greeter in a restaurant -pron- first walk -pron- to a table and there be no one yet to actually hear -pron- order to actually talk start talk to -pron- but i can have ten customer actually walk into -pron- establishment walk into -pron- port number and the greeter which be the kernel will do the initial handshake",
    "i want a backlog of up to a hundred connection but realize of course that all of this be go to take some resource to build again handle those one hundred conversation ok so so far none of these call will block but -pron- have now set up a valid server if -pron- have get this far then call netcat on this connection or call telnet or call use firefox or chrome etc will make a valid connection and then -pron- will start to want to send back to -pron- so -pron- well actually start process -pron- client ok so how do -pron- do that and the answer be with accept ok so accept mean please block and till there be a customer for -pron- to serve ok",
    "important idea here be that now be that that server socket be the front door to -pron- shop but -pron- be not actually go to be the way that -pron- talk to -pron- client instead when accept return -pron- get a new file descriptor one for each customer which be the private communication channel between -pron- and that client so with this new file descriptor that be how -pron- be go to be call read and write so accept will return immediately if there be customer which have complete -pron- handshake and wait to talk to -pron- or -pron- will block if there be no new customer ready to talk so -pron- may for example write code where -pron- will put this accept inside a loop and will process one customer at a time and there be exactly what -pron- be do here perhaps in the future will write a multithreade version where as soon",
    "say a thread just to process that particular customer so let -pron- see what -pron- can do then right with this client -pron- will hear what -pron- have get to say so use this client file descriptor -pron- be go to listen to what -pron- be go to send -pron- ok so let -pron- read up to nine hundred and ninety nine byte and if -pron- give -pron- something valid then -pron- will just print -pron- out but remember what i get be not a c string -pron- be up to -pron- to terminate what what -pron- receive with the zero byte ok and -pron- will print -pron- out and then -pron- can say something back to -pron- ok so let -pron- now use either write or dprintf ok and so i can only say hello or -pron- could if",
    "right so let -pron- just say hello for now and last thing what should -pron- do what -pron- should do two thing -pron- can tell the kernel that -pron- finish use this socket so -pron- want to shut -pron- down so in fact -pron- can shut -pron- down for reading or writing or both so shut down will not immediately terminate the connection because there may already be byte that have not yet be send let -pron- say octet that have not yet have be send so that be not the man page -pron- want -pron- want the programmatic way ok and -pron- see that -pron- can say right i want to say that i do not want to receive any more information so i promise",
    "or that i promise -pron- that -pron- be never go to call write on that socket anymore or or both so in this case let -pron- use -pron- do not want to do anymore read or writing so let -pron- edit -pron- code to say -pron- be all do with this connection but the file descriptor still exist so that be take up unnecessary resource so now actually let -pron- kind of reset that ok alright so now -pron- have get -pron- little server finish the last thing -pron- should possibly do be to see if accept fail so let -pron- see if the client actually be an invalid number so if -pron- be less than zero -pron- know that -pron- be a bad connection so bad accept and -pron- could print out an error message for example",
    "ok so and maybe this point -pron- want to break out of -pron- while loop or maybe not maybe -pron- just say ok let -pron- just keep go but -pron- be go to finish at this point ok right so let -pron- compile this ok and then -pron- will come back to talk about a few thing which i have not yet look over there ok so i want to use clang more so tcp server right now well write ok so great -pron- be listen woo right i think -pron- be time that -pron- try to connect to -pron- ok so -pron- will see -pron- be listen on file descriptor three so that be -pron- passive passive port k and let -pron- try to connect to -pron- ok",
    "actually have several request from fire fox at this point fire fox want to know if there be a favorite icon -pron- should display with this website but here -pron- be actually request just the home page and -pron- be tell -pron- firefox be tell -pron- a little bit about the client and -pron- say -pron- actually send -pron- two hundred sixty byte just just to request that that home page -pron- also may notice that -pron- keep reuse the file descriptor four so file descriptor three be the one -pron- first make for passive socket all of -pron- connection be reuse this file descriptive number four why because -pron- remember to close -pron- down each time so the kernel able to reuse that particular file descriptor",
    "-pron- would fail and accept would would not be able to give -pron- a valid file descriptor anymore so -pron- web server would stop work when i say there be not much of a web server right now because -pron- be not truly actually return web web content not something that be a real web page ok and -pron- be not actually truly talk http instead so let -pron- modify -pron- just use kind of dprintf and talk about some other thing that this thing be do as well ok right so there -pron- go now be dprintf k and that be k compile -pron- k and run -pron- again",
    "if i break out this point in try to run -pron- again -pron- will be in for a bit of a nasty shock here that -pron- bind call fail that i get an address already in use oh what be go wrong with -pron- code do i make an error let -pron- try run again and -pron- be still fail ok so let -pron- look at -pron- code figure out why bind may be fail here ok so this be actually why -pron- be useful to check every network call and print out something useful when thing fail and in fact -pron- code be correct the problem however be that even after -pron- process have finish passively listen on one two three four there be a timeout there be",
    "make a new new passive socket on the same port number that be actually previously use so if -pron- wait for a little bit long -pron- go see now -pron- be actually work again i do not even touch the code ok so that be one kind of fun surprise -pron- will have with networking will talk about how -pron- can reduce that timeout period to zero second in a future lecture but realize that that time out be deliberate -pron- be actually there for security purpose so more about that in the future so anyway -pron- have get a little thing work here -pron- should now try to connect to -pron- let -pron- now try use say netcat so netcat which be netcat or sometimes or some system be just nc -pron- be a netcat i want to talk to -pron- localhost",
    "hello right and -pron- will see that -pron- server get the hello there and complete with a new line and -pron- send back this server code be write in year two thousand and eighteen -pron- be a whole year old ok right the last thing -pron- can try here be to say what about kind of all right port zero ok so let -pron- do that right so recompile -pron- k and say oh -pron- be listen on port zero ok -pron- have a problem here that -pron- do not actually tell -pron- which real port -pron- be connect to so port zero here mean hey please"
  ],
  "849095e8-a9e5-4467-8af4-be36e4991af6": [
    "ok so yeah -pron- talk about race condition what i mean to say be let -pron- talk about a critical section so here be here be an important idea that there be possible code that be necessary that only one thread at a time should be execute because in that moment inside part of that code be where -pron- be update some resource for example update some datum structure or update a file in a critical way and -pron- be important that no be the process or thread update at resource at the same time so -pron- be critical that -pron- prevent other thread or process from also be inside a critical section at the same time so lot of kind of example and in the real world where there be there be moment in time where -pron- only want kind of one person to be work on something at a time or save as a database -pron- may implement a database so -pron- be critical that only one process update",
    "if -pron- be do code review -pron- may say hold on a moment there -pron- have get a race condition here between say -pron- implement incrementing i and when -pron- actually read the value of -pron- in -pron- previous code when -pron- be take the value of this pointer so -pron- have synchronization bug and -pron- would have be solve if -pron- identify a critical section and say ok -pron- need to divide a moment in time so that define a moment in time so that the value can be read independently of the update ok so -pron- will talk more about critical section in the future but like i say the big idea be that only one thread at a time should be inside a critical section if -pron- program be to behave correctly so how can -pron- identify what can -pron- do to ensure this",
    "section code for example suppose -pron- have some code from cs two twenty five that be go to say insert a link right on a data structure and this price be go to work in the link list price be go to work on a vector and inside that code -pron- realize that there be a moment in time where -pron- be go to say of mess with the pointer or -pron- be go to copy the entire data structure from -pron- one sized piece of resource to say a doubling of the resource some other piece of memory over there ok so that be a critical section what -pron- need to do then be to block any other thread that want to do a similar operation -pron- want to somehow say right i want to give -pron- exclusive access to this right now so the only -pron- this comment thread be execute in this code get too get to modify this data structure anybody else that want to insert something into -pron- data structure"
  ],
  "84be7473-dcd6-496d-9ec9-c463acb081d2": [
    "hi so let -pron- look at the four condition of deadlock an as -pron- know these -pron- call the coffman condition ok right who originally identify -pron- and as -pron- know -pron- be necessary and sufficient -pron- need all fall to be true and exactly or for -pron- to be true and then -pron- know that -pron- have meet the condition for deadlock so what be -pron- let -pron- actually look at some definition here so here be the first wanna process be currently hold at least one resource and request additional resource which be be hold by other process ok so -pron- be hold and wait so that be a hold and wait condition ok if -pron- process be all thread only need to actually hold on to say just one mutex lock at a time that deadlock would be impossible ok so that be how hold and wait right there be a set of wait process be such that",
    "wait right p three and so on until -pron- get back to p r p one ok so this be -pron- circular wait or cycle in the wait for graph and the process or thread wait for graph also know as the resource allocation graph so let -pron- write that out carefully resource allocation graph ok right and the next one a resource can be release only voluntarily by the press be hold -pron- after that process be complete this task and in other word -pron- can not say hey little johnny pull down that those pencil put down that paper ok so this be no pre emption"
  ],
  "84c32d4e-7aac-462f-b6e7-5a15921bfb97": [
    "ok let -pron- review this one what do -pron- think the follow code will print ok so how can -pron- analyze this right so -pron- have get a pizza -pron- create an -pron- be store somewhere the fed id 's and -pron- be go to say ok i want to thread that be go to start function and let -pron- start function be and -pron- be go to pass a void pointer the address of the string literal so the address of the capital a and address of the capital x to each one right so what will function be do function be then get this pointer and so -pron- be give -pron- the address of xyz so when this run and -pron- be not quite sure when -pron- will run -pron- will print out xyz now what about function a so functionally when -pron- run let -pron- see be give the address of abc ok but -pron- do not do anything instead -pron- just simply exit this thread and -pron- return an address so -pron- take the",
    "in memory abc and a zero bite if -pron- be ok and -pron- take that caster character add one in other word -pron- just calculate a pointer that now point to the b ok an -pron- return that so if and when these two thread run -pron- know that the first first one return a pointer to bc string and the second one print be xyz right what be the rest of the code to write so equal p thread join on thread a and grab the result and so in store that in there area code result ok so what what be go to be put inside this result so this line be go to wait be go to wait until -pron- be able to join p thread so that mean -pron- wait until functionary have finish at which point -pron- set this result variable to be a pointer and -pron- be",
    "-pron- print out ok so this will print bc add a new line ok right so now -pron- hopefully -pron- can conclude what this code be go to print right so if -pron- say -pron- be go to print bc or the new line then -pron- 'd be correct if -pron- say -pron- be go to print bc in a new line and xyz -pron- 'd be correct if -pron- say be go to print xyz with a new line and bc -pron- 'd be correct yes so what code be actually indeterminate pthread create make no promise about when these thread be go to stop . maybe in a microsecond maybe in a millisecond time there be a very real chance that the first thread , thread a , could could start up exit and main thread could join on that -pron- could print out",
    "be particularly true on sale really busy system or a system that be only get one cpu core . -pron- poor thread b -pron- have not have a cpu schedule yet and so -pron- main thread be do before -pron- -pron- have a chance to start up ok right so all those those as possible if -pron- modify -pron- code so that -pron- include pthread_exit ( ) on the main thread then -pron- know that that mean that because -pron- be never return from maine now -pron- program be go to run until both those thread finish so now -pron- expect both the bc to be print and the xyz to be print though -pron- can not actually say definitively what order these two thing can print -pron- can make a guess as to which one more likely but -pron- have not actually make -pron- program fully determinant in term of -pron- out but -pron- have not enforce the idea that be seed must"
  ],
  "860cce32-5467-4a4c-a9c0-2fac9093e34e": [
    "ok great sir let -pron- start talk about manafort say so here be a great wonderful idea i want to choose something which be -pron- be call embarrassingly parallel meaning that -pron- can just set all cpus off calculate something and then -pron- do not need to think about any communication between those cpus -pron- do not need to think about -pron- try to update the same piece of memory at the same time so this be a very easy problem for -pron- to parallelize into play with do understand how to use pizza be before -pron- move on to more complicated example ok so -pron- be go to put together a lot of idea first of all let -pron- talk about a little bit of math so here be the plan i want -pron- to think of a number right now -pron- 'd like -pron- to square that number ok and now add the number -pron- first off be -pron- ready now think of that number so in square that an add",
    "then so on and so on and so on now of course if -pron- think of zero -pron- be go to end up with the number zero if -pron- think at the number say two then very quickly -pron- number be go to get exponentially large two four add to get six square at thirty six etc if -pron- think the number one k so one be one time one as those two ok square that and again -pron- be go to see an exponential growth go negative one and negative one square square out become one take -pron- back to zero and if -pron- keep do the same routine -pron- will not escape -pron- will stay value between between negative one and plus one so what -pron- be try to see be this idea that number close to zero go to stay around zero but for much large number -pron- be very quickly exponent get away because -pron- be square -pron- current number so that be why -pron- be actually go to look at here this be -pron- sdr code",
    "kind of ten line of code here -pron- be especially as see actually support sir complex number so -pron- do not think of a complex number or shame on -pron- right so here -pron- go for -pron- -pron- can -pron- see so let -pron- pass in a screen position so that will be of x and y and -pron- will turn that into a complex number somewhere close to the origin somewhere close to zero so will convert be those into some real number and some imaginary component as well right so -pron- have now -pron- have get -pron- constant but -pron- be go to keep add around each time now i just want to play -pron- think of a number game so will start off with a value of zero will try play this game for say like a thousand time also so -pron- will go around this little loop but will quit if -pron- value of -pron- complex",
    "two -pron- know -pron- be go to lose anyway -pron- know -pron- be on the path some exponentially large number ok so -pron- be only go to keep this plate keep play this game then if -pron- stay close to the origin and -pron- have not exhaust the number of maximum iteration be prepared to play this game so here be -pron- game right so just update busy with square with z add the complex number -pron- first think of wait so when -pron- finish play this game -pron- would be nice to play this display this in a nice colorful way so here be what -pron- have get if i manage to stay close to the origin -pron- be go to use a white color so -pron- rg and b value be go to be large as possible otherwise -pron- have get a fun little multiplication function here which will give -pron- a nice variation in color depend",
    "before i have to quit ok so the last thing -pron- need to do that calculate -pron- for one pixel which be why this be go to be so embarrassingly parallel isable now -pron- need to play this game for all of the pixel on -pron- screen so now -pron- have get up here -pron- two nest for loop for however big display and i want to store the result somewhere so let -pron- get some memory let -pron- use calloc right and this time i want to say how many byte exactly i want ansi support these wonderful thing here where -pron- actually say the number of bit -pron- want so today i would like this unsigned buster -pron- hear unsigned integer through two bit please so i know -pron- be definitely talk about a four byte integer and right so use that in -pron- car lock as well to to declare that be a total number of byte so -pron- be go to need per element right so that be -pron- code the last",
    "-pron- want to update the ui somehow in other word take -pron- array of pixel which be just a big block of memory inside the heap and display on the screen so how do i do that i do the follow let -pron- take a tape why mask -pron- with the value fifteen so in other word i only care about the low four bit and if those low four bit be equal to fifteen then display the ui ok so provide -pron- screen size be actually some multiple of sixteen then -pron- will make sure that i update this every sixteen road and i also update at the end if -pron- be not some multiple of sixteen then i should call update gui a one more time before exiting or before finish right so let -pron- have a look at this this actually have a play with this ok so -pron- have compile already -pron- have get a little make file here",
    "get ok let -pron- do -pron- initial manda bring no thread and -pron- be go to compile this -pron- output will be the same name as a target randall zero case so off -pron- go with mandal zero right so when -pron- run -pron- -pron- give -pron- a suggested use like how large how wide number iteration would like to stop -pron- ok so if i run this as do mandal zero say five twelve five twelve let -pron- do two thousand and off -pron- go ah be not that pretty right and now -pron- can see all of the area that stick close to close to zero -pron- disappear because i press the key there -pron- go right so be not that amazing i can not highlight -pron- ok yeah so the -pron- program wait for a key press which -pron- can see that"
  ],
  "868deb37-9bd1-4419-a9ac-e164d0b078da": [
    "ok so let -pron- have a look at this code which try to have some push and pop method so -pron- can push on a value and later pop -pron- out ok let -pron- see what -pron- think of this right so -pron- have a capacity and -pron- look like later if -pron- have push too many thing on why can not i draw i want to draw there -pron- go great later once -pron- reach that capacity -pron- be go to double -pron- capacity in use reality and also if -pron- pop from thing -pron- will just decrement size k and pre decrement size and then read that as -pron- result so in this implementation the value the thing that -pron- be put on and the thing that -pron- would later return at the same thing -pron- be not like -pron- be actually go to duplicate this string be pass -pron- be simply go to say oh thank for that memory",
    "so -pron- be up to the call code to make sure that the item that be be pass on paskin will actually continue to exist later when when pop be call if that be not true if -pron- actually want to make a duplicate of this string then there be a nice little function in c call string duplication so strdup so -pron- stand for those duplicate string so -pron- pass in one string compute string literal could be appoint to some string memory and -pron- will call malloc get some heat can -pron- add and create a string with the same character sequence but -pron- be a different part of memory so that be a neat way of duplicate string and then later when -pron- finish with -pron- of course -pron- be on the heap so -pron- can call three here right so let -pron- back go back to -pron- code here so -pron- have get capacity excite the number of item be comedy in -pron- and -pron- datum right so -pron- be a pointer to a pointer to a character do that make sense well -pron- know that -pron- should be a pointer and yes",
    "character pointer so that type be correct but hold on a moment what about this capacity ok so -pron- have just ask for sixty four byte the rest of the code assume that capacity be relate to the number of item which be actually store there that be why -pron- be do this comparison here and why -pron- use use the datum as an array so this be not correct this should have say capacity time size of and then the thing that -pron- be store inside each entry so -pron- be store inside eat entry -pron- may be tempt to write character but do not because that be not correct and -pron- know the thing -pron- be actually store be character pointer ok so right now -pron- have get a well idea about size what do -pron- do here right so i mention great -pron- be go to double the capacity when -pron- go out of space and then -pron- call realloc be this a good use of real ac no",
    "error here first of all the real ac may be able to bust through a wall and just give -pron- more space where the data be currently store but maybe not -pron- may have actually move all of -pron- exist value inside the old heat area into a new spot so -pron- well update -pron- datum to look at that and then finally oop -pron- do -pron- again so -pron- do capacity time size of ok catch pointer so anytime -pron- eat real ac check for those two bug ok be that the full story well ok in really large allocation realloc may fail and so robust production code would actually check as well to see if realloc fail if -pron- do then actually the old value of datum would still be valid and simply production code would check",
    "ok so what do -pron- do then right let -pron- write in today to the value wait so now -pron- kind of get code that actually be kind of work let -pron- think about how -pron- can make this thread safe and -pron- have to think about ok what the critical section and and do i have -pron- ok there -pron- go let -pron- choose a different color k so do i have a red scare for a bit more than orange color that be not very orange be more yellow now as tricky potato which ok so stop ok so let -pron- think about when do -pron- need -pron- so that only one third of the time -pron- be run ok so some thing -pron- already know be first of all this size plus plus that be not an atomic operation certainly one thread that time should only do that but a little",
    "be run say push at the same time -pron- do not want -pron- value to end up inside the same spot in -pron- ray like structure -pron- want -pron- to come one after each other -pron- want -pron- to form an orderly queue as a lineup for the salad bar ok so this line where -pron- use the value of size be critical that only one thread at a time run data time ok what about compare with capacity and re allocate to a new spot yes well if -pron- do that if -pron- move -pron- datum to a new spot -pron- want to make sure that not only happen again in one thread otherwise i may have two thread call real look at the same time so that be not that would not be good one of -pron- would be incorrect so in practice then this be also critical",
    "all round the push as well so so that be a whole method ok and then for the pop case same idea if i have two thread call pop at the same time i do not want -pron- to read from the same position this predicament and then read from datum should occur in one thread and then the other fit ok so that mean that i need to declare that this be -pron- critical section those those two result that -pron- put into two different variable remember each ted would have -pron- own stack so in practice right -pron- lock be go to be at the top and unlock just before i return the result so so inside here will be an unlock",
    "fast on -pron- entire lore -pron- be andy chip with four eight sixteen thirty two core etc ok so i hope -pron- understand the principle here the process that -pron- walk through the reasoning about the code this be relatively simple little two example -pron- could fit -pron- in just a few line of code but the idea about say ok which part of -pron- code be -pron- critical that only one thread at the time can actually access to datum structure that be that be the define idea about how to make -pron- code thread safe if -pron- code only run push pop then -pron- may actually not see that much speed up because now everybody be try to use the salad bar but in practice real code tend to go off and do other thing as well so that be the whole joy multithreade programming but -pron- can"
  ],
  "86a6f898-deff-45df-b7a6-2a0d2dc10c5a": [
    "ok right so how do -pron- read half a file ? right , so let -pron- go . well first of all let -pron- open the file handle so will do this all at the c library level ok and next time -pron- write a piece of python code or c++ code realize that many of those function actually ultimately write use the c library as kind of intermediary between the python code that -pron- write and the actual kind of kernel level call like open etc ok so -pron- want to fopen this file name and ok and -pron- want to open -pron- for read now good code would actually check to see if that fail so if that be equal to null let -pron- do something but -pron- be not go to write but what -pron- do there right now that be -pron- return something depend on on how this specification be for this method ok so -pron- have successfully manage to open -pron- now -pron-",
    "that will need the length now -pron- could -pron- start but if -pron- be not use or if -pron- do not want to use that kind of posix level and -pron- just want to stick with what the c library give -pron- why do not -pron- actually go to the end of the end of the file i find out where that be ok so let -pron- call f seek and i want to get to the offset to the end ok so the wentz can be seek end and then let -pron- find out that position ok so i want to find out the half of the file so -pron- be go to say ok tell -pron- where the current position be aftel on this file but divide that by half ok right and now i need to go back to the beginning so rewind be one way to do that or -pron- could use f seek again to say ok at seek go to position zero offset zero and",
    "want to say just seek set treat that as an absolute position great so i know the size of the first half and i remember to go back now i need to read or write that into some memory so great i need some memory at this point ok so let -pron- get some memory be -pron- result and -pron- will say ok i do not need to set any of this memory to zero so let -pron- just use malloc and how much memory i want ok i could have half however if i want to return -pron- as a c string maybe that be not quite enough let -pron- get back to the moment ok so will call every to say ok fread -pron- be a far handle and i can say give -pron- one item the size",
    "and where do -pron- want to write this into -pron- heap be -pron- do well let -pron- see do i just wait that the quickly around let -pron- just check fread right no -pron- look like i should have put the point of first ok fine ok so -pron- can just make a note that i swap these order of these around ok and what should this return if -pron- be correct ok so remember -pron- turn the number of item red so the way that -pron- have read this -pron- would actually want to check that this equal half ok and if -pron- do not then ok so -pron- could say look if that be not equal to half ok then do some error handling",
    "so now -pron- have to say right ok whereas let -pron- advance forward half bite and put in -pron- terminate zero byte at that point there -pron- go ok and finally return with so what do -pron- think about that if -pron- test this likely -pron- will appear to work however if -pron- give -pron- give -pron- this be at a code review i would be unhappy why would i be unhappy ok so the thing that i do not like be that -pron- open the file but -pron- never close -pron- so if -pron- keep call this eventually -pron- will run out of file descriptor and the kernel will say -pron- be not give give -pron- another",
    "so what -pron- forgot to do be to close -pron- file right so -pron- be finish with the file as soon as fread be finish case so inside here after this point i may call f close so -pron- be go to finish that resource as soon as i do not need -pron- anymore ok but i would also check the path of what happen if -pron- fail so if fread fail if this have a return statement as well then i would want to make sure that -pron- always end remember to close -pron- file handle in both place so no matter what happen make sure -pron- have close that resource and if i want to make sure that people do not use -pron- file handle on accident anymore then i would reset -pron- variable as well so ok if -pron- can be null ok just as kind of good practice so that clear that",
    "resource ok the other thing i do not like about by code right now be that i do not check that malloc may fail now be a good fair bet that malloc very small number be unlikely to fail but if this be a kind of very large file then -pron- be reasonable that malloc may fail so well code would actually check to see if the result feel so if the result fail here so if there be no memory then i better handle that error case and in that error case if -pron- return early then simply again i want to make sure that end up with -pron- file always be close even in these exceptional exceptional circumstance ok right so -pron- have get something which kind of work if i want to i could replace -pron- second f seek"
  ],
  "87dfa0a9-a180-45ac-87e0-763c82801382": [
    "ok -pron- have get one other little imagination game here so let -pron- just take a break from deadlock just think back to hey what do -pron- do -pron- this way why be -pron- invest and that be because -pron- care about concurrency -pron- want -pron- machine to be able to do more than one thing at a time now today with the key about this in term of threat but tomorrow behavior think about this the fact that i have a thousand machine or a multiple gpu card or whatever or people even and i want this process to run concurrently so i encourage -pron- to in -pron- spare time next time -pron- be have drift off to sleep chat with friend and an algorithm or an idea pop into -pron- head think about oh how would i apply what -pron- be learn inside cs two forty one to make that run fast to make -pron- actually run concurrently so as a work example remember some of the sorting algorithm -pron- may have see before like merge sort have suppose -pron- want to make -pron- merge sort",
    "ok so kind of let -pron- do this as a little bad example but again there -pron- suggestion to -pron- be be think about -pron- css life and start think about well how can i use multiple thread to make this or how can i use multiple process ok so remember how merge sort work -pron- say if -pron- have get say an array of datum here what -pron- will do be -pron- will use recursion to first of all get the left hand side sort and then the right hand side sort an now all i need to do be combine these which be a lot easy than sort all i get to do be take the topmost card off each one and copy the small number ok so think of like to parcel card so this number be small great -pron- will take this now -pron- build the next number ok so now this number be not as small as the number may from -pron- right hand pile",
    "recursion fairy to do most of the work so of course this happen at all level so if -pron- have start with nice big block of datum say mb of datum then first of all -pron- call recursion ok and so on and so on and that have to be cursively run these ok so how can i now think about do this concurrently right so obviously i can not actually just run all these different level concurrently because i can not actually merge -pron- datum until the low level of recursion have finish but -pron- can see thing like these task here be independent ok so if i have say four cpus maybe when i spit -pron- problem"
  ],
  "8b052423-2727-4a8f-a436-99ef0efaf792": [
    "right ok so let -pron- think about fall position when -pron- come to share file handle between a child and parent process and the big idea here be that there be kernel object so -pron- have already see a couple of kernel object in term of say a pipe and that pipe be share between the child and parent and -pron- be go to evaporate disappear once the parent and child close -pron- file description or -pron- close all those process as well but the same be true for open file open file as well ok so when -pron- call say f open underneath -pron- know that actually be go to call open to give -pron- a little file descriptor and that file descriptor be share if -pron- call fork so let -pron- just draw a little model here that if -pron- have get -pron- parent process just here with file descriptor here -pron- be say file descriptor number three that be actually of course refer to an actual object inside the kernel that -pron- indirectly",
    "right so if i then call fork to make a child process then the same number child process over here the same integer number here -pron- go right refer to the same kernel object so here be the wonderful kernel up here with -pron- view on the world -pron- view of all the peripheral view on what -pron- need to send out of the network code to the disk etc etc so -pron- have get -pron- idea of a file over here the kernel -pron- have buffer and also -pron- will have a file position as well so for random access file ok there be some kind of positioned associate with this and -pron- can only discard this kernel object once",
    "have a play with this let -pron- try change the position inside of file inside one process and then see how that affect the other process as well ok so let -pron- get start right so first of all let -pron- make a little far great -pron- have open this let -pron- write something into -pron- like how about -pron- password be one two three four and i want to actually send that to the file ok so if -pron- call f flush will actually see that be write to the file straight away ok so that be a hint to the selye beta actually call right and to send any datum out there ok so first of all let -pron- just run this just to check this work right so clang what do -pron- call this seek demo i think",
    "datum dot csv and there -pron- be ok so -pron- have get -pron- god data be save inside there right so now let -pron- start to play with fc can all that good stuff so -pron- have talk a little bit about ftl let -pron- play without first so let -pron- look at the position in the file currently ok so please turn -pron- position of this current file let -pron- print -pron- out so print f right -pron- position be ok right and -pron- can -pron- need a long so will will guess what that may be let -pron- let -pron- deliberately get -pron- wrong see if -pron- warning will tell -pron- right so here be -pron- type k and will deliberately try to compile that case so if -pron- go compile that so yeah really -pron- want a long format ok so let -pron- use that correctly ok right so please put out the follow long variable",
    "see that the c library as far as -pron- be concern any read and write to that file now will be occuring at position ninety offset nineteen from the beginning so if i wish i could remember that or i could go backwards from that that kind of thing so what -pron- want to do to however today be play with multiple process work with the same kernel object so let -pron- have a parent child right now so ok let -pron- call fork right if -pron- be the child what should i do now posix say that before before fork if -pron- truly want see libra to behave -pron- read a flush any stream that -pron- care about so -pron- care about the the -pron- file handle and though possibly be overkill in this case because -pron- have only all -pron- have do between",
    "to fall in the standard extremely closely and disk or flash just to make sure that any update have be reflect back to the kernel object ok so if -pron- be child what should i do how about -pron- start by just do nothing ok so the child be simply go to close -pron- ok right and then can exit also of course i could turn from maine ok what about the parent ok so the parent how about i actually try to do something with -pron- file let -pron- for example try to write some more datum ok so let -pron- print \" something out into this .. like \" \" 5678 ' \" go flush ok then will close -pron- now this last flush i just do i could type there -pron- go be technically unnecessary",
    "but i just want to give the idea that hey -pron- be go to write something and -pron- do not want to buffer this -pron- want to send -pron- immediately ok so let -pron- compile that right this look let -pron- clang seat demo ok -pron- get the position as well but what about -pron- pesky datafile what be -pron- look like and -pron- will see that -pron- still manage to successfully right five six seven eight to the end of -pron- file just because i close -pron- in the child do not mean that the parent be also closed ok so what -pron- do here be -pron- just reduce the reference count by one -pron- say ok the child no long care about this object but the kernel object -pron- will still continue to exist because there be a at least one other process that be refer to -pron- ok right so -pron- can close without any effect but what",
    "so let -pron- do that let -pron- let -pron- change the position here so -pron- be go to call f seek or how about -pron- just rewind ok so let -pron- rewind the current the current position in this right and i want to make sure that happen before -pron- parent print anything else so i could call wait pid or i could pretend i do not know about weight pid and then just sleep for one second ok right so synchronization right what be that ok so -pron- be go to rewind and then second later -pron- will print out five six seven eight ok so compile run this ok what be -pron- file look like now right so -pron- have five six seven eight but -pron- prove",
    "let -pron- try get the kernel to actually push out through to the key but that be clang i want seek demo ok right now let -pron- look at -pron- datum so -pron- get cat datum right there -pron- go right so after i believe i would like that almost go on ok now -pron- will see that -pron- have change position so",
    "be a hint to the c library to say hey -pron- know -pron- like to buffer everything -pron- know that -pron- do not want to make system call unnecessarily but no really now -pron- be time to actually tell the kernel that -pron- want to change the position so -pron- change conceptually the position of where future read and write will occur here but by default the c library will kind of cache that internally now if -pron- be to start write thing in here again the selye be may tell the kernel but -pron- be go to delay that for as long as possible so by call flush here -pron- have ensure that the position be update at the kernel object so -pron- do that and then one second later -pron- parent process print out five six seven eight because -pron- change the file position in the kernel now when the parent finally get around to write stuff out",
    "file so this stuff get tricky if -pron- true -pron- be try to share file handle between a parent and a child in practice -pron- be unlikely to actually do this i can not imagine overtime when -pron- would want to be deliberately write change position both in the child and the parent and have to worry about whether the c library be actually call the kernel object or not so in practice what be usually well behavior be too close unwanted file handle before fork or after fork so that -pron- do not unnecessarily share these object so big big takeaway here be -pron- see that close a file handle or file descriptor inside the child do not affect the parent these thing be reference count and secondly that the kernel object -pron- maintain"
  ],
  "8bac3c58-461d-4e82-b52c-289fa7e681a4": [
    "ok right now -pron- be time to start talk about some deep gnarly bit of system programming and in particular what happen when system call get interrupt ok so many system call be very fast for example if -pron- want to find -pron- pid that will return immediately but some thing may be slow for example if -pron- call write and -pron- be to something which may block like a network socket or a pipe then -pron- be possible that this right call may be interrupt before -pron- complete so posix have the idea of fast and slow device local disk be consider fast but for slow device possible than not little bite maybe actually be write so -pron- be important that -pron- find out what actually happen ok so -pron- be important that -pron- actually get store the result of -pron- write call and then check to see what happen ok so let -pron- just",
    "to the write call here -pron- be and -pron- will see that k -pron- have get -pron- standard right -pron- have get p right -pron- talk about a little bit which allow -pron- to include an offset there be even another version which allow -pron- to assemble write use different bit of memory so rather than require all of -pron- datum to be in one contiguous area -pron- can use this more complicated version to say ok take these bit over there and those bit over there but -pron- will not -pron- will not leave that for cs two forty one instead let -pron- scroll down and will just 's notice a few thing so first of all light that -pron- see the right mac great right few bytes then request ok so -pron- have get to look at the return value and also if -pron- fail then if -pron- succeed then -pron- get the number of byte write or -pron- get a negative",
    "be talk about early to say what actually happen so what value of errno may -pron- see ok and here -pron- be right so all of these be actually actually just constant define integer refer to the value of errno ok so -pron- fault -pron- give an invalid file descriptor negative number -pron- have get thing like ok -pron- give about a file descriptor which do not actually refer to any active file descriptor -pron- can use for writing and -pron- one that -pron- be go to talk about in a little bit more so here be the interrupt one to say alright that -pron- attempt to do some -pron- attempt to write but a signal interrupt",
    "really lazy if -pron- get interrupt by signal so for example suppose an alarm signal go off suppose a sigpipe happen suppose a child process finish then -pron- will just return do not actually do any writing for -pron- ok what a lazy kernel that be so ok will keep scroll down and -pron- can see here there be more and more stuff there be other one as well for when -pron- start talk about asynchronous write so -pron- probably hear of node dot js which be kind of take the server world by storm but -pron- can make javascript on the server that use asynchronous io and so -pron- use epoll to figure out which file descriptor ready and -pron- use thing like these e again and -pron- would block to figure out which file descriptor ready for more bite so as -pron- can see there be plenty and",
    "some point ok right but -pron- be just go to think about this what this idea about oh i be interrupt key so if -pron- do not handle this then exciting thing may happen so perhaps -pron- have write code that use semwait right so semwait be suppose to actually wait until there be a piece of pizza available in the pizza box for as to eat but -pron- just get interrupt and just return as -pron- off so i can be bother to wait anymore right and so then -pron- let -pron- code continue oh dear so -pron- have be oversimplify thing at this point -pron- have not be write high quality code instead what -pron- need to do be -pron- need to check the return value of semwait and read and",
    "worthy code because semwait may be say oh i fail and -pron- may fail simply because -pron- get into up to due to a signal so -pron- can check this and then -pron- can just re run -pron- again so typically -pron- will see the follow kind of code that -pron- can do thing like like -pron- 'd like to call semwait ok and -pron- be go to call semwait on a particular counting semaphore ok like ok here be a pointer to -pron- structure there but -pron- could be that that return a negative one mean -pron- fail ok so -pron- could store that inside a little variable here -pron- be but -pron- could also put this directly inside some kind of conditional test right so let -pron- put this inside",
    "let -pron- see if -pron- correspond to a failure in other word -pron- get to negative one right so if that be true should -pron- repeat this or not -pron- only want to repeat if -pron- actually see that -pron- just get interrupt so i can do this in one go i can say all right and if ever know k be equal to ok -pron- just interrupt then go round the loop again so here be -pron- trick that be all big expression for awhile and notice -pron- as a side effect of evaluate this while -pron- actually call sam wait ok so put all that inside there and drop a t t inside and for the actual body of the while loop do not do anything ok right so that would be more production quality code -pron- may as well log any other error as well so",
    "get zero value here then maybe -pron- actually want to exit or log -pron- somewhere so for example that would that would help -pron- catch if the counting semaphore be not properly initialize ok so this be a lot of annoying code to write each time and actually make -pron- hard for -pron- to generally read -pron- code so also people tend to kind of put this code inside a little function call so -pron- may want something call say same way reentrant or -pron- same weight which kind of do this error check as well and do this check for interrupt right that will send wait what about really right i guess a little bit more tricky and -pron- will so let -pron- do sleep and then -pron- will do read and write ok so with read and white -pron- be tricky because this can return in complete set of byte so really so let -pron- do let -pron-",
    "interrupt -pron- just go to go round again right and retry -pron- may return negative one and some other error in which case let -pron- just kind of quit to say -pron- be sorry maybe someone pull out the usb or the network connection be close but -pron- need to handle that differently maybe the driver become corrupted or something like that or maybe -pron- do not have write access anymore what else may happen -pron- may have some number like oh i must have right to thirty seven byte but that be not enough so let -pron- keep account of the true number of bite that -pron- have actually send so far and then go round the loop to try to send the remainder obviously -pron- do not start from the beginning -pron- want to start from whatever offset that -pron- have count up so far or maybe -pron- have now get to the point where total byte",
    "say yeah -pron- send all the byte ok -pron- be do -pron- be do with this return so -pron- have actually get to write code that cope correctly with all four of these situation for read -pron- also have the possibility that -pron- would return zero which mean ok that be -pron- -pron- have read anything and there be no more bite come through this pipe be now closed for business i can tell -pron- no one be go to read anymore or this stream safe the terminal be not get any more bite or this file -pron- have reach the end of -pron- ok so again -pron- have to write sophisticated code to think about these possible different state right i finally be sleep so -pron- sleep -pron- say please sleep for so many second but -pron- be possible to be interrupt so let -pron- have a quick look at sleep this one be go to be a little bit easier so -pron- see -pron- probably want section two let -pron- try that section three ten",
    "value return because so zero if this sleep the require amount otherwise return the amount of une sleep ok so -pron- could keep track of that in fact this be a good way to start think about how -pron- may implement white as well so let -pron- sketch this out and that will be enough for this video ok so with sleep here be what -pron- could do in fact do i have that go ahead today ok so so -pron- interruptible sleep here ok so -pron- sleep ok -pron- be go to have the number of second that -pron- like to sleep so let -pron- keep track of the",
    "like be go to be an analogy for the number of byte that -pron- have manage to successfully send with -pron- right call as well ok so -pron- will have a like a do here that can be initially zero and now -pron- will just say ok sleep right so well ok so i need a after available in here like ok sleep and how many sleep do i how many second i want well this be total number of that -pron- want to have but -pron- have do so many second so far gay right k so will put that in there and will know that sleep return zero if the if -pron- be actually manage to sleep number of second otherwise for sleep -pron- will never"
  ],
  "8eabf8ac-475f-41e0-83f4-7e1e117f86f0": [
    "hey class so let -pron- talk about why anyone would use sig action instead of signal so signal be great be a great introduction to signal and -pron- do have some limitation however first off -pron- should not use signal with multithreade program sig action be far more portable way to do this correctly the second thing be so not only be -pron- officially support support program second thing be to see action allow -pron- to specify an additional mask of what should happen when a another signal occur bad -pron- be inside a signal handler ok so let -pron- have a look at how -pron- can use -pron- then so -pron- start off look a little bit like a signal core to be able to register a signal handler except that in addition to have just provide a signal so for example -pron- may say ok -pron- be go to install something",
    "set up one of these struct call sig action so the same name as the actual system -pron- be go to use and justice before guess what if -pron- really want to -pron- can get the old value as well right so what be -pron- find inside a cig action alright so several thing here first of all some flag -pron- should talk about -pron- can give some hint about what should happen when a signal handler be fire sekli here be the mask be these go to be extra access extra thread mask or process mask be -pron- inside the signal handler so here be a justification suppose -pron- be handle a real time signal and -pron- and -pron- be critical that -pron- do this quickly so -pron- do not want to be interrupt this code be time sensitive -pron- do not want to be interrupt steer the car",
    "at the time so let -pron- let -pron- turn off those signal that a low priority to -pron- the other thing to notice be that look this look exactly like a function to a signal handler that -pron- have see before -pron- write this kind of function here be the name of function -pron- be a pointer to something that take an int and return avoid that be just like -pron- signal function before there be an option however to say -pron- actually i want to know a lot more about the signal that actually happen so when -pron- work with real time signal and other signal -pron- can actually get a lot more information from the kernel about why this signal be create and what be go on at the time then door so there be a void pointer -pron- can use -pron- as well ok so this more complicated function be call a cig action and by default be not use -pron- have to specify a flag",
    "function call sing action not the handler so -pron- be not go to look at -pron- anymore inside two s forty one just but just realize that -pron- be scratch the surface here a little bit with skipping over some of these more fast detail so let -pron- actually have a look at how -pron- can set this up and -pron- will see then that the code be a few lot more line long than use a signal before so what do -pron- do let -pron- create one of these strut like the one above today -pron- be just go to make -pron- regular handler code so that will be -pron- little callback function -pron- say hey stop press ctrl c or hey sigpipe happen or sick child happen now -pron- need to set the mask and -pron- have to decide to do -pron- want to be interrupt bad -pron- signal handler be run so for example i can simply say yeah i do not need to set any more bit i do not need to actually prevent that set alarm from go up and from interrupt -pron- signal handler but if i want to be more conservative and",
    "run i could change this to fill set for example right so i set up the mask there be one more fun thing -pron- can do here -pron- can auto start realtor start -pron- posit course so do -pron- remember thing like read like right can return early let -pron- turn negative one and then -pron- have to check to see if ever know be set to be the special value of retry so that be expensive -pron- know -pron- come out of the kernel -pron- get to go back into the kernel -pron- would be great if the kernel would actually do this automatically for -pron- and so this be what this restart option will do be that if the if the system call be interrupt support -pron- and -pron- be be interrupt by a signal then -pron- will automatically restart the kernel call for -pron- automatically"
  ],
  "8ec6e5c8-eddb-435b-b7b7-0caa4b4d8ee2": [
    "hi ok so let -pron- make -pron- a little bit more complicated now let -pron- have a whole load of datum structure ok so in this case -pron- be actually go to have eight different datum structure here -pron- go right and so for each one of these -pron- be go to use a condition variable to block when thing be not ready and -pron- be go to need eight different lock now i probably could implement this code with just a single lock but then i may have unnecessary lock contention so lock contention be when one thread would like to continue but -pron- can not because another thread be currently hold the lock and so of course that effect performance sometimes -pron- actually need that behavior when another field be kind of into the same critical section but -pron- could probably in this problem get by with a few number of lock sorry a few more lock in order to reduce lock contention so so in this case -pron- have -pron- have get eight condition variable and eight lock plus here be",
    "-pron- to imagine that this actually could be a lot more complicated ok right so -pron- have get some initialization to initialize all -pron- condition variable and lock as -pron- can see all -pron- be do be use the array name so that will decay to a simple pointer type and then i can use pointer arithmetic to make sure i point to each of those entry so great i now -pron- have get all of those actually refer to actual kernel object which be go to be useful for -pron- actually go to do something for -pron- now let -pron- actually look look at the code that i want to be nee to be thread safe -pron- be go to have two method here -pron- have get a very simple modify method this be go to allow -pron- to externally add some resource to a particular datum structure so -pron- can see all -pron- be do be just modify one of the entry inside that away ok and then -pron- have get this other function which actually -pron- be go",
    "and each of -pron- one be go to be attempt to consume something from each of -pron- little integer so this be -pron- get the kind of the crux of -pron- that i somehow need this be not go to be i this be go to be some way i want to pull out from the argument the the particular index that i care about because -pron- be go to keep check to see if that value be sufficiently large and in this case well other than just request for one resource what -pron- be go to say be that actually i need to wait for two resource so as soon as two resource be available on that particular entry -pron- be go to steal -pron- away so this code be not yet thread safe",
    "-pron- do not know about cs241 and -pron- be just simply go to say well look keep check this value and do not continue until that value be at least two and then one stack condition be true once -pron- know that -pron- data value be at least two then modify that data structure here -pron- go -pron- be actually go to remov two thing from that ok so now -pron- have pull who thing off that data structure -pron- do a bit of processing and -pron- have construct a brand new toy and -pron- put -pron- into the next data structure so that be what this be go to do -pron- be go to increment -pron- data structure to -pron- right and -pron- be go to add one thing to -pron- so -pron- be actually go to run this code like i say for multiple",
    "inside -pron- data because i do not want to have a buffer overflow here i do not want to be on the end of -pron- way ok so let -pron- think about how -pron- can now turn this into something which be thread safe -pron- do not want to sleep for a bit this be where -pron- should call p thread condition weight case so let -pron- put that in there kay right and let -pron- sleep on a particular condition variable associate with this particular data structure so that would be cvs plus i here -pron- go right and -pron- will have a particular mutex lock that -pron- want to release so let -pron- have lock plus i ok right so what will declare then be to anytime -pron- want",
    "to make sure that no one else can change -pron- then -pron- well get the lock for the data structure right so up inside here before -pron- do anything -pron- read a kalpi threadlock p thread mutex lock on lock plus i and then when -pron- finish with that -pron- can release -pron- so -pron- may as well release -pron- as soon as possible let -pron- do -pron- right here so will now -pron- can porp call p thread mutex unlock on that same lock be lock plus i ok right -pron- will notice that -pron- be modify a different data structure down here so before -pron- do -pron- before -pron- do that -pron- should surround this with -pron- lock and unlock call for for the other mutex lock associate with that data structure so that be go to be lock plus i",
    "actually locks plus i ok so this be kind of sketch out what -pron- be go to do will look at some real code in the moment and simply down here before i modify this ok i actually want to make sure that i will require the right lock so -pron- be go to be for here call please i want to lock the white mutex lock that be go to be lock plus index and then a correspond unlock call down here right all -pron- do new -pron- have forget a few thing first of all if i be write this code i would certainly use assert to check that -pron- index be between zero and less than n otherwise -pron- be go to be look at an illegal or invalid piece of memory when i do this i have put in a certain at that point",
    "to sleep but -pron- never wake -pron- up oh dear ok so let -pron- think about when -pron- should wake -pron- up well -pron- should wait thing up whenever -pron- whenever -pron- may be that another waiting thread can continue so -pron- have see how be thread go to sleep if there be less than two item so if -pron- have -pron- have incremente -pron- value here and -pron- be now above two maybe i should be broadcast and wake somebody up so i could put some additional logic in here or i could just say hey bring the building the fire bell and let -pron- go round there loop so the late code i can write with bp thread condition broadcast and then if there be anybody sleep inside this condition variable if -pron- be block let -pron- wake -pron- up and",
    "ok right so remember what that do -pron- have always write rp threat condition wait inside a little while loop so -pron- will eventually in the next few ns be able to escape out of there and when -pron- escape -pron- have the mutex lock but what do -pron- do -pron- immediately around the while loop again and -pron- will check to see if -pron- can now actually proceed if -pron- can not thread will go back into peter condition wait and block again so that be what -pron- be do be -pron- be just say i do not want to repeat any additional logic in here just wake up somebody who may care and simply -pron- need to do that down here where after -pron- have date the i plus once datum structure -pron- better call p thread condition broadcast",
    "have a look at some code ok and here be -pron- code -pron- will see that -pron- be actually litter with a few extra thing that now i actually get another thread that be actually go to be display what be go on and -pron- can see whether particular i thread have manage to lock mutex lock so if -pron- get dark inside this moment here -pron- will be stick on lock if -pron- be about to go into peter condition wait -pron- will see that -pron- will see nap here ok so if the value be less than two -pron- be go to nap the other thing -pron- may notice be that -pron- have now update the code so that if -pron- quick variable have be set then i will also immediately break out of here ok so here be -pron- take two item and then i also grab the",
    "at one fed be sufficient l a little bit ok right and do when do i unlock the very first very first thread here let -pron- have a look queso unlock unlock all right here -pron- be so i eventually unlock down here but i could actually cause unlock early here so let -pron- let -pron- put that now in turkey a more reasonable order i would like to unlock much early so there be no point unlocking so late ok and so convention let -pron- always put -pron- broadcasting signal inside -pron- lock and unlock code for case and",
    "p take signal be just go to wake up one fit and in this case be perfectly fine because actually -pron- application be only use one thread for each datum structure ok so just for fun i use pthread broadcast here but let -pron- skin down see what -pron- have get right -pron- have get some other code call get char -pron- keep go until -pron- press q all this normal character leave ok when -pron- want to quit let -pron- call quit and -pron- be go to just call broadcast on the very first thread so right let -pron- let -pron- let -pron- run this so i want to see ok -pron- have get -pron- binary game right so gcc if -pron- want p thread please ok find -pron- game",
    "nat right so let -pron- start add a few thing to this -pron- be go to add go to call that modify method on just zero and i can start send item in right and if -pron- notice what -pron- have actually get be a binary counter because -pron- be able to eat two two cookie and then generate one cookie to -pron- right -pron- have actually get something which be go to count the total number of resource or cookie that -pron- have add here to -pron- o th entry there -pron- go and each time i press zero look like -pron- be -pron- be add about four cookie maybe",
    "like eight cookie right so i can so each time this run as -pron- add more each thread will get a signal to wake up so the last thing be let -pron- press q here and the funny thing be that -pron- all quit let -pron- understand why because -pron- only call p thread where be where be -pron- quit -pron- only call this broadcast here on the very first condition variable ok so what be -pron- do here right so when -pron- quit then that first red quit -pron- be go to call peter condition signal on the next thread ok so if that thread be sleep -pron- wake -pron- up and then -pron- will notice that the quick variable have"
  ],
  "8f1b71ff-82be-442b-835a-49c8714f9776": [
    "hi so let -pron- look at the four condition of deadlock an as -pron- know these -pron- call the coffman condition ok right who originally identify -pron- and as -pron- know -pron- be necessary and sufficient -pron- need all fall to be true and exactly or for -pron- to be true and then -pron- know that -pron- have meet the condition for deadlock so what be -pron- let -pron- actually look at some definition here so here be the first wanna process be currently hold at least one resource and request additional resource which be be hold by other process ok so -pron- be hold and wait so that be a hold and wait condition ok if -pron- process be all thread only need to actually hold on to say just one mutex lock at a time that deadlock would be impossible ok so that be how hold and wait right there be a set of wait process be such that",
    "wait right p three and so on until -pron- get back to p r p one ok so this be -pron- circular wait or cycle in the wait for graph and the process or thread wait for graph also know as the resource allocation graph so let -pron- write that out carefully resource allocation graph ok right and the next one a resource can be release only voluntarily by the press be hold -pron- after that process be complete this task and in other word -pron- can not say hey little johnny pull down that those pencil put down that paper ok so this be no pre emption"
  ],
  "923b48d1-82c9-4c57-9d23-3c0a31dd37d0": [
    "oh i forgot to say one little thing about errno down here which be when be -pron- set ok so here be a big idea be that -pron- set to zero when -pron- first program first start up -pron- value be change whenever there be an error with a system call and -pron- read the man page to learn more about that but -pron- be never reset back to zero so if i have a whole lot of call let -pron- say that i try to read from one particular file descriptor and then try to write those byte somewhere else to another file descriptor fd two over here if i then check if errno zero or not then i can not actually tell -pron- whether where the error curd maybe -pron- happen early on inside -pron- read maybe -pron- happen inside -pron- right or maybe -pron- happen even early so just think of be a global variable that if an error occur -pron- change -pron-"
  ],
  "92db69f3-9bba-45d8-8f6d-84d8ae3c2b2e": [
    "ok so let -pron- get a server run right so if i have python two instal i could say python simple http server something like that but maybe the ttp be actually capitalize but -pron- have python 3 so i can say right python http dot server ok and be -pron- serve or server -pron- be go to guess server ok great so this be now listen for http request on port eight thousand great let -pron- give -pron- one k so here -pron- go home fire fox -pron- be go to connect to localhost colon and then the port number so off -pron- go and wahoo what do -pron- see -pron- actually see that this little module by by python give -pron- a directory listing and then i can click on a link here ok and actually see the code that -pron- just write today which be kind of fun ok and if i want i could have a little website here",
    "here -pron- go one of the same thing now from -pron- c code ok so -pron- need to make sure connect to port eight thousand on localhost and i want to make sure -pron- be request the homepage ok so that look pretty good right let -pron- try this so -pron- will see that -pron- python server be be happily report all the thing that firefox have be request so let -pron- break out of that now an run -pron- in the background ok so off -pron- go because now i want to start compile -pron- code right so compile the client and run -pron- and -pron- see the beginning of this yes -pron- connect -pron- see a status message of two hundred which mean",
    "length be four hundred and eighteen byte but for some reason -pron- do not see the content -pron- problem right now be that -pron- just call read once and so -pron- get back the header but that be not enough to see the rest of the information so time to wrap this inside a loop ok so let -pron- keep on reading read until -pron- do not want to case so let -pron- think about first of all -pron- want to escape this if if read return a zero or negative value so zero remember for read mean that there be no more byte so zero would mean the end -pron- be the end of the line no more byte for -pron- negative one would be failure so in either case -pron- will stop so ok and that look like -pron- be go to be enough to read all of -pron- byte ok so let -pron- go",
    "the status information so this header information at the top here -pron- would not normally display to the user -pron- can see that now -pron- be be serve by python and here be a stuff here be the html document that -pron- can now pause and turn into a nice look web page and look here be all of the the link that -pron- may want to follow so for example here be client dot c and here be a out etc so the last thing i would do be let -pron- actually request the byte of client dot c and then -pron- have get a self - aware client program so all -pron- have to do be just change the thing that -pron- be request ok so let -pron-"
  ],
  "93398f4a-2825-4434-b33c-6fcac2f37ef7": [
    "hi ok so i want to talk about a classic problem call producer consumer and in particular -pron- be go to implement this use a fix sized ring buffer so here be the game -pron- may have multiple thread or even process that produce a lot of thing and then consumer which consume a lot of thing and -pron- need a way to couple these together so let -pron- put some kind of queue between -pron- and in cs two twenty five -pron- may have implement a queue that could grow arbitrarily large but what -pron- 'd like to do instead be to say ok producer please stop right now i do not want to just exhaust all -pron- memory hold onto these thing that -pron- be give -pron- -pron- 'd actually like to block -pron- until -pron- be ready to consume these thing simply for the consumer -pron- want that thread or process to be block if there be nothing available to consume ok so here be what -pron- be go to do between the producer and a consumer -pron- be go to put a little ring buffer",
    "power good -pron- be go to get today which will hold all of -pron- value so -pron- will go out to amazon buy -pron- some circular memory if -pron- be so as -pron- give -pron- thing to store inside this ok like number seven eight -pron- be go to start write -pron- in here so in order for -pron- to keep track of where to put thing alright i will have a little index in here k that point to this next slot that i should use and also in order to keep track of where to pull item from i will have another little index to say right when -pron- want to read from this this be the entry that -pron- should take right now one thing to understand be that often -pron- distort kind of bit inside here or pointer etc and",
    "kind of bit copy so these value may actually hang around inside this memory so what be important though be be to understand that where -pron- be read and writing from this ring buffer be control by these two little pointer or there be two little index ok now in practice -pron- be not actually go to write buy some some circular memory instead -pron- memory be linear ok here -pron- be an so let -pron- put aside some memory for example sixteen sixteen little slot in here so i can keep divide this up ok so now -pron- have get sixteen memory location and -pron- trick for make certain memory will just simply be if i fall off the end here then start at the beginning so -pron- be perfect for all the people that believe in",
    "use modulo with matich but -pron- be go to use bitmaske ok so if -pron- have get a little index here let -pron- call -pron- in a little integer here then as i incremente i ask -pron- only want the low bit so if -pron- ring buffer -pron- say of size sixteen then i need to just take the low for bit and how can i do that i can say bitmask please with fifteen or if i want to write that in text decimal of x f so that will just ensure that each time i use this -pron- end pointer in here will keep go around here and when i fall off the end i will start at the beginning now -pron- need to make sure that the ring buffer never get never allow -pron- to push thing in if -pron- be already full and never allow -pron- to pull thing from -pron- if -pron- be already empty otherwise i will start to either off see a buffer overflow issue or",
    "there be nothing actually there ok so in these situation -pron- actually want to block alright so let -pron- think about how -pron- can do that and for that -pron- be go to use counting semaphore -pron- perfect -pron- can use accounting semaphore to represent the number of item in there and -pron- can use a counting semaphore to represent the amount of space leave and remember count semaphore behave like a pizza box ok and -pron- be go to add and remove pizza slice so let -pron- think about how -pron- can do this alright so -pron- will \" have a little method say call enqueue which be go to add thing in here so here be -pron- kind of value -pron- definitely care about the type and -pron- will need some kind of buffer in here so will say some kind of buffer let -pron- imagine -pron- be a size sixteen if -pron- be",
    "of character pointer how character pointer if -pron- be a buffer of task for example because i want to give each thread different task to do -pron- may look something like that point at task ok so let -pron- think about how -pron- can implement this so first of all yeah i add thing to -pron- buffer i want to keep track of where and like i say -pron- want to turn -pron- into a little ring so let -pron- just take the low fifteen slot here and like -pron- value and what about when i want d cue so let -pron- pull thing out of this so d q pronounce deck right and i want to say right so the result will be ok i have little index here where where to be with thing again make -pron- a circular little world here and loop and",
    "to think about here first of all let -pron- do the blocking ok so the blocking -pron- actually want to block if there be not enough space so -pron- will use a counting semaphore to say please take -pron- pizza slice and -pron- will have account semaphore before which represent the amount of space available so the number of empty slot in -pron- data structure so the number of space and i will have the similar when i want to remove thing let -pron- have a counting semaphore that represent the number of item actually inside -pron- data structure number of item so remember how this work the same weight will return immediately if -pron- be able to take a pizza slice so if -pron- be able to decrement the internal counter of the counting semaphore then then -pron- can continue alright",
    "there yeah right sam let -pron- write this and then get -pron- case sam let -pron- add a pizza slice to the number of item cave and after -pron- have ok after -pron- have dequeue something let -pron- make a note of the number of space have now increase can now be increase by one notice -pron- only do this after -pron- have modify the datum structure -pron- do not want another thread to immediately to continue until after there truly be what item that have be write ok so only after -pron- have actually push -pron- in there do -pron- actually want wait dequeue to continue",
    "one thread and cure on one thread dequeuing but -pron- better think about what -pron- need for these these initial value how should i initialize this ok so i need to say let -pron- sketch -pron- out here -pron- be part of -pron- initialization i would need to say ok same initiate ok how many space ok so -pron- want to say there be sixteen space and how many item inside -pron- current datum side -pron- away that will be zero so -pron- be the last value that be important here this middle one be a hint if -pron- want to be able to share this counting semaphore across multiple process use share memory but more about that in the future also notice that -pron- counting semaphore here number space and numb item -pron- be",
    "-pron- in turn apple maybe think about this as a summer project ok so great -pron- have get something which work provide only one thread at a time be call nq if i have multiple thread then -pron- could both get past this line but -pron- changing of the buffer here be actually critical section i do not want two thread to see the same value of in here so first of all declare these right and so i well have a mutex lock inside here so pthread mutex look right and i can unlock that ok now this be actually one example where the encoding in decode happen at different point in -pron- data structure and so i could actually have two different lock there -pron- go so i could have a second mutex lock"
  ],
  "935f6155-a7a0-4504-b818-62e2db066493": [
    "ok so let -pron- have a look at -pron- code right so for main ( ) -pron- be go to call this directory list so right let -pron- let -pron- jump in there and see what this be suppose to do so the idea be that -pron- can print out all of the file inside that directory and also recurse into any subdirectory ok so let -pron- start kind of work through this and see what -pron- want to change right so -pron- be kind of call opendir great that may fail so -pron- really need a test in here to say if dirp be zero be there be null then -pron- could not open the current path as a directory maybe that be because -pron- do not have permission to go into that subdirectory maybe the very first directory -pron- be give be not valid anyway so -pron- should make that code little bit more uh engineer be a little bit well so -pron- actually work right so then here be -pron- standard way to keep read directory",
    "out the next entry so with that -pron- be go to get name like for example suba and that be not a complete path -pron- would actually like to when -pron- make -pron- recursive call -pron- actually want to keep track of how deep -pron- be into this recursion so -pron- need to construct a new path which be the current path of -pron- argument here ok plus the name that -pron- be go to see as well so great -pron- have get -pron- some stack space for this now let -pron- use sprintf to write into this so -pron- want wait a moment this should not be new path this should be take the exist path , -pron- argument , and the name that -pron- have just",
    "-pron- right so at this point alarm bell should be go off because that mean -pron- do not actually set aside enough space ok so this should actually be plus two one for the forward slash one for the null terminator at the end this may seem a little odd for those of -pron- that know c that -pron- be allow to actually have expression inside here to have a variable length sized array base on the expression and yes early c standard do not allow this however modern compiler will allow -pron- to do this right so now -pron- have print that , sorry , now -pron- have calculate that -pron- can print -pron- out so in this case this print format string be clearly wrong -pron- could reduce -pron- down to just print out the name or -pron- could print out say the new path and then finally let -pron- recurse so right now this be go to happily recurse into everything even regular file at some point -pron- should",
    "only recurse if -pron- come across a directory ok so let -pron- have a go at fix this right so let -pron- turn that off and ok so -pron- have get -pron- starting point here come on mate off -pron- go -pron- be not sure why -pron- be take so long ok there -pron- go right so let -pron- make some more change then so if this fail so if dirp be null then -pron- can print something out like fail to open the directory and -pron- can have an error as well so ok so the path and strerror of errno ok so if that happen do not pass go do not collect two hundred dollar but immediately",
    "so let -pron- have a new path alternatively -pron- could of course have say new path of max path ok so that would be max new path of max path plus one because the kernel do not support path long than this however that seem kind of wasteful for all the small one -pron- want to make and secondly i like the idea of definitely make a variable that be go to be the correct length -pron- may argue that with -pron- have no need to calculate strlen each time around the loop so maybe -pron- could optimize that out ok so -pron- have calculate this new path and this better be path ok -pron- will append the name that -pron- be read around",
    "and now -pron- will recurse ok so let -pron- get start on this just to see -pron- kind of work initially right so -pron- will compile this clang r dot c ok -pron- need the -pron- need probably uni standard -pron- need that be go find out what what oh where be -pron- where be -pron- ok let -pron- look up strerror and -pron- should get -pron- in there ok so -pron- will use standard io right do i not have that ok where be -pron- not like -pron- errno ok right ok so do i miss an include standard h or do i just have a typo oh so",
    "ok let -pron- try one more time use of undeclared identifier errno for aaron aurora right let -pron- cheat use the ok include what -pron- leave include errno on a mac oh of course errno dot h right so let -pron- pull that in ok right ok so now ok that be look well and fprintf -pron- need to call send to say i want -pron- will send this to not standard out but standard error so let -pron- send that to standard error ok so now when -pron- run -pron- say fail to open null bad",
    "print out a usage string here so let -pron- let -pron- improve this a little bit that say look if -pron- do not give -pron- one argument so -pron- expect argc to be two then let -pron- print out a little usage message here to standard error i will say usage percent s directory ok and -pron- need the program name ok right and how about -pron- new line ok so now -pron- run -pron- fail to open ok almost there -pron- just do not actually quit so let -pron- say exit with an error value at that point ok so now i want to return",
    "out -pron- usage thing so great so if i say -pron- a.out zero oh then -pron- expect that -pron- be go crazy -pron- be never stop alright well in fact -pron- may stop eventually but i do not want to wait for -pron- so what happen what do -pron- forget well -pron- forgot that -pron- get two special directory for free when -pron- ask to enumerate all of the entry -pron- get dot and dot dot so -pron- want to skip those rather than try to recurse into -pron- ok so how can i do that well let -pron- look at the name so basically -pron- 'd like to say something like be the name equal to a single dot right so what be the correct way to do that -pron- can say let -pron- do a str compare ok and see if that be equivalent",
    "that -pron- have find just the current directory i do not care about that right the other possibility be that -pron- be a double dot so if that be true then great -pron- want to just skip these entry so how can i do that i can just say continue continue around the loop ok right so let -pron- compile this and this time ok now -pron- be look a lot well right so now -pron- have get the problem that -pron- be try to recurse into every single entry that -pron- find i think -pron- be time to add -pron- stat code in so -pron- will only call directory list recurse in the case that -pron- truly be a directory so i want to say i need a struct let -pron- type a little bit struct stat s ok and i can say alright stat take a look at this new path and decide if -pron- be a directory",
    "mode bits -pron- have to say right let -pron- pull out just the bit associate with there -pron- go so i want the mode bit of -pron- struct so if that be non zero then i know that -pron- be look at a directory ok so notice -pron- have do two test and -pron- have check that stat succeed and only then do i actually trust the value inside that struct otherwise -pron- be arbitrary -pron- be just whatever happen to be on the stack at this point right so if -pron- win great let -pron- recurse ok right so now let -pron- have a go right so -pron- will compile -pron- and i can not type let -pron- fix that little s ok right so what do -pron- notice be wrong now so let -pron- run -pron- and -pron- appear to work how ever however however however -pron- have forget to do something very important which be",
    "need to make sure -pron- have free up all resource so this one ok there be no open directory but down here i do have an open directory ok so close directory alright and -pron- be go to say here be -pron- dirp there -pron- go and so if -pron- look at say man opendir there -pron- go ok -pron- can see that later -pron- should close -pron- ok ok so ok i should just prove that this work all right and -pron- will see that -pron- be happily go into",
    "so for example if i say ok let -pron- make some directory and make all the parent one which do not exist i could say right one two three abc d ok so now if i look at start from the beginning -pron- will see that -pron- make abc and d so -pron- have get all these direction and -pron- would happily go into all of these different directory be not that cool right so great -pron- can now recurse through directory -pron- learn quite a bit -pron- have use stat and the mode bit -pron- have use sprintf to construct string and -pron- have use opendir and readdir in order to read each entry of directory ok great so be -pron- work yeah -pron- look pretty good there be be -pron- perfect no because now -pron- can do some pretty exciting thing so great maybe this be the beginning of -pron- backup program",
    "say any changed file which be new than -pron- offsite backup but i can still make -pron- to be confuse so let -pron- just have some fun with this by make some symbolic link what be the symbolic link good question -pron- be go to look at that in a future video but right now -pron- be just go to make one -pron- be go to go into a directory let -pron- go into say one two three a ok and right now there be not much there so let -pron- make a new symbolic entry -pron- be go to say ok this time link and -pron- be go to be symbolic and i want to go to dot dot slash dot dot dash dot dot and i call -pron- say follow alright so now if i look here -pron- have get a directory call follow so here -pron- go let -pron- go back to the starting point here -pron- be and -pron- will run -pron- little program now and -pron- will see oh -pron- follow -pron- and in fact -pron- happily"
  ],
  "948fe415-3254-4286-bc66-225eba2cb234": [
    "ok do i have sound yes ok so last thing -pron- do today be actually kind of put everything together that -pron- have see so far and talk about how to make a real auto grader so today if -pron- would write an order great say in python -pron- would not necessarily to make -pron- own pipe but guess what python -pron- be make pipe for -pron- so here -pron- go let -pron- see how -pron- work and this be actually base on real cs two forty one code here that -pron- use to test some program and i want to kind of notice that there be some kind of production quality inside here that -pron- do ashley thing like check the return value of -pron- system call so let -pron- check the pipe work now if -pron- fail or -pron- be go to do be just quit this little kind of error function error message but at least -pron- be check to make sure that everything be truly truly work now when -pron- be go to create a great i actually need three pipe i need one for standard in one percent without one for standard error ok so to create all those pipe here be what would do -pron- give -pron- an integer",
    "-pron- be go to play with and then that be past the address of this little away into -pron- create pipe and each time -pron- be go to call -pron- pipe command back up here ok so i end up with now three pipe ok sue now -pron- alternator have to use fork so will do the same thing again here so let -pron- call fork but if fork fail do not just try again now -pron- want to quit with some kind of error message so that be the same kind of idea as -pron- piper quit let -pron- just rap the system call with quick test ok so the child process be go to become the actual executable that -pron- want to test so down here be when -pron- actually call exec and -pron- be go to say ok here be a program name that -pron- want to run here be all the argument and",
    "output and standard error ok so how do i do that well there be one of the thing call duck to sewed up two allow -pron- to rename file descriptor so right now -pron- have get -pron- pipe file descriptor which -pron- be go to use to actually be able to send datum to -pron- process or all capture this output but i want to rename those to be zero one or two ok so now -pron- just need a little bit of thought to say do i need the read end or the right end of a pipe so for example for standard out that be go to go there -pron- go into the right end of the pipe because -pron- be write into the pipe and simply for standard error meanwhile for standard in if -pron- be go to be read from a pipe -pron- need the read end of the pipe so that be why",
    "ok so anything else -pron- really want to say hit just that but here be -pron- file -pron- exact call over here -pron- can see that -pron- be use thing like exact v all the kind of stuff that -pron- have see inside cs two forty one oh yes and one last thing from today 's lecture hey look at this -pron- after -pron- have make -pron- pipe inside the child let -pron- remember to close the unused part of the pipe so the child only need the right end of -pron- first pipe so let -pron- close the meat end and similarly first a bit out in standard error -pron- only need the the -pron- do not need the read end of these pipe -pron- be go to be write into -pron- so let -pron- go to close these as well right so great and that be the beginning of"
  ],
  "94ea6cdc-aa81-48b6-84f3-323a89a40075": [
    "hi welcome to the last video of lecture seven ok so what do -pron- got right spot some so first thing i do not like be the formatting in this these really should be indent and well lay out ok so villa function return a pointer character and see on the stack -pron- be go to have sixteen byte call result and i strike out into result high so -pron- be give -pron- the address of the edge ok here be the first thing i do not like stroke at say concatenate in other word walk along the bike which be already there until -pron- find that zero bite but -pron- never initially result so -pron- would just be whatever happen to be on the stack memory be completely arbitrary so that should have be stewart cat but what should have be through a copy ok right and then -pron- say ok -pron- have get a pointer and -pron- point in 's right be the address of a not equal to know",
    "hey -pron- be on the stack and that be what -pron- be ask for where be -pron- age and -pron- be -pron- be a little stack variable some automatic variable here -pron- be -pron- declare -pron- right here so i know for sure that actually ok -pron- be just useless code so that be definitely valid code and always true so -pron- will print yes ok -pron- will present d here be go to be forty two ok now what do -pron- do make some link list in see ok this can be tricky than -pron- first appear ok so -pron- have get -pron- first link list -pron- have get some struck somewhere now when -pron- see the word strike do not panic just consider that a bit like a class in c plus plus except there be no constructive 's no code be go to run a tool all -pron- be do be simply say hey -pron- have get a memory layout -pron- be go to define somewhere else inside -pron- code so the compiler know",
    "struct and for now all -pron- be do be to say -pron- have get a variable that can point to this struct go to call -pron- first and in the future maybe i want to kind of reader right part of that memory structure so -pron- be lay out in a certain way and so thing like if there be a pointer store inside that struct then i can actually get to that value so if -pron- tell -pron- where that that be truck be because -pron- have get appoint to -pron- like -pron- do first then i can start read out different part of that strike ok so what do -pron- do right -pron- call first and -pron- say size of struck link ok alarm bell should go off at this moment first of all -pron- be use malloc -pron- well slow down and check to see if -pron- be allocate enough bite and be -pron- no of course not -pron- make a mistake -pron- ask for the size of strut link pointer which be go",
    "byte to actually hold a real struct so how do -pron- fix this -pron- do not need the astrex here -pron- actually need the size of the real memory structure ok and then -pron- free -pron- ok so now -pron- go back to the heap that memory be available for other thing -pron- certainly should not use any of that memory but that be exactly what -pron- now do -pron- now say ok first i want to go into that strike an look at the next pointer and then free that as well ok so at this point -pron- be on very dangerous ground because this piece of memory that -pron- be now try to use that be point to be no long hour be no long guarantee to hold any value that -pron- may have put in there and secondly what value do -pron- think may be in there be malik for performance make no guarantee about the content of the memory that -pron- give -pron- -pron- could",
    "and for security the kernel be give -pron- piece of ramp that -pron- be personally zero out just for -pron- or -pron- could be that -pron- be call malloc and free a lot and so now -pron- be malloc -pron- heat memory look like an old dirty sock drawer where bit of memory a cold hole arbitrary value from previous malloc call and so -pron- be just treat -pron- as a struct but actually all the memory be just a whole lot of zero and one so the value that -pron- be go to see for this next pointer -pron- be completely arbitrary even if -pron- have not free -pron- so that be several mistake here if -pron- actually want to use thing then do not freedom first only freedom after -pron- have finish use -pron- and well code would then set this next pointer to zero after after"
  ],
  "95b8a0e0-2c36-49bf-aa43-15733ee06e86": [
    "hi welcome to lecture four in this lecture -pron- be go to talk about how to get datum into -pron- process be c be a great language for processing because -pron- can be so fast so let -pron- get start with a little puzzle right so what do -pron- think about this variable be -pron- goodness so before -pron- say to short let -pron- have a lot that be a lot of point be go on right well hold on a moment what -pron- can say about this be that -pron- little variable pdr here stanley for pointer point to something and -pron- be just go to look at that very last asterix to say ok great i know that ptr be a pointer and at that point i can just simply stop i can just treat the rest of the information there be a pointer pointer pointer pointer etc etc as useful information for the day that i actually decide to follow -pron- pointer in other word the day that i actually decide to use -pron- and go to memory to actually read what be in there and as -pron- can see -pron- can what -pron- find that now the memory address and so on and so on and so on and eventually if -pron- follow all of those memory pointer -pron- would get",
    "to worry about that right now -pron- can start just simply by say -pron- little variable here be go to be four byte or eight byte or however many byte i need to hold a pointer so do not do not get too crazy when -pron- when -pron- see multiple point to point right and realize as -pron- write expression like asterisks pointer -pron- be basically take one pointer off the type here or if -pron- if -pron- write ampersand pointer then -pron- be find out the address of -pron- current variable so what would that do that to the type ad and other aspect -pron- now have another pointer to -pron- pointer pointer point etc etc etc so that be -pron- kind \" of little trick be do not panic if -pron- see pointer to pointer to pointer -pron- can just like recursion -pron- can hide those detail and the only think about either"
  ],
  "95f1881e-d728-4112-81d1-6c7060a34beb": [
    "hi ! ok , so let -pron- talk about how -pron- can actually write write ( ) correctly . ok so here be the game , that when -pron- actually use write ( ) -pron- do not necessarily send all of the byte that -pron- request . ok , so -pron- be go to have to keep track of how many byte -pron- have send so far so when -pron- first start -pron- have some kind of pointer to some memory but if -pron- call right again then -pron- do not necessarily start from the very beginning of the buffer -pron- can kind of sketch this out to say alright if this be order the bite -pron- want to send ok initially great -pron- be go to say hey why sender all all of these byte but if right return to say ok i sense a four hundred of -pron- then when -pron- call right again will say ok well actually i want to start from this point here because -pron- have already send these and do not send say four thousand byte but now say three thousand eight hundred and if that succeed but only succeed by send say",
    "and again -pron- be go to say alright well now -pron- send these bite so far and i now want need to still send three thousand seven hundred byte ok so -pron- need to keep track of this -pron- need to keep track of when -pron- recall and restart write where -pron- want to restart from simply if -pron- right return negative one then do not add negative one to the total byte send so far instead just reissue just restart from the same point with the same number of byte remain ok so let -pron- have a go at try to write this and realize that be also go to be time when -pron- just want to give up because say the pipe have be close or the network connection have be close or the file that -pron- be try to write to say can not be access anymore perhaps someone just pull out the usb key for example right so let -pron- keep track of a few thing",
    "that -pron- send so far ok so let -pron- have say a total and -pron- can add that to the ok ok so this be a ton of bite that -pron- have send and -pron- will need a sign version for the result of right so let -pron- just have a little off -pron- result from call right ok and let -pron- keep go around the loop then so well well well -pron- total be less than the length then i want to keep try to ask right to send more bite ok so while total be less than len key so -pron- well actually make sure this be equal to equal to zero right -pron- initialize up then let -pron- call right ok so",
    "right while in here so while this be true key and let -pron- grab the cold white as well as a side effect -pron- ok so right ok let -pron- call right so ok right here zafar descriptor but i do not want to start from the beginning of the buffer let -pron- just use pointer arithmetic on a void pointer here ok -pron- know compiler today will accept so well but take buffer plus let -pron- add an offset ok right but the total number of byte -pron- 'd like to send be also go to be ok let -pron- take lynn minus the total ok right so that be the end of the great call this be -pron- inner parenthesis cave and now the right -pron- right",
    "-pron- could be that -pron- just need to handle the restart the -pron- be interrupt say because -pron- have a signal ok so if i be negative one then -pron- know -pron- just fill out with an error but the error -pron- be try to catch here be just that -pron- be interrupt a case so what should -pron- do here right so if -pron- see that the ever know have be as just hey be interrupt then all -pron- want to do be just reissue the go out again ok so in this case -pron- will just continue meaning which be go to try do not change -pron- value of total ok right so that be easy one ok what about if i be different",
    "one again but this time -pron- do not have just a oh -pron- want to retry case so let -pron- handle that for now to say look for all other error -pron- be just go to give up at this point ok so now -pron- be go to also return negative one to say an error occur ok now -pron- be up to 's -pron- could write more sophisticated code here perhaps -pron- want to say oh -pron- manage to also send a few byte but today -pron- be just go to treat this as ok a big problem -pron- fail at send order bite to the buffer right what else can happen well -pron- can be for right that -pron- have actually manage to send some bite ok so now let -pron- treat all the other value as a reason to celebrate that -pron- have manage to actually send a few byte ok and so now -pron- just want to kind of",
    "ok so -pron- will keep go around and till -pron- have get to the point where -pron- manage to send all the byte so this point -pron- all know that -pron- have actually manage to send all the byte so let -pron- return the total number of byte send ok nowhere put some newline but -pron- have run out of space so let -pron- return -pron- total k which will actually be the same as the number of byte request so ok so -pron- successfully manage to send send the bite now some quick comment about this be ok have -pron- deal with all possible possibility here key so -pron- have get the interrupted yes -pron- have get the possibility of a different era in which case -pron- be just go to give up and return negative one and will let the caller check the value of ever know or -pron- have get the case that -pron- send a partial number of byte",
    "have not yet be send and -pron- can do that multiple time or -pron- have get the case that -pron- have now send all of the byte correctly to the file descriptor so great quick comment on this be if -pron- implement something with read well with reed -pron- have get one other possibility which be that there be no more bite to read another word the pipe or the stream be finish and shut down ok so for read -pron- will have to also do the special case of reader turn turn zero mean the pipe be now empty or the socket have send the last -pron- read everything from the socket and -pron- be already shut down at the other end ok so the last thing to mention here be that right now -pron- be work with read and write which work in a blocking",
    "the pipe be full then these call be block -pron- will not return until -pron- be able to complete however -pron- can also set in future reading right to work asynchronously which be an advanced use of read and write and if -pron- do that then that be a new condition that -pron- will have to work inside here where -pron- will say ok -pron- could not complete rather than block -pron- just return a special air condition which point -pron- will want to handle that appropriately but this today be enough to be able to accept the fact that -pron- may not send or bite and also deal with window right call be interrupt with an interrupt and when -pron- see this interrupt -pron- know that no bite be actually send that because -pron- return negative one -pron- mean that -pron- can be guarantee that"
  ],
  "983b6f0c-8731-4f16-a4a4-67e9285836e5": [
    "hi welcome to the next lecture -pron- be on lecture twenty nine so let -pron- get start alright first of all a quick review then of chain the mod bit which allow -pron- to change the access let -pron- have a look at some of these and also notice that -pron- be actually go to play with two thing here chmod and chown ok so what do -pron- think the follow do chmod on the six hundred file a ok so remember how to read these this be go to be the owner the group and everybody else ok so what permission do -pron- have well remember that the permission -pron- be talk about be read write execute so read be four write be two and execute be one so in other word -pron- be give read and write execute to the owner but everybody else do not have any permission so -pron- have set -pron- access control so that only the owner can actually read or write this file this may be appropriate for example for a file call secret dot text where -pron- do not want to",
    "about this chown so this allow -pron- to change the owner in this case -pron- be change the owner of file b to the user call angrave -pron- could also use this to modify the group of a file as well but -pron- be not go to talk about that here ok so one fun thing -pron- can do be not only change the owner of a particular file but how about a directory and everything recursively inside that directory so if the subdirectory of subdirectory of subdirectory -pron- get change as well how can -pron- do that chown have an option of minus r , the capital r to say hey work on this directory recursively so let -pron- change the owner to say the username angrave and the little dot here to mean the current directory course that be a relative path i could have specify an absolute path here as well so for example perhaps i want to go to say slash home slash angrave etc etc etc right now -pron- can not just arbitrarily change",
    "-pron- be not root then maybe -pron- want to temporarily become root by by do sudo in front of this so temporarily switch to the user and by default if -pron- have privilege -pron- can switch to be root whilst -pron- run chown so last what s this last one here right -pron- will do chmod again and this time -pron- will use this alternative syntax and what be -pron- do here -pron- be take permission away alright so this allow -pron- to say ok subtract off remove read write and execute permission from everybody else so in other word file c be no long public also if -pron- wish -pron- can specify multiple file on here so -pron- could for example say i want to modify all file that end with say dot c for example all file that end"
  ],
  "98759da5-160f-4e80-9141-033193a74769": [
    "hi ok so let -pron- have a look at how -pron- can write some code which be non deterministic and then fix -pron- up in different way so here -pron- go let -pron- get start right -pron- have get a little main method down here and -pron- be go to create ten thread and each time i go to store the address inside -pron- little ray here of thread i ds and then i call pizza at exit so -pron- know that at that point the main thread be do ok but the rest of the process live on -pron- ten little fence live on ok what do -pron- do case so here be -pron- game plan let -pron- there be pass in the address of -pron- little iterate available so -pron- will find out -pron- address not as valuable 's address and then here be an expression to read that value how do this work ok so -pron- know when finally be assign a new cpu to start this function that -pron- be give address what do i want to do with that address well i know something",
    "be not be just so in fact i want to treat that address as an integer pointer great so now i have that integer pointer i actually want to read whatsapp -pron- content so let -pron- dereference -pron- with little ass trick there ok so -pron- have get the value now -pron- have be see how -pron- can create p thread i ds every time -pron- call pisode create but what if -pron- want to know -pron- own idea what if -pron- say what be -pron- id how would how would i determine that so there should be a way to do this and there be so -pron- say -pron- id be p thread -pron- so that be the other way of get a thread id if -pron- want to know who -pron- be something which represent a particular thread then -pron- call peter -pron- right less for fun print out which be not normal behaviour normally do not print out these i ds one way to do this -pron- will just treat -pron- as a pointer to some memory so let -pron- say that this id represent some integer type thing which be some address type thing or just print",
    "p to say right treat this do not address ok so will pick that up and if -pron- want -pron- could play the same trick down here -pron- put this out but print out the food idea -pron- get down there but let -pron- let -pron- just run this and see what -pron- get in term of the value -pron- be go to print ok so -pron- want to compile -pron- off -pron- go and when -pron- run -pron- ok alright so -pron- look like -pron- be kind of work but not as well as -pron- hope -pron- certainly get different thread idea appear and -pron- do look like address -pron- will give -pron- that but look at this -pron- have get very strange value over here and even the last value be ten and if i run -pron- again i get different value again if i run -pron- again i get different value again ok so i get in all sort of value here what be go on clearly -pron- have get a program which be not deterministic -pron- do not",
    "that -pron- pass in the address of i and so actually what -pron- have here be call a race condition -pron- depend upon the exact interleaving in time of the instruction that be go to be execute -pron- have get one thread that immediately after call pizza -pron- could create be go to increment the value by and then test to see if i be less than ten i have not go around again so -pron- have get one threat do that as fast as fast as i can and i get another thread that as soon as -pron- start will gas that pointer to an end pointer and then try to read -pron- so -pron- be a value that -pron- see depend upon the relative timing of these operation and that can change from one run to the next -pron- may be surprised -pron- even see the value of ten even though -pron- loop say be i less than ten yes so that be why -pron- thread can start at some point in the future maybe few microsecond but maybe",
    "for loop so at that point the value of i will be equal to ten because that be -pron- exit condition but -pron- get bad than that because formally the value of this variable be not define outside of this loop and in fact when -pron- call pizza at exit -pron- do not even need the stack anymore for maine so the memory that -pron- may be read at that point be no long really hour to be look at so -pron- have get a pretty badly form program here right so how can -pron- fix -pron- -pron- need to address this race condition but will do -pron- in two different way first of all how about -pron- turn this into a task that -pron- give each one and -pron- task right now be just no little integer so let -pron- have some memory for each thread so -pron- will call -pron- say start value and -pron- can see -pron- be use a global here right and -pron- will be let -pron- see -pron- will have ten am",
    "ok so -pron- can be let -pron- say hundred plus i today just so -pron- can prove that -pron- be run this program ok and then i do not want to pass in the address if i instead i want to pass in -pron- pointer to one of these -pron- introduce -pron- have just create so start value and i could say take the ice warren i want the address of that but -pron- know that -pron- can also write that be just ok here be the start of the array i want the offset of ips and will use integer arithmetic ok so -pron- have initialize array let -pron- give this ago and off -pron- go so will compile -pron- ok let -pron- just do there -pron- go right and run -pron- ok now great now -pron- actually do see the intend value from zero to nine hundred two hundred and nine ok and -pron- be deterministic and if -pron- run -pron- -pron- will always produce those value",
    "in the correct order -pron- be correct yeah so even though -pron- know deterministically that -pron- be go to get the value between a hundred and a hundred and nine those thread can run in an arbitrary order so the output be not guarantee to be in exactly the same app or ordering that -pron- actually define -pron- inside the code so let -pron- have a look at kind of one more alternative here to make a program completely deterministic here be what -pron- be go to do -pron- be go to say p thread join an -pron- want to join on not the address of thread id but the actual value -pron- and i do not care about the exit value so do not write that anywhere ok alright so what be go to happen now first of all let -pron- run -pron- and then -pron- can tell -pron- why ok so let -pron- clear this clear that be compile let -pron- run ok and this time -pron- be extremely confident -pron- be go to see the same same output",
    "so let -pron- have a look at the code -pron- vote -pron- create a thread and the main thread can return and carry on there be no requirement for -pron- to wait for that thread to get start but what do -pron- do -pron- immediately say ok now i want to block i want to wait until -pron- be able to join on the other thread so that mean before -pron- get to go around the loop before -pron- add two hundred dollar and go round the when opoly board again right before -pron- get to say i plus plus in -pron- eye lesson ten -pron- have to run and complete the code inside -pron- funk -pron- have to read the value -pron- print out -pron- get the thread id self -pron- print something out and return null and those step have to occur in order for pizza joint to letter out of jail so -pron- be extremely confident that i know for certain that"
  ],
  "9951a684-a841-47e6-8d48-035d4127b468": [
    "ok right so let -pron- suppose that -pron- have a web page and in -pron- there be a small image like a thumbnail picture of a cat right so let -pron- think about how long would actually take to actually get that datum to the client and -pron- be go to start with hypertext protocol version one point zero which be the first major version of http and the simple as well so do -pron- think this be a buy new or text base protocol if -pron- say text -pron- have be correct yes now one of the advantage of of text -pron- be easy to debug -pron- be easy to see what be go on but of course -pron- be not necessarily that efficient in term of how -pron- use network bandwidth and network bandwidth lead to limited number of connection that -pron- can support on a particular physical connection and also a little latency simply because -pron- have get to simply send more bite in order to get thing do so yeah there be some awesome limitation but the",
    "and let -pron- see how -pron- work because -pron- be get a very simple idea which be -pron- want something -pron- make a tcp connection -pron- request -pron- and if -pron- want anything else -pron- make a new tcp connection right so -pron- know that the round trip time be ten millisecond for for ease of diagram up work to just assume then that that be symmetrical but -pron- be five millisecond either way but in fact there will see -pron- do not matter too much right or client server round trip time another time to send send a packet and get something back be ten millisecond and -pron- be go to assume that that be all of the network time and that the server time be minimal or not worth consider or include as part of this ten millisecond -pron- care about be the time between hey -pron- make a request and -pron- get something back so what be the minimum time require to display an image on this page ok so here be",
    "one tcp connection per per request and in fact be probably -pron- be go to have two request be go to make a first request to say a homepage or web page and that will have some html incite ok so html look a bit like this -pron- have get inside html tag -pron- have get to head tag and inside that -pron- have get thing like title and cache information and then -pron- have get body tag and inside that body tag -pron- be go to have say a background image or say an image tag to say ok here be an image here i may give a hint about -pron- size but the source of that image be some other http request so make a new request to some server may be the same server blah blah blah blah blah and then here be a picture of -pron- cat or whatever i want to load now for this calculation -pron- be go to calculate the minimum time require so -pron- be go to assume",
    "a single byte and -pron- be not go to worry about single packet and -pron- be not go to worry about the fact that as the packet get large -pron- take long to send -pron- be just go to do a back of the envelope calculation here and say hey -pron- take ten millisecond to send a request and get well request sue naive idea may be well i tell -pron- what i just ask for both and ten millisecond later great -pron- be do except life be not quite that simple -pron- skip over the tcp handshaking plus website do not even know about the cat jpeg -pron- be to learn -pron- need to load until -pron- be get the html back from the server so let -pron- think about the packet which be actually go to occur so -pron- will do -pron- let -pron- see this time will do -pron- this way so will have -pron- client over here k this server over",
    "-pron- server say hey here be -pron- sin and the service say great let -pron- get connect i acknowledge -pron- synchronization number here be -pron- and then the client say great i acknowledge -pron- synchronization and here be the request so -pron- have the little ach bit set here plus actual data payload which would look a bit like this ok please get for -pron- say the home page and -pron- be speak http one point oh ok slash r slash n slash -pron- session etc so maybe about a hundred byte also right so that go over and then the server say ok yeah sure i can give -pron- that will send some response header to say something like two hundred ok and some other head be then after a blank line will start to actually have the html so html blah blah blah right",
    "thank -pron- the html i see that i need a picture so can simply get -pron- no because that connection be now closed in fact if -pron- be to look at this last packet -pron- be discover that the fitbit have be set and there be no more no more conversation be expect in that connection so -pron- have to play this game again the client say k hi this be -pron- synchronization number -pron- 'd like to connect please and the service say hey -pron- welcome aboard i acknowledge -pron- synchronization number here be -pron- and then the client can say great i acknowledge -pron- synchronization so all that stuff of course be happen inside the tcp header but then -pron- have get the payload which be -pron- 'd like to get the the cat so -pron- get the cat k and -pron- start get some bite back now in this simple example will get the bite of the jpeg back in a single",
    "to be set so -pron- will not worry about that instead -pron- look at the minimum time so now -pron- can see why this actually take more than just ten millisecond to get all this information and -pron- will see that actually everything happen in pair so -pron- have ten millisecond ten millisecond ten millisecond and ten millisecond be go to take a minimum of forty millisecond to display -pron- picture and if -pron- have multiple cat thumbnail then each connection be go to take more time so the very early web browser say well -pron- know what -pron- need to do well than this be take a long time to display all these advert -pron- have on a page what will do be will -pron- take cs two forty one will have say some multiple thread and -pron- will make up to four connection at a time to each web browser so"
  ],
  "997db39c-e2cc-45d8-b756-16ad32dc030c": [
    "ok so -pron- have -pron- have talk about e x t two and how -pron- can represent a small large file efficiently so what do x t three nxd four giver so -pron- have already mention one thing which be that -pron- be expand to allow much large file but e x t through gaver be journale which be the ability to make sure that -pron- file system be always in a good state so a file system of course have to keep track of unused disk block so -pron- want to make sure that even if there be a power failure -pron- do not accidentally start rely on bad information that if -pron- idea of which disk block be available be incorrect that oh -pron- may start overwrite valid file so xt through xt three implement this idea call journaling which be that i can consider in time all of -pron- right to disk to be modification to -pron- disk so i can have checkpoint",
    "be in a well know state whatever be actually physically store on the disk surface be in a consistent well know state i can make some modification -pron- be write little delta in here during these time there may be inconsistent state for example -pron- have already write the the datum -pron- have make modification to -pron- directory to say there be a new file that exist here but i have not yet update say the disk block which be no long available that kind of thing so -pron- have get multiple right i need to -pron- disk and -pron- be only when i get to second checkpoint do i know that all of the change have be complete so if a power outage occur or some other revenge or something else prevent -pron- from get to the second checkpoint then when i remount the disk when i save restart -pron- machine or plug -pron- disk drive",
    "these change and revert -pron- back to a know good state so that be what e x two three give -pron- this idea of journaling e x t four as a lot more kind of feature -pron- get well performance -pron- get encryption -pron- can now start to set some new limit like -pron- want to limit the number of fast per directory but -pron- give -pron- a new problem which be what be call the delay datum right problem so let -pron- have a look at a common pattern that people use inside existing program so -pron- code may be write inside the sea layer but -pron- know that ultimately that get translate into low level system call so let -pron- have a look at kind of a standard standard pattern of behavior here so let -pron- have a look at this first version where -pron- say -pron- finish edit a file",
    "do -pron- open the file and -pron- be go to overwrite -pron- so let -pron- just send the option to say -pron- want to truncate -pron- of course there be go to be some other option in here as well but this be just a sketch and then i write to -pron- file descriptor -pron- new datum and then i close -pron- so if -pron- look in time kind of ghost and stuff so there be a problem with this which be that if the power go out between say -pron- right corner make clothe and the actual datum be write to disk then tomorrow when i restart -pron- machine i would discover that hey -pron- entire file go because the only thing that be happen be i manage to truncate -pron- so many program",
    "instead of just overwrite the exist file let -pron- save all of the datum to a temporary file so will open this temporary file will write -pron- datum or close -pron- and then after that be finish will call rename so will rename the template file to the file and that should be an atomic operation so back when -pron- have xt three this be happy scenario because there would always be a valid file either the old disk or the new disk in e x t four however unfortunately there be a problem which be that due to performance improvement the actual datum for the new file be write later than the update to the directory",
    "find that or when -pron- restart this -pron- have manage to rename the file yes but the datum that -pron- think -pron- have written be not actually on the disk yet so there be still a small corner case where -pron- could lose all of the content ok so this be not unhappy situation for awhile and the fix be to actually to provide a new option for xt four where -pron- could disable delay datum right so there be a trade off in performance to say actually -pron- want to make sure that all of -pron- data content happen before -pron- update kind of directory information so that be kind of kind of cute little example of how in the quest for well performance -pron- hope -pron- expose -pron- to two today to los in these",
    "of why create file system that be perform and secure be difficult the last thing i will mention be here be another when -pron- start this section when -pron- just brainstorm a list of feature that -pron- would like ok let -pron- have a look at a real list of feature of a real modern filesystem and this be just kind of a high level feature list of two two file system that -pron- will probably hear about one be zfs and this support thing like raid what be raid ok will talk about raid in the future -pron- actually want to be able to work with different pool of file so -pron- want to be able to have kind of enterprising",
    "file system so -pron- have this idea of different storage pool so -pron- have introduce abstraction layer between the physical disk and the actual kind of virtual disk disk pool that -pron- actually may want to manipulate for application -pron- want to have good cash be -pron- have not a thirty two bit model but now one hundred and twenty eight bit model for size that should be big enough for everybody -pron- want to implement thing like copy on write an make -pron- transactional -pron- want snapshot -pron- want clone -pron- want to be able to send these snapshot from one disk to a different disk -pron- want to be able to stripe physically -pron- be store -pron- -pron- datum across different part of a disk -pron- want to have variable block size be -pron- want to make -pron- lightweight -pron- want to be able to modify -pron- cash -pron- want even potentially different endianness for performance and of course -pron- want thing like deduplication encryption right so that be go",
    "that then export today yeah -pron- want space efficient index and packing of very small file while be able to support very large file -pron- do not want to have to make choice at format time how many i know -pron- want again -pron- want snapshot beat -pron- vest have checksum to make sure that the datum and the metadata or can still correct -pron- want different compression algorithm -pron- want paraty to be able to check that -pron- data be store correctly -pron- want to be copacetic with -pron- actual physical storage mechanism so for example -pron- should work well with ssd and have other optimization associate with physical hardware -pron- want to have incremental backup that work efficiently -pron- want to be able to kind of scrub -pron- disk for and look",
    "so on and so on and so on so that i just want to go blow -pron- mind or expand -pron- mind in term of ok this be all that cool stuff that be real modern day file system can kind of give to -pron- ok and unfortunately however beta office be still only begin to be use for real enterprise system because realize that these feature can start to bite -pron- in the corner case that -pron- have just see even with relatively simple file system like e x two three n x t four if the corner case that case for example where -pron- disk be now full or suddenly -pron- have get one disk go down and a quota change play and something else happen at the same time that people be paranoid about that the last thing -pron- want to do be how to lose all of -pron- datum or bad have a data corruption that be not even aware of if -pron- lose all -pron- datum then ok in the bad case -pron- have last saturday of business and -pron- can hopefully restore -pron- but what be scary be to say -pron- have get a bad"
  ],
  "9a084a3f-6ceb-4fe7-b5f7-2981d484a27d": [
    "ok so let -pron- start talk about how -pron- can improve a free so first of all just a reminder that now -pron- can see that with realloc if -pron- could actually access that link list when real work be call -pron- can start write a real lock which be fast but what can -pron- do about free how can -pron- make free fast right now -pron- have an implication of free that walk through the link list look for that user pointer but have to be unallocate can -pron- do well yes so here be how -pron- can do -pron- use an order one approach what -pron- need to realize be that if -pron- put in the metadata directly inside the heap as well then the follow be always true that if this be the heap memory that the user be go to see then geass before to the different colour there -pron- go",
    "be always go to be the metadata i just need to therefore subtract off some magic number to get to the start of the metadata so if -pron- give -pron- a void pointer that i perhaps just need to go back sixteen byte or sixty four byte or however big the size of this metadata be and how can i determine the size well guess what there be something call size off so i just need to write size of the metadata -pron- be not about metadata out in full but the metadata entry type will tell -pron- how many byte that be so i can use that to walk backwards ok so let -pron- have a an attempt at write this then right so here -pron- go right so i give the use of pointer here and for that",
    "first way let -pron- get those c standard people unhappy and put the compiler people be happy so if -pron- give -pron- a user pointer that be non null i know where the metadata be -pron- be go to be the follow location so -pron- -pron- meter datum entry type ok be -pron- pointer right -pron- will take -pron- user point to add i just need to pull back a sweater with ice so -pron- will say minus size of ok and then that type so a meta data entry type but -pron- be say hold on a moment this pointer -pron- be start with this user pointer -pron- be avoid type that mean that -pron- be not declare anything about what be actually at that memory location and if -pron- read the",
    "be absolutely correct however or modern compiler gcc clang and other do support this be the following extension which be -pron- can add and subtract avoid pointer and if -pron- do that then -pron- behave like character pointer and in particular -pron- be add subtract byte off this memory location so -pron- be walk back exactly the right number of byte in this case because of this type ok so now -pron- have get that now i can immediately say thing like alright point p i know -pron- be look at -pron- meta datum entry so now let -pron- declare that this entry be now free and then i would write -pron- code to the block coalesce sing by check -pron- neighbor left and right to see if either of those be free and",
    "collect -pron- into one alright so that be one way of do -pron- but -pron- and i also know about pointer arithmetic so here be a different way of do -pron- so why do -pron- take that user pointer ok and i do almost up here ok so now -pron- will write -pron- down here so -pron- p be the follow so take that user point and cast -pron- first into a metadata entry type ok entry point every job and put enough parenthesis in here so thank -pron- for -pron- user pointer but i want to cast -pron- and put in that parenthese in here to do that first case a great -pron- have now get point the right type and now i just need to go back one ok so now i can just subtract one",
    "for a moment that -pron- memory no long be of bite but imagine -pron- could put some transparent paper down on this with show enough space enough byte where each one of these entry be a major datum entry type in other word be enough space for two integer and avoid pointer so and -pron- start off with a pointer that be look at the beginning of the user area but -pron- have just cast -pron- so i can walk backwards by one and so i get now to the real metadata entry and now i can free -pron- up and do that all that other good stuff so that be kind of a different way of do -pron- the trick of course be not to confuse these not to mix these up and to be very very sure about -pron- pointer type because -pron- do not want to accidentally subtract",
    "pointer if i have for example accidentally instead of write minus one here -pron- have write minus size off blah blah blah i would have go back to a an arbiter location in memory and then i would have have arbitrary value and update arbitary thing and the world would be unhappy with -pron- ok so -pron- have get -pron- who buy at all on the allocator and now also i want -pron- to see how how this can go bad how thing can go wrong how how when if -pron- have code that call free with an invalid value then the very instruction that -pron- have just write here will start to write into arbitrary piece of memory similarly if -pron- have code which accidentally right into an invalid place in the buffer so for example",
    "into the metadata that malloc be use to keep track of all the allocation which be why -pron- program will crash in interesting and exciting and unexpected way later on alright so great -pron- have get -pron- be fast the allocator be that the end of -pron- haha no but -pron- be enough for -pron- to get start with the cs two forty one mp so let -pron- just kind of review what -pron- just talk about -pron- talk about block splitting and block coalesce sing -pron- have talk about make a fast allocator maybe if -pron- be actually look for just three block maybe -pron- should have yet another link list which contain only the block which be actually available so i imagine -pron- walk into the apartment manager and -pron- say i like like in an apartment please of this size ideally want -pron- to only look at the list of apartment which be actually available today",
    "actually in use and will be a waste of time to check so perhaps -pron- should have a link list to make -pron- fast to find apartment block for -pron- be ok and let -pron- see -pron- will mention these and i want to get down to body into value tax yeah so some other thing that real program do be to have many pool for say different object -pron- may decide to put all say sixty four bytes object into the same area one advantage of do that be to reduce fragmentation if all of -pron- object be the same size then keep track of which slot be available or unavailable become much easy -pron- can start use",
    "inside this current set of apartment and i can also even look at how many allocation be perform inside the kernel as well and the kernel use something call a slab allocator which build upon a memory pool two to ensure that the object and -pron- be actually partially initialized and ready to go another version of a memory pool be where the object do not need to be the same size but -pron- can discard the entire memory pool in one go so for example -pron- may say ok let -pron- temporarily put aside a gigabyte of space right now for sale account game level or some processing unit and then when -pron- be do i do not need to rewind and",
    "hunt through -pron- list and do block coalesce thing i can just simply declare that the whole memory pool have be wipe clean and reset -pron- link list back to nothing so so memory pool can be very very useful when -pron- know the lifetime of all of the object be finite and -pron- want to clear -pron- all all in one go now when -pron- start talk about how well or allocator work -pron- can talk about -pron- talk about internal and external fragmentation so the idea here be imagine a truck full of shoe except -pron- shoe be not just throw into the back of the truck know that put inside nice little box so that mean that the waste space in memory between the actual use",
    "up this amount of space but -pron- box any come in certain size so there be go to be waste space inside internal to each little shoe box here and in addition there be go to be waste space if i start to throw a whole lot of shoebox a different size into -pron- truck ok so the waste space inside the shoe box -pron- will be internal fragmentation that now -pron- have get lot of little bit of space that i can not use so there be just waste round similar -pron- have get external fragmentation issue if -pron- shoe box only come in certain size and i several slice and -pron- be unable to place -pron- altogether in the truck so some example of this be maybe -pron- write an allocator",
    "byte interval so now when -pron- do this and -pron- actually look at the actual byte use -pron- may find some object which be much small than that and so the space inside each allocation be waste -pron- and -pron- be newsbyte here some other use bite that kind of thing and ok and the last thing i want to talk about be be boundary text ok so let -pron- do that delete all -pron- stuff ok so last thing -pron- want to talk about be boundary tag so battle tag be donald knuth 's idea or solution to how -pron- should do block coalesce sing and here be -pron- the basic idea when -pron- allocate some bite for malloc request ok -pron- will write -pron- just before -pron- the number of byte",
    "will say that this size be thirty two but here be a great trick be will say that will also write the same value at the end as well so why would -pron- do this well let -pron- see what happen when i have another allocation as well let -pron- imagine -pron- have get an allocation say of eighteen and so there -pron- go right and -pron- have get another allocation of eight put another eighteen just there and i could keep go maybe -pron- have get twenty four but i will not need to consider that one ok so i want -pron- to imagine that at some point in the future let -pron- pick a new color give up bubble right one of these block be free let -pron- choose the block eighteen ok so what do -pron- start off with -pron- start off",
    "and -pron- would like to do block come coalesce sing so -pron- need to jump forward to see if the block in front of -pron- be also free ok how can i do that or just before this be rest be the size of this allocation and so be eighteen unit so if i jump forward eighteen unit in a bit more -pron- i can now go and investigate whether this -pron- neighbor be be available or not be free or not but here be the cool trick -pron- 'd like to actually also try to carl s with information so with a potential block immediately before month before that so how do i do that well just before this eighteen be another number which be the size of the block before -pron- and so i can use this to workout how to jump back to check whether this block be available or not what do -pron- do about whether"
  ],
  "9a9a10a2-6a75-46c5-b677-38e5d3684981": [
    "hi welcome to lecture twenty so let -pron- have a code review where -pron- be go to talk about a little bit of code that use condition variable be -pron- ready ok so -pron- little application be very simple -pron- be just get two thread one thread some point be go to modify this value of x and then call signal another thread be wait for x d b positive so -pron- can think of this basically like a latch and only after -pron- be become positive do -pron- continue right so what do -pron- think about this code right so what do -pron- notice first of all that -pron- code over here on the right really do need a mutex lock before -pron- change value of x and -pron- signal ok let -pron- see why the problem occur be when -pron- call change at the same time that -pron- second thread be actually call in this wait for positive x let -pron- see where the problem could occur so -pron- have get this test here and then later maybe a few",
    "to block so here be the problem scenario what if -pron- have an interleaving of these operation such that change the value of x here happen after this test and call peter condition signal happen before the thread block and wait for signal ok so now what be happen -pron- second thread be go to deadlock -pron- be now wait for a signal that be never go to happen so right now yes -pron- have a small opportunity a chance that -pron- second thread will deadlock how do -pron- fix -pron- by lock on the same mutex because then the only way that -pron- can continue be after the threat have acquire the mutex so another thread will have to wait so now if -pron- do that -pron- become impossible to be execute these two line of code at the same time that these two line be be execute",
    "this if inside here so in practice this can bite -pron- in two different way first of all maybe in other application -pron- have multiple thread call this and -pron- really just want to ensure -pron- x really be positive before -pron- continue and other thing may change value x the second problem with this code be the actual deep condition wait be occasionally may suffer from what be call a spurious wake up -pron- never truly go to sleep ok right so why do that occur well let -pron- let -pron- go back and talk about the implication for how conditioned weight be actually implement right so -pron- have just see this problem of change in value of x and then signal too early before -pron- thread be actually block and wait for that signal to arrive so in practice what do this mean",
    "to behave as if -pron- be an a single atomic operation in other word there be no clock cycle no moment in time between between these two event otherwise the very same argument that -pron- just give hear about these two operation happen just within that now window would apply to all of -pron- cause to p three condition wait ok so -pron- have to ensure that these behave can instantaneously together now in practice that may be impossible there could be a very narrow window between when -pron- unlock the window unlock the mutex and block so in practice if that may occur for example because i really do have multiple cpus run on different piece of silicon then what will happen be rather"
  ],
  "9bcf92f3-7cc1-4972-b0d0-3a9e468673ac": [
    "right great ok so unless some implement a stack and will implement stack but be bound by two thing first of all -pron- will see that i data store here -pron- little array here can only handle ten item also -pron- can not pull anything from the stack if -pron- stack be empty so now push and pop method need to block if -pron- be unable to continue right so let -pron- let -pron- have a good figure out how -pron- be go to implement this first of all let -pron- just pretend that with i cs two twenty five or some other course right and right than on the single threaded version ok so what be -pron- go to have -pron- be go to have thing like the push method will be take -pron- datum structure -pron- ray and after -pron- have use the value of n increment -pron- and density equal to be ok right what else -pron- want to do so for multithreade",
    "end otherwise two thread may call this code at the same time and both right into the same slot the same entry inside the away so less use mutex lock for that so -pron- be definitely go to need mutex lock soapy say mutex lock and as luck would have -pron- -pron- have already get -pron- variable up here ready to go right so let -pron- call peter mutex lock on -pron- mutex there -pron- go so that may block for a short while if someone else be currently acquire the lock which be why a later on -pron- be go to release -pron- ok so thank -pron- very much luck -pron- be do with -pron- anybody else that be wait can now continue right so great so now -pron- have get code which where only one third of the time can push thing what about if -pron- array be full of what if i stack be full so remember step",
    "busy check this right so while while n be equal to the maximum number go round the loop now -pron- know -pron- could put a sleeping here if -pron- want to -pron- know that right now this be a terrible test because -pron- be hold the lock if all of -pron- code use a lot no one else will be able to do this fortunately for -pron- -pron- be go to be use p thread condition wait and that will release the lock whilst -pron- be block ok so here be -pron- condition variable that be go to sleep in and watch be sleep unlock that mutex and then before return lock -pron- again so the big idea here be that in all the code that -pron- write let -pron- do i make a highlighter well let -pron- do -pron- like like a",
    "that -pron- be in the matrix log so -pron- could reason that -pron- be the only thread that continue to run so great -pron- have get all these other thread run at the same time but -pron- head do not need to explode thinking about the possible interleaving of all of these expression from this thread and another third because -pron- own the mutex lock right and anybody else have to wait until -pron- finish so -pron- simplify reason about this back down to just simple single thread code again alright so great -pron- have get -pron- push method to work ok let -pron- go back to -pron- kind of blueish color right so if anything else -pron- need to do yeah well -pron- be write a method which both to push and pop can can block so if i just put something onto this onto -pron- way -pron- could",
    "-pron- be go to call p threat condition broadcast ok and say hey everybody wake up all right and there -pron- go so if there happen to be someone sleep in on this condition variable because that waiting to pop then now -pron- can wake up so -pron- could for performance reason a little bit more about this and say the only time -pron- need to do this the only possible time that someone could be block while pop from this away would be if the value of n be zero so in other word -pron- have just increase -pron- up to one otherwise there be no way that anyone could be sleep right now so -pron- could weight use about that and -pron- could also reason that -pron- have",
    "as well but i would have to be a lot more careful about reason about that so -pron- be go to use p thread condition broadcast just in case there be multiple thread go to sleep -pron- want to make sure that if -pron- be only go to wake up in that transition that -pron- work -pron- all up so right i i think -pron- can now continue and will write to the next one so the pop ok so what should -pron- pop method look like ok so first of all let -pron- write the code which be go to return value k so -pron- turn -pron- v where do become from -pron- be go to have something like double v equal so i go to -pron- way now i want to pre decrement -pron- value of n there -pron-",
    "-pron- need something like look if -pron- value of n be zero then go to sleep ok right so -pron- be go to have -pron- p thread condition wait ok do -pron- do today and here be -pron- condition variable -pron- 'd like to sleep in and do not forget that mutex lock ok what be the mutex lock code look like be right so -pron- have see this before that be just annotate -pron- in a different color -pron- be go to obviously have a lock here k and unlock at the end ok right be -pron- do no -pron- may need to wake up some thread so let -pron- put that code in as well about this kind of dark publish right so let -pron- in here wake up any thread switch may be sleep on the condition variable",
    "all right and again -pron- could reason about this -pron- could say if there be if there be any lock if there be any thread sleep on this waiting to push the only time that that can occur be if the reach the maximum number so if any be equal to now nine then i know that -pron- have just decrement -pron- off the off the very top so time to pee time to broadcast however this be kind of a optimization -pron- be very easy to get these wrong -pron- be very tricky to start model think about this when -pron- have get multiple thread which may call pop of multiple thread which may call push get a little bit easy to think about if -pron- have only get one thread of each kind so -pron- advice be treat these optimization with",
    "if -pron- do not care about absolute performance just call prefect ingram forecast that performance head be not that great ok so -pron- have get some working code -pron- think let -pron- actually have a go at testing this ok so here be -pron- code that be go to actually run this and -pron- have get some test code where -pron- producer be go to call the push say ten thousand time but -pron- be actually go to do that with two thread and then -pron- have get a consumer method that be go to call pop twenty thousand time be just one of those today so let -pron- check that -pron- actually get all value",
    "that -pron- know that -pron- be go to push in the help for help in the background ok great so -pron- know -pron- be go to push in the value zero up to nine hundred and ninety nine nine have enough ninth ok right and so if -pron- be just go to some these so -pron- have the sum of value from zero up to that number there ok but in fact -pron- be have two thread actually push all those value in so -pron- be go to sum up the integer and if -pron- know -pron- be sure -pron- have see this inside once every three right or -pron- can do -pron- recursively -pron- can do this inductively or -pron- can do -pron- with lego as well -pron- know that the sum",
    "word -pron- expect a total of that right by the way i say -pron- could do -pron- with lego block here be the reasoning with lego block if -pron- still some lego block from -pron- young sibling -pron- can build something that look a bit like this ok that be ok that be -pron- integer one two three four five and then just to make -pron- mad -pron- build that again so right want a different color all right there -pron- go -pron- have to do to do right so -pron- build this again great so what do -pron- get -pron- get now -pron- have get a rectangle of size n times n plus one ok and the area of that be exactly",
    "integers be go to be end time n plus one over two there -pron- go i actually use this mentally to remember whether -pron- be end time n plus one or n times n minus one etc so that be kind of cute little lego block prove there right so let -pron- let -pron- actually have a go at run this ok so do -pron- have code right so -pron- call -pron- block and let -pron- let -pron- run this thing ok -pron- will notice that -pron- only exit after -pron- manage to join all three threat so will compile -pron- stop the cake monster stop consume cake ok wait finally -pron- be finish ok good so -pron- want to compile ok block right so let -pron- do that",
    "k alright and great -pron- get the correct some who be so be -pron- convinced that -pron- code work or like i say -pron- have firm give -pron- a fair shake -pron- call the push and pop in a tight loop and -pron- call -pron- for ten thousand time so empirically -pron- have show that maybe if there be a likelihood of -pron- fail -pron- have at least test -pron- to the kind of point one percent level but be that be that be that do that give -pron- confidence to put this into production no -pron- 'd actually want to kind of actually do a code review and think carefully about how -pron- code work so so in multithreade code -pron- be a very important -pron- have strong understanding about how -pron- code work and rather than just simple go to lightweight testing and say oh yeah great"
  ],
  "9c4b2de5-a3dd-4f12-99ed-f3bf1b2ee816": [
    "ok right so as part of a judicial review of the c code write inside engine unit an engine control unit of a toyota car -pron- could look at the complexity of that code and decide how like -pron- be that may be a bug inside that code right so let -pron- have a look at then at the toyota camry be very popular model and will look at a particular particular system of this call the tcs which be the electronic throttle control system ok so toyota have be make car for a long time and write code for these car for a long time so be there any surprise down the code that -pron- discover actually have over eleven thousand global variable good luck keep track of that good luck try to make sure that -pron- understand -pron- system sufficiently well",
    "right so why be this code so bad right ok so one thing -pron- can look at be for any piece of code that -pron- give -pron- be something call the cyclomatic complexity metric and the idea here be look as a programmer if -pron- want to have confidence -pron- understand water code may do then -pron- well understand all the possible path that be code may take so for example -pron- may have an if condition here and -pron- may be true or false or -pron- may have an expression here that could be true or false and so -pron- need to be able to understand and potentially test every possible path of -pron- code so every time there be a branch in -pron- code -pron- be potentially double the number of of path depend",
    "the in this case for the the toyota code -pron- have sixty seven function which be rate as completely une tap untestable that -pron- be impossible to write test case because -pron- have more than fifty possible path and that the swaddle code have a score of more than one hundred ios maintainable and so why be this relevant well this actually stem civil lawsuit where toyota be be accuse of uncontrolled acceleration in -pron- car and this be just regular car be not even talk about self driving car this be just a c code design to control the engine -pron- be design to control exactly what happen on every millisecond and every step of that engine be so -pron- be not all bad news in the sense that the car industry actually have attempt to define some c code rule and there be actually a lot of rule in this particular",
    "way one of the fund wall be do not use recursion do -pron- know why can -pron- guess why well if -pron- be think along the line that recursion unbounde can lead to a stackoverflow then congratulation -pron- start to think like a security person here yeah so one problem with recursion be that if -pron- never have a base case then -pron- code will start to overwrite random piece of memory that may be all crash but on these small system -pron- may just -pron- stack may just keep go and start overwrite kind of critical value inside the heap so so recursion be frown apon there so -pron- try to avoid recursion come so in this particular case like i say toyota do a very poor job of of follow seek standard and be actually ultimately lead to to people die"
  ],
  "9d6762ba-3f90-4302-bebe-53ad562322b2": [
    "hey ok so let -pron- talk about some useful thing then for socket connection right so first of all suppose -pron- actually want to reuse the same port immediately how can -pron- do that well the trick be to know that -pron- say option on the socket so what -pron- be go to need all this choose a well color than that be set socket opt set sock opt where -pron- can choose different option here and -pron- be important to do this before -pron- call bind so let -pron- go actually have a look at some code that do that another kind of useful trick be if actually do not care about use a particular port number just that -pron- actually want to listen on any port that happen to be free then -pron- can always pass in a port number of zero here remember that -pron- be a string not a zero pointer to memory address zero uh",
    "free report for port for -pron- but if -pron- do that then -pron- be time to actually figure out which port -pron- be happy to do that where -pron- can use get socket name but if -pron- just simply attempt to read this struct this simple straight here then -pron- be be for surprise a port number that -pron- get there be in network byte ordering so that integer be not very useful to -pron- when -pron- actually want to print out -pron- have get to remember to use do remember what hopefully -pron- say well i want to go from network to host and -pron- be a short ok so -pron- have get a rap that integer with that and then -pron- will print out the right number for -pron- ok another quick note here be hey what be go on here why do i have to cast this stuff well be because see do not have inheritance and this socket address",
    "and so that need to be cast to the kind of the base type the simple type which be just a socket address here so that be why -pron- do the cast -pron- be in order to have this kind of fake inheritance model here right so let -pron- go actually have a look at some real code now where -pron- be go to implement an actual actual web server and yeah let -pron- just go jump straight into code ok so will still the top ok right ok jump down a bit ok right so some code -pron- be very welcome to use this to actually kind of print out -pron- own ip address but",
    "-pron- be some thing -pron- have to do inside a good web server even a simple one here so for starter -pron- need to handle sigpipe because maybe -pron- want to send some bite down a socket but the other end be already close -pron- if -pron- do that -pron- will get a sigpipe and the default behavior be seek pipe be to close up process so -pron- well do something about that ok secondly a good web server will have to implement a well version of right because remember right can return just the negative wall and say oh -pron- be sorry i get interrupt by signal such as sick pipe case so -pron- well keep track of that so if right return negative wall and -pron- error be interrupt then hey just restart right attempt otherwise let -pron- keep track of the number of byte that -pron- have send so far and keep call right",
    "send ok so will just need to keep track of how far along -pron- be in term of the buffer that -pron- be try to send out an make sure that -pron- do not send too many byte so just take the total number of byte minus the number of byte send so far ok -pron- need to be able to read what the client be send -pron- so will do something similar with weed in the request header except -pron- do not try to read the entire request from the user instead -pron- be look for the magic slash r slash n slash r slash end mean great -pron- have read enough to see the end of the header of the request ok so here come -pron- main method where -pron- be go to set up -pron- signal handler straightaway will print out the ip address and -pron- actually want to serve up this meme image as well so how could i figure out how many",
    "way for file less than two gigabyte which be to call f seek so let -pron- go to the end of the file find out where -pron- be by call f tell and then go back to the beginning so by do that great -pron- be now go to read all the byte but also i can get some heap memory as well so if taylor tell -pron- how big -pron- picture be and i can read all of those byte in one go just by call fread hey if read this be the number of byte i want please read -pron- from that file so great -pron- have read that file into memory and now i can write that as many client as possible so -pron- now know how to set up -pron- socket remember -pron- want a socket passive socket -pron- be go to listen ip four address today and here be the new bit of code though just talk about -pron- need set socket opt to be able to say -pron- know what if i restart -pron- process",
    "port number so how do -pron- do that -pron- can use this particular circle option call reuse address ok then will bind as usual ok and listen and then let -pron- start look for a connection so -pron- will call accept here inside a little loop and then ok wake up wake up -pron- be ok great after accept return i know -pron- have get a client and i can send a response so -pron- will read -pron- request at that point i may process which kind of what -pron- want but today -pron- be just go to send the meme if that be what -pron- request that particular image then -pron- will send the picture so i need to say be the first thing -pron- response hey everything be ok i understand what -pron- want"
  ],
  "9ddff03f-fb90-4ca7-9381-f30bb13acc08": [
    "ok so -pron- have get a concept of i node let -pron- actually design -pron- own file system so -pron- be go to base -pron- little design on the    ext2 file system which have be around for a long time but -pron- be the parent of the third generation    ext3 which come out in two thousand and one which add journaling so journaling be very useful if -pron- want to support file system crash when the file when the power go out so ok so -pron- can sort of say support power failure so this idea that i can resurrect -pron- file system back to a good well know state where all of the datum and the link inside -pron- file system be correct and all the block that i refer to as be currently unused",
    "of what action i have be complete and then today -pron- laptop -pron- linux laptop be probably use ext4 and that add a lot of performance and also support for large file increase from sixteen terabyte which should have be big enough for everybody up to today ext4 now support want etabyte of storage so that should be big enough for everybody -pron- be not go to look in detail at at ext3 or 4 -pron- be go to concentrate on this simple model of ext2 right so here be -pron- plan remember -pron- disk drive have a lot of spin part or if -pron- be an ssd will have a three dimensional geometry and i want to ignore all of that geometry for now because i would have a very abstract",
    "that be -pron- hardware be go to support the idea of say please read this block one or please write this block two and that be all i need be a very very simple kind of block read or block write and -pron- 'd like random access if possible please ok so how should -pron- do use all of these disk block ok so -pron- will take the zero block here and will declare that as super block there -pron- be so that be go to hold some meta information -pron- choose a new color here how about how about some green ok so that be go to hold some meta information about how -pron- have decide to organize the the rest of the disk so before -pron- can actually start talk about that inode and where the actual data be go to be store -pron- well read superblock ok but after that super block -pron- be go to use the rest of this space here",
    "so i can easily calculate where -pron- particular i know -pron- be in relation to a particular this block and inode -pron- be go to be pretty small let -pron- think about what -pron- need to store inside -pron- so -pron- have thing like not the filename -pron- be not go to store that inside an inode instead -pron- have thing like who be the owner read write execute permission where on the disk will find some of the block to do the size of the total file in byte and maybe a few other thing but typically i know be go to be of the order of one hundred and twenty eight byte or sixty four byte a pretty small so -pron- can actually fit a lot of -pron- in per disk block , per four kb chunk ok so -pron- be actually very very small here right so -pron- will set aside some space for all of these",
    "here will say that -pron- get one opportunity to decide how many inode -pron- would like to be able to store on this disk so -pron- make that choice when -pron- format -pron- when -pron- say right this be go to be the layout of -pron- disk -pron- be go to set aside so many disk block for the inodes here -pron- go and the remainder will be use for all of the datum that i want to store so that be -pron- initial very simple model -pron- be not very accurate in the sense that modern file system allow -pron- to have more than one area of memory set aside for on -pron- but -pron- be a good representation of how -pron- start with early file system ok so make that choice when -pron- when -pron- first format an -pron- will store that -pron- choice inside the super block let -pron- hope -pron- do not under estimate about the number of file that -pron- intend",
    "ok and the rest of the space -pron- be go to actually use to store the content of -pron- cat picture ok so the first block of cat dot jpeg will be here if -pron- be of a detailed jpeg picture then -pron- be go to need some other block ok and so for performance i probably put out , -pron- will try to use block which be contiguous which be next to each other but if -pron- disk become very fragmented because i keep change -pron- mind about the kind of cat picture that i want to store -pron- overtime i may say that ok so now a new cat picture use these three block but also i have to put the fourth block way over here and so let -pron- come back right so if this be a spinning disk -pron- may take quite awhile for the physical part of the disk to read these block and then jump over here to read these block ok so -pron- may want to make sure that if possible",
    "ok right so ok so one thing that -pron- may notice right now be that what would happen if a disk block get slightly corrupt so for example let -pron- say that some dust or for some reason the surface here get corrupt now be unable to read these bite so right now -pron- know -pron- have lose a particular cat picture or maybe the cat cat picture will not display exactly correct now what about if -pron- actually instead have some damage over here in -pron- super block ok so now this potentially render the whole disk unusable ok because inside the super block -pron- say where do the number of inode kind of finishe and which block be go to use for the datum so in practice the super block be actually often"
  ],
  "9edf0a56-503a-444a-861d-6bd29f8a2e58": [
    "ok so -pron- be go to start head towards networking and for that -pron- really need to understand how to work with error and how to print out error and how to discover when thing do not work so network be tricky because with thing do not work where -pron- actually want to understand what -pron- problem with the client or the server be there a problem in set up the connection and so deal with error become quite important area can be because of code area -pron- have make but -pron- also can be say because the client have finish the connection before the server have finish say everything -pron- want to say unvoice versa ok so let -pron- start talk about error that right so -pron- want to put out some error ok so here be first way -pron- have probably see thing like ok i can use p error to print an error to standard error and i can include piece of text here which get include along with",
    "a way to get just a simple string and this be -pron- -pron- can say store error and i can ask for a the string associate with a particular error number like one two three four five etc etc etc ok but perhaps -pron- want to know what be actually just go wrong with -pron- program and so if -pron- want to find out the air associate with a recent system call guess what there be something call ever know urdu there -pron- go so i could say please tell -pron- the these string associate with the most recent system ever ok so in fact -pron- could re implement pm so if -pron- need to write kind of piero -pron- -pron- may do something like the following -pron- may say ok so peer error i just want to print out to standard error cater to do and now will have",
    "ok and then another string ok and then -pron- will need whatever use say so -pron- little message there follow by stewart ever of ever so ever know be this little global variable that -pron- never know that -pron- have -pron- be be there all along -pron- be be inside -pron- c program -pron- will be inside -pron- python and -pron- node program ok be just a standard part of the process so something like that maybe -pron- will put in new line there as well but as -pron- implementation of pierre right so there be a one big surprising gotcher however with string ever and if the follow if -pron- actually",
    "ok so bit of a surprise right here -pron- be use this low function inside here and -pron- think -pron- could do everything -pron- want inside -pron- thread -pron- be not thread safe key and if -pron- instead -pron- actually want to write code that be two s dave then ok -pron- actually should use something else which be stewart ever underscore r and then -pron- pass in some integer like eleanor ok so the reason for that be that stre air -pron- may return just a hardcode string literal say error number one two three four five six etc but if -pron- pass an arbitrary large number -pron- actually construct the string -pron- and how -pron- may do that well -pron- could",
    "a pointer so instead internally have some static static memory that -pron- reuse from one call to the next ok so that be -pron- problem that if -pron- be go to use this in multiple thread i could have one call to store arribe be enter by another call to stuart error on a different thread an oh dear both of -pron- be now try to use the same piece of static memory so one error be go to override the other one right so this kind of common with some of the early call inside posix that -pron- be not build with with thread in mind and so threat support the ability to work with multiple thread have kind of be reverse engineer back into some of these api call so stroit error -pron-",
    "the integer or no instead -pron- also pass in a pointer to -pron- memory that -pron- would like -pron- to use so here be some memory and typically as well -pron- impasse in how much many as well so -pron- could pull up a terminal window to see the exact order of these thing but what i want -pron- to learn yeah there be quite a few of these kind of underscore be variation or variant of exist course and -pron- be add later to posix in order to make -pron- more thread safe now the last thing -pron- may have be think about when i be talk about this be hold on a moment what about errno what be this other thing and win -pron- set ok so oh no be set by most system call that can fail",
    "go wrong so if -pron- call right and -pron- do not work then oh dear -pron- will return negative one but -pron- want to find out more about what go wrong so that information be encode inside this global variable but wait a moment if -pron- have get a multithreade program surely -pron- be go to be really hard to figure out which particular thread on which system call cause errno to change yes -pron- be correct and now -pron- be force to tell -pron- that actually ok that ever know actually for multithreade program be a very special variably behave like a global variable but actually -pron- use thread local storage which mean that each thread get -pron- own copy thread local storage each thread get -pron- own copy of error"
  ],
  "9eeb3210-b89c-48dc-b32c-2597c75bc28b": [
    "ok i want to talk about the dirty bit so let -pron- keep track of which page have be modify and so this be the function of the dirty bit so the dirty bit mean that -pron- page have be modify ; and what do -pron- mean by modify the idea that the copy that -pron- have on secondary storage i file system be no long accurate so if -pron- need to page this physical frame out -pron- actually need to do a copy process -pron- do not have a current copy outside of the physical ram so ok so by keep track of whether -pron- copy be fresh or the or the ram be dirte allow -pron- to choose page frame efficiently if -pron- be go to choose a particular frame efficiently ideally -pron- be not go to choose one which be dirty because if -pron- have to choose a page",
    "time before -pron- can assign that page to a different duty -pron- need to copy those bite and store -pron- out onto the disk now in practice where -pron- store today in lenox so -pron- can talk about use a special file for this call the swap file sometimes be a whole partition of those like -pron- like a whole disk do -pron- ask to store a copy of -pron- ram right so in addition then to the mapping from a logical page number two physical frame number will keep track of these page which have be modify but some other thing that -pron- can store as well why do not -pron- store weather some memory be read only kate and that have a couple of use first of all as a security",
    "do not want -pron- program to be self modifying and so for security let -pron- make sure that that code can not be change once -pron- be load into ram the other one do be share all come back to read only in a moment another one which be really useful be to say whether a page of memory be executable so classically many bug security bug where surround the stack where if -pron- give -pron- say an array of ten byte and i deliberately put say three thousand byte of input into -pron- way then oh can overwrite part of -pron- stack which be exciting because now i can put actual program code in there so -pron- can help prevent these kind of deliberate buffer overflow form immediately execute code by declare that -pron- stack be not executable assembly this thing i put inside the heap be not",
    "part of writable the rest of -pron- be readable -pron- can change this this may be useful for example if -pron- be write a hot spot compiler because now the thing -pron- right into memory -pron- actually do want to compile and run as executable code so -pron- will talk about how -pron- can use this later on in the course when -pron- start talk about memory map file and memory mapping i want to come back to however to this idea of make part of -pron- memory read only this actually allow -pron- to use -pron- memory really efficiently i want -pron- to for example imagine that -pron- be currently run a compiler let -pron- say -pron- be clang right and so -pron- address space yes -pron- have -pron- own",
    "a whole lot of memory dedicate to the executable code of client so there -pron- be but guess what there -pron- be also on the same machine also run clang so i need the same piece of code load into memory now if -pron- do not care about use memory efficiently -pron- could say fine will just duplicate all the stuff -pron- be load from disk into memory twice so inside -pron- expensive ram ok i want the different colour let -pron- just let -pron- go for key try that be all -pron- expensive ram now k will be a copy of clang for -pron- and a copy of clang for maine -pron- can do well than this let -pron- let -pron- share these piece of memory so if -pron- agree to never be able to change this so if",
    "both of -pron- can believe that -pron- have actually get -pron- own copy of clang but in fact -pron- -pron- be actually share the same physical piece of memory and that be pretty cool so now -pron- have many user think that -pron- have get access to more random -pron- actually have because -pron- be share thing and there be an example with clang but -pron- be very true for thing like the c library and other dynamic library that be share across multiple process right so share be caring and kind of allow -pron- to use -pron- memory efficiently the last thing will be able to do be to be able to say right -pron- be go to take a frame of memory here and map -pron- into -pron- address space and then also map -pron- into another process address space so now i can have two process which can communicate",
    "then -pron- consider immediately there be no memory copying require why because -pron- be both actually look at the same physical piece of ram let that sink in for a moment that be really really cool so there be an instantaneous copy if -pron- like for instance appearance of this value inside -pron- memory space because -pron- be both actually look at the same piece of silicon and so -pron- be go to see how to do that later when -pron- talk about mmap and -pron- be a very fast way to do what be call ipc or int process communication and allow -pron- to share bit of memory -pron- be very very kind standard practice today with more complicated piece of machinery like browser where i may have different process involve",
    "one that be do the ui layout another one which be do that download another which be the javascript interpreter etc and i need an extremely fast mechanism to be able to communicate between all of these different process right so that be all to come when -pron- start talk about mmap in the future but -pron- ultimately rely on the very page table that -pron- have be talk about as how -pron- implement virtual memory so what be the big takeaway first of all realize every page have these bit -pron- have get thing like the modify bit -pron- have get to read only and whether -pron- be executable -pron- get some of these setting for free later or control -pron- when -pron- talk about memory map file -pron- give -pron- an advantage of be able to share thing and -pron- give -pron- some security be not a hundred percent if -pron- be interested then go and read up on return orient programming which be an"
  ],
  "a04b015e-498e-4c02-9326-bd1715c8f047": [
    "ok so let -pron- finish this with a little demo -pron- have log into a linux machine here -pron- be actually the shared engineering work station here and let -pron- go into a virtual file system -pron- be go to go into one call proc to tell -pron- all about various process so realize that none of these file exist right -pron- be all come from the kernel but the kernel be fake the result -pron- be just give -pron- a directory listing which to -pron- look like real file but actually none of this stuff exist so right now i do not have much running here -pron- have get a process call two five six five which be bash and i just start another one for ps let -pron- go into one to the bash i know that be still around ok so let -pron- cd into two five six five -pron- will notice that there -pron- be -pron- be list early and inside this directory i can find out all sort of fun thing about this current process i can find out how -pron- be use",
    "i can look at -pron- environment variable let -pron- just try that ok so these be all the environment variable that -pron- get start with i can look at -pron- say command line how -pron- how -pron- be initially random -pron- do not start -pron- with just bash i can look at say what limit -pron- have ok right so say how much memory -pron- be allow to use how many process -pron- be allow to start etc etc etc so -pron- be peek inside the kernel as -pron- be run and -pron- be give -pron- all this kind of great information so now -pron- can build little tool for example -pron- could build a little tool call ps which look at proc and maybe some other virtual file system in order to tell -pron- more about what the system be do or for example -pron- could look at the current set of user which and what be -pron- do where -pron- be go where -pron-"
  ],
  "a1020a6c-61f2-4b16-b8a8-b2f4b04242c5": [
    "oh i forgot to say one little thing about erino down here which be when be -pron- set ok so here be a big idea be that -pron- set to zero when -pron- first program first start up -pron- value be change whenever there be an error with a system call and -pron- read the man page to learn more about that but -pron- be never reset back to zero so if i have a whole lot of call let -pron- say that i try to read from warm particular file descriptor and then try to write those bite somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can not actually tell -pron- whether where the error curd maybe -pron- happen early on inside -pron- read maybe -pron- happen inside -pron- right or maybe -pron- happen even early so just think of be a global variable that if an error occur -pron- change -pron-"
  ],
  "a1ef4c45-f42c-44c7-9792-60bae135ff0e": [
    "ok so -pron- do not need a definition for deadlock and this idea that -pron- -pron- thread be freeze up maybe one thread be wait for a mutex lock that be never go to be unlocked maybe -pron- be wait for something from a data structure which be never go to be give to -pron- so here be a general definition for dead log key text door work ok great make -pron- that big right so dead log be when -pron- be wait for an event that well ok can i type so i put in some in there ok will never happen ok so stop try to make -pron- day to happen -pron- be never go to happen stop try to make this thread exit -pron- be never go to happen ok so -pron- poor poor little fair door process be wait some for an event maybe -pron- be go to signal that",
    "just never go to happen so -pron- do not get to complete -pron- do not get to kind of run -pron- activity or run the code and of course debug deadlock be tricky -pron- be often there as pair that i could a thread maybe -pron- be stick inside p threat condition wait and -pron- do not know why why that event do not have not have not fired have not occur ok so -pron- have get this general definition of deadlock now actually let -pron- see if -pron- can kind of construct some example where -pron- actually cause -pron- so let -pron- use team mutex lock and two thread to create an example of deadlock ok bye -pron- be go to actually do this in a text editor ok let -pron- go right do i have so if -pron- have get thread one imagine -pron- thread first red make the coda big right have call",
    "lock on this first mutex and then after -pron- have do that please lock on this other mutex right so -pron- will do some work ok do something and then after that -pron- want to at least ok so -pron- will call p thread unlock on both of these mutex be ok so for example maybe -pron- want to take some datum out of out of datum store one stick -pron- into datum structure to ok -pron- do not matter particular which order that -pron- release -pron- in just for symmetry -pron- be go to do -pron- this way but let -pron- let -pron- think about what happen if -pron- lock these in a different sequence inside another thread so -pron- be go to have now another thread that do the same sequence of operation accept ha -pron- have swap these around the case so",
    "like most of the time no most of the time -pron- thread be perfectly happy do what -pron- need to do until the follow happen until one unfortunate day thread one have call preferred mutex lock on get this choose a new color call prefix lock on the first one case be complete that at the same time -pron- other thread which be curiously call thread one so let -pron- fix that thread two right have just acquire the lock on mutex too so now -pron- be both able to do this but what happen",
    "let -pron- go for yes -pron- be kinda extreme pinky purple thing let -pron- try that ok right so now what happen thread one say -pron- 'd like to lock this mutex but of course what do this do -pron- block ok why because another thread have that new text between -pron- and -pron- -pron- know -pron- be thread two meanwhile thread two try to look -pron- take one and that of course block -pron- be not yet available another thread be currently quite that music lock ok so when will -pron- escape out of this and the answer be never ok -pron- can read the code and see that eventually -pron- be go to release these lock but -pron- be never go to get to that that piece of code that thread one be wait for thread two and thread two be wait for thread one so -pron- be kind of stuck for stick forever",
    "be in the same order -pron- would have be fine let -pron- just kind of quickly sketch that out to see that let -pron- imagine that i have -pron- first thread do mutex wear and then mute x two and then mutex wanna mutex two down here for thread two then if -pron- both try to acquire mutex in at the same time then -pron- can imagine that thread one would acquire the mutex lock here which would mean thread two will be force to block so -pron- do not get to go to step two which mean thread one can continue and then when -pron- be finish -pron- will release those lock so now thread two can finish so if -pron- 'd actually write -pron- code like this in the same order -pron- would have be impossible to get deadlock",
    "semaphore sure ok so let -pron- do something similar with count semaphore where thread one call say sam weights on count center four as well and at the end -pron- will will increase the count again ok so now -pron- will have another thread that do something similar or key and another thread do something similar ok so do -pron- see any problem right now nope -pron- could imagine that these counting semaphore 's -pron- kind except for have be initialize just account of one ok so same",
    "for every same weight call -pron- call assam post ok right so what if -pron- could have make -pron- a little bit more complicated though and -pron- say that same weight here be go to in order to continue -pron- be go to wait on this thread and then -pron- be go to post on some sample to an meanwhile thread two -pron- be go to wait on count semaphore two and then -pron- be go to post on count semaphore three ok and then some weight three -pron- be go to then post inseminate one ok if all -pron- county be force to start off with a value of zero -pron- can see that no one get to play that all of -pron- thread have get stick that -pron- first thread be block here wait for the value for sale want change well someone will change",
    "pizza slice and be able to get that piece of slice form -pron- be wait for sam post to be call by thread two but thread two be not go to give -pron- that pizza slice until -pron- get a piece of slice out of count semaphore s two and where will i get that only from thread one when thread one finally call stem post but that be not go to happen because thread what be still wait for the pizza slice from thread three so now -pron- see -pron- have get this love triangle here between -pron- three thread -pron- will never go to continue that always wait for an event that be never go to happen so that be all example of deadlock -pron- can construct lot of these vary bit of complexity usually -pron- do not artificial construct -pron- like this usually be scratch go ahead go why do -pron- system come"
  ],
  "a2ab9689-c933-4b35-bc36-acc823aa42c8": [
    "hi so the last video be how can -pron- beat malloc ok well actually malloc be design to be fast but design to be generally fast and design to work over long period of time -pron- particularly care about long running service and server that be go to do a lot of mallocs and free so malloc -pron- be not try to be the fast allocator be just try to be the good allocator over many many different use case so how could -pron- beat mark well one answer be to define what -pron- mean to beat ok so here be some thing that -pron- could if -pron- only care about optimize one thing -pron- could beat malloc first of all maybe -pron- could have any more efficient representation if -pron- only allocate block which be always the same size say -pron- only ever allocate block in one kilobyte chunk",
    "one bit of information for each chunk ok which be a lot more efficient than be link list implementation maybe -pron- could actually beat malloc by -pron- speed of allocation perhaps -pron- can do well say than the link list that -pron- have see so far the link list -pron- have see so far in -pron- implementation include all of the all of the entry inside be link list include the allocated and unallocated entry perhaps -pron- can write a fast version over heap allocator if -pron- have a second link list of only the one which be actually free so -pron- basically have what be call a free list maybe -pron- could efficiently find an entry base on the size so perhaps -pron- want to handle small allocation like a hundred and twenty eight bite very different",
    "then -pron- have get the overhead of how -pron- recycle block so be -pron- do -pron- need to do in order n search be -pron- order order order one perhaps -pron- do not want to do this until -pron- have get a lot of fragment or only do -pron- up on demand so this be a tradeoff esta how many cycle -pron- want to spend try to kind of recycle and ublock coalesce sing versus perhaps -pron- want to be able to see inside a separate thread and then the last thing which of course be always important be how well do -pron- actually utilize -pron- memory have lead to a lot of waste space do -pron- have space fragmented into lot of different area in memory or perhaps worse fragmented into lot of tiny tiny shard of waste of sort of very very small allocation which -pron- could make but there be no way -pron- could satisfy large"
  ],
  "a2f92ca4-d435-4bce-a132-de1a03149ff1": [
    "ok right so let -pron- get a new color right so let -pron- come up with a scheme that ext2 use and note that be not the only scheme of do thing -pron- can also talk about b tree for example as an alternative but let -pron- not go down there instead let -pron- actually think about kind of one possibility ok so the story so far -pron- have get -pron- an inode remember that inode -pron- be fix size say one hundred and twenty eight byte or so -pron- do not have much space on -pron- so definitely -pron- want to store the meta information on -pron- like say when this file be create or modify etc but then -pron- actually want to say ok but if -pron- actually want the byte of this cat picture i bet -pron- can tell -pron- where to load -pron- so if -pron- content of",
    "nine etc i need to store these number somewhere ok so -pron- first idea then be to say look for very small file why do not i actually store the actual disk block number so say three seven fifteen directly inside the inode ok so -pron- can do that provide the file do not get too big because -pron- i node have a limited amount of space cape so for very small file then that be actually -pron- plan in which be great because now -pron- have get pretty good performance that as soon as i read the i node i know where to go to the disk to actually get the content ideally of course these would be contiguous but -pron- do not have to be ok so in practice -pron- may limit this scheme to say",
    "too big right so what do -pron- mean to be too big right so how big be each disk block well be dis block remember -pron- say -pron- be go to be four kb ok so for file which be zero to forty kilobyte -pron- have now get a scheme to actually store -pron- content great ok so forty kb where -pron- should be big enough everybody oh yeah well except when -pron- be not so what be -pron- go to do when -pron- have a file which be four thousand and ninety seven byte ok so clearly -pron- need a way to kind of overflow and to store more information so here be -pron- plan the eleventh inode down here so this be zero to nine here so tenth , i.e the eleventh actually do not tell -pron- where to read any datum so",
    "byte or high -pron- be not go to tell -pron- but i know someone who can why do not -pron- go to this particular dis block let -pron- say on disk this happen to be a some arbitrary location like say this block number one hundred thirty seven go and read that and from that -pron- can find out where the content of the fourth thousand and ninety seventh byte be so for these large file the beginning of the file -pron- can still access immediately right -pron- still know exactly where to go on the disk right -pron- can get these straight away but as -pron- progress into the file -pron- be go to have to work a little bit hard so after forty kilobyte this be what -pron- be go to have to do -pron- read one extra disk block so -pron- be go",
    "and this will tell -pron- where the next set of disk block be ok so -pron- will be somewhat on the disk and where on disk will be store inside this little table so let -pron- talk about this little table if -pron- disk block number can be represent use four byte then how many entry can i have inside -pron- little table here so the table -pron- be four kb but each entry be four byte so that mean -pron- have get a thousand and twenty four one k entry that i can store inside of this block so this diagram be very very incomplete there be actually many many many many more of these so there be a thousand and twenty four so call indirect block and -pron- be call indirect block because i have to load this",
    "have to go and read this one time now in practice once -pron- have read -pron- one time i do not need to go back to the disk to keep load -pron- the kernel will cache that information so now -pron- can actually read the next quantity of one thousand and twenty four so wonderful great now i can start work with much large file like -pron- be go to repeat -pron- again the first forty kilobyte of every file do matter be small or large -pron- do not need to play this trick ok that -pron- get this directly from the inode but for the forty first byte -pron- can workout that i should go to the very first entry inside -pron- indirect block table so i need to load this block and then follow the first entry and great -pron- have now get -pron- another four kb as i keep read the file -pron- be go to workout which",
    "give -pron- another disk block number to read from disk and i can keep read the next four kb again for performance hopefully these be next door neighbor but -pron- do not have to be -pron- in fact -pron- could be anywhere on the disk right so that be pretty good how big a file can -pron- actually represent with this system so if -pron- indirect table here be full then -pron- have get a thousand and twenty four entry ok but each entry be for kilobyte in other word -pron- indirect block can hold four megabyte worth of information so this scheme will work provide i do not exceed four megabyte plus -pron- direct block which i say there be ten of -pron- so -pron- have get forty kb ok that should be big enough for everybody -pron- can not imagine why anybody would want to store more information",
    "now huge file the initial part of the file again be store as direct inside direct block the thinking being be quite often -pron- would just want fast access to the begin of the file after that -pron- will use this indirect scheme but after that after -pron- have exceed this limit that -pron- have just calculate -pron- be go to play a new trick so now there be another entry inside the inode which say -pron- know what i can not tell -pron- where the next bite be go to be store but i know someone that know someone about where to go so great -pron- read a disc lock off four kilobyte read here and again -pron- have a little table thousand and twenty four entry inside -pron- but those entry -pron- be not the answer and look this -pron- be do a second look up so -pron- have to go back to -pron- disk to read another little table and",
    "-pron- see with virtual memory and finally this give -pron- the actual disk block that will actually hold the datum so finally -pron- can meet the next four kilobyte of datum ok so how much can -pron- store with this double indirection scheme here ok so each one of each one of these entry there be go to be a thousand and twenty four of -pron- ok for -pron- second look up here but -pron- be not do because actually i can play this this trick a thousand twenty four time so for -pron- double indirect block -pron- have actually get four kb time a thousand twenty four time a thousand twenty four in other word i can represent four gigabyte worth of information here right -pron- just need to write the logic to make sure that",
    "i need to be able to do math to say why be -pron- less than four kilobyte in which case which one of these disk blocks be -pron- direct block be -pron- in the next range in which case which one of these thousand and twenty four entry do i need to read ok and therefore where inside a particular this block do i need to read and what be the offset inside that particular block and finally if -pron- be use this double indirect trick i need to read one table block and then a second one as well before i can finally find out where the actual data be store ok be -pron- do well actually -pron- turn out there be triple indirect block as well but after that -pron- stop so actually there be one more entry inside here there -pron- go -pron- will just write -pron- now but the last entry here give -pron-",
    "give -pron- the answer i have to use that to read one of one thousand and twenty four entry that do not give -pron- the answer either and that -pron- give -pron- another block over thousand twenty four and that finally will actually lead -pron- to the real datum so one way -pron- could have take a static picture here i want -pron- to imagine how as -pron- be make a large large file how this may actually fill up kind of initially -pron- be just work on this very first this block as -pron- make -pron- file great than four kb now -pron- start write byte into this disk block as -pron- keep go -pron- need to find a new disk block which be available so -pron- start write byte in there and so on and so on and so on and keep do for the first forty kb and then what happen well now -pron- need to find a indirect table so -pron- find space on disk for that and then -pron- start write -pron- datum into the boat first indirect block here once that be fill up after four"
  ],
  "a339955c-d52d-4f69-9c8a-c4e9d4cf038f": [
    "ok so let -pron- stop think about implement the c library and instead get the stack and instead think about actually work with real datum now -pron- could store a whole lot of datum use scan f and printf etc but what about the day that -pron- decide to work with binary datum ok so with binary datum there be lot of advantage the most one be that -pron- be quick to read in and also -pron- take up less space so let -pron- have to think about that let -pron- actually consider word example where -pron- want to work with some three d datum for example suppose -pron- be capture lidar datum from try to debug -pron- -pron- self drive car that kind of keep on crash maybe -pron- be a bad machine learn problem but maybe -pron- be just bad datum so -pron- want a quick way of be able to store this data in fact -pron- have get a point cloud and each point then have position",
    "three number an x y and z position and just use float point particularly thirty two bit be sufficient for -pron- need today -pron- could use double but then -pron- have double the space requirement and also make -pron- twice as slow to save and load right so here be -pron- plan then -pron- data structure be go to be very simple all i care about be the number of point ok so let -pron- in -pron- program have a variable a global variable which be the number of point load and then for each point -pron- be go to have one of these struct which be really just three floating point value ok so i have a pointer here call point to -pron- three d point so -pron- be go to point two one of these struct but of course really -pron- be go to be in a way so -pron- variable here call point actually",
    "-pron- can start read and write -pron- point cloud datum so how can -pron- do this right how can -pron- load read -pron- point cloud datum well the most cross platform way of do this be to use the c library and -pron- have get something here call fread and fwrite and -pron- behave a little bit like calloc in the sense that -pron- can specify the size of each item and then the number of item the so -pron- could if -pron- wish specify that the size be just one bite and then if -pron- do that then the number of item end up be equal to the number of byte that -pron- 'd like to load in -pron- case however -pron- can actually use the size of -pron- struct element and then the number of item will",
    "ok so let -pron- have a look at this right so here be some datum that i save early ok inside a file call point dot dat and at least f open so great now i get to file handle and -pron- be just go to open -pron- for reading so -pron- first plan be to the very first thing i want to store inside this file be the actual number of point that be go to represent ok so let -pron- directly read into -pron- integer here there be so -pron- be go to give a fread place to storage result and i need to tell -pron- what what -pron- 'd like so ok i want to please read size of that data field so size of num point i can either give size of the variable name here or i could give -pron- the type of just int so size of num point there -pron- go and that will evaluate to save four byte on this particular",
    "open ok and of course -pron- be skip any error checking for brevity -pron- so once that complete i now know how many file be go to load from this file so great put aside some memory so let -pron- get some heap memory hey calloc give -pron- and then how much memory do i need well -pron- be go to read number of point and the size of each point be the size of -pron- struct here do fantastic see how easy that be compare to mess around with scanf and try to read floating point number -pron- be go to directly just work with these point so now -pron- have get -pron- memory again i can use fread directly so hey fread please read into the follow location so i do not want the address of -pron- variable now because -pron- point variable actually point to some heat memory",
    "-pron- be go to say the size of each entry underscore t and then number of these well -pron- have just read that ok be number point ok great so if -pron- do this and if -pron- work similar code for save the place as well now i can very quickly read in -pron- light datum or -pron- other three d datum and now now start work with all of these three d point fantastic ok if i truly want to write some very quick fast code without any error check this may be the code i work right today however -pron- have some problem so let -pron- start talk about how thing can go wrong ok so the first problem be that -pron- code be actually not very portable at all -pron- have make some big assumption let -pron- talk about some of the assumption that -pron- have make in writing this code so the first assumption be that whenever i read or write -pron- datum that -pron- integer representation be always",
    "just assume that the data representation for one machine to the next day -pron- be go to stay the same because when -pron- read in the number of point here -pron- just go to directly read the bit pattern -pron- be go to read those four byte or whatever -pron- be directly into -pron- variable and so that be a big assumption -pron- have assume that when i compile this tomorrow on yet another machine the number of byte have stay the same that -pron- integer be not say suddenly eight byte wide or two bite and the actual bit pattern to represent those number stay the same that be a very dangerous assumption today so -pron- turn out that cpus can choose to store -pron- integer use different representation just as obvious one be should -pron- store the high bite or the low byte first which one",
    "byte for example that hold -pron- entity value and the way that intel do -pron- can be different from say the way that a power pc cpu can do -pron- so -pron- have not address any of those representation problem second -pron- just mention that -pron- can be different size as well the c standard do not require int to be 32 bit wide so perhaps a well choice here be to actually explicitly choose something which be eh specify side so let -pron- use unsigne thirty two bit type ok to ensure that at least -pron- always go to be work with four byte another problem with -pron- choice of just use an int be that what if someone give -pron- a malicious file where the number of point -pron- read be now possibly a negative value so oh that mean",
    "to do some odd thing so -pron- may start try to wait really massive amount of of datum and so potentially -pron- program be now read corrupt datum or may behave undefined way or perhaps can be use to do unexpected operation so that be a big problem so yeah let -pron- let -pron- use a an unsigned type here ok what else -pron- get go on right again -pron- have assume that the float point representation of -pron- number be always go to be the same that be not necessarily true -pron- be a good bet because most machine will use the standard ieee representation of afloat but -pron- be not actually guarantee so again -pron- have get these concern about just arbitrarily say that the representation of -pron- datum on disk be exactly the same",
    "ok third -pron- have not actually check the return value for f f read -pron- have just assume that -pron- work ok -pron- be kind of a dangerous assumption so fread do not return the number of byte read instead -pron- return the number of item actually read and -pron- have tell -pron- the size of each item so in this very first call to fread -pron- expect that this should return one because -pron- -pron- ask to read one item in -pron- second call to fread -pron- expect that this should return num point ok so well code would actually check that would actually check that -pron- successfully read that number of item and then do some error handle in the case that -pron- do not so for example if -pron- do not actually successfully manage to read one item into here then -pron- can not even trust that none point be correct maybe",
    "point that be go to deal with down to the number of point that -pron- successfully manage to read or maybe -pron- should just exit with an error ok so as -pron- can see read write binary datum be not as trivial as -pron- first appear and -pron- be important to kind of if -pron- actually really want to write something which be cross platform be important for -pron- to actually specify the exactly how -pron- be go to use each and every bite of -pron- binary format right so -pron- have talk about some of the useful thing and also some of the difficulty of use a reading writing binary datum but the day that -pron- do that and the day that -pron- want to start to read away cross platform code remember that -pron- have f read and f right at -pron- disposal to be able to easily read and write binary datum i mean easily read and write byte to inform disk ok right in the next video -pron- be go to talk about"
  ],
  "a36c9a4b-0ff7-4b83-9157-f856ccfd8b26": [
    "ok so how do i figure out if something be a regular file or not alright so for this -pron- be go to use stat right so -pron- can do thing like say right if i know the file name i can call stat for example hey here be a mystery \" file \" \" m \" \" and please stat fill out -pron- struct so here be \" the struct and what do that struct look like well -pron- know -pron- be go to look like struct stat and the struct -pron- will have arbitrary value and let stat actually complete successfully so -pron- well check to see the return value of stat this well be 0 to mean -pron- succeed ok so if that be zero then great -pron- know that the memory structure actually have some valid value right and how can i determine if -pron- be a regular file or directory or something else ok so that information be store in the bit pattern of",
    "happen to know for example that i should mask -pron- with just one binary number so let -pron- say sixty four hundred and twenty eight then i can read the value of a single binary digit but instead rather than hardcode that and do a bitwise and let -pron- chop that out there be some macros that do this for -pron- so i can delete all that an instead these macro turn -pron- off ok look a bit like this s for stat and then -pron- have get one call isdir right so that will return a non zero value if -pron- be look at a directory ok what else be there right let -pron- go and take a look alright suppose -pron- want to know if -pron- be a regular file so there -pron- go",
    "a non zero value if m be a regular file but there be some other fun one down here so these be the two which would be most useful there be regular file and be directory -pron- probably will not need be a character device or block device if -pron- have make a name pipe perhaps by call make fifo for example then these kind of pipe actually exist on -pron- file system -pron- have file name so this would be a way to actually check to see whether that filename correspond to one of these pipe and lastly here be a useful one be something a symbolic link there be a big gotcha with this one or big secret about have to use -pron- correctly so -pron- will talk about that a little bit ok so let -pron- go actually look at some code that do this all right so here -pron- go let -pron- find that come back ok so i want to",
    "here -pron- be so let -pron- take the argument that -pron- pass in and -pron- will check that stat actually succeed if -pron- do not let -pron- just print out an error and of course -pron- have get errno to use let -pron- go back to my here -pron- go so -pron- can always print out an error number to see what happen otherwise great -pron- now know that -pron- actually have some information inside -pron- little struct so let -pron- see if -pron- be a directory ok so let -pron- run this so -pron- will use clang and call isdir right so now -pron- will run -pron- and -pron- can say ok what about the current directory so yes -pron- be a directory ok what about there -pron- have some other file in here ok before",
    "say this file be d i r dot c like no that be not a directory so great now -pron- can tell whether thing be directory or not so that be go to be useful say if -pron- want to write something recursive for example suppose -pron- want to write -pron- own version of chmod to recursively change everything from c code then -pron- could quickly use stat to see whether something be a directory or not and the last thing -pron- should try let -pron- give -pron- a fictitious file do not exist so no ok -pron- will see that stat fail and then the error number that be set inside not return value but errno correspond to -pron- be sorry that be not a valid filename ok right so ok so -pron- have do that which be go to be useful",
    "to implement a version of ls that actually can now recurse into all sub directory now there be something already a bit like this -pron- be call find so if i call find i can do thing like find start from the current directory and -pron- will list -pron- everything there but i can do a lot more with find i can say thing like find -pron- thing with a certain modification time or find -pron- thing which be a certain type so for example only display thing which be type directory or only display thing which type of a regular file or find -pron- thing which have the name or a case insensitive name say that have the word ok let -pron- try say anything with python ok so find be a kind of swiss army knife of ability to kinda find match file and"
  ],
  "a37986ec-bb69-4841-90b8-6c7f50b431f0": [
    "hey welcome to lecture thirty six so in this lecture -pron- get that start talk about protocol and handshaking so the protocol -pron- be go to look at be go to be tcp protocol and a little bit beyond will look at http as well right so remember tcp be transmission control portable -pron- allow -pron- to hide the fact that -pron- be send packet and so to the application -pron- just look like a stream a pipe that -pron- can push bite into anas bite will appear out the other side right so let -pron- have a look at some of the protocol magic with actually support that first of all -pron- know that when -pron- start make a tcp connection -pron- first initiate one the handshaking need to occur mean that -pron- be go to send a few packet backwards and forwards just to initialize that connection and in fact this be often know as the since in ach ag pattern right so there be three packet -pron- have get to talk about where first of all the client send a",
    "all -pron- sin ok will see and actually send for here be -pron- synchronization number remember -pron- be play this game over good effort network and the packet that -pron- send may be losse there may even be duplicate -pron- may arrive out of order so -pron- need a way to be able to reassemble the packet into the correct order and also identify any miss packet so what will do be in talk to the other end of -pron- tcp connection -pron- will keep track of how many byte -pron- have send down this stream so far right so -pron- will have a synchronization number and initially in -pron- first design let -pron- just imagine that -pron- synchronization number start at zero that be not completely true eventually will randomize -pron- will talk about why but -pron- need to initially send this number to the other side so that be -pron- open packet -pron- send a packet with the synchronization bit set say here be -pron-",
    "ok that be go to represent zero byte set now what do -pron- mean when -pron- send a packet with the synchronization bitset well this actually have a look at the definition of tcp protocol and for that -pron- can talk about what -pron- will actually find inside a regular tcp back tcp packet before -pron- send any kind of user information -pron- here be all the byte that that will see now remember that modern network engineer do not talk about bite -pron- take about octet mean eight bit so if -pron- want to actually create -pron- own tcp packet this be what -pron- 'd need notice first of all that -pron- have get two octet here the first two be go to be the source port so -pron- can find out who send this to -pron- remember the source port and the destination port be important -pron- comprise part of the information that describe specific tcp connection",
    "know which source port -pron- be talk from ok and then -pron- have this all important sequence number which be as -pron- can see four octet so -pron- have get sequence number which between zero two to the thirty two minu one if -pron- exceed two to the thirty two minus one then -pron- just wrap around again and continue go a knowledgement number -pron- see those be important in a moment that be a way for -pron- to ignore -pron- the other side sequence number and then -pron- have thing like an offset to say hey how many how far after this tcp header will the actual application datum beat -pron- have get some reserve bit in here there for reserve for future use occasionally -pron- will see example of say well will will will describe one of these bit -pron- be go to use now to be the evil bit so that -pron- can easily identify any religious traffic on the internet so if -pron- malicious few miniature packet make",
    "here and there be eight of -pron- now inside tcs two forty one -pron- be not go to look at every single one i just want -pron- to appreciate that there there so when i talk about a syn packet that mean that the synchronization bit be set -pron- have get some other stuff in here so -pron- want to be able to control how many packet be on the wire so for performance i do not want to send one packet and then wait for -pron- to say yet get -pron- that would be kind of slow -pron- be well if i could start throw in a lot of packet into the network and i do not want to send too many because maybe there would be a lot of congestion so -pron- want to kind of negotiate overtime how how many packet how many byte in flight between -pron- and -pron- between either side of the socket right so again -pron- be not go to go into that detail inside cs two forty one but -pron- can take a networking packet to learn more about this and then -pron- have",
    "for nibbles whatson able -pron- may ask ok -pron- be a term rarely use but i love this -pron- be half a bite -pron- be half an octet be just four bit ok when too much of a bite be too much too much to eat have a nibble instead but anyways so checksum be include so that -pron- can detect error on the tcp packet but as i say -pron- be only two to sixteen bit so there be a small chance that -pron- could still get datum corruption and not notice -pron- or one in two to the sixteen chance right and then tcp actually be a flexible protocol to say hey maybe -pron- have not design everything -pron- need yet so -pron- can have additional option in the future here so this leave room for expansion in hence the need for this this offset to say where the real datum will apply right so as -pron- can see tcp have have an overhead here that for every packet of information",
    "if i just send the one bite at a time or two bite at a time from the application datum that be not very good use of -pron- network bandwidth so i prefer to send kind of very large packet so that i can efficiently use network resource ok right and just for reference like i say this be go too far from what -pron- really need inside cs two forty one but if -pron- truly want to construct -pron- own raw packet from first principle -pron- can see the reference for for which bit -pron- would need to set for the tcp packet to say alright yes this be a synchronization packet or for example if -pron- be a very last packet to say -pron- know what -pron- be do talk to -pron- this be the last thing -pron- be go to say here be the finished packet here be the finished bit here as well right so let -pron- see excuse -pron- right so back to where -pron- be so the very first packet",
    "server i like to synchronize with -pron- here be -pron- synchronization here number the second packet that occur will be from the let -pron- do a little diagram here so -pron- get the client and the server so the first one be the client say hi and here be -pron- synchronization number and then the server can say hey great to meet -pron- and i acknowledge -pron- synchronization number there -pron- go and by the way here be -pron- so -pron- be go to have both those bit set and finally of course the client can say alright -pron- acknowledge -pron- synchronization number k plus",
    "so there be a delay with tcp the very first packet be not the moment that -pron- can actually send any useful datum so for example if -pron- take ten millisecond to send this packet order relatively slow network or to perhaps -pron- have get many hop to get too many get to cop over many router or router to get to the server or -pron- be a very slow radio connection then -pron- see come back there so that take another ten millisecond ok and then finally -pron- send -pron- datum ok -pron- be now thirty millisecond pass and finally the data be be see by the other side and if the server be really fast send back a reply instantaneously then not ten millisecond later that be when -pron- finally start to see on the client side -pron- result of or some kind of acknowledgement of -pron- request so that be",
    "send an receipt -pron- have get the network time and the latency be actually compound when -pron- be set up this initial handshaking of a tcp connection right so let -pron- return back to some question here so -pron- understand now the purpose of the sequence number that -pron- main job be to protect -pron- against drop packet and duplicate packet so basically the service site the client and the server need to play a jigsaw game except fortunately -pron- be just a one dimensional jigsaw that when a packet arrive where the sequence number -pron- can say ohio right so here be all the datum that -pron- have read seed so far i can see that this one due to -pron- sequence number be go to slot in just here or perhaps -pron- have already receive these packet over here with -pron- sequence number so if the kernel need to buffer those because -pron- be still wait for the miss datum just here",
    "say excuse -pron- i -pron- need to read send some datum i never receive -pron- so tcp concentrate on the idea that eventually i can hand this data off to the user process once -pron- have get enough of -pron- once there be no miss gap right so that be the main purpose of the sequence number to identify miss packet and duplicate packet the other thing -pron- give -pron- some protection be for a malicious malicious process or malicious actor on the internet pretend to craft valid packet so -pron- just have to believe the information that appear from the internet -pron- just have to believe that the source port for example be correct that the source information from where this packet come from have not be fake by a malicious actor so the sequence number attempt to ensure that if -pron- start send -pron- random",
    "because if -pron- send -pron- an invalid sequence number -pron- be just go to reject -pron- and say oh clearly that can not be right this do not fit into -pron- one dimensional jigsaw but what about the very first sequence number if the very first sequence number be actually zero then i would be able as a malicious actor to be to be able to predict exactly how to jump into this connection any moment so the so i could i could fake for example the acknowledgement or i could fake the server server reply to say yeah acknowledge -pron- sequence number be zero so today as a security measure to buy to prevent hijacking of the tcp connection -pron- actually randomize this initial sequence number so the the initial value be go to be some two to the one in two thirty two number",
    "so that be why -pron- be initial value random -pron- be a security measure and in fact if -pron- read a lot of the tcp spec and see how -pron- be evolve overtime -pron- be a protocol that do good effort to try to prevent malicious actor from either prevent delivery of packet or masquerade as as the other end -pron- be not go to go into all those detail but understand the tcp make good effort but -pron- be not perfect and actually -pron- have continue to find vulnerability inside tcp over over many decade alright so that be enough for this video except for one little last question -pron- see the tcp header and here -pron- be but where be the ip address what happen to that -pron- have only get the port information why be the ip address miss here so to answer that realize",
    "that this be the tcp header but on a real packet -pron- be go to have the ip address in front of -pron- so -pron- actually have protocol wrap up inside other protocol a real packet would have ip information so for example if -pron- be ip for -pron- would have a thirty two bit source ip at a thirty two bit by -pron- packet be thirty two bit wide i should win for the full length ok i would have like the source and target in here ok so so be the source and destination ip for ip six of course there be many more bit so -pron- source ip four which be why network engineer do not tend to say -pron- be a tcp packet will send to say thing like -pron- be a tcp slash ip packet which be more technically correct"
  ],
  "a60784ac-5129-4d35-8feb-23e8aa752f87": [
    "ok so let -pron- talk a little bit about http so http be the mechanism today that how -pron- actually get a web page and http actually grow out of an existing protocol and this very first version of h d two p the first of official version one point oh and also one point one be a text protocol so why do -pron- think that be why choose a text protocol because this of always advantage to a binary protocol with a binary protocol i can be a lot more succinct i can choose -pron- protocol so that by the number of byte i need to send or octet i need to send be minimal so why do -pron- think the very first version be text base ok so the reason -pron- be text base be because -pron- be easy to implement different client and server and -pron- be easy to debug the actual connection which be happen over -pron- will tcp or udp connection and -pron- be easy to write",
    "so for example if -pron- want to get a web resource today -pron- would make a connection to a server and -pron- 'd say hey server can -pron- get -pron- the follow so let -pron- get resource so if i just care about the home page then that be just slash if for example i want a particular subreddit page -pron- may say ok say slash r slash let -pron- get some cute picture of cat ok all right ok now i need to also to complete this be an http and if i go and read the specification -pron- see that after that i need to declare what version of http -pron- be use so http forward slash one point oh and if i continue within the spec i discover i can add some other header information in here but -pron- request",
    "so that be a new line just those two character there i could add some more thing in here like what image i prepare to accept i could add cap and cookie information but right now -pron- be just go to say ok slash r slash n slash r slash n be a way to say and here be a blank line mean -pron- request be over now -pron- be time for the server to take all this information and give -pron- a response ok so -pron- manage to implement in http one point oh specification request but do -pron- send -pron- over tcp or udp well -pron- be pretty sure -pron- can guess that tcp be the right answer yes that will make a tcp connection and then will send these bite and will know that these bite will arrive in the same order that -pron- send -pron- be that the full story well not quite if -pron- be the size of google today then -pron- may actually choose to actually implement",
    "fact that packet may go missing but this be useful if -pron- want for example to provide an interactive feedback as soon as the user start type something into the search part -pron- want to be able to display immediately some potential result so that sound to -pron- like udp may be a great course so if -pron- be prepare to employ a lot of great system programmer from say from illinois then if -pron- do not mind that expense then udp give -pron- a low latency response and besides if -pron- be do this just for incremental search be -pron- do not care anyway if -pron- drop a packet because in a moment the user be go to be type another character anyway and so -pron- can reissue a new search base on that new information right but most packet today"
  ],
  "a6948c0b-717d-4a5a-afbc-f2641ef17bc1": [
    "ok so at some point in -pron- life -pron- probably end up write a little shell script so i want to give -pron- an example of one and this one actually set up the demo that -pron- have just be play with so the idea here be that i do not want to add a whole c program -pron- have only want wait say even python i just want to run -pron- shell command as a little script as a little program here so i want -pron- say bash or some other shell to interpret what i write ok so let -pron- actually have a look at kind of a lightly edit version of how -pron- set up the previous demo ok so the first thing -pron- can do inside script be to say hey i do not know where the script interpreter actually be store but i know that on -pron- path somewhere i should be able to find a little program call bash so let -pron- rather than specify bash directly let -pron- say that the",
    "e m v and what dmv will do be find the give give name on -pron- path and then run that so that mean that this script be now portable -pron- be probably should work with only zero or few modification on -pron- linux system -pron- linux system maybe a bsd like mac as well right the other thing i notice about script be that to give a hint to the kernel that -pron- be actually just a script be that -pron- have this two magic character at the beginning the hashtag or pound be also call and exclamation point right so and let -pron- have kind of brief look at this script that so -pron- be write in the bash syntax and -pron- have variable inside of bash script -pron- can talk about the argument give to this so if i want to specify say an argument",
    "like this with lot of quote around -pron- all the time in order to ensure that thing work with space as well so kind of later on -pron- will see here that hey -pron- have get when -pron- want to actually use this variable and variable always start with the dollar -pron- have put double quote about -pron- just in case of space in there right so -pron- have get be this variable -pron- have nothing ok notice actually lot of space in here be important that if here be actually a token understand by bash but if -pron- have no space -pron- would not see that as a single token right similarly the double square bracket be actually another kind of complete token also notice that there be a little semi colon be hide in here which be critical",
    "-pron- want to run and -pron- care about be that exit value and of course by default zero mean success right so if will print out little usage string if something work or fail so and now let -pron- see what -pron- do ok so i want to change -pron- secret file to have a different owner and for that -pron- be go to use chown but i can not just happily go round change the ownership of file i need for sufficient permission for that in other word i need to be an administrator so -pron- be go to need to have root access so for that let -pron- use sudo right so will change -pron- so that that file be own by say potato bob and will change -pron- so that the permission of this file be read only remember how -pron- read these -pron- say read write execute let -pron- also of delete a few file so for example i want to remove",
    "so -pron- be go to redirect standard error which -pron- know be file descriptor two so this be what this be do to a special place a very special file this particular file do not exist -pron- will not find -pron- on any any disk drive -pron- be because sachdev be a something to -pron- device here ok there -pron- go because slash dev be a virtual file system and slash dev slash null have an amazing amount of compression -pron- can put as many file -pron- can copy as much output -pron- want to this file and -pron- do not take any space -pron- be the wastepaper basket of -pron- file system so what -pron- be say be look -pron- may generate a message because a loadout do not exist that error message i do not care i do not want"
  ],
  "a73bb722-a006-40e7-ba5b-1402cd135b37": [
    "ok hi right so let -pron- think about lock contention and also how this also relate to discover race condition ok so here be the scenario that -pron- be go to think about that -pron- have get a thread that most of the time be not inside the critical section and in fact if -pron- sketch this out -pron- will see that initially i just get one single thread and only for a short period of time just one millisecond -pron- be actually do something inside a critical section that -pron- have not yet protect with any mutex lock but for the other nine hundred and ninety nine millisecond be do something else so this thing run for one second and then -pron- be some random type there be one second ok some random sign inside that just for one day second -pron- go and visit a critical section may be update or read a particular data structure ok so now that be fine but now -pron- have two thread so here be another fit that also be go to run for the same second",
    "ok so will say that that have a one millisecond ok of time where be ashley inside the the critical section so as -pron- know everything will find -pron- program deterministic -pron- program or function as expect provide these two do not meet another word provide -pron- do not actually overlap right so could -pron- estimate this will sure -pron- could set up a full integral and think about how -pron- think about these two random time as a whole bunch of time where -pron- do not overlap and then there be time when -pron- start overlap fully overlap and then only overlap a little bit again and then other time when -pron- do not so -pron- could set -pron- up to set this up as a as a two dimensional integral but -pron- just want to estimate this today so -pron- be not go to worry about thing like edge effect where",
    "full or very visit critical section at the very end where -pron- be not possible to overlap afterwards so let -pron- not worry about that let -pron- just concentrate on the idea that ninety nine point nine percent of the time -pron- first date be not inside the critical section so -pron- be go to look at the majority case an ignore the edge case so right i think and play battleship with -pron- now so -pron- have think of one moment in time where -pron- be inside the critical section now -pron- get to think of a number where -pron- get to say ok right -pron- be go to choose -pron- second thread to be inside this critical section what be the chance that -pron- sink the battleship what be the chance that -pron- have overlap ok right so how can -pron- analyze this -pron- have get a one millisecond air slot here so there be actually a window of just two millisecond where -pron- choose a different color",
    "thread may overlap -pron- critical window ok so -pron- may be exactly the same or -pron- may be just afterwards ok so there be just a two millisecond window here alright so how likely be -pron- that -pron- will actually achieve this well remember -pron- say the timing be random so give that -pron- be choose these time all at random -pron- have get a two millisecond out of one out of one second window in other word be roughly about one in a thousand dollar -pron- want to be a little bit more accurate -pron- may say roughly say one out of five hundred so so i could say one out of five hundred or percentage wise that be a very small number so -pron- have",
    "or pretty bad depend on whether -pron- truly want to try to discover this problem or -pron- be hope that -pron- code work so even though -pron- know that -pron- get to race condition even though -pron- know -pron- do not actually implement the lock -pron- have a problem here which be a two percent chance that all code will fail because two thread of enter the critical section at the same time right so if -pron- test -pron- code once twice three time ten time as be very strong chance that -pron- will not notice this effect -pron- have only go to see this one time out of five hundred approximately like i say -pron- do not do the exact integral but this mean that actually make race condition to occur can be quite hard now -pron- go for figure that say the race the critical section one millisecond dirt to run if -pron- be critical section be much small",
    "at with the push in the pop or add another part that may only be order of say ten microsecond so now the chance of that of of thread be inside a critical section be actually slim so discover problem just by testing be hard and that be why -pron- do thing like locate do not want -pron- with two thread but when -pron- with four thread now -pron- be much more likely to occur or test -pron- with a brute force loop try to go into the critical section as often as possible and now -pron- have increase the chance significantly this also apply to the idea of lock contention so lock contention be not a good thing -pron- mean that one thread be be force to wait for another now -pron- do this because -pron- want to program to function correctly",
    "amount of time now -pron- be go to start to see an unwanted and unnecessary performance impact so right now -pron- see with -pron- little rough back of the envelope calculation calculation there be only one point two percent chance of the two thread ask for the lock at the same time so in so one one of the thousand basically so -pron- do not expect to see a significant performance impact because of two thread update this however if -pron- code be different if -pron- have thread which say want to update the datum structure ten millisecond out of one hundred million second so now there be a one in ten chance that the lock that -pron- ask for be be already in use like i say this be just rough back of the envelope calculation i just want to show -pron- the idea",
    "-pron- do not want lock attention but on the other hand -pron- want to be able to discover -pron- race condition as soon as possible for -pron- during -pron- testing before -pron- put -pron- into production before -pron- start rely on this code to save life or to move money or to give demos etc so so race condition be tricky be the big takeaway message and -pron- could do back of the envelope calculation to see why -pron- be difficult to detect these ok right so with that in mind that mean that -pron- debugging skill be understand of how code can interleave can be important be believe to actually reason about -pron- code be just as important as be up to test test -pron- ok so here be here be the code -pron- have get -pron- 'd like -pron- to kind of look at this code and tell -pron- what do -pron- think -pron- be go to do right so -pron- have get -pron- have get a couple"
  ],
  "a8161152-527c-4bb1-b65e-2d56e013ab7e": [
    "hi ok so let -pron- talk about udp and tcp be two protocol that allow -pron- to send information from one machine to another so udp be stand for user datagram protocol so a datagram be just a fancy word for a packet -pron- can think of -pron- like a telegram so user ground datum critical \" the key characteristic of this protocol be that -pron- be connectionless just like a telegram -pron- can say oh i want to send -pron- to this ip address and on this port and -pron- can fire -pron- off and off -pron- go so let -pron- create -pron- little message and send -pron- and let -pron- fly away right so -pron- be not go to track -pron- -pron- do not get a notification when -pron- get there there be no there be no protocol to set up in term of say",
    "to send this message now -pron- simply fire off this packet and hope for the good ok so that be -pron- main idea so be connectionless and -pron- favor latency over reliability so -pron- be go to be a low latency meaning that as soon as -pron- can send that packet make -pron- arrive on the other side then that the receive host can see the information that -pron- send so -pron- care about -pron- when low latency be more important then reliability rely ok -pron- can not spell today rely ability right there be limit to the number of the size of the datagram that -pron- can send so -pron- be ideal then for when -pron- want to send small packet and -pron- just care about get -pron- as fast as possible perhaps if",
    "if -pron- lose a packet -pron- do not matter -pron- be be go to get a new packet similar for about what the new trade price be so udp to the rescue there right so -pron- main idea however -pron- be connectionless there be no security no encryption now no guarantee that the package be go to arrive and like i say -pron- could even actually have the packet arrive out of order and sometimes packet can be duplicate right so udp be low level let -pron- now look at tcp so tcp stand for transmission control protocol transmission control protocol and tcp be a lot more work for the client and server",
    "ok so before -pron- can send anything before -pron- can send anything between the client and the server -pron- actually have to do a handshake ok so there be this handshake so there be a cost there be a time cost to open a tcp connection mean that -pron- have to send a packet from the client to the server and some server back to the client before -pron- can even do anything ok so there be a latency involve with create a tcp connection secondly -pron- be a good choice if -pron- favor rely reliability reliability over latency so if a packet be slow to arrive tcp can help -pron- here so reliability be more important than load latency so the packet be delay for a few second then tcp",
    "that all information be order into the correct original ordering that be send from the other end of the connection so tcp also give -pron- flow control meaning that -pron- try not to send too many packet and exhaust the ability of all of the network link between our and the other end of the connection so if -pron- be on a very high bandwidth connection tcp will ramp up the speed at which -pron- send information if -pron- want a very low low bandwidth connection tcp will not attempt to send gigabyte of information per second there be tunable different parameter inside this but the the cool idea be that tcp do this for -pron-",
    "stream base ok so -pron- can use read and write just like -pron- have do with file and posix pipe secondly tcp give -pron- the will automatically handle lost packet so -pron- will have ok -pron- will flow control and retransmission \" so if the packet get waylaid then tcp will automatically detect that and ask for that packet to be re - sent there be also some basic error check -pron- be not perfect -pron- be a simple crc and the crc -pron- be only two octet",
    "\" may still pass this error - check but unless -pron- be unlucky there be a fair chance of detect a corrupted packet right the big news however be that neither of these protocol encrypt the datum that -pron- send ok so if -pron- care that that the datum -pron- be send should be encrypt so that anybody else inside the same network say people at the coffee shop if -pron- want to care that -pron- can not actually read -pron- datum then -pron- actually need to encrypt -pron- -pron- udp and tcp do not encrypt -pron- datum right which one of these can be use with read and write -pron- have already mention that -pron- be tcp",
    "with read and write but -pron- be fake -pron- be not really a stream base protocol which one require more system sort resource i think -pron- can guess this be also tcp -pron- system need to keep track of any packet that arrive early so -pron- can imagine that -pron- could have a buffer here which represent all of the datum that be arrive and if i get a packet with this piece of information and then this piece of information i can not give that to the client program because -pron- be still wait for this part of the stream to arrive and maybe -pron- be late simply because that packet be take a long way long way round to get to -pron- or maybe that packet get lose either way the kernel have to keep track of how much of the stream have arrive so far and which part be currently miss ok which one use handshake ok -pron- see that tcp use"
  ],
  "a855d876-1b55-4c60-aedf-e70a95f03847": [
    "ok so let -pron- figure out which of the follow be correct and incorrect ok so so -pron- have get a function call f one and wait what be -pron- do here so -pron- have declare in all type of variable call blah and do i have a squiggly line help about call blah and -pron- be an array so the surprising thing here be that as an array , the compiler actually write extra code force to copy in memory this constant this little string so if i be to pause -pron- process i would actually discover the upon run f one there be a memory copy that happen i read from this read only memory that be part of -pron- text segment the actual thing -pron- have load from disk and -pron- have copy that into the stack so there be one two three four five or six six byte include the zero bite that have be copy into the stack and blah if i ask -pron- as",
    "the stack memory where -pron- will find this this h so as a as an array i can not change blood to point to other thing -pron- be disarray but i can use -pron- as if -pron- be a pointer but the downside however be that in this code but -pron- be return blah and -pron- be return -pron- as a pointer so great -pron- will find out the address of blob but the content of that address be no long about -pron- -pron- be on the stack and that stack value that stagnant be only valid while -pron- be inside f one so that be the kind of common error in beginner c programmer be to accidentally give address or variable that be no longer in scope and be no long valid let -pron- have a look at f two f two be a little bit different in the sense that foo -pron- be a pointer so there be no memory copy -pron- go on here -pron- be actually fruit hold the address of high",
    "text segment so -pron- be perfectly ok to return foo and in fact in this case -pron- be return the value of food -pron- be just return an address the address be where in memory to find be readonly stre so -pron- will return the actual address of that that capital age what about f three so f three say ok let -pron- call malloc and get -pron- two bite and store that address inside a variable accord yo and -pron- be now tell the compiler that this this this variable point to a constant character right now ok now -pron- be break some rule here because -pron- be pass this into a str cat and -pron- may get a warning or error to say hey -pron- look like -pron- be get a variable but that be a constant so -pron- -pron- may or may not compile at that point but -pron- get some other",
    "and that string be at least three bite -pron- have actually only get memory assign for two byte also record str cat and what the store cat do -pron- try to concatenate the exist string with the string that -pron- be give -pron- so what string be currently at yo the answer be who know -pron- luck make no guarantee about the memory that -pron- ask for -pron- may or may not be initialize -pron- may be initialize to zero but -pron- do not have to be so str cat may go on for a long time look until -pron- find a zero byte and after that zero byte be go right over right there by with an h and i so that may work with may not -pron- problem however be that even if -pron- do at the very begin store cat will be write three bite the i h and the ion azua bite and yet -pron- only"
  ],
  "a86a145c-b6f4-40eb-9ae9-1db34396ab40": [
    "ok -pron- have get one other little imagination game here so let -pron- just take a break from deadlock just think back to hey what do -pron- do -pron- this way why be -pron- invest and that be because -pron- care about concurrency -pron- want -pron- machine to be able to do more than one thing at a time now today with the key about this in term of threat but tomorrow behavior think about this the fact that i have a thousand machine or a multiple gpu card or whatever or people even and i want this process to run concurrently so i encourage -pron- to in -pron- spare time next time -pron- be have drift off to sleep chat with friend and an algorithm or an idea pop into -pron- head think about oh how would i apply what -pron- be learn inside cs two forty one to make that run fast to make -pron- actually run concurrently so as a work example remember some of the sorting algorithm -pron- may have see before like merge sort have suppose -pron- want to make -pron- merge sort",
    "ok so kind of let -pron- do this as a little bad example but again there -pron- suggestion to -pron- be be think about -pron- css life and start think about well how can i use multiple thread to make this or how can i use multiple process ok so remember how merge sort work -pron- say if -pron- have get say an array of datum here what -pron- will do be -pron- will use recursion to first of all get the left hand side sort and then the right hand side sort an now all i need to do be combine these which be a lot easy than sort all i get to do be take the topmost card off each one and copy the small number ok so think of like to parcel card so this number be small great -pron- will take this now -pron- build the next number ok so now this number be not as small as the number may from -pron- right hand pile",
    "recursion fairy to do most of the work so of course this happen at all level so if -pron- have start with nice big block of datum say mb of datum then first of all -pron- call recursion ok and so on and so on and that have to be cursively run these ok so how can i now think about do this concurrently right so obviously i can not actually just run all these different level concurrently because i can not actually merge -pron- datum until the low level of recursion have finish but -pron- can see thing like these task here be independent ok so if i have say four cpus maybe when i spit -pron- problem"
  ],
  "a9f8e960-2caa-4eb8-b9a8-108fee71d968": [
    "ok right so sometimes -pron- just want to know if a signal be hang outside but not yet deliver in other word -pron- be pende so -pron- have raise up all of drawbridge -pron- be outside -pron- castle but unable to cross the moat because -pron- have block -pron- on all of -pron- process or all of the thread so if -pron- wish -pron- can check for a signal to see if -pron- be pende like literally call sick pending and that will fill in one of these signal set for -pron- so now great -pron- can actually see if there be a say a sigint that be have not be process someone press control c awhile ago and maybe -pron- want to print out a useful message so that be what this little program do here let -pron- check the actual see which bit be set inside -pron- signal set here so once i grab that i can say ok be the follow signal a member of this so will take",
    "be set inside there and if -pron- be -pron- will print a friendly message back to the user to say hey thank for press ctrl c but be no cookie for -pron- today right so let -pron- let -pron- grab this code why do not -pron- run -pron- for fun like ok i will just check to see if i get the code already so let -pron- do grep will look for pende in all thing ok yes so here -pron- be be member right so let -pron- have a look at -pron- little demo here k alright so what do -pron- do inside main will look to see if -pron- will check sig pende check -pron- actually work and then -pron- will see if sigterm be a member of that ok so then later -pron- be go to be change the",
    "let -pron- let -pron- grab a let -pron- grab -pron- own little demo here right so -pron- will take that and will make a new little program will call -pron- how about in -pron- case so big text wait so cat wah ha ha let -pron- now then -pron- have get some unwanted character inside here the zero one zero two so why do not -pron- say ok on all line i want to substitute the value zero with say nothing ok so that -pron- get one of those and buy about that want to seven well -pron- could play a similar trick -pron- could save match say one through seven",
    "program not quite -pron- well actually add main method in here ok and -pron- get the pende and control see if control c be print put that anna finally return zero ok ok right so let -pron- try compile that clang wow and call -pron- right whoop -pron- miss a semicolon somewhere line eight go to line eight append at the end ok right ok and -pron- be call be so oh i can not type -pron- want to run with -pron- ok so -pron- do not print anything this time but now -pron- can run -pron- do not interrupt -pron- let -pron- run one heart ok and -pron- finish too early -pron- better put a delay in that would be useful ok so where be wow hit",
    "-pron- a chance to actually press control c so -pron- will wait for four second and then hopefully will be able to see -pron- the same way haha ok so want to compile this ok so now will say right hey run without without be until pest control c so -pron- have change to process mask and then -pron- be go to execute exactly a little program ok -pron- will press ctrl c a few time and then a great -pron- present yeah ok so let -pron- review just how else be work again -pron- have get no int and this be change the process mask before -pron- call exec so -pron- have pull up the drawbridge for sigint in this case and then"
  ],
  "aa01a980-f756-4c1c-87f6-abf1aed24f98": [
    "hi so if -pron- start read through the p thread documentation -pron- will come across something call p thread cancel great -pron- say fantastic away from -pron- to gracefully shut down -pron- thread well yes and no -pron- advice be do not use -pron- unless -pron- really understand what be do there be often well way to do -pron- so p thread cancel look like -pron- be go to say excuse -pron- thread i want -pron- to stop and yes that be true but there be no guarantee on how fast and when that be go to happen so -pron- may have a p thread that -pron- have assign to do a long calculation and even if -pron- call peter cancel on that then the thread may continue to run deep inside some deeply nest for loop be do -pron- say invert a massive matrix or mine -pron- next bitcoin or something like that so there be well way to do this and one common way to do this",
    "that be cool -pron- say please stop right which be initially false and when -pron- want -pron- threat to finish then -pron- just change this to one and -pron- in -pron- other thread -pron- occasionally poll meaning -pron- occasionally check the value of this variable and if -pron- be be change to a true value then -pron- know -pron- be time for -pron- thread to exit at that point -pron- can do -pron- graceful thing like free up resource and then exit ok this may be a global variable but -pron- could also in more robust design put -pron- inside a struct and then pass out around as part of -pron- information that -pron- would pass to a thread that that be go so -pron- could also have individual thread control as well",
    "yes -pron- have difference between exit in p third exit ok so this stop the entire process and give the process at exit value pizza exit just stop this to one thread now be that thread happen to be the very last thread then then the process will finish uh ok so that give -pron- a reason sometimes for call p thread exit inside -pron- main method be a way to be lazy let -pron- let -pron- go have a look at this so if i have a program that start many many thread be case so imagine ok there -pron- go i start many many thread here i could write p thread join and wait for -pron- all to finish i could put that"
  ],
  "aa979b80-c6f3-4eca-aaf9-1b888ebea383": [
    "ok let -pron- review this one what do -pron- think the follow code will print ok so how can -pron- analyze this right so -pron- have get a pizza -pron- create an -pron- be store somewhere the fed id 's and -pron- be go to say ok i want to thread that be go to start function and let -pron- start function be and -pron- be go to pass a void pointer the address of the string literal so the address of the capital a and address of the cadillacs to each one right so what will function be do function be then get this pointer and so -pron- be give -pron- the address of xyz so when this run and -pron- be not quite sure when -pron- will run -pron- will print out xyz now what about function a so functionally when -pron- run let -pron- see be give the address of abc ok but -pron- do not do anything instead -pron- just simply exit this thread and -pron- return an address so -pron- take the",
    "in memory abc and a zero bite if -pron- be ok and -pron- take that caster character add one in other word -pron- just calculate a pointer that now point to the b ok an -pron- return that so if and when these two thread run -pron- know that the first first one return a pointer to bc string and the second one print be xyz right what be the rest of the code to write so equal p thread join on thread a and grab the result and so in store that in there area code result ok so what what be go to be put inside this result so this line be go to wait be go to wait until -pron- be able to join p thread so that mean -pron- wait until functionary have finish at which point -pron- set this result variable to be a pointer and -pron- be",
    "-pron- print out ok so this will print bc add a new line ok right so now -pron- hopefully -pron- can conclude what this code be go to print right so if -pron- say -pron- be go to print bc or the new line then -pron- 'd be correct if -pron- say -pron- be go to print bc in a new line and xyz -pron- 'd be correct if -pron- say be go to print xyz with a new line and bc -pron- 'd be correct yes so what code be actually indeterminate fethard create make no promise about when these thread now go to stop maybe in a microsecond maybe in a millisecond time there be a very real chance that the first thread thread a could could start up exit and main thread could join on that -pron- could print out",
    "be particularly true on sale really busy system or a system that be only get one cpu core be poor threadbear -pron- have not have a cpu schedule yet and so -pron- main thread be do before -pron- -pron- have a chance to start up ok right so all those those as possible if -pron- modify -pron- code so that -pron- include p three exit on the main thread then -pron- know that that mean that because -pron- be never return from maine now -pron- program be go to run until both those thread finish so now -pron- expect both the bc to be print and the xyz to be print though -pron- can not actually say definitively what order these two thing can print -pron- can make a guess as to which one more likely but -pron- have not actually make -pron- program fully determinant in term of -pron- out but -pron- have not enforce the idea that be seed must"
  ],
  "aac7d262-6dd0-4009-967c-be10e55a9cd5": [
    "ok right so here be a big idea that the idea of say tell -pron- about the statistic of the information about a file basically -pron- be read the representation of the i node entry of a file be just that -pron- be not ask for the i node by node number instead -pron- be use a directory name and -pron- be the kernel task to figure out the corresponding i note number for the path that -pron- have give -pron- ok so this three variant of stat -pron- can just simply say ok here be a path to something -pron- could be a file -pron- could be a directory -pron- could be something else please fill out this strike for -pron- and there be also an equivalent version to say hey i guess what -pron- have already open a file or maybe a directory and please use that file descriptor again to fill out this truck for -pron-",
    "matter of convenience as to whether -pron- know the path or already have a file descriptor to an open file there be one other version be as well here which be go to leave a little bit but -pron- be go to find that useful when -pron- start talk about symbolic link so let -pron- have a look at the kind of information that -pron- can get back from stat ok right so the system give -pron- the following struct -pron- can use and big important idea and -pron- see this multiple time be that ok -pron- be go to give a pointer to struct so -pron- be go to write thing like ok here be a address of say some staff that some struct that -pron- have get on -pron- stack or somewhere else -pron- be only go to fill out memory structure force if stat return success so -pron- be very important to be able to check that -pron- return ok so",
    "that that memory structure be never touch in south the value inside that memory structure that be go to be arbitrary wait ok so let -pron- see what -pron- can find out about a file first of all great -pron- can actually find the i node number and notice that all of these field inside -pron- struct start with the sd which be just short for stat ok -pron- can find out some protection information about -pron- so the s d mode actually be -pron- use -pron- quite a bit because embed inside all of these bit inside sd mode there be two useful piece of information first of all -pron- can find out information about read write and execute for the owner of the group and everybody else secondly",
    "-pron- be something else like -pron- be symbolic link or name pipe or some other bizzle object that -pron- have get store in a file system ok -pron- can actually have multiple link to the same i know entry so -pron- will be see this number link later when -pron- actually start make hardlink so if -pron- get this big idea in -pron- head that hey the i node be the file then -pron- be quickly realize that hey maybe i could have multiple directory where different name correspond to the same i know number in other word -pron- actual file could appear in more than one place inside -pron- directory structure which be pretty cool so once -pron- get the idea that i node be the file then that open up some pretty cool idea ok then -pron- have get thing like ok the uid and gid so these be just number",
    "to the file system -pron- user id the user be just a number so -pron- do not actually store the username at all associate with a particular file so that tell -pron- who own -pron- and the group of the owner as well ok if -pron- be look on the same hardware device -pron- expect the device id to be ok so up here to be the same -pron- be go to look at the device id of a special file but do not worry about that instead this be how -pron- can find out the true size of a file in byte and rather than be just say an unsigned long or size today -pron- want to be able to work with extremely large file so this special type here there be off underscored t be design to be large enough that",
    "right so here be s t size so that be kind of useful but perhaps -pron- actually care about how many how much space be currently be use on the disk so the disk -pron- -pron- have talk about four kilobyte block but actually if -pron- look back in time r block size on old system be actually limited to just five hundred twelve twelve byte so so if -pron- want to know about the actual space use on -pron- disk -pron- can read this kind of blocksize here but realize that that if -pron- want to convert -pron- into bite -pron- need to get a need to multiply that by five hundred twelve ok this other block size up here tell -pron- today about the natural size of block for the particular file",
    "i probably want to make sure that the number of byte -pron- be request be some multiple of that or at least that site in order to make sure that -pron- be efficiently use -pron- file system so that give -pron- hint about that natural size of read invite to this current file system right the last thing be hey -pron- could find out some important some timing information so the c structure time t here be accurate to the lease give a precision of one second the actual way that something may be store on disk be not necessarily that accurate or -pron- may be more than more accurate than that for example some window file system be only accurate to within two second ok but now let -pron- see what -pron- have get -pron- have get when -pron- be last access when -pron- be last modify and to finally the time of the last status change ok what be the status"
  ],
  "aaed71d6-01a3-42f8-b99e-ca3a84253b58": [
    "hi so -pron- process have argument that -pron- can pass -pron- on the command line and read those when -pron- start with maine but actually -pron- have get one other kind of cool little feature as well and these be environment variable -pron- can read these inside -pron- shell and also change -pron- and similar -pron- can do that inside -pron- program as well so what be these environment variable well -pron- have a lot of -pron- let -pron- print some of -pron- out so if i type e n v for example i can see all sort of fun thing i can see thing like where -pron- home directory be i can see thing like -pron- path i can see thing like -pron- current work directory i can see thing like -pron- display information i can see thing where be -pron- path let -pron- do that so i can print out from bash ok let -pron- do echo dollar path so if i start type -pron- command like vim or ls then i know that the shell be go to look inside all of these different direction to try to find a matching executable so",
    "so who be the current user and -pron- be -pron- angry of great how about -pron- actually want to get access these from rc code as well ok so to do that -pron- alright so from r c programming there be some couple of useful thing one be if -pron- just want to read -pron- -pron- can call get environment variable and that return the value associate with a key ok and -pron- can also set environment variable and -pron- can iterate through order -pron- use a special environment variable call in violin which -pron- will talk about in a future lecture so the way to think about environment variable be a very simple key value pair and put a simple string",
    "-pron- can set environment variable as well for the command line and typically -pron- will do that by say thing like export meaning i want to set environment variable and i also want to ensure that export to new process as well so for example -pron- may export a new path or -pron- may create a new variable like say secret so environment variable be one way on not a bad way to pass secret into running process i would not recommend pass a password for example on the command line instead user variable ok so let -pron- do that let -pron- do a little demo here key right so i will create demo ok right so -pron- need see uni standard and standard io for go to print stuff help ok",
    "so ok so -pron- can do thing like ok who be the user and -pron- see get -pron- and well acid environment available card user and what secret do -pron- have ok so get of secret ok -pron- would like to print these thing out so let -pron- print out the user let -pron- print out the secret and let -pron- get out of here let -pron- return zero ok so ok i would be miss get i do one get one -pron- just a compiler thank -pron- alright so let -pron- fix this up first problem be -pron- have not actually declare get -pron- so let -pron- go",
    "-pron- call this m demo right standard lib and compile -pron- ok so now if i run -pron- -pron- may program can discover that -pron- be run as a process with the username setter angrave but there be no secret be set yet and fortunately for fortunately for -pron- put s do not crash if -pron- pass a null string instead in this gcc implementation -pron- print out the friendly hey parenthesis null so a more less fragile program would actually check to see if the result be call getenv be null or not so let -pron- fix that up and then run -pron- again and also this time will set a secret ok so let -pron- compiler program here so a well test would be before",
    "valid so let -pron- see if user be null unlikely but hey let -pron- be defensive here or secret be not -pron- can complain so -pron- could say hey -pron- forgot to set these print f f print f the standard error please ensure user and secret an environment variable i say i have the little dude line and then let -pron- exit with a non zero code to mean failure ok and now will put -pron- out ok so -pron- can get out of that so now let -pron- run this little utility call export and will say export i want secret to be one two three four"
  ],
  "ab2486a0-3b00-4439-9a3b-86695d469f1e": [
    "ok right so i guess i -pron- have be pull -pron- off but now i think -pron- be actually time to talk a little bit about these address structure which -pron- have be happily throw around and not really worry too much about what -pron- look like because get address info fill -pron- out for -pron- ok so the big idea here be that the information inside these struct inside these low level c struct be actually store in a binary format which be close to or compatible with the actual bit switch send out by the network card so what bit should represent the number one two three four well for that -pron- have get to make a couple of choice do -pron- actually want to represent this use one complement two compliment ok so first of all that be a trick",
    "octet in other word sixteen bit so now -pron- just have the question of do i want to send a high byte first , the high octet , or the low octect first . ok , the representation then of that number be not not necessarily the same way that i may represent -pron- use -pron- cpu ok so that be the purpose of these little function here which be to ensure that the number that -pron- see as just an integer that -pron- want to say manipulate or display have be convert into something which be understand by the host machine so this ntohs actually say that i want to convert network little large than i want let -pron- try again let -pron- try that ok there -pron- go network kind of to host",
    "so that be the ntohs guess what there be also a version which go the other way so if i want to convert host to network as a short then i could do like that right so for example i could say like one two three four would be a useful thing to do if i be actually manually set up one of these struct -pron- so if i be not actually rely on get address info to do the work for -pron- ok so there be ntohs there be also ok n to network to host long as well so this be long",
    "be thirty two bit and this be use to describe ip4 address as well so if -pron- want a numeric version of an ip4 address and need to convert -pron- from the network implementation to a number which be understand on what machine -pron- will be use as well ok so use these call then mean that now -pron- can write c code which be compatible and -pron- do not matter whether -pron- cpu use a little endian format a big endian format or a completely different way to represent integer number that be go to write for port number -pron- can be sure that as -pron- actually want to convert these into something to send down the network on the internet that -pron- have correctly convert the integer bit pattern into the correct bit pattern that be go to be understand by the network to mean the actual same number",
    "the kind of last thing here be that hey notice that accept have a couple of argument that -pron- be not use i can actually use accept to tell -pron- a little bit more about who be connect so with every tcp socket -pron- not only have the destination address -pron- also have the source address so -pron- know where that socket where that client be come from i know -pron- ip address and so if i wish i can make use of that so for example i could check -pron- ip address and if -pron- be connect from a certain machine i may give -pron- a version of the website which be out of date or i may deliberately give -pron- a website which have thousand of link so -pron- can keep click for anywhere"
  ],
  "adb2cfd0-541a-4a0b-b58d-3929f1a61fdc": [
    "ok so let -pron- make a version of hello world but use use two process so here be what -pron- have get that i want to first of all create a a process where -pron- have get a global variable little m here and -pron- be go to initialize -pron- by ask -pron- to hold the memory address of this string literal in other word -pron- be go to hold the address of where to find that that w there ok what do -pron- do inside a little program here -pron- have a little bit available could a -pron- call fork and the return type of focus this process process id type now so far i retire i do not tell -pron- the completely do not work -pron- be possible actually for fork to fail for example perhaps -pron- have be careful an limited the total number of process that system that -pron- user in the system be allow to run a caution -pron-",
    "number because if -pron- do that then by the time -pron- have set the -pron- have get to login process that display process and pass all these other thing there may not be enough process be leave -pron- to actually run any program or so one hundred or two hundred be a reasonable number thirty or fifty may not be a reasonable number if -pron- be run on a graphical system ok so -pron- call fork and now -pron- be try to wait a little bit more kind of robust code here because -pron- actually check for the error condition and if -pron- fail do not pass go do not do not attempt to call fork again and instead immediately exit so for can be very dangerous if like agent smith in the matrix movie -pron- allow every process to make more process be as fast as possible so be extremely careful that day that -pron- start write code -pron- be fork",
    "when -pron- create a shell where -pron- be read every line of input in order to run that as a process ok so now what -pron- want to do -pron- want to say somehow i want to check to see if -pron- be the child process so imagine now -pron- have a split brain what -pron- want to do be actually think about -pron- code in two different scenario that will have the scenario where -pron- be the parent and the scenario where -pron- be the child and to make -pron- life simple -pron- can actually buy some if statement remember then what -pron- wait inside one 's statement be only go to be able to applicable to the child process right so how can i tell if the child if i if this code here be actually be run inside the child crisis well return value from fork be what be o -pron- can also find out who -pron- parent be just by call get p p i d so -pron- have get all -pron- condition for a child",
    "value of m to point to a different string hello and right what happen next in the child process well all this other stuff go to else be irrelevant to that child process so what be the child process do next -pron- print out string put s remember just print half with an additional new line as well so -pron- be go to say ok child print out whatever -pron- find with the m point to by kate provide -pron- will remember that -pron- value of m be completely different inside these two process just like if -pron- be to run a program multiple time different time of the day even though i can show -pron- the same source code actually two different process if -pron- run -pron- in the morning and in the afternoon so have that frame of mind when think about this kind of code right so -pron- child be go to print out hello and return",
    "ok so what do -pron- do with the power -pron- want to make sure the parent that -pron- do not print out world too early -pron- would actually like the child to exit before -pron- print out anything so how can i do that -pron- be go to use weight pid so -pron- will have a little status variable here and -pron- will use weight pid to wait for -pron- wait for -pron- -pron- child ok so let -pron- do that right let -pron- actually write the code ok so -pron- have get have a world write -pron- six ok what be -pron- program say why be -pron- machine so slow at the moment ok i do not see anything two obvious but let -pron- try again so -pron- get vim six huh",
    "ok no -pron- be i be just still in the ink mode ok so hello world great right so -pron- have error check the check so i want to say delete two parenthesis insert mode and then f if f be zero i know that -pron- be a child right otherwise inside here -pron- have the status variable here if -pron- want -pron- can initialize this but in practice -pron- will be good to to check return value wait pid so wait pid i want -pron- to please wait for this",
    "today so no option to set ok right ok so let -pron- now run that be k gcc hello world ok and let -pron- run -pron- and -pron- get the hello follow by the world and the beautiful thing about -pron- program be that i know that -pron- be always go to print hello before world alright just for a little bit of fun let -pron- have a use wait pid macros -pron- grab the value of the status but -pron- do not do anything with -pron- so how about -pron- actually",
    "how to do this well remember -pron- can say w if exit if that be a non zero value then -pron- know that great -pron- exit normally and -pron- could print something out to that effect so -pron- could say for example if child exit normally well let -pron- see what the what happen to the child perhaps the child exit with a particular value between -pron- and -pron- -pron- know -pron- be forty two from line twenty three below so let -pron- let -pron- print that out that be printout exited with this value ok so -pron- now can say w exit status and pass in that",
    "status there be -pron- do not quite -pron- need another brace there and now will run -pron- k so let -pron- compile this and run -pron- and -pron- will see that the parent discover that the child exit normally and because that be true -pron- be valid to extract the exit information the information from that status bit by the way remember -pron- be only a eight eight bit that -pron- actually record so let -pron- try with a large value like one hundred and twenty nine and see what happen that should work do -pron- think let -pron- see ok off -pron- go let -pron- run -pron- again and this time -pron- get a hundred and twenty nine but this happen to work work on this system but be careful because on some system the"
  ],
  "adb60962-723f-41e9-a34e-3801a6b91bdf": [
    "testing , testing ... right , ok . welcome to the next lecture . -pron- want -pron- to think about how -pron- may actually write the c library . ok so maybe -pron- do not like the license of glibc maybe -pron- want to write a library that be a lot small or simple so how can -pron- actually wrap the low level posix interface that the kernel give -pron- an actually implement the c - level object like the file so let -pron- i would go at this right now -pron- know about fopen where i can pass in a filename k blah blah blah but there be also function call fdopen where i can just pass in an exist file descriptor so if -pron- write f d open -pron- would be pretty easy to then also implement f open which just call open and then -pron- can delegate the rest of the work to this ft open call right so here be what -pron- need to do then -pron- be go to be give a file descriptor and -pron- want to create one of these file object now normally these be opaque structure normally",
    "-pron- be actually try to write the c library so let -pron- have a go at write the kind of simple version that -pron- may want and that be what -pron- have do up here ok so this be what i want to put inside -pron- file struct i need to store several thing first of all yeah i definitely need to know about the low level file descriptor that -pron- be go to need when actually call read and write secondly i want to have some kind of buffer and the purpose of -pron- buffer be to actually reduce the number of time that -pron- be go to call read or write so if -pron- give -pron- some byte to write out by default -pron- be not go to be the center -pron- be simply go to append -pron- into some space into some memory and so that be the purpose of -pron- buffer now i need to keep track of how large -pron- buffer be so that be the purpose of of -pron- capacity the size of -pron- buffer",
    "that will be the size inside here and the last thing -pron- can do today be to say what kind of buffering do -pron- ask -pron- want -pron- may be that -pron- want to use this forever stream in which case -pron- want the option of say -pron- do not want any buffering at all so as soon as -pron- give -pron- some byte i want to immediately call right or soon as -pron- want to read -pron- be go to read exactly that number of byte or maybe i want to use this to rap a terminal so i want to use line buffer so -pron- be go to flush -pron- buffer every time -pron- give -pron- the new line or maybe i want the good performance possible and so i want the large amount of buffer possible so this be full buffering and will only flush when the buffer be completely fall other word -pron- have reach the capacity ok so let -pron- some sketch out some code then of how -pron- can use this right then so -pron- have",
    "enough space for this struct ok so -pron- can see -pron- be already use typedef so i do not need to keep on writing struct so instead i can say right the the result will be equal to right let -pron- get some memory here right malloc and then size of this struct ok so size of file not file pointer ok and then i can start to set thing up in here so i can do thing like ok right as the file descriptor could be equal to something be send in the buffering -pron- can set to some kind of default right maybe -pron- want to try to test the current file descriptor and figure out if -pron- be correspond to a terminal or not but for today let -pron- just make -pron- implementation as simple",
    "be -pron- do no actually -pron- need some more memory for the buffer as well so i will pick a capacity size how about four thousand and ninety six as a typical size of -pron- buffer case so -pron- could be four thousand ninety six an lastly let -pron- set the the buffer -pron- so ok -pron- buffer right will -pron- can point to some more memory here -pron- go right -pron- be malloc and for brevity -pron- be just go to take four thousand and ninety six in here in practice i would refer to -pron- buffering variable over there ok then i return all right so what do -pron- think about that ok so -pron- make a classic mistake here which be -pron- do not actually set everything up so yes -pron- set the capacity yes -pron- set the buffer",
    "of byte in -pron- buffer that -pron- be currently use so maybe -pron- will be lucky maybe then -pron- get from malloc will all be zero -pron- out but that be not guarantee and be unlikely if -pron- be use malloc in a long running program where malloc may reuse some memory that have be use early so let -pron- fix -pron- program and actually make sure that -pron- set this size equal to zero ok so this may be sufficient for a minimal implementation of the c library in practice -pron- may want to do more than this so for example right now -pron- be not -pron- be currently not make use of the mode hint about how this file descriptor go to be use whether -pron- want to use -pron- for reading or writing or both secondly more performant version of -pron- implementation here may actually keep track",
    "implementation of a position so that if -pron- start call s seek and use f tell i do not need to go back to the the kernel to work that out so i may have yet more complication in height site here say i may keep track of -pron- current position ok but as usual there be always a trade off in term of complexity and performance ok so let -pron- put that in there as an idea about something that -pron- may want to add if -pron- want more performance and -pron- want to support everything support more sequel without have to go back to the kernel right but anyway this give an idea about how -pron- can implement fdopen ( ) now -pron- have implement this i can now if i wish implement fopen ( ) that would just need to call open that give -pron- a file descriptor and now i can use that far descriptor an then call -pron- fdopen in order to be in order to be complete ok so great"
  ],
  "ae276754-6e15-40ee-81f0-29994714b47a": [
    "ok right so let -pron- analyze this challenge ok so -pron- have get a global variable call firework here and inside -pron- main method -pron- be go to do -pron- be go to create a whole load of pizza -pron- be ok and make a note of -pron- thread i ds pass in the firework function ok and then after -pron- have do that -pron- will set firework equal to one and then will call precondition signal so -pron- know that be go to wake up one thread now -pron- want to wait for all thread to finish here so i could write a for loop to call p thread join on all of -pron- thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that -pron- never return from maine so i could call p thread exit here key right so great -pron- have implement that now actually let -pron- have to think about how -pron- can implement the firework right so what do r firework do k right well",
    "for for sure have so -pron- have get -pron- have get the mutex lock and all thread that run this code again to acquire the same lock and then -pron- say well while firework be zero corporate recognition weight in other word if -pron- firework thread start up here and -pron- start up early then -pron- be just go to block -pron- for but -pron- be go to ask -pron- to release the mutex lock and lock inside here so go back to the kind of first code remember -pron- create all of the thread initially back when be firework variable with zero -pron- be only after -pron- have create all five well -pron- say ok now -pron- be time for the firework ok so let -pron- get down here ok right so what do -pron- do after this point ok when -pron- escape out of here where a scaping",
    "zero and the very first thing -pron- do be call p three condition broadcast in other word re that fire bell wake everybody up in this may be sleep inside this condition variable ok so now all five of -pron- thread definitely work up ok so i implement increment the value of firework i print out oh and that value and then i decrement -pron- ok so what be go to be the large value this code will print one two three four five six what do -pron- think so just as a reminder -pron- have get five thread run this and the only way -pron- can escape out of this code be after firework be no long zero so what be the maximum possible value that -pron- may see from this first to run this hundred or thousand to a million time what be the large integer that would expect here ok so think about that pause this video and make -pron-",
    "think about this for five second and then -pron- will review the answer ok wait time up so let -pron- let -pron- have a look at the key key detail here the key detail be a mutex lock -pron- mutex lock allow -pron- to reason strongly about the number of thread which be actually run in this code because -pron- have acquire mutex lock mean that any other thread that want to run have to also require -pron- so all of these line of code can only be run by one thread at a time if the thread have go to sleep inside p thread condition wait there only allow to escape out of that after -pron- reacquire the mutex log so that be the key idea that only one third of the time can be run this piece of code and -pron- allow -pron- to actually reason about",
    "first thread will see of firework value of one because -pron- change -pron- upstairs in the main method so -pron- implement so -pron- increment -pron- to two case of wig the first escape out of here will will print out too and then -pron- decrement -pron- down to one again and then -pron- unlock the mutex ok so the next step that come out of here will only escape out of p three condition wait after -pron- have unlock the mutex so -pron- will also see a value of firework of one -pron- also do a big forecast wake everybody up and most be too and so -pron- will print out the value of two etc right and so on the next thread will come out check the condition for the while loop ok that be no longer true so -pron- come to an do the same thing increment -pron- from one to two and then two to one and then unlock the mutex which allow the next set to escape -pron- check the value and so on",
    "to kind of prove -pron- right so -pron- have ok compile -pron- eh why be -pron- machine slow ok there -pron- go -pron- get out all right and -pron- see every firework every thread wanna see the value of two and -pron- could do that through this strong reasoning thank to the mutex log ok wait a couple of quick question be why do -pron- see all the firework go well remember -pron- work up one of -pron- here and then that far work be not man work up the rest now do -pron- have any possible race condition here yes -pron- do so -pron- actually just talk about a version of this in the previous video that there be a small race condition small possibility that these two line of code here can i move that over or to keep throw box right when i change the value folk and then i call peter condition that could happen",
    "right inside there if that just that moment in time then what be go to happen -pron- have actually call precondition signal but no thread be yet sleep no thread be yet block inside condition wait ok so be to fix for that and the answer be to actually log on the same mutex here so if i call pete say mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread be acquire mutex or after the all the thread have call pizza hut or so at least at least a threat be currently get mutex will then call pre take additional weight",
    "the mutex and then -pron- get to run as well another thing this code be kind of highlight be that that -pron- can create thread but peter create do not wait for -pron- to actually start so this this code be an attempt to say ok let -pron- create all these thread and actually -pron- be go to make -pron- own barrier inside here so -pron- will not let anybody go until -pron- have actually create or five thread and also kind of start up so but this line of actually change the firework to one here could still actually technically occur before this five thread of actually start all -pron- have just simply say be to say ok create -pron- and at some point in the future please run alright so lot of interesting interleaving"
  ],
  "b0c92d50-f05e-4513-bf48-995a2b995850": [
    "hi right in this last video -pron- have get a bit of a challenge here -pron- go so i want to make use of the follow function call get get message and this function first of all -pron- be go to change -pron- name to be a bit more see like there -pron- go get message and this function take a pointer to a pointer and then -pron- do some wonderful thing with this pointer first of all let -pron- go to -pron- locker say hey malloc i need ten bite that will give -pron- back the address of that ten contiguous byte and -pron- store that somewhere -pron- store that inside magic except not available magic directly instead -pron- follow magic wherever magic be point to that be the thing -pron- be go to change and then -pron- do something similar whatever magic be point to that be where -pron- be go to make -pron- change so -pron- know -pron- just change -pron- -pron- know that be actually go to be heap memory so into that heap memory -pron- be go",
    "so in two three four five six seven do -pron- have any character that let -pron- see one two three four five six seven eight nine ten oh -pron- have a problem -pron- actually go to copy eleven byte because the zero byte so if -pron- want to make this code work with change this to eleven of course in real code -pron- would actually not hard code this value of figure out how -pron- could use size off in order to avoid this ok so how can -pron- make -pron- code down here actually put this out right so let -pron- kind of show -pron- something that be surprising that -pron- have a little pointer here -pron- be point too if -pron- be to use -pron- go to follow -pron- address -pron- would find a single character and i could initialize that to say nothing in other word right now -pron- be point to nothing ok but what if i",
    "know -pron- be go to be on the stack somewhere but suppose i actually find out be actual address by use the ampersand operator so if -pron- know that then why do not i give that address to -pron- little function get message ok so -pron- can just say hey function here be the address of a variable that -pron- 'd like -pron- to change and that be exactly what -pron- be go to do so that when -pron- return -pron- pointer variable be no long look at nothing -pron- be now look at some hit memory because this function change -pron- ok and approve -pron- let -pron- print -pron- out right so -pron- be go to use put s today so -pron- be just say ok like here -pron- go here be a pointer to character but do not treat -pron- as a single character keep print out those character until -pron- get to that zero what be put s this be actually equivalent to just print f to say ok printer print",
    "print out a new line for -pron- as well ok wait what be -pron- miss -pron- be miss some include -pron- need standard io for the printf -pron- need something from alakan store copy how can -pron- find that out use demand page right so let -pron- pull up a man page right so tell -pron- about ballack and -pron- will see that this inside standard lib so i need that ok and what about square copy again use the manpage right so man store copy and will see that be inside stringle h and if i have to scroll down i could find out more information about how -pron- work king so copy from stre the source to the destination ok right so let -pron- put that in there and will have to get compiling this right so get out of that gcc reverse off and -pron- be miss a semicolon so will fix that"
  ],
  "b0da58fc-a91c-483d-b535-feed011744a3": [
    "ok right so -pron- can see that all -pron- little main program be go to do be actually call exact vp right so -pron- be just go to say please sir start execute and if -pron- give -pron- some argument then the first thing actual real parameter not program name but also the process name but actual argument -pron- specify will be the name of the process and also will use this as well as any other remain argument as the argument that process ok so -pron- immediately just go to delegate to this other program but before -pron- do that -pron- be go to set the process mask and this be fun because the process mask survive this disposition survive when -pron- call exec so anything -pron- set up now any drawbridge that -pron- pull up will still be there when -pron- exact to a new program right so let -pron- set -pron- up so -pron- will have a mask and the first thing -pron- should do be the content",
    "-pron- should call sig empty set to say right just initialize -pron- to nothing ok so see empty set and here be the address of -pron- mask ok now i want to start add bit to -pron- mask right so sigad set all -pron- mask and the signal i care bell be cygnet ok and now -pron- can change -pron- -pron- process be disposition the process mask so let -pron- go what be the how here where -pron- could call various thing -pron- could call the sig block that be go iterate through -pron- -pron- could call sig block and that would add -pron- to the exist process mask -pron- could unblock be not go to work for -pron- but -pron- could also call sigset mask today -pron- be go to use a cig block because -pron- go back to hit -pron- have not use -pron- yet line up again that be try about there",
    "ok here be the new mask and i do not care about the old alright so something about that let -pron- let -pron- give that give that ago right so will turn off find -pron- code and see if -pron- can find -pron- too but ok where be -pron- spend exact know interrupt circuit there -pron- be right so look at that i also choose to write sig_block as well right so in this case -pron- also add the original mask but in",
    "about the original mask let -pron- just say like just sit in on ok right so -pron- will compile a program that -pron- can test this with here be -pron- little program two do not do much -pron- just sleep for ten second ok let -pron- and say program too finish up ok right so will compile this now right so -pron- clang take -pron- program too and -pron- will have a quote program two and hey no int -pron- name yes ok will call that no int right then so -pron- can say right now go please run program two and yeah -pron- be up mudding and i press control c the terminal see -pron- -pron- generate signal the terminal"
  ],
  "b113e839-a5aa-4be6-89f0-89eb1c0dff1a": [
    "ok so here be the big idea to make tcp client i actually only need two call -pron- need a way to escape out of -pron- c code and actually start talk to the network card and for that i need a socket . so this be the thing that be go to give -pron- a file descriptor and -pron- can pass some information into this be to say what kind of socket -pron- want . do -pron- want a tcp or udp kind of socket in other word do -pron- want to stream base or packet base data ground base kind of socket here . so -pron- will talk about how to fill these piece of information in in a moment but i want -pron- to realize that the result of call socket be just a file descriptor so this if -pron- like be very similar to call open or very similar to call pipe . now -pron- have actually get something that -pron- can use -- great , but no byte have actually leave -pron- machine yet no octet have be set that actually happen",
    "possibly to -pron- if i want to connect to one hundred and twenty seven point zero point zero point one if -pron- be use ipv4 ok and how do i connect then -pron- client use this thing call connect ok and -pron- just use this socket ok so notice that in both these case -pron- be careful to check the error value ok so this will be a non negative value if -pron- be a valid file descriptor if -pron- return negative one then -pron- know that -pron- attempt to create a socket fail perhaps i do not have privilege perhaps -pron- have create too many socket . anyways so let -pron- print out the string of error number and quit exit so network code have to check very carefully whether each system call work but once -pron- have get a socket now -pron- can call connect so again let -pron- check",
    "find out -pron- value of errno and print out a useful message and quit ok so what do -pron- do with this file descriptor well if -pron- make a tcp one guess what , -pron- can call read and write on -pron- so in this sense -pron- be a little different from a pipe in a sense that -pron- support two way communication that if i write to this file descriptor then the server will see the byte if i read from this file descriptor then -pron- be read byte the server have send -pron- some thing to watch out for of course be that read and write can return negative one and due to a signal -pron- do not have to necessarily send all of the byte or -pron- read do not have to read all of the byte so i have to be able to be ready to only get partial amount of information and let -pron- see what else oh yeah so i can block so if i call read and i have not get any bytet yet from the",
    "until i do or an error occur similarly -pron- write call may block until -pron- be able to send those byte to a buffer when -pron- do return that do not mean that all those byte have actually respond to as far as the host at the other end be simply mean -pron- have be able to take -pron- buffer and copy those byte into say the network card buffer and at some point hopefully the next few millisecond those byte will start to leave -pron- machine eventually -pron- want to close this connection in fact there be two way two thing to know about this first of all there be shutdown which -pron- can use to say ok i do not want to send or receive any more byte on this particular file descriptor so -pron- be go to say ok here be -pron- socket fd and then i can shut down that socket for either reading or writing or both so i get a choice there and what this mean be after those byte that -pron- have already give -pron- have be send the very extend another packet to say ok no more byte for -pron- at this point",
    "-pron- any more byte but be -pron- do ? no , -pron- should also call close just like -pron- have a file descriptor of the file , -pron- be time to free up these resource ok so remember to close -pron- as well ok so these have two different effect the shutdown be a way to tell the other end that -pron- be do either receive or sending or both and close actually say write this file descriptor can now be use for other thing remember that -pron- only have a limited number of file descriptor -pron- can actually use for each process right so with this in mind i think -pron- be time to fill in some code here but there be one thing -pron- have not talk about up here so i say that -pron- tcp server only need actually two network call which be true but in practice there be a third one that come in very very useful and -pron- be the follow be this getaddressinfo"
  ],
  "b24c9c84-49ae-4c9d-a9b0-914ea82356cb": [
    "ok right so how be -pron- go to implement first fit here right remember first fit with ashley turn out to be a well allocator than good fit because -pron- do not end up with all of these tiny tiny unused area which be too small for most application so let -pron- think about how -pron- want to do this -pron- certainly need a couple of thing to be true first of all -pron- better be that the entry -pron- be look at be actually available -pron- can not use an entry that comedy in use so let -pron- just definitely make sure that -pron- be test free ok the next thing be what well -pron- better be sufficient size ok so -pron- need the entry inside -pron- metadata size to be at least as large great than or equal to the request site ok right and then what -pron- do well if that be true first fix let -pron- stop less party on let -pron- let -pron- let -pron- not actually waste anymore time go through the link",
    "just go to say ok -pron- find what -pron- want right and in fact because -pron- find -pron- -pron- can now stop iterate through the link list so how do -pron- do that -pron- can either add an additional clause or while expression to say and choose be null or -pron- could just write break here to say ok stop go to the link list right so that be how -pron- have implement first fit the placement algorithm i mention be bad fit and in fact there be some other so for example -pron- may want to play with next fit as well with thing like nextfit be careful because this be now another variable that -pron- need to maintain and if -pron- start implement block code lessing block splitting keep track"
  ],
  "b2add30a-6189-4ab5-96fd-957e96967d60": [
    "hi welcome to lecture twenty four let -pron- start with the code review case so -pron- be go to do -pron- be go to look at a fix sized ring buffer and look at an implementation and -pron- know the follow thing about -pron- so first of all -pron- use count semaphore and the first one s one be go to be initialize to two fifty six so this be kind of count the number of free space be or how much capacity be leave s two be initialize to zero so that be count the number of thing -pron- have actually get inside the buffer right now and then -pron- have get lot of thread produce thing and consume thing as well ok so here be some question that -pron- may want to ask in sort of code review first of all can -pron- find a way that deadlock can occur in other word when could -pron- actually get stuck and if so under what condition could -pron- be for example when -pron- get completely full or completely empty be underflow possible meaning that be -pron- possible for    dequeue to return something even though -pron- do not actually have anything inside the buffer right now in other word -pron- will just return some arbitrary",
    "possible to complete in enqueue call even though there be not any space leave so presumably -pron- have corrupt or overwritten some datum that -pron- actually do need like an early piece of the buffer ok so let -pron- actually take a look at the code now and see what -pron- can find right so the first thing i notice be that -pron- be actually call mutex lock really early on inside enqueue normally -pron- 'd only expect the lock and the unlock to be around the actual call of where -pron- change the change the array here and the second thing i notice be ok good so -pron- buffer size be two fifty six and in fact -pron- be go to wrap around after -pron- get to two hundred fifty five so what -pron- have get then be kind of long hold of the mutex lock inside -pron- enqueue here so -pron- concern be with this",
    "those be produce an item want to queue -pron- up and -pron- call sem_wait but i do not have any space leave inside -pron- data structure here in other word what if s one be zero -pron- may have a problem here because now -pron- be go to sleep -pron- be block inside the same wait call but -pron- be still hold on to the mutex lock this be not a condition variable ok -pron- be just a simple counting semaphore oh dear so can -pron- have deadlock well let -pron- find out to what happen on the dequeue side so on the dequeue side -pron- be go to wait until at least one item ok that be true and then -pron- call sem post and -pron- do this without require mutex lock so here -pron- be lucky there if -pron- also have onto the mutex lock early if -pron- mutex lock have be one of the first thing -pron- have do then yes -pron- would have encounter deadlock because the",
    "that that mutex lock that would have never be never be release definition of deadlock wait for an event that never happen so -pron- do not find deadlock just there there -pron- come awfully close right what else can -pron- find out about this code then ok so let -pron- see the same post happen early ok that -pron- be actually increase increase the count of the number of item in -pron- buffer before -pron- even change the buffer value ok so -pron- be basically go to add one discount here so if somebody be wait to extract value in other word if a thread have already call d cube but be wait here because the count of s two be zero -pron- be go to release -pron- from that early oh yeah so this land sound like a recipe for underflow that because -pron- say -pron- have incremente or pizza box by one even though -pron- have actually put",
    "no because -pron- dequeue -pron- can not complete until the mutex lock be release because -pron- be require before actually touch the buffer if this code try to be a little bit more performance by give the nq in the dequeue different mutex lock then -pron- would have run into a problem because then -pron- would have allow a dq thread to try to read a value from the buffer before -pron- have even put the value in right so well code of course would actually only increment the counting semaphore after -pron- modify the buffer so so this line actually belong down here so do this later ok and -pron- can do -pron- after -pron- have release a mutex lock ok and the same weight as well -pron- should do early ok let -pron- just see what i can happen on the d q site so",
    "which be great than the total number of item which be currently in the buffer so -pron- be not possible to underflow here -pron- do call however sam post before -pron- have before -pron- have extract anything from the buffer so could this be a problem yes actually -pron- could and there be a very small opportunity but when bad thing can happen -pron- generally will so let -pron- see what the problem here be that let -pron- imagine that -pron- buffer be full now because -pron- consider the case where -pron- be be completely empty so now let -pron- go to the other extreme of say ok imagine -pron- be completely full in other word all two hundred fifty six item at all slot be be currently use so -pron- same",
    "be zero i think be that -pron- run yeah so no that be yeah s one be the amount of space so that be currently zero ok so yes -pron- be able to continue through both these line and -pron- can start take thing out of this but imagine just this moment before -pron- call mutex lock anew nq event come in so just before -pron- big red arrow here just before call mutex lock if -pron- have get the case where -pron- have actually get two hundred and fifty six item inside the inside the buffer ok then -pron- same weight can can decrement that and -pron- same",
    "moment and q event happen then that can that can continue through an override the very value that -pron- 'd like to see -pron- still need all that entry inside -pron- buffer but now because -pron- have post on s one then if an nq thread appear then -pron- can continue -pron- have not yet get the mutex lock so -pron- get the mutex lock and then -pron- call same way on s one but -pron- have already incremente -pron- be once -pron- get to continue and then post on some post which will never block and now -pron- overwrite -pron- buffer so -pron- be pretty big unhappy space here yes -pron- have see a problem here of overflow buffer overflow -pron- override a value that -pron- actually need -pron- actually manage to put too much stuff into the buffer now the chance of that happen be pretty small be this very small number of microsecond between us call sam post and then ask for the mutex lock but that be a non"
  ],
  "b37a29fd-55de-4893-bb2e-ef162944f9fd": [
    "ok right riddle -pron- this give a network example why -pron- why -pron- may call equal control with people control delete ok so when would -pron- want to do that game so let -pron- have a think about this -pron- know that ippo control be how -pron- actually manipulate the set of file descriptor that -pron- want people to care about so -pron- be say hey -pron- be go to give -pron- a file descriptor that i do not want -pron- to care about anymore so do not wake up do not tell -pron- event about something on that particular file descriptor right so why may that be ok here be some -pron- some example one -pron- could simply be -pron- finish talk to that client perhaps -pron- have upload enough datum and the client have return yes -pron- be good in goodbye so in which case there be no point keep -pron- server around anymore so now",
    "entire server or -pron- could say hey this file descriptor that be service this particular client -pron- do not want to generate any event right now so let -pron- delete that from -pron- control group come the second see give network example second be that -pron- simply finish the finished twice a week so -pron- finish some kind of say transfer or some kind of argument and -pron- know that -pron- do not need to to do anymore like -pron- have transfer all the byte or -pron- have receive all the byte that -pron- could ever possibly care about ok in which point there be no point ipoh track that file descriptor anymore -pron- may as well remove -pron- from the active set of fire scripter"
  ],
  "b44a6271-011d-4df4-88e4-54685e216cf9": [
    "hi welcome to letter twenty four let -pron- start with the code review case so -pron- be go to do -pron- be go to look at a fix sized ring buffer and look at an implementation and -pron- know the follow thing about -pron- so first of all -pron- use count semaphore and the first one s one be go to be initialize to two fifty six so this be kind of count the number of free space be or how much capacity be leave s two be initialize to zero so that be count the number of thing -pron- have actually get inside the buffer right now and then -pron- have get lot of thread produce thing and consume thing as well ok so here be some question that -pron- may want to ask in sort of code review first of all can -pron- find a way that deadlock can occur in other word when good -pron- actually get stuck and if so under what condition could -pron- be for example when -pron- get completely full or completely empty be underflow possible meaning that be -pron- possible for d q to return something even though -pron- do not actually have anything inside the buffer right now in other word -pron- will just return some multivalue that happen to be store inside the buffer",
    "be not any space leave so presumably -pron- have corrupt or overwrite some datum that -pron- actually do need like an early piece of the buffer ok so this actually take a look at the code now and see what -pron- can find right so the first thing i notice be that -pron- be actually call mutex lock really early on inside nq normally -pron- 'd only expect the lock and unlock to be around the actual call of where -pron- change the change the array here and the second thing i notice be ok good so -pron- buffer size be two fifty six and in fact -pron- be go to wrap around after -pron- get to two hundred fifty five so what -pron- have get then be kind of long hold of the mutex lock inside -pron- enqueue here so -pron- concern be with this",
    "those be produce an item want to queue -pron- up and -pron- call some weight but i do not have any space leave inside -pron- data structure here in other word what if s one be zero -pron- may have a problem here because now -pron- be go to sleep -pron- be block inside the same weight call but -pron- be still hold on to the mutex lock this be not a condition variable ok -pron- be just a simple counting semaphore oh dear so can -pron- have deadlock well let -pron- find out to what happen on the d q side so on the dq side -pron- be go to wait until at least one item ok that be true and then -pron- call sam post and -pron- do this without require mutex lock so here -pron- be lucky there if -pron- also have onto the mutex lock early if -pron- music lock have be one of the first thing -pron- have do then yes -pron- would have encounter deadlock because the",
    "that that mutex lock that would have never be never be release definition of deadlock wait for an event that never happen so -pron- do not find deadlock just there there -pron- come awfully close right what else can -pron- find out about this code then ok so let -pron- see the same post happen early ok that -pron- be actually increase increase the count of the number of item in -pron- buffer before -pron- even change the buffer value ok so -pron- be basically go to add one discount here so if somebody be wait to extract value in other word if a thread have already call d cube but be wait here because the count of s two be zero -pron- be go to release -pron- from that early oh yeah so this land sound like a recipe for underflow that because -pron- say -pron- have incremente or pizza box by one even though -pron- have actually put",
    "no because -pron- dick -pron- can not complete until the mutex lock be release because -pron- be require before actually touch the buffer if this code try to be a little bit more performance by give the nq in the dequeue different mutex lock then -pron- would have run into a problem because then -pron- would have allow a dq thread to try to read a value from the buffer before -pron- have even put the value in right so well code of course would actually only increment the counting semaphore after -pron- modify the buffer so so this line actually belong down here so do this later ok and -pron- can do -pron- after -pron- have release a mutex lock ok and the same weight as well -pron- should do early ok let -pron- just see what i can happen on the d q site so",
    "which be great than the total number of item which be currently in the buffer so -pron- be not possible to underflow here -pron- do call however sam post before -pron- have before -pron- have extract anything from the buffer so could this be a problem yes actually -pron- could and there be a very small opportunity but when bad thing can happen -pron- generally will so let -pron- see what the problem here be that let -pron- imagine that -pron- buffer be full now because -pron- consider the case where -pron- be be completely empty so now let -pron- go to the other extreme of say ok imagine -pron- be completely full in other word all two hundred fifty six item at all slot be be currently use so -pron- same",
    "be zero i think be that -pron- run yeah so no that be yeah s one be the amount of space so that be currently zero ok so yes -pron- be able to continue through both these line and -pron- can start take thing out of this but imagine just this moment before -pron- call mutex lock anew nq event come in so just before -pron- big red arrow here just before call mutex lock if -pron- have get the case where -pron- have actually get two hundred and fifty six item inside the inside the buffer ok then -pron- same weight can can decorate that and -pron- same",
    "moment and q event happen then that can that can continue through an override the very value that -pron- 'd like to see -pron- still need all that entry inside -pron- buffer but now because -pron- have post on s one then if an nq thread appear then -pron- can continue -pron- have not yet get the mutex lock so -pron- get the mutex lock and then -pron- call same way on s one but -pron- have already incremente -pron- be once -pron- get to continue and then post on some post which will never block and now -pron- overwrite -pron- buffer so -pron- be pretty big unhappy space here yes -pron- have see a problem here of overflow buffer overflow -pron- override a value that -pron- actually need -pron- actually manage to put too much stuff into the buffer now the chance of that happen be pretty small be this very small number of microsecond between us call sam post and then ask for the mutex lock but that be a non"
  ],
  "b4efecab-e0c0-41b8-b21e-6ccca0ed2893": [
    "hi welcome to a lecture six where -pron- start talk about create process and wait for -pron- to finish and find out why -pron- finish do -pron- exit normally or perhaps -pron- crash and burn or perhaps -pron- press control c let -pron- see how -pron- can do that ok so this story so far -pron- have -pron- running process off -pron- go but one day -pron- decide to call fork and at this point a miracle occur -pron- get a second process which be a clone of a parent ok so -pron- -pron- original process -pron- be go to continue this kind of parent process and now i have a new process run independently and then -pron- have copy everything -pron- really be an independent process so now -pron- really do not hear that -pron- machine be do two thing at the same time if i truly have more than one cpu core on -pron- laptop -pron- really be do two thing at the same time",
    "cheat and give a little bit of cpu time to each process but -pron- can swap between these fast than i can notice -pron- may be swap between -pron- say every millisecond or every time that one process have run out of input to process so -pron- will talk more about scheduling later on in the course but great -pron- have now get to run process but at some point i want to synchronize -pron- behavior and the simple synchronization that -pron- can do be to wait for -pron- child process to finish so -pron- child be run here practice calculate something perhaps -pron- be send something to disk etc perhaps -pron- be serve a website who know -pron- could be any of those thing but sometimes at some point -pron- will finish good example here be perhaps -pron- parent process be the shell -pron- have log in -pron- ssh - ed in for example and -pron- have type something to run and now -pron- use fork to start a child process perhaps that child process for example be go to be run gcc but anyway for whatever reason -pron- finish and so",
    "for that how do -pron- do that well -pron- now make use of another call call wait or wait pid if i use weight pid i could actually specify a particular child process -pron- have like to wait for so for example let -pron- wait for process number hundred and thirty two but -pron- can do more than that -pron- can say hey kernel please not only wait for this particular process to finish but give -pron- some hint tell -pron- what happen to -pron- i want to forensically find out why -pron- why and how -pron- exit so will pass in the address of an integer ok so here be the address of some little integer like s for status or something right so -pron- be go to get back a limited number of bit of information and in fact this integer be pack full of good stuff -pron- tell -pron- the exit value that -pron-",
    "program crash for example -pron- try to read and write some invalid memory like memory location zero then -pron- be go to segfault and -pron- could discover that well or if -pron- program be perfectly happily run along and somebody press control c and interrupt -pron- then would crash -pron- program then -pron- can discover that too so all this information be encode inside this little integer now i could tell -pron- thing like and on this particular system the exit value at least the eight bit the low 8 bits exit value be encode somewhere somehow inside this integer perhaps in the low bit , perhaps in the high bit , but in practice -pron- never have to write those expression -pron- for example -pron- never have to say something",
    "because i just want to look at the low eight byte in practice there be macros that do all of these for -pron- so the particular implementation on a particular platform -pron- do not need to kind of way about those detail and so here -pron- be here the macros and -pron- can look at -pron- definition through man page but if -pron- want to find out if the the sorry if the process exit normally then there be macro call wifexited the w stand for wait ok if that be true then -pron- can pull out more information -pron- can actually find out the exit status at least the low state bit and that be the code actually that",
    "base system i pull this from the as -pron- can see android dot google source but in practice -pron- would never actually productive write this expression -pron- can just make use of the macro suppose -pron- want to check to see whether -pron- child process do not exit normally but instead actually exit abnormally because a signal be deliver what be a signal -pron- ask great question -pron- be go to talk about that in a moment but for now be two example of a signal or when -pron- press ctrl c or if -pron- crash due to a segmentation fault so -pron- can check that by first of all say be -pron- signal and if the result of that expression again be non zero -pron- can also find out which particular signal -pron- be that cause -pron- program to stop and so -pron- can use this macro w term sick to pull out the signal number"
  ],
  "b60fb3d4-0600-4074-8432-449ea0067907": [
    "ok sir yeah -pron- talk about race condition what i mean to say be let -pron- talk about a critical section so here be here be an important idea that there be possible code that be necessary that only one thread at a time should be execute because in that moment inside part of that code be where -pron- be update some resource for example update some datum structure or update a file in a critical way and -pron- be important that no be the process or thread update at resource at the same time so -pron- be critical that -pron- prevent other thread or process from also be inside a critical section at the same time so lot of kind of example and in the real world where there be there be moment in time where -pron- only want kind of one person to be work on something at a time or save as a database -pron- may implement a database so -pron- be critical that only one process update",
    "if -pron- be do code review -pron- may say hold on a moment there -pron- have get a race condition here between say -pron- implement incrementing i and when -pron- actually read the value of -pron- in -pron- previous code when -pron- be take the value of this pointer so -pron- have synchronization bug and -pron- would have be solve if -pron- identify a critical section and say ok -pron- need to divide a moment in time so that define a moment in time so that the value can be read independently of the update ok so -pron- will talk more about critical section in the future but like i say the big idea be that only one thread at a time should be inside a critical section if -pron- program be to behave correctly so how can -pron- identify what can -pron- do to ensure this",
    "section code for example suppose -pron- have some code from cs two twenty five that be go to say insert a link right on a data structure and this price be go to work in the link list price be go to work on a vector and inside that code -pron- realize that there be a moment in time where -pron- be go to say of mess with the pointer or -pron- be go to copy the entire data structure from -pron- one sized piece of resource to say a doubling of the resource some other piece of memory over there ok so that be a critical section what -pron- need to do then be to block any other thread that want to do a similar operation -pron- want to somehow say right i want to give -pron- exclusive access to this right now so the only -pron- this comment thread be execute in this code get too get to modify this data structure anybody else that want to insert something into -pron- data structure"
  ],
  "b681599f-1223-4f55-aca4-e57ac7b4b6cd": [
    "ok hi right so let -pron- think about lock contention and also how this also relate to discover race condition ok so here be the scenario that -pron- be go to think about that -pron- have get a thread that most of the time be not inside the critical section and in fact if -pron- sketch this out -pron- will see that initially i just get one single thread and only for a short period of time just one millisecond -pron- be actually do something inside a critical section that -pron- have not yet protect with any mutex lock but for the other nine hundred and ninety nine millisecond be do something else so this thing run for one second and then -pron- be some random type there be one second ok some random sign inside that just for one day second -pron- go and visit a critical section may be update or read a particular data structure ok so now that be fine but now -pron- have two thread so here be another fit that also be go to run for the same second",
    "ok so will say that that have a one millisecond ok of time where be ashley inside the the critical section so as -pron- know everything will find -pron- program deterministic -pron- program or function as expect provide these two do not meet another word provide -pron- do not actually overlap right so could -pron- estimate this will sure -pron- could set up a full integral and think about how -pron- think about these two random time as a whole bunch of time where -pron- do not overlap and then there be time when -pron- start overlap fully overlap and then only overlap a little bit again and then other time when -pron- do not so -pron- could set -pron- up to set this up as a as a two dimensional integral but -pron- just want to estimate this today so -pron- be not go to worry about thing like edge effect where",
    "full or very visit critical section at the very end where -pron- be not possible to overlap afterwards so let -pron- not worry about that let -pron- just concentrate on the idea that ninety nine point nine percent of the time -pron- first date be not inside the critical section so -pron- be go to look at the majority case an ignore the edge case so right i think and play battleship with -pron- now so -pron- have think of one moment in time where -pron- be inside the critical section now -pron- get to think of a number where -pron- get to say ok right -pron- be go to choose -pron- second thread to be inside this critical section what be the chance that -pron- sink the battleship what be the chance that -pron- have overlap ok right so how can -pron- analyze this -pron- have get a one millisecond air slot here so there be actually a window of just two millisecond where -pron- choose a different color",
    "thread may overlap -pron- critical window ok so -pron- may be exactly the same or -pron- may be just afterwards ok so there be just a two millisecond window here alright so how likely be -pron- that -pron- will actually achieve this well remember -pron- say the timing be random so give that -pron- be choose these time all random -pron- have get a two millisecond out of one out of one second window in other word be roughly about one hundred thousand dollar -pron- want to be a little bit more accurate -pron- may say roughly say one out of five hundred so so i could say one out of five hundred or percentage wise that be a very small number so -pron- have",
    "bad depend on whether -pron- truly want to try to discover this problem or -pron- be hope that -pron- code work so even though -pron- know -pron- got to race condition even though -pron- know -pron- do not actually implement the lock -pron- have a problem here which be this two percent chance that all code will fail because two thread of enter the critical section at the same time right so if -pron- test -pron- code once twice three time ten time as be very strong chance that -pron- will not notice this effect -pron- have only go to see this one time out of five hundred approximately like i say -pron- do not do the exact integral but this mean that actually make race condition to occur can be quite hard now -pron- go for figure that say the race the critical section take one millisecond dirt to run if -pron- be critical section be much small",
    "at with the push in the pop or add another part that may only be order of say ten microsecond so now the chance of of of thread be inside the critical section be actually slim so discover problem just by testing be hard and that be why -pron- do thing like locate do not want -pron- with two thread but when -pron- with four thread now -pron- be much more likely to occur or test -pron- with a brute force loop try to go into the critical section as often as possible and now -pron- have increase the chance significantly this also apply to the idea of lock contention so lock contention be not a good thing -pron- mean that one thread be be force to wait for another now -pron- do this because -pron- want program to function correctly",
    "amount of time now -pron- be go to start to see an unwanted and unnecessary performance impact so right now -pron- see with a little rough back of the envelope calculation calculation there be only one point two percent chance of the two thread ask for the lock at the same time so in so one one of the thousand basically so -pron- do not expect the css significant performance impact because of two thread update this however if -pron- code be different if -pron- have thread which say want to update the datum structure ten millisecond out of one hundred millisecond so now there be a one in ten chance that the lock that -pron- ask for be be already in use like i say this be just rough back of the envelope calculation i just want to show -pron- the idea",
    "-pron- do not want lock contention but on the other hand -pron- want to be able to discover -pron- race condition as soon as possible in woman during -pron- testing before -pron- put -pron- into production before -pron- start rely on this code to save life or to move money or to give demos etc 's so race condition be tricky be the big takeaway message and -pron- could do back of the envelope calculation to see why -pron- be difficult to detect these ok right so with that in mind that mean that -pron- debugging skill understanding of how code can interleave can be important be believe to actually reason about -pron- code be just as important as be up to test test -pron- ok so here be here be the code -pron- have get -pron- 'd like -pron- to kind of look at this code and tell -pron- what do -pron- think -pron- be go to do right so -pron- have get -pron- have get a couple"
  ],
  "b6cf130c-a8fd-42d6-979b-2037d3be7212": [
    "ok right so let -pron- get a new color hip right so let -pron- come up with a scheme that sound e x t two use and note that be not the only scheme of do thing -pron- can also talk about b tree for example as an alternative but let -pron- not go down there instead let -pron- actually think about kind of one possibility ok so the story so far -pron- have get -pron- and i know remember that i know -pron- or fix size say one hundred and twenty eight byte or so -pron- do not have much space on -pron- so definitely -pron- want to store the meta information on -pron- like say when this file be create or modify etc but then -pron- actually want to say ok but if -pron- actually want the byte of this cat picture i bet -pron- can tell -pron- where to load -pron- so if -pron- content serve",
    "nine etc i need to store these number somewhere ok so -pron- first idea then be to say look for very small file why do not i actually store the actual disk block number so say three seven fifteen directly inside the -pron- 'd node ok so -pron- can do that provide the file do not get too big because -pron- i node have a limited amount of space cape so for very small file then that be actually a plan in which be great because now -pron- have get pretty good performance that as soon as i read the i node i know where to go to the disk to actually get the content ideally of course these would be contiguous but -pron- do not have to be ok so in practice -pron- may limit this scheme to say",
    "too big right so what do -pron- mean to be too big right so how big be each disk block well be dis block remember -pron- say -pron- be go to be four kb ok so for file which be zero two forty kilobyte -pron- have now get a scheme to actually store -pron- content great ok so forty kb where -pron- should be big enough everybody oh yeah well except when -pron- be not so what be -pron- go to do when -pron- have a file which be four thousand and ninety seven byte ok so clearly -pron- need a way to kind of overflow and to store more information so here be -pron- plan the eleventh i know down here so this be zero to nine here so -pron- be a tent ie the eleventh",
    "instead -pron- pass the buck and say well if -pron- actually want to read the fourth thousand the ninety seventh byte or high -pron- be not go to tell -pron- but i know someone who can why do -pron- go to this particular dis block let -pron- say on disk this happen to be a some arbitrary location like say this block number one hundred thirty seven go and read that and from that -pron- can find out where the content of the fourth album and ninety seventh byte be so for these large file the beginning of the file -pron- can still access immediately right -pron- still know exactly where to go on the disk right -pron- can get these straight away but as -pron- progress into the file -pron- be go to have to work a little bit hard so after forty kilobyte this be what -pron- be go to have to do -pron- read one extra disk block so -pron- be go",
    "and this will tell -pron- where the next set of disk block be ok so -pron- will be somewhat on the disk and where on disk will be store inside this little table so let -pron- talk about this little table if -pron- disk block number can be represent use four byte then how many entry can i have inside -pron- little table here so the table -pron- be four kb but each entry be four byte so that mean -pron- have get a thousand and twenty four one k entry that i can store inside of this block so this diagram be very very incomplete there be actually many many many many more of these so there be a thousand and twenty four so call indirect block and -pron-",
    "have to go and read this one time now in practice once -pron- have read -pron- one time i do not need to go back to the disk to keep load -pron- the kernel will cash that information so now -pron- can actually read the next quantity of one thousand and twenty four so wonderful great now i can start work with much large file like -pron- be go to repeat -pron- again the first forty kilobyte of every file do matter be small or large -pron- do not need to play this trick ok that -pron- get this directly from the i node but for the forty first bite -pron- can workout that i should go to the very first entry inside -pron- indirect block table so i need to load this block and then follow the first entry and great -pron- have now get -pron- another four kb as i keep read the file -pron- be go to workout which",
    "give -pron- another diss block number to read from disk and i can keep read the next four kb again for performance hopefully these be next door neighbor but -pron- do not have to be -pron- in fact -pron- could be anywhere on the disk right so that be pretty good how big a file can -pron- actually represent with this system so if -pron- indirect table here be full then -pron- have get a thousand and twenty four entry ok but each entry be for cook for kilobyte in other word -pron- indirect block can hold four megabyte worth of information so this scheme will work provide i do not exceed four megabyte plus -pron- direct block which i say there be ten of -pron- so -pron- have get forty kb ok that should be big enough for everybody can not imagine why anybody would want to store more information",
    "now huge file the initial part of the file again be store as direct inside direct block the thinking being be quite often -pron- would just want fast access to the begin of the file after that will use this in director scheme but after that after -pron- have exceed this limit that -pron- have just calculate -pron- be go to play a new trick so now there be another entry inside the i node which say -pron- know what i can not tell -pron- where the next bite be go to be store but i know someone that know someone about where to go so great -pron- read a disc lock off four kilobyte read here and again -pron- have a little table thousand and twenty four entry inside -pron- but those entry -pron- be not the answer i look this -pron- be do a second look up so -pron- have to go back to -pron- disk to read another little table and",
    "-pron- seek with virtual memory and finally this give -pron- the actual disk block that will actually hold the datum so finally -pron- can meet the next four kilobyte of datum ok so how much can -pron- store with this double indirection scheme here ok so each one of each one of these entry there be go to be a thousand and twenty four of -pron- ok for -pron- second look up here but -pron- be not do because actually i can play this this trick a thousand twenty four time so for -pron- double indirect block -pron- have actually get four kb time a thousand twenty four time a thousand twenty four in other word i can represent four gigabyte worth of information here right -pron- just need to write the logic to make sure that",
    "i need to be able to do math to say why be -pron- less than four kilobyte in which case which one of these disk blocks be -pron- direct block be -pron- in the next range in which case which one of these be thousand and twenty four entry do i need to read ok and therefore where inside a particular this block do i need to read and watch the offset inside that particular block and finally if -pron- be use this double indirect rick i need to read want table block and then a second one as well before i can finally find out where the actual data be store ok be -pron- do will actually -pron- turn out there be triple indirect block as well but after that -pron- stop so actually there be one more entry inside here there -pron- go -pron- will just fight -pron- now but the last entry here give -pron-",
    "give -pron- the answer i have to use that to read one of one thousand and twenty four entry that do not give -pron- the answer either and that -pron- give -pron- another block over thousand twenty four and that finally will actually lead -pron- to the real datum so one way -pron- could have take static picture here i want -pron- to imagine how as -pron- be make a large large file how this may actually fill up kind of initially -pron- be just work on this very first this block as -pron- make -pron- file great than four kb now -pron- start write byte into this dis block as -pron- keep go -pron- need to find a new disk block which be available so -pron- start write byte in there and so on and so on and so on and keep do for the first forty kb and then what happen well now -pron- need to find a in director table so -pron- find space on disk for that and then -pron- start write -pron- datum into the boat first indirect block here once that be fill up after four"
  ],
  "b7f1de1e-a1ea-4bb5-9459-de401bd7f1ab": [
    "hi so let -pron- start talk about deadlock ok so deadlock be the bane of multithreaded and program which have synchronization so -pron- have realize that -pron- be important to make sometimes -pron- thread and process wait for event and for condition to apply but then what happen if -pron- end up wait forever so when do this occur and how can -pron- stop -pron- alright so -pron- be talk about deadlock first of all let -pron- remind -pron- about a definition for deadlock do -pron- remember -pron- so -pron- be use the follow definition deadlock definitely deadlock for -pron- definition for deadlock be -pron- be go to wait in fact -pron- be wait for what -pron- be wait for some kind of event right so -pron- may be a mute ox mutex to be unlocked for example wait for a counting semaphore to have for someone else to call send post may be wait for a file to be nonempty but -pron- be wait for some kind of event that will never happen so -pron- can reason about -pron- -pron-",
    "be currently stick wait for that event that will never happen so -pron- turn out that -pron- can only actually get deadlock if the follow four condition apply and these be know as the coffman condition and yes -pron- be necessary and yes -pron- be sufficient so an important idea be if -pron- can break any one of -pron- then -pron- will not get deadlock ok that sound easy right so let -pron- think about what these be and how -pron- may break -pron- and unfortunately though -pron- sound easy to break because hey there be four of -pron- in practice -pron- be actually -pron- be actually often hard to identify the good way to design -pron- system too sure -pron- do not get deadlock so what be the common condition so",
    "exclusion or often this be write as -pron- need some kind of exclusive access to some kind of resource so if -pron- can just completely share resource then there will not be any delay there will not be any need to wait for anything so the some need to have somebody to wait for something exclusive access ok so mutual solution be -pron- first one the second be i need a circular wait condition ok so -pron- be go to look at this one in more detail in a little bit but circular wait to be precise will actually be a circular wait in the what be call the wait for graph and -pron- be go to see this in a little bit but -pron- can think of",
    "where a would like to go out with a b but b have the eye on c who unfortunately have -pron- eye on d who unfortunately have -pron- eye on a ok so no one get to go anywhere and so -pron- be perfect for a soapbox drama because nothing be ever go to happen ok so -pron- be go to see a more detailed example of these circular weight but -pron- can see that what be necessary be that -pron- have get different part of -pron- system wait for other part which be currently take so if a be able to proceed without have to wait then -pron- could not get deadlock so instead be this idea that -pron- can identify a circular wait in the resource that be be hold and need by different thread and process so -pron- will come back to that one and the third one be the",
    "one resource then deadlock be impossible because once -pron- get that resource -pron- can -pron- can continue and if -pron- be not hold -pron- then there be no possibility of anyone else wait for -pron- so -pron- can not set up this circular wait so hold on wait be when -pron- can imagine kind of day care through -pron- kid or five year old kid be hold onto the crayon be not anybody else have -pron- and be now stare intently at another child that be get the color paper and so -pron- be hold on to this and -pron- be wait for the other resource meanwhile there other child",
    "and be now look at -pron- wait for the queen and because -pron- be hold onto -pron- resource be not go to share -pron- now -pron- have get that look so the holden weight be the idea that -pron- get exclusive access to the resource and daniel prepare to wait for other thing -pron- be not go to put -pron- the app once -pron- grab -pron- -pron- have get -pron- ok so this be -pron- thread and process act like toddler or three year old in a day care and the last one be the there be no daycare teacher in the room to actually call in the situation down and -pron- little told of process be not go to behave rationally at this point in agree to voluntarily put thing down so the idea here be there be no preemption so if one of",
    "up to another child and say hey -pron- give -pron- the dependence give -pron- the give -pron- the clown and force the other child to release -pron- hold onto that that resource or perhaps if one of the thread be enlighten though i can see -pron- have get a deadlock situation -pron- know i will let go of -pron- all the thing -pron- be hold right now so that for the good of all of all of the other process ok so -pron- do not if -pron- do not have that if there be no possibility preemption then then and all those other condition occur then then -pron- can have the possibility of deadlock ok so let -pron- kind of try to differentiate between some of these because the press possibly last two sound kind of similar so hold weight be the idea that a process be hold onto one thing but so little",
    "to have but there wait for something else ok so -pron- go right and i suppose get -pron- little stick figure in -pron- there -pron- go right there now wait for something over here so the fact that little join over here be also get -pron- resource that -pron- want so here -pron- go here be number two which be hold by another little upset stick figure right so that be -pron- hold and wait here ok and -pron- want -pron- want something else ok no preemption be that -pron- be not go to give up -pron- resource that -pron- be not go to agree to put down what -pron- have get so -pron- can not state be little thread hey -pron- know that new text log that -pron- lock yeah well -pron- change -pron- mind about",
    "never lock -pron- and restart please r code can not do that -pron- be unable to get a backtrack and go back to a time before -pron- -pron- lock -pron- ok so -pron- can not force -pron- thread to preemptively let go any resource ok and as -pron- can see in -pron- little example -pron- be set up a circuit await -pron- have now get -pron- two little thread wait for each other to continue but of course neither one be go to let go of -pron- resource let -pron- fill in -pron- arm here the other one go to let go and so both of -pron- be unhappy both of -pron- have reach a stalemate -pron- have get deadlock and -pron- want to share so -pron- have exclusive access to these two resource resource so if -pron- be prepared to share that would not be a problem right so that be -pron- condition -pron- can read the course book for finer grain and more technical description",
    "-pron- be sufficient so if four four of these apply then deadlock be possible now will deadlock actually occur that be a great question sir to answer that -pron- actually need to think about the weather -pron- have actually get a circular wait inside of resource allocation graph and that be go to be the subject of -pron- next next little video and ultimately i want to realize that even if -pron- identify from the code that deadlock be possible -pron- do not guarantee that deadlock will occur instead a certain interleaving a certain sequence of event need to occur in order to ensure that deadlock be possible to say have code that appear to work ten thousand time but -pron- be only when -pron- put -pron- into"
  ],
  "b876ebf8-b1c2-4187-bfab-f4c2fa732965": [
    "hi so how can -pron- start write program which crash quick what -pron- say why would i want to do that well be much easy to detect an error if the program stop at the moment that the error occur rather than just blindly carry on and one way to do that be to use assert statement -pron- can basically say i believe i assert the follow statement or sort follow expression so -pron- must be true so the c support be call the assert macro remember those thing the preprocessor macro now here be the kind of cool thing about assert be that -pron- can make -pron- disappear so if -pron- be write code that -pron- want to have the good performance then all those additional test that -pron- write inside the assert can disappear -pron- will never actually be see by the compiler in other word -pron- assert macro either will be compile into a little if statement",
    "right so feel free to sprinkle lot of assert around in -pron- code and -pron- will only affect the performance of -pron- code when -pron- compile -pron- in debug mode right so let -pron- sub just have a look at look at this will build an assert demo right so let -pron- have and search demo here an right and i will start off -pron- usual arksey character rv right suppose i want to check that something be true so perhaps i want to assert i want to assume that from this great point go forward that -pron- program actually have least one argument specify normally i would write an actual explicit test but",
    "assert that argosy be too because -pron- expect the program name and the user supply at least on argument ok and -pron- could even assert other thing like let -pron- check that the value of argv one be something that -pron- expect like any alright or how about hello right now remember be strike -pron- that be go to turn the difference of the first two character which skeletor difference so -pron- want actually that difference to be zero in other word those two string be the same ok right and then if -pron- get this far -pron- will say something like everything ok what be putus putus be equivalent to printf standout print for standard out then whatever -pron- say follow by a newline so -pron- expect that normally to be flush out immediately when",
    "let -pron- return zero here to say -pron- exit ok alright so first of all let -pron- just try compile this pcc assert demo and -pron- be go to complain the fact that -pron- have not specify be type -pron- have forget to to include -pron- include here so hash include hey precompiler please get for main assert dot h and also i need to do stroke hump so that be go to be inside string college key and i could have discover that for the manpage alright so now -pron- try to compile will get -pron- get close -pron- gay do -pron- have a a mistake on yes on -pron- main here i do not put the type here pointed reporter ok right right and last -pron- need one more include which be the standard io for -pron-",
    "and will run -pron- ok and -pron- will see by default the assert actually do not really cool -pron- actually be generate c code that know the filename assert demo and the line number line six that be really really cool how do -pron- manage to do that well the trick by the way be that the there be actually two kind of constant switch two constant which change one be that -pron- have let -pron- just do this percent s percent d -pron- have file with two underscore before and after and line and the compiler there -pron- go the compiler define these and of course the line number change and cost to file change that",
    "be where the error occur so i do not even need to run the debugger to discover where -pron- have get a problem alright so let -pron- just compile this and demonstrate these two so -pron- want to run this and this time will actually put the right thing will say la and -pron- will see that -pron- have get -pron- everything be ok and -pron- print out assert demo at line nine because -pron- be use those constant inside there so i hope -pron- can quickly see how -pron- too if -pron- really want to could build a little assert function now or little assert macro that -pron- test to see if the expression be correct be true and if not let -pron- print something out to standard error add immediately quit the program alright so how can i do some more debugging at this point well every good c programmer know first of all that if -pron- want gcc or clang to actually generate debug information",
    "-pron- can find out a lot more about the current function that -pron- be step through and the alternative to that be to say hey i want to now optimize -pron- code perhaps some variable be only go to be map to register on the cpu -pron- be not even go to find -pron- inside memory and perhaps i want to turn off -pron- assert code so for this i want to say hey compiler i want to define something predefine preprocessor constant here and in fact -pron- be go to say hey no debug information please no no debug and let -pron- try this so what be -pron- program call assert demo right so now when i run -pron- ok -pron- assert get compile to nothing there be no long any test that -pron- expectation be meet and so -pron- have",
    "between -pron- and -pron- -pron- know that -pron- never actually pass that la argument so that be the big idea about assert the -pron- can turn -pron- on -pron- can turn -pron- off whether -pron- want to have good performance or check -pron- precondition of function so when should -pron- use -pron- be a great idea to put assert at the beginning of each of -pron- function and to check the precondition of what -pron- believe to be true so let -pron- see that as an example here let -pron- serve right let -pron- put everything together -pron- have learn inside this lecture to write a little program which be go to sum up the result of an array and -pron- be go to convert the result into a text version of an ascii string of -pron- sum so let -pron- do that flight",
    "ok -pron- will call -pron- some right so -pron- want to sum up everything and then k and then convert that into a piece of text right so return a text version of the result so -pron- look like -pron- be miss a line there right so i need a sum let -pron- assume today that -pron- do not need to worry about overflow of an integer and -pron- be go to keep go until i get a zero value so -pron- will use that today be -pron- little sentinel to say -pron- have get to the end alternative would be that -pron- pass in the number of item that would like to iterate through so -pron- be go to set up some quota zero and then let -pron- keep go until finish condition apply and just want to show -pron- kind of some kind of little fawn trick",
    "here so be this correct -pron- actually want to recommend a pointer and then take the value well this be dangerous code because -pron- have to think carefully about whether -pron- be incremente before or after read the value think carefully let -pron- let -pron- put that aside to when -pron- actually really need to think carefully and -pron- be think about say memory allocation in the lifetime of object so i would advise -pron- do not try to be clever instead let -pron- just write -pron- code with the increment separate and will let the optimal optimization of the compiler run fit to figure out whether -pron- can actually there -pron- go optimize this code into something that run fast so only be only be clever when -pron- actually",
    "when -pron- truly need to think carefully -pron- have get enough problem still worry about ok so -pron- be go to keep go through add to -pron- some the value that -pron- be go to find at -pron- pointer at the end of this great -pron- have now get to some but -pron- be not go to return this sum instead -pron- want to put some have some memory which actually hold the ascii version of this how can i do this right so here be -pron- here be -pron- result verbal text and now remember how how -pron- can do this -pron- can use aspirin tariff or to say hey -pron- be be tough change -pron- variable for -pron- please to point to some heat memory that i be go to need for the result so for example i want integer now and here be the integer value i need to convert into some text so almost do this this would now work but let -pron- use -pron- search to to test a few thing ok first of all the -pron- actually want to put the result",
    "into result result be just a pointer to an inch here take the value of some k so whatever result be point to will put -pron- in there ok so this would work but what would happen if someone pass in null as result pointer in other word -pron- be not point at anything valid -pron- would crash at line eleven so let -pron- instead actually put -pron- assumption in here and -pron- can say well -pron- know what i expect that -pron- array of integer that time -pron- look at should be valid and also i expect expect that -pron- result point that -pron- be go to give -pron- be valid guess -pron- could put logical billion and write that as a single line but -pron- advice be do not because now"
  ],
  "b8ce533a-7b9e-4642-a7b3-a69cb4a5fa50": [
    "ok so -pron- do not need a definition for deadlock and this idea that -pron- -pron- thread be freeze up maybe one thread be wait for a mutex lock that be never go to be unlocked maybe -pron- be wait for something from a data structure which be never go to be give to -pron- so here be a general definition for dead log key text door work ok great make -pron- that big right so dead log be when -pron- be wait for an event that well ok can i type so i put in some in there ok will never happen ok so stop try to make -pron- day to happen -pron- be never go to happen stop try to make this thread exit -pron- be never go to happen ok so -pron- poor poor little fair door process be wait some for an event maybe -pron- be go to signal that",
    "just never go to happen so -pron- do not get to complete -pron- do not get to kind of run -pron- activity or run the code and of course debug deadlock be tricky -pron- be often there as pair that i could a thread maybe -pron- be stick inside p threat condition wait and -pron- do not know why why that event do not have not have not fired have not occur ok so -pron- have get this general definition of deadlock now actually let -pron- see if -pron- can kind of construct some example where -pron- actually cause -pron- so let -pron- use team mutex lock and two thread to create an example of deadlock ok bye -pron- be go to actually do this in a text editor ok let -pron- go right do i have so if -pron- have get thread one imagine -pron- thread first red make the coda big right have call",
    "lock on this first mutex and then after -pron- have do that please lock on this other mutex right so -pron- will do some work ok do something and then after that -pron- want to at least ok so -pron- will call p thread unlock on both of these mutex be ok so for example maybe -pron- want to take some datum out of out of datum store one stick -pron- into datum structure to ok -pron- do not matter particular which order that -pron- release -pron- in just for symmetry -pron- be go to do -pron- this way but let -pron- let -pron- think about what happen if -pron- lock these in a different sequence inside another thread so -pron- be go to have now another thread that do the same sequence of operation accept ha -pron- have swap these around the case so",
    "like most of the time no most of the time -pron- thread be perfectly happy do what -pron- need to do until the follow happen until one unfortunate day thread one have call preferred mutex lock on get this choose a new color call prefix lock on the first one case be complete that at the same time -pron- other thread which be curiously call thread one so let -pron- fix that thread two right have just acquire the lock on mutex too so now -pron- be both able to do this but what happen",
    "let -pron- go for yes -pron- be kinda extreme pinky purple thing let -pron- try that ok right so now what happen thread one say -pron- 'd like to lock this mutex but of course what do this do -pron- block ok why because another thread have that new text between -pron- and -pron- -pron- know -pron- be thread two meanwhile thread two try to look -pron- take one and that of course block -pron- be not yet available another thread be currently quite that music lock ok so when will -pron- escape out of this and the answer be never ok -pron- can read the code and see that eventually -pron- be go to release these lock but -pron- be never go to get to that that piece of code that thread one be wait for thread two and thread two be wait for thread one so -pron- be kind of stuck for stick forever",
    "be in the same order -pron- would have be fine let -pron- just kind of quickly sketch that out to see that let -pron- imagine that i have -pron- first thread do mutex wear and then mute x two and then mutex wanna mutex two down here for thread two then if -pron- both try to acquire mutex in at the same time then -pron- can imagine that thread one would acquire the mutex lock here which would mean thread two will be force to block so -pron- do not get to go to step two which mean thread one can continue and then when -pron- be finish -pron- will release those lock so now thread two can finish so if -pron- 'd actually write -pron- code like this in the same order -pron- would have be impossible to get deadlock",
    "semaphore sure ok so let -pron- do something similar with count semaphore where thread one call say sam weights on count center four as well and at the end -pron- will will increase the count again ok so now -pron- will have another thread that do something similar or key and another thread do something similar ok so do -pron- see any problem right now nope -pron- could imagine that these counting semaphore 's -pron- kind except for have be initialize just account of one ok so same",
    "for every same weight call -pron- call assam post ok right so what if -pron- could have make -pron- a little bit more complicated though and -pron- say that same weight here be go to in order to continue -pron- be go to wait on this thread and then -pron- be go to post on some sample to an meanwhile thread two -pron- be go to wait on count semaphore two and then -pron- be go to post on count semaphore three ok and then some weight three -pron- be go to then post inseminate one ok if all -pron- county be force to start off with a value of zero -pron- can see that no one get to play that all of -pron- thread have get stick that -pron- first thread be block here wait for the value for sale want change well someone will change",
    "pizza slice and be able to get that piece of slice form -pron- be wait for sam post to be call by thread two but thread two be not go to give -pron- that pizza slice until -pron- get a piece of slice out of count semaphore s two and where will i get that only from thread one when thread one finally call stem post but that be not go to happen because thread what be still wait for the pizza slice from thread three so now -pron- see -pron- have get this love triangle here between -pron- three thread -pron- will never go to continue that always wait for an event that be never go to happen so that be all example of deadlock -pron- can construct lot of these vary bit of complexity usually -pron- do not artificial construct -pron- like this usually be scratch go ahead go why do -pron- system come"
  ],
  "b9161da0-95b9-41ea-9071-0d954a849a97": [
    "ok so let -pron- see if -pron- can rescue of astronaut on the moon so as a little warm up exercise what do -pron- think about this which call will actually result in the first steam packet so think about the call -pron- make so in a client -pron- first of all cause create be socket and then -pron- call connect ok what about this server or the server -pron- make the socket then -pron- bind -pron- to a port on a particularly ethernet card and then -pron- listen k which mean hey now be available for connection and then finally -pron- have accept and that be the one which be go to block until there be a new connection to be service in new client have actually finish connect so that be the one that -pron- put inside a loop ok so which one of these will result in the first syn packet gang out on the network right so if -pron- say connect could graduation that be correct answer",
    "of course if the server be not yet list then that packet will simply discard by the server if there be there be no service list on that particular port so -pron- have to make sure -pron- have do the listen before hand but listen be a passive call -pron- just simply set up the server for new prepare the server for incoming connection -pron- be the connect that be the moment that -pron- start generate packet ok and of course once -pron- do that -pron- will get back the syn ack automatically as well right so now with that in mind let -pron- have a look at -pron- little problem here lunar base so the moon be one point three light second difference by the way i be not very good sleep be a baby and moon as the first word i have a spoke apparently so one point three second difference take an otherwise -pron- take light just over a second to reach the moon",
    "run some kind of tcp server on the lunar base so -pron- will assume that control the lunar base there be make a new tcp connection each time so -pron- first problem be -pron- want to save the astronaut have second elapse between want to send a close air lock message and the server actually receive -pron- datum ok so -pron- ask about charge into the base an on earth side -pron- run the follow code right -pron- make a socket -pron- connect on that socket to the ip address of a lunar base and -pron- write the follow command and send thirteen byte right so -pron- could use -pron- understanding the tcp protocol to -pron- to work this out first packet at the moment -pron- call connect that be go to take one point three second to cross",
    "base respond to say hey i acknowledge -pron- sin here be -pron- kiss -pron- synchronization number ok at this point no data to actually be send -pron- be just do the handshake -pron- be on the third packet that be send that -pron- actually get to send something so on the third packet that client can acknowledge the service synchronization number but also -pron- have a payload with this packet -pron- can actually have the close air lock as well and -pron- be only thirteen byte -pron- should be easy to actually put that inside a single packet so assume that -pron- really do stay as a single packet with crosse to the moon again in one point three second ok so now -pron- can actually see that -pron- be go to take three point nine second in other word -pron- ask a lot well hold -pron- breath for four second but after four",
    "perhaps this server the server will send back another response and that would again have another delay of one point three second but uh -pron- do not care about that -pron- care about be the time -pron- take to actually instantiate that command and -pron- see be three point nine second ok so what about the next problem then where -pron- actually want to read a temperature so again notice that -pron- be start gnu gnu connection new tcp socket be create so -pron- source port will be different and all that so -pron- have get i do not want that one of -pron- try again right and let -pron- do an orange color ok right so -pron- have get get -pron- initial handshake to the server -pron- come back -pron- acknowledge the uh the server send i acknowledge -pron- sin here be -pron-",
    "so that -pron- do be packet -pron- have the read temp and then -pron- can actually start today and get back a result so presumably the processing time for that be minimal the one point three second be -pron- most significant delay and at some point -pron- get back result so on this packet -pron- have get the re temp so -pron- be a large packet than before and come back here will have another packet maybe -pron- be sixty degree or something right so i will send that back in some kind of form right so realize the packet and the amount of space that -pron- define -pron- buffer -pron- be basically independent",
    "packet and packet can vary in size and can be many packet arrive and -pron- have see how tcp ip packet arrive out of order all of that be handle for -pron- if a packet go miss then eventually the kernal will say excuse -pron- other side i need -pron- to resend some information for -pron- and also the server can adknowledge how much information be receive so far so that the other side know -pron- can now can discard stuff that be never go to need to actually resend some of the byte stream but anyway so -pron- get back some information so now -pron- can see that -pron- have get a delay or four point one point four time one point three in other word about five second right so that be a kind of bored idea of how tcp work notice that -pron- just do something simple -pron- actually may come across this divide four time so this become"
  ],
  "b933e096-b63b-4b20-8715-01984d323c7d": [
    "ok right so let -pron- analyze this challenge ok so -pron- have get a global variable call firework here and inside -pron- main method -pron- be go to do -pron- be go to create a whole load of pizza -pron- be ok and make a note of -pron- thread i ds pass in the firework function ok and then after -pron- have do that -pron- will set firework equal to one and then will call precondition signal so -pron- know that be go to wake up one thread now -pron- want to wait for all thread to finish here so i could write a for loop to call p thread join on all of -pron- thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that -pron- never return from maine so i could call p thread exit here key right so great -pron- have implement that now actually let -pron- have to think about how -pron- can implement the firework right so what do r firework do k right well",
    "for for sure have so -pron- have get -pron- have get the mutex lock and all thread that run this code again to acquire the same lock and then -pron- say well while firework be zero corporate recognition weight in other word if -pron- firework thread start up here and -pron- start up early then -pron- be just go to block -pron- for but -pron- be go to ask -pron- to release the mutex lock and lock inside here so go back to the kind of first code remember -pron- create all of the thread initially back when be firework variable with zero -pron- be only after -pron- have create all five well -pron- say ok now -pron- be time for the firework ok so let -pron- get down here ok right so what do -pron- do after this point ok when -pron- escape out of here where a scaping",
    "zero and the very first thing -pron- do be call p three condition broadcast in other word re that fire bell wake everybody up in this may be sleep inside this condition variable ok so now all five of -pron- thread definitely work up ok so i implement increment the value of firework i print out oh and that value and then i decrement -pron- ok so what be go to be the large value this code will print one two three four five six what do -pron- think so just as a reminder -pron- have get five thread run this and the only way -pron- can escape out of this code be after firework be no long zero so what be the maximum possible value that -pron- may see from this first to run this hundred or thousand to a million time what be the large integer that would expect here ok so think about that pause this video and make -pron-",
    "think about this for five second and then -pron- will review the answer ok wait time up so let -pron- let -pron- have a look at the key key detail here the key detail be a mutex lock -pron- mutex lock allow -pron- to reason strongly about the number of thread which be actually run in this code because -pron- have acquire mutex lock mean that any other thread that want to run have to also require -pron- so all of these line of code can only be run by one thread at a time if the thread have go to sleep inside p thread condition wait there only allow to escape out of that after -pron- reacquire the mutex log so that be the key idea that only one third of the time can be run this piece of code and -pron- allow -pron- to actually reason about",
    "first thread will see of firework value of one because -pron- change -pron- upstairs in the main method so -pron- implement so -pron- increment -pron- to two case of wig the first escape out of here will will print out too and then -pron- decrement -pron- down to one again and then -pron- unlock the mutex ok so the next step that come out of here will only escape out of p three condition wait after -pron- have unlock the mutex so -pron- will also see a value of firework of one -pron- also do a big forecast wake everybody up and most be too and so -pron- will print out the value of two etc right and so on the next thread will come out check the condition for the while loop ok that be no longer true so -pron- come to an do the same thing increment -pron- from one to two and then two to one and then unlock the mutex which allow the next day to escape -pron- check the value and so on",
    "to kind of prove -pron- right so -pron- have ok compile -pron- eh ok that be -pron- machine slow ok there -pron- go out alright and -pron- see every firework every thread wanna see the value of two and -pron- could do that through this strong reasoning thank to the mutex log ok wait a couple of quick question be why do -pron- see all the firework go well remember -pron- wake up one of -pron- here and then that firework be not man work up the rest now do -pron- have any possible race condition here yes -pron- do right so -pron- actually just talk about a version of this in the previous video that be a small race condition small possibility that these two line of code here can i move that over or to keep throw box right when i change the value folk and then i call peter condition that could happen",
    "right inside there if that just that moment in time then what be go to happen -pron- have actually call precondition signal but no thread be yet sleep no thread be yet block inside condition wait ok so be to fix for that and the answer be to actually log on the same mutex here so if i call pete say mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread be acquire mutex or after the all the thread have call pizza hut or so at least at least a threat be currently get mutex will then call pre take additional weight",
    "the mutex and then -pron- get to run as well another thing this code be kind of highlight be that that -pron- can create thread but peter create do not wait for -pron- to actually start so this this code be an attempt to say ok let -pron- create all these thread and actually -pron- be go to make -pron- own barrier inside here so -pron- will not let anybody go until -pron- have actually create or five thread and also kind of start up so but this line of actually change the firework to one here could still actually technically occur before this five thread of actually start all -pron- have just simply say be to say ok create -pron- and at some point in the future please run alright so lot of interesting interleaving"
  ],
  "b93caeac-d529-4079-99f4-28d2f8c07db2": [
    "ok right so remember signal blocking mean that -pron- have pull up the drawbridge any zombie -pron- have outside -pron- -pron- be not dead yet -pron- hold that there be there zombie but -pron- have not go away so if there be a signal that be wait to be deliver all -pron- be do be try to delay the inevitable -pron- be try to stop that signal from be send to -pron- ok how do -pron- do that -pron- use sig prop mask and here be how -pron- work -pron- be a little bit like seek set in the sense that -pron- can say exactly how -pron- want to use -pron- and so the first integer here be actually a choice of one of these three constant -pron- can say i want to add to the exist mask so that be block here so any signal that -pron- be go to give -pron- i want -pron- to all -pron- with exist mask or i want -pron- to take the single set that -pron- be give -pron- here and use the bit set inside that signal set to unblock signal ok",
    "with -pron- one that -pron- be give -pron- ok so this how control what the meaning be of the signal set here ok -pron- also notice that actually -pron- have get the three parameter here there be old here so if -pron- wish -pron- can ask cig pop mask detail the old signal mask so that be sometimes useful because -pron- may call mask twice -pron- may initially call to say hayes process here be -pron- new signal mask and by the way i want to remember what the old process mask look like and then later when i finish do what i need to do i can take that whole process mask and say ok single prop mask now use that signal pattern that signal set as the new mask please thank -pron- very much both these parameter if -pron- wish can be null so if if -pron- truly do not want to actually change the current signal mask put in all there if -pron- truly do not care about the prior single mass",
    "-pron- keep so remember -pron- this sick pop mask for single thread program and there be also a pthread version which behave exactly the same way in same signature if -pron- want to set -pron- on a particular threat and as a reminder that if -pron- want to stop those zombie from take over -pron- castle -pron- well actually set that on all of -pron- thread otherwise -pron- will find away in -pron- will find away to interrupt -pron- -pron- process -pron- will find a way to deliver -pron- signal right so let -pron- actually have a look at some code that do this and for that -pron- well understand how to manipulate these signal set so -pron- can think of a signal set if -pron- like as just really some kind of integer so maybe on particular system -pron- could even typedef for example",
    "there -pron- go and all that be actually be say into along ok but i will not tell anybody that -pron- have do that because -pron- be well terribly else to use -pron- sig set type so for example i could pretend that -pron- signal down or just some kind of integer with a whole lot of with enough bit that i can represent any possible signal on -pron- system right but how do i then manipulate -pron- signal set well -pron- be go to need some thing to manipulate this number and for that there be two useful thing -pron- can do -pron- can say ok give some pointer and memory i want to initialize -pron- to be zero to be the empty set of signal and the other thing i want to do be to be able to add a specific signal",
    "and in this case -pron- be go to set single arm inside that single set so conceptually -pron- can imagine that be just set a single bit the one bit that happen to correspond to say sigler inside this integer value ok so once -pron- have set this up -pron- have -pron- have initialize -pron- and then add one alarm where use that to say ok sig block use this mask in other word if i be not protect against sell arm hooray i add now -pron- have add -pron- to -pron- process exist signal block -pron- have also ask to find out what the original mask be so that presumably in a little bit i can reset the mask to what -pron- be before i change -pron- ok so what should -pron- write down here right so on -pron- p thread call i want to say cig one -pron- option"
  ],
  "b94d1f92-8ee2-461c-ae2e-934cfdcfd6cb": [
    "ok i want to mention just a curious little bit of linux here which be call the directory sticky bit so here be the problem -pron- need to solve let -pron- suppose -pron- have a disk which be nice and large and -pron- be go to let everybody write into this disk because -pron- need lot of space but people only need this big space for a temporary amount of time so -pron- will have a part of -pron- file system say call slash temp where both -pron- and i and other can unpack thing maybe compile thing etc so this directory -pron- need to be world writable so the permission on this directory be go to be quite unusual because the directory on the temp directory will be seven seven seven meaning hey -pron- can all read write and execute this directory but -pron- have a problem which if -pron- make a directory inside here that be dir1 -pron- be go to be rather upset if other people then immediately start delete -pron- or rename -pron-",
    "directory but thing inside this world writable directory be restrict because only the owner can delete or rename the subdirectory how do i set the sticky bit -pron- can use chmod where idea plus t to set that particular item and guess what -pron- be just another bit stored inside the mode flag and why do -pron- need -pron- in order to be able to share a temporary directory so let -pron- go and have a quick look at that ok so -pron- will get out of here let -pron- have a look on this linux system -pron- current directory be slash temp there be lot of stuff inside here let -pron- actually look at the permission of the actual directory so rather than list the directory -pron- be just go to say tell -pron- about the current"
  ],
  "b96e8ea2-f596-4b5a-807e-4646d78cc7a0": [
    "oh i forgot to say one little thing about erino down here which be when be -pron- set ok so here be a big idea be that -pron- set to zero when -pron- first program first start up -pron- value be change whenever there be an error with a system call and -pron- read the man page to learn more about that but -pron- be never reset back to zero so if i have a whole lot of call let -pron- say that i try to read from warm particular file descriptor and then try to write those bite somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can not actually tell -pron- whether where the error curd maybe -pron- happen early on inside -pron- read maybe -pron- happen inside -pron- right or maybe -pron- happen even early so just think of be a global variable that if an error occur -pron- change -pron-"
  ],
  "baa2188b-1097-4e5f-9fed-2ae8b4b6eff9": [
    "ok let -pron- talk about count salmon fall so kind semaphore be cool so here be what -pron- can do so let -pron- let -pron- compare -pron- a little bit with mutex lock mutex lock -pron- be design for very fast locking and unlock right and the key thing about mutex lock be that the lock and the unlock occur in pair and -pron- have to be perform by the same threat right so -pron- can not create another thread or call that unlocked for different thread note -pron- must do -pron- from the thread that cord lock so -pron- be perfect for the beginning and end of critical section but but that be all -pron- can do and sometimes -pron- want more flexibility and for that hard count summerfield semaphore to -pron- rescue so how do accounting before work accounting semaphore behave a lot more like a pizza box so let",
    "with lot and lot and lot of slice ok anybody can walk up to this wonderful counterexample for and grab a slice of pizza however what happen on the day where there be no slice leave inside -pron- pizza box ok so this be what account be that will do for -pron- if -pron- walk up to a counting semaphore pizza box and say hey -pron- be go to take a piece of pizza go to reduce the pizza count by one and there be nothing there then -pron- thread will block -pron- wait stand by the pizza box until there be a piece of sleight of a slice of pizza available so here -pron- go look kind of sad there be no pizza so -pron- thread fall asleep at that moment",
    "here -pron- have a user that be go to reduce the count by one so if there be three slice in here ok there will be two and immediately carry on but if the zero there , -pron- poor little thread here have to wait ok the good news be that anybody any other thread can always walk up to a pizza box and put a new slice back in there so -pron- can maybe do a little wedge here there -pron- be throw a slice of pizza back in the box do not matter whether -pron- be five day old and have fungus grow on top of -pron- -pron- can do that with account with accounting semaphore ok so of course when -pron- put a slice of pizza -pron- back into the box number of slice in here go up by one so if -pron- be zero -pron- now go up to one if -pron- would save three -pron- would go up to four right so that in essence be account be -pron- synchronization",
    "countdown by one ok so down by one or -pron- can take tick count up by one throw a slice into the box -pron- do not never block -pron- can throw as many in there as -pron- wish take a slice and take the countdown by one will block if the count be currently at zero so if the count be at zero right now ok then -pron- have poor little thread that be stuck wait and then -pron- walk up used to -pron- slice of pizza in there but the other thread image be -pron- be go to take that thank -pron- that be -pron- and so the count would be brief -pron- may imagine go up to one but then actually get back hand down to zero again ok so that be essential idea i can have",
    "now if -pron- then call up if -pron- now increment the count by one -pron- line here ok there -pron- go i like do -pron- do so go back -pron- have lose -pron- box come back box right sketch at box again ok so here be -pron- count be zero -pron- have get all of these unhappy ok all right people dog whatever all call down on the piece of book have all walk up to the box now -pron- be stand around -pron- be like a party where everything in the kitchen right near the food or something so"
  ],
  "baaa7fb5-1eff-422c-a5c9-4666f6c80a74": [
    "ok welcome to part two so meanwhile the story continue with a new hope as -pron- can see princess leia have now enter the story with the two droid talk about -pron- and that to -pron- -pron- look like a very furry wookiee . ok alright so meanwhile let -pron- see about create a web client use what -pron- have learn so quickly viewer tcp client and -pron- will show -pron- another kind of trick along the way here ok so what do -pron- get -pron- have get -pron- hint -pron- be set -pron- to zero i want to do everything where i just do by by paper and maybe i want to connect locally or maybe i want to connect to illinois ok so first of all let -pron- try let -pron- try -pron- and see what -pron- say if -pron- do this ok so pick an address right so how about cs ok right . remember that the port number must be in double quote -pron- be pass a string ok and -pron- be take the",
    "so if -pron- fail let -pron- just exit after print out the error ok and here be where -pron- be just go to only look at the very first entry so i make a socket with the right family and the right socket type and then -pron- be go to connect and connect all that need be the socket file descriptor key and the address and the length of of that struct ok so let -pron- compile this then -pron- talk about the remainder of the code okay alright so ok -pron- will stop this i can hit the ctrl + square brace there -pron- go in -pron- back into telnet hey telnet please",
    "right ok client off -pron- go wait woohoo -pron- connect ok and what -pron- give -pron- -pron- tell -pron- to go to a different page ok so please refresh this and go to this other web page fine so -pron- 'd write a web server web client now which actually kind of understand this text and follow that link right but -pron- will see that fundamentally -pron- request be ok and -pron- give -pron- back 163 byte of actual content and the content -pron- give -pron- be a web page ok that be the mime type , text / html so let -pron- have a brief look at the remainder of the code to see how -pron- work first of all -pron- be define -pron- request here just use a macro so this time rather than just request a",
    "to behave as if i connect as if -pron- be this other address this other host name , \u00a0  illinois.edu . here be why today -pron- can have multiple hostname which resolve to the same ip address and so -pron- web server do not know which actual host that -pron- would like -pron- to pretend to be unless -pron- tell -pron- so perhaps if i tell -pron- that -pron- want \" to connect to behave as \" \" www.cs.illinois.edu \" \" \" -pron- may give -pron- a different response hey let -pron- just try that for a moment ok so -pron- will compile -pron- ok and -pron- will run the client again ok ok nope that be still tell -pron- to go to a different",
    "about -pron- before call dprintf ok so dprint be this very strange call be not truly part of the posix standard but -pron- make -pron- life a lot easy what -pron- do be -pron- be equivalent to write in the sense that -pron- take a socket file descriptor but -pron- also give -pron- format information as well so i can do thing like % s , % d and and start pass in additional parameter ok so if -pron- have get string and integer number that -pron- want to send to -pron- socket remember dprintf can be a useful tool here rather than use write directly and then -pron- be go to start read back what the server say so i need a little buffer and -pron- have get -pron- little read loop in here and every time i get some byte back -pron- be go to write -pron- out to standard out -pron- be go to finish if -pron-",
    "there be no more byte for -pron- then i want to stop also if read return -1 , then -pron- be not go to read anymore so this be the simple kind of code -pron- write but -pron- be not complete -pron- be not yet handle the case that -pron- get -pron- get interrupt -pron- be also not handle the possibility of the pipe break as well so if the connection get shut down then a sigpipe signal can be generate as well so -pron- need to handle that event as well because by default sigpipe will simply shut down -pron- application ok the last thing that -pron- be not do in -pron- code be gracefully shut down tcp connection so really -pron- should be use shutdown to tell the kernel and the server at the other end that"
  ],
  "bb308b87-9d36-4d8c-b1da-bcd886514268": [
    "ok right so -pron- know the basic of hey when i make a server all i need to do be call accept inside a loop and ok -pron- will handle the air conditioner return negative one but otherwise -pron- give -pron- a file descriptor for a client so once -pron- have get that far descriptor i could write a very simple web web server or file server or database which service one request and then close that file script down and service the next request ok so that be not go to scale very well if i could only actually handle one request at a time so perhaps -pron- next idea be to every time except return be to fork and -pron- will have a child process work with each each client well that be scale up to a certain point because at some point -pron- all these process may be very heavy handed way of service thousand of client process",
    "do a well job so maybe a well job be to use thread ok so great let -pron- make a new thread for every client that connect every time except return let -pron- kick off a new thread just to handle that request and some web server do that so for example there be python web server do that ok so this scale fairly well but of course if -pron- attempt to have say a thousand active thread all try to run at the same time then -pron- performance will start to suffer perhaps there be a well way of do this and so yes lady and gentleman welcome to the game -pron- have try to figure out how to write really top and high performance server server that actually squeeze the most possible bandwidth out of -pron- limit cpu limited memory limited network connection etc and -pron- want to be able to handle not just say ten friend or hundred people that connect to -pron- machine but possibly thousand or even great connection",
    "so how can -pron- do that and this be where posix come to the rescue and -pron- be go to quickly kind of go through a little bit about kind of three option that -pron- have today so here be a game plan for forget for a moment -pron- have get thread and process let -pron- just think about how even just one process with one thread could actually service many client so this be a bit like a problem of have a single waiter in -pron- restaurant and how can that way to serve many table at the same time what -pron- need be a way for the waiter to only pay attention to the table which actually ready to talk to the waiter maybe -pron- be ready to eat maybe -pron- be ready to clear the table and return the country order right but for many other table there be nothing",
    "the ideology work in term of -pron- far descriptor that if -pron- have get a set of file descriptor right now so let -pron- see accept 's return to many time and many time and -pron- have actually get say here -pron- go far descriptor four five six and seven correspond to four different connection right now i could have a single thread i think process somehow try to talk to all of these client at the same time ok now but -pron- turn out of course that right now for -pron- do not need to do anything with the waiting for -pron- to say something to -pron- five death send be some datum and but -pron- do not have any datum for -pron- right at this instant -pron- be still wait for more to arrive six -pron- be currently send result and -pron- be halfway through send that file but -pron- be not ready to receive any more datum yet and seven well -pron- just have not hear of in awhile perhaps at some point -pron- be go to give up on seven and terminate that connection right so one single waiter could do all of this so -pron- plan be to somehow say hey thread i want -pron- to block",
    "say on this set of connection and this be what do select do so with select -pron- can say here be a range of far descriptor say four to seven and i want -pron- to block forever until something be happen ok actually select allow -pron- just put a time out so -pron- could say block until something be happen or say one millisecond or second have pass right so when -pron- return be -pron- can actually interrogate to see what be happen to each of -pron- table and decide what -pron- be wait want to do the problem with select be this check this polling of all of the file descriptor be an order n operation so -pron- be not order n square be not n log n so -pron- be only order n but if -pron- be talk about say want to have thousand connection or truly truly have the",
    "call actually slow -pron- down perhaps as a well design and so this be where poll come in paul be really design system interface to say maybe -pron- need instead away to say look -pron- be go to tell the system about a set of file descriptor i care about and come back to -pron- when something be happen but do not make -pron- keep ask each table whether -pron- be ready instead tell -pron- which specific table need more food so poll be a new way to kind of interrogate the system to see which file descriptor be ready to either receive or send more datum the poll be develop on there go to bsd system so not linux but the another free operating system",
    "-pron- will not find poll on -pron- linux machine but -pron- will find -pron- on -pron- macintosh laptop on os x because os x be base on bsd ok so which bring -pron- finally to epoll so whilst poll be an improvement over select and satisfy a few corner case like be able to easily discover when file descriptor have close epoll try to kind of fix all the corner case of poll ok so today if -pron- challenge be to write the world 's fast web server linux then -pron- need to pull out epoll out of -pron- back pocket so equal solve the order n problem epoll allow -pron- to in order one time find out which file descriptor be ready to receive or send information"
  ],
  "bbb895a1-cba7-4548-8727-a436ca271b72": [
    "oh i forgot to say one little thing about erino down here which be when be -pron- set ok so here be a big idea be that -pron- set to zero when -pron- first program first start up -pron- value be change whenever there be an error with a system call and -pron- read the man page to learn more about that but -pron- be never reset back to zero so if i have a whole lot of call let -pron- say that i try to read from warm particular file descriptor and then try to write those bite somewhere else to another file descriptor fd two over here if i then check if evan oh zero or not then i can not actually tell -pron- whether where the error curd maybe -pron- happen early on inside -pron- read maybe -pron- happen inside -pron- right or maybe -pron- happen even early so just think of be a global variable that if an error occur -pron- change -pron-"
  ],
  "bc05bdb0-371d-4cd3-97a6-753a576a32f2": [
    "alright so let -pron- talk about rate right so the big idea be -pron- want to make -pron- file system resilient gay right sir why do not i have there -pron- go ok so let -pron- have a bit of a back story here which be that raid be bear in the time where moore 's law show that -pron- could fit more and more transistor onto a square well silicon and this be a log rhythmic scale here so -pron- can just see the kind of every decade or so decade of time -pron- have this proximate kind of straight line here where machine be get fast and fast the cost of per gate be be go down and the size of the feature be go down and so great -pron- have lot and lot of cpu power if -pron- cpu be not fast enough just wait a year plus -pron- memory be go fast but actual persistent storage disk -pron- be not do",
    "from one select to the next to move -pron- head across will be only improve by a small amount year to year so great -pron- could store more datum discovery with a giant magneta history effect for example allow -pron- to store more bit per per square millimeter but still -pron- disk space be slow and enterprise disk be expensive so on the scene however in addition to kind of large mainframe enterprise computing -pron- have the emergence of a personal computer inside every office and the mass production of pcs mean that the cost of pc disk just regular disk that -pron- may throw into an office computer start go down significantly so as -pron- can see here like the cost per per megabyte again have this",
    "make use of these cheap disk to actually improve both the performance and reliability of -pron- enterprise datum and the key insight here be that each disc -pron- be not particularly reliable typically a single disk may be guarantee for say three year or five year and even if the warranty be three year or five year in practice -pron- may not last as long as that ok so some quick back of the envelope calculation here how long be a year right so will do let -pron- say twenty five hour in the day and there be three hundred day in a year approximately perhaps -pron- should make that four hundred and a moment but if -pron- do this then -pron- see that approximately a year be something like seven thousand hour or if -pron- want -pron- could say there be",
    "-pron- have get about ten thousand hour so in fact the real figure be close nine thousand but -pron- get about nine thousand hour per per year ok so if -pron- see a disc that be rate for about thirty thousand hour that mean -pron- be go to last hopefully about three year now of course on average on average -pron- may get some disk which fail more quickly than that or slow than that so that be just an average figure ok but just kind of remember that bear in mind that a year be approximately ten thousand hour ok oh and just by the way if -pron- ever want a quick calculation of how many work hour that be so -pron- can say -pron- have get eight hour in a day that i may work multiply by let -pron- see five day a week time forty -pron- can come",
    "define work week so if -pron- be to say work in a consultancy this may be say the number of billable hour -pron- be expect to do per year ok right sir enough of that let -pron- carry on right next slide please thank -pron- right so -pron- have do that so here be -pron- basic idea let -pron- go buy some of these cheap discs and if one or two of -pron- fail -pron- should be able to continue -pron- need to find a way to stripe -pron- datum across multiple disk so so -pron- be go to be able to write individual bit of course little bit so if any one of -pron- fail be -pron- can continue to run so if -pron- do this as well then -pron- also should get well performance because now if -pron- be harvest all of -pron- bit from multiple disk the same time be great i can now see -pron- result kind of far quick as i can pull",
    "so when -pron- buy a disk -pron- can ask to manufacture what be the mean time to failure and like i say typical figure may be say thirty thousand hour ok so that be that be about three year just as a kind of back of the envelope calculation so if i make away with a hundred disc ok then i can workout that mean time to failure of anyone disk inside -pron- way and so if i assume that the likelihood of failure of one disk to any other be independent than the time before i hit see a failure be go to be the mean time to failure for a single disk divide by the number of disk that that i have basically -pron- be roll the dice a hundred time so what do -pron- have here the surprising comment here",
    "so and why be -pron- two week well let -pron- see thirty thousand -pron- get to three hundred hour right so so mean time to failure will be three hundred hour and if -pron- divide that by twenty five hour in the day cape then -pron- will see that -pron- get a figure of about kind of twelve day or so ok so enough back over the envelope calculation so give that give that -pron- expect to be replace disk quite quite often -pron- need away a scheme to ensure that any information last on a particular list can be regenerate by the remain disk so the simple form of this with raid be just call a raid one where -pron- literally right the disk the datum twice so i can mirror let -pron- come back like a mirror",
    "of a speed advantage here because if i need access to a particular piece of datum say a certain part of the file actually i can use either of these source so that mean i can do two read in parallel -pron- can use this disk and then the next incoming read request for a different file or a different dis blog can be satisfy by the second disk right -pron- be go to be a little bit slow now -pron- have to talk over the boss of course to two disc not just one plus invariably one disk may take a little bit long than the other if -pron- be a spin disc perhaps -pron- have to wait for the whole thing to complete this revolution to write but -pron- be always go to be run at the slow possible time for both disk so -pron- have to in practice be right i may be a little bit slow the big disadvantage of this system be that -pron- have just double the cost now -pron- cost per megabyte be double what -pron- need to be for just",
    "disc siper i personally have one as a backup system which present -pron- as a single usb disk but internally be actually format an configure as a raid one drive so if one of those disk die i can still hopefully recover -pron- backup ok right so that be very well let -pron- have a look at a slightly well system where -pron- can use paraty code so if -pron- give -pron- a set of n bit let -pron- say four therm or eight of -pron- then i can always generate another bit call the parody bite to ensure that the total number of one in all of the bit set here -pron- go be be even ok so if i just simply x all all the bit -pron- give -pron- i can then use that as -pron- paraty code so this be useful",
    "last bit so if if -pron- disk -pron- have lose bit two out of this set then i could just use the parrot ebit along with all of the other remain bit to infer what be miss ok so that be a mathematical plan very kind of simple and easy to understand i hope so what be -pron- physical plan well here be the plan be just less by an extra disk which be go to be -pron- check disk that store the parrot ebit ok so right so -pron- plan then be that if any single disk fail include -pron- could be the parrot bit then -pron- can easily re compute the las datum just by x solve all of the bit of the remain bit and -pron- be go to be cheap than raid one because i can now have for example for datum disk cape",
    "that much bad than just buy individual disk in this case the cost be just the additional cost discuss be go to be the cost of one extra disk but amortize over the four other disk so most at about eight twenty five percent extra cost per megabyte right one disadvantage be that that every time -pron- want to write down a block of datum -pron- must write to disparity disk so come back right so there be a potential go back there -pron- go get -pron- pen working right so -pron- have always get to be update this disparity block which mean",
    "the usual become the major performance bottleneck here which be that -pron- be -pron- be stress out -pron- poor parity disk all the time as i every time i do a right so all the disk be in use -pron- have in this little example here then i would imagine that -pron- paraty bit here be just just look at nibble half bite -pron- can see and -pron- be take each each nibble that -pron- want to store -pron- be distribute -pron- across all of -pron- disc ok and there be -pron- check disk at the end so in the first nibble or word that -pron- be try to store then -pron- can see the paraty of this be already even so i write to zero and simply the next one the paraty",
    "and then the last one be also ought so -pron- can kind of fill that in so -pron- will see that for every word that -pron- have write to the disk be now separate out cost be partition across all disk and -pron- have get the parrot information ok so now here be the exciting moment let -pron- suppose that ok yeah ok so so these right so actually do i say be already even -pron- be in fact there -pron- go so in this case ok if i up want to update this this word here then i also need to update the parrot information as well ok so any kind of update that change the paraty information mean -pron- need to update the check disk ok so then a small nuclear explosion happen on one of -pron- disc right but -pron- say hurrah i can actually",
    "the datum back from all the other disk and -pron- can re calculate the last datum use the parity code and then of course -pron- can rebuild the datum so i can buy purchase -pron- disk and carry on as before so whilst -pron- be do this while -pron- be rebuild the raid the raid the raid array -pron- can continue to use these disk drive -pron- enterprise service -pron- website whatever -pron- be can continue to function however of course the amount of disk io that i can use be now reduce because these disc be very busy pull out all of the old datum in order to recalculate the parrot information in order to recalculate the lose datum also notice that -pron- scheme be only go to work provide -pron- -pron- lose at most one disc ok so -pron- can tolerate a single disk ok so provide that -pron- do not lose a second disk whilst",
    "say have a second failure right so let -pron- calculate this with the kind of typical example let -pron- imagine that -pron- have now get ten disk and the way and that give -pron- a mean lifetime to failure for the holder way of about a thousand day so so if -pron- take about one day to rebuild the array then the chance of a second failure then be one in a thousand so key what have i miss out oh yeah so the so -pron- have get one day but -pron- have get a thousand",
    "-pron- say be a thousand day oh yeah so so let -pron- just three day that be yeah three year but the time but -pron- do not care about the mean time to failure for just one disk -pron- could be any of the remaining disk so that be why there be this additional factor of nine in here which be ok so there be a chance that any one of these disk could fail of the remain nine disc so plug that in give -pron- a factor of about one percent ok so the one percent chance that i may get a second failure so in which point do -pron- feel lucky punk and bad be that this actually probably a minimum estimate because there be two factor fight against -pron- first of all -pron- could be that the same manufacturing defect that lead to",
    "disk inside the same way fair that the similar time all of these disk have be experience the same temperature variation be the same humidity variation the same electrical variation the same work variation and so if -pron- have reach a stress point -pron- be probably that time for another drive to fail in a similar manner perhaps like bathing will finally go past incapacity will finally blow so this assumption of independent failure rate be extremely suspect and of course disk -pron- -pron- probably purchase at the same time -pron- probably come off the same manufacturing line as well a second comment here be that in rebuild the array now -pron- be make -pron- disk great work much hard than normal -pron- be currently try to read all of -pron- datum whilst also service -pron- standard load of whatever web application or data boat at",
    "ever before because -pron- simply stress -pron- skateboarder so there be one component be likely much more likely to fail at this moment -pron- be go to see for example increase heat increase mechanical movement so again this one percent be probably a big underestimation about the likelihood of failure ok so can -pron- do well than make three yeah let -pron- talk about kind of raid five raid five and raid six or kind of some of those standard raid that -pron- use today -pron- be not go to go into full detail of grateful life -pron- will just mention some highlight first of all -pron- no long strike just use single byte and look into bit -pron- actually now have much large check block which reduce the can increase of performance",
    "-pron- datum on a single disk for example but -pron- still have the idea of store a paraty information -pron- be just rather than pudde that party information inside a single special specialized disk -pron- can now distribute -pron- across -pron- away so these check block these be parrot information here for different different datum block will be store on different disk so this actually open up the ability to have well performance and avoid the bottleneck of always have to use the same disk for store the check datum the parity datum ok before i before i finish on for finnish on rate -pron- will mention that this be not the whole story today people use kind of cluster rate so -pron- will see thing like i will have raid one plus zero for example where i may have",
    "and then i will build up a raise of those of those disk as if -pron- mirror -pron- be single disk other people go the other way or who make zero plus one but -pron- be quite common instant try to say look if -pron- be go to mirror mirror some bite across two disc then i may put -pron- in separate enclosure so that if there be water damage if the roof fail if the pipe leak or electrical take out just one of -pron- disk enclosure at least as a good chance that all of -pron- data be still available inside -pron- other enclosure another final comment on raid be that -pron- be not a backup solution as -pron- can see be the purpose of raid be to be able to cope with disk failure and still have storage mechanism which will remain online there be always",
    "just take out all of -pron- disk in one go at which point -pron- better have a large backup system in place ready to recover all of -pron- datum alright so with that in mind let -pron- go and look at a big idea about how -pron- can distribute stored datum if -pron- be a little large than say just a small start - up operation so think about for example gmail and google so this be the kind of quote from one of people work at google say hey -pron- know -pron- have a large storage system when -pron- get page at one o'clock in the morning to say -pron- only have a few petabyte of storage leave not a problem that -pron- have ever have have to worry about early have a petabyte of datum leave bit petabyte of storage leave so these be the kind of number that if -pron- be work in a large enterprise",
    "require more than one geographic location ok so let -pron- think about this let -pron- imagine that -pron- want to start a little startup which be go to grow to the size of google how would -pron- design a file system to service all of googles app stand out all of these application everything from gmail to doc to -pron- website etc to -pron- web serve -pron- need a file system to represent all this how do -pron- make -pron- resilient ok so any other side of google then failure be not an option -pron- be the common case so disk fail all the time and physical disk fail be typically between one and ten percent so -pron- be a full more than the full time job just simply replace all those disk which be fail and in a single data warehouse -pron- may",
    "replace those be a full time job but -pron- want -pron- file system to be up -pron- would be embarrassing to say excuse -pron- moment google have to be down for a day or two -pron- need an extremely reliable file system without that file system -pron- can not do anything else so -pron- need to realize of failure mode go beyond just reduce go beyond just lose one or two disc inside a single rate so for example -pron- need to design a system -pron- can survive not just a fairly of a single disk but the failure of a whole rack of server or even a whole light of a whole data center perhaps two the two fiber line that be run out on either side of the building both simultaneously get attack by say earthquake or mechanical dig device there be lot of reason why suddenly -pron- datum center may not be available to the rest of the world maybe",
    "how can -pron- build a distribute storage mechanism that service the whole world ok so here be how google approach -pron- back in two thousand and one -pron- use simple redundancy so around the world have kind of two or three copy of each file today the file system be similar to kind of raid design except that -pron- use there -pron- go reed solomon code so reed solomon code -pron- crop up actually in different interesting place inside computer site one of -pron- most first use mass market use be actually with compact disc with cds here be a wonderful thing about reed solomon code that -pron- can -pron- mathematical code and -pron- can choose -pron- in term of -pron- redundancy of information that -pron- be prepared to accept so -pron- can choose -pron-",
    "code and reed solomon code work very well when there be a miss block of datum so -pron- idea be not just to say oh i have some parity information but that i can be extend period of datum miss so for example in this case -pron- have just kind of take out the middle part of this block i still can recover the original bit that this block of datum represent so this be great for cds because i actually may have a physical error on part of the disk surface which prevent -pron- from read a small contiguous set of bit here and yet -pron- be able to recover the whole set of bit from -pron- original datum simple idea with space communication if i want to talk to a probe on the moon or further then electromagnetic noise and other"
  ],
  "bca931a7-24de-4925-b5d1-9bfa74828e0c": [
    "ok right so let -pron- talk about what what be a mutex mutex be the key thing that -pron- need in order to implement critical section if -pron- think about -pron- code from moment where -pron- critic section be basically where -pron- want to do surgery on a data structure that moment -pron- only want one surgeon in the room most of the time -pron- thread can be busy say work on the sound another one could be work on the ui another one could be talk to the web but at some point -pron- need to come together and say send message over datum bus or some other kind of event structure so when -pron- manipulate that structure only one of -pron- should be change at a time ok so that -pron- have identify a critical section and now -pron- need to make sure that if one thread be currently do that then other thread get temporarily block put on pause if -pron- like whilst -pron- be in that critical piece of code and the key to do that then be this text add a mutex be actually go back there right actually"
  ],
  "bcc2191c-ce75-4441-b029-c038282b1677": [
    "ok so let -pron- talk about some virtual file -pron- have see already slash proc as a way to actually look inside -pron- process be remember these file -pron- see inside there be not real the kernel be lie to -pron- just generate directory listing and file content on the fly so let -pron- have a look at all of these file that do not really exist -pron- be go to look at the amount of entropy available to the kernel and this entropy be use to generate true random number so rather than use just a simple kind of pseudo random number generator if -pron- capture thing like the relative timing of different io event for example there may be network event there may be event of and interrupt from disk that may be keyboard typing event then -pron- can assume that the relative time link of these event be somewhat random and so let -pron- use that as a basis for generate number",
    "well there be two way and -pron- be go to look at two two file which have an infinite length because -pron- be just a source excuse -pron- right and -pron- be go to look at the difference between random and urandom so that be go to have a look at these odd device random random queso score for -pron- i need right so first of all let -pron- see what -pron- say when i look inside proc that be be a bit slow comeback ok proc sys think -pron- be colonel or random next let -pron- see yeah should be colonel and side random entropy available do i not have good internet oh no -pron- be ok let -pron- try once",
    "ok there -pron- go find -pron- right so i get four hundred and seven byte of soap hundred and seven bit of entropy available so let -pron- use that let -pron- use that to generate some random number ok so let -pron- do hex dump of slash dev slash random so this be go to generate as many number as -pron- canon hexdump will print -pron- out one word at a time here and if -pron- do not have enough entropy available then -pron- block until there be some entropy available so -pron- will see that with -pron- four hundred and seven bit that be what about fifty bite or about kind of a hundred",
    "the entropy so in fact -pron- look i ask the kernel again without a twelve bit of entropy right now so -pron- can not print anything ok so dev random be great when -pron- want a secure stream of random number but realize that -pron- be a very limited stream -pron- can not just keep ask for megabyte of datum from that so use -pron- wisely user just a small amount of -pron- otherwise -pron- will be block wait for more interpret to appear if -pron- be random need less less strict perhaps -pron- do not need to kind of be generate secret for encryption key for example then -pron- can use slash dev slash view random and urandom do not block so will keep generate for -pron- to a whole lot of random number still base on some of the secure entropy of the system however there be no requirement for -pron- to be cryptographically secure",
    "make a system on some device which boot up like a small router or something and there be very little entropy in the system so -pron- decide to use urandom well that mean now that an adversary may under some circumstance if -pron- really understand -pron- system and which version of the kernel -pron- use etc etc etc may stand a chance of be able to workout what -pron- urandom number be or at least severely limit guess as to what input -pron- have -pron- cryptographic system and therefore may be able to breakdown -pron- encryption system so urandom be great for when -pron- just need number but -pron- be not worried about kind of robust random under which -pron- can put into",
    "ok this so let -pron- break -pron- break -pron- break -pron- break -pron- stop right so let -pron- go back to just look at there -pron- go right to random and say why -pron- be to give any more datum so -pron- need to increase the amount of entropy in -pron- system i could do that by generate say network packet by by send some io so let -pron- send some network packet ok so here be -pron- on another terminal -pron- be go to send a whole load of network packet by just kind of randomly type for a little while so this should be increase the entropy of -pron- system but would have put up with arbiter right -pron- could do ls -pron- could say to a cd -pron- can cause hopefully some more network packet i could say find and take all the output and put -pron- into case so i want to take all"
  ],
  "bddf8fc1-9916-4a07-9b3c-a5e00e0c780e": [
    "ok right so let -pron- analyze this challenge ok so -pron- have get a global variable call firework here and inside -pron- main method -pron- be go to do -pron- be go to create a whole load of pizza -pron- be ok and make a note of -pron- thread i ds pass in the firework function ok and then after -pron- have do that -pron- will set firework equal to one and then will call precondition signal so -pron- know that be go to wake up one thread now -pron- want to wait for all thread to finish here so i could write a for loop to call p thread join on all of -pron- thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that -pron- never return from maine so i could call p thread exit here key right so great -pron- have implement that now actually let -pron- have to think about how -pron- can implement the firework right so what do r firework do k right well",
    "for for sure have so -pron- have get -pron- have get the mutex lock and all thread that run this code again to acquire the same lock and then -pron- say well while firework be zero corporate recognition weight in other word if -pron- firework thread start up here and -pron- start up early then -pron- be just go to block -pron- for but -pron- be go to ask -pron- to release the mutex lock and lock inside here so go back to the kind of first code remember -pron- create all of the thread initially back when be firework variable with zero -pron- be only after -pron- have create all five well -pron- say ok now -pron- be time for the firework ok so let -pron- get down here ok right so what do -pron- do after this point ok when -pron- escape out of here where a scaping",
    "zero and the very first thing -pron- do be call p three condition broadcast in other word re that fire bell wake everybody up in this may be sleep inside this condition variable ok so now all five of -pron- thread definitely work up ok so i implement increment the value of firework i print out oh and that value and then i decrement -pron- ok so what be go to be the large value this code will print one two three four five six what do -pron- think so just as a reminder -pron- have get five thread run this and the only way -pron- can escape out of this code be after firework be no long zero so what be the maximum possible value that -pron- may see from this first to run this hundred or thousand to a million time what be the large integer that would expect here ok so think about that pause this video and make -pron-",
    "think about this for five second and then -pron- will review the answer ok wait time up so let -pron- let -pron- have a look at the key key detail here the key detail be a mutex lock -pron- mutex lock allow -pron- to reason strongly about the number of thread which be actually run in this code because -pron- have acquire mutex lock mean that any other thread that want to run have to also require -pron- so all of these line of code can only be run by one thread at a time if the thread have go to sleep inside p thread condition wait there only allow to escape out of that after -pron- reacquire the mutex log so that be the key idea that only one third of the time can be run this piece of code and -pron- allow -pron- to actually reason about",
    "first thread will see of firework value of one because -pron- change -pron- upstairs in the main method so -pron- implement so -pron- increment -pron- to two case of wig the first escape out of here will will print out too and then -pron- decrement -pron- down to one again and then -pron- unlock the mutex ok so the next step that come out of here will only escape out of p three condition wait after -pron- have unlock the mutex so -pron- will also see a value of firework of one -pron- also do a big forecast wake everybody up and most be too and so -pron- will print out the value of two etc right and so on the next thread will come out check the condition for the while loop ok that be no longer true so -pron- come to an do the same thing increment -pron- from one to two and then two to one and then unlock the mutex which allow the next set to escape -pron- check the value and so on",
    "to kind of prove -pron- right so -pron- have ok compile -pron- eh why be -pron- machine slow ok there -pron- go -pron- get out all right and -pron- see every firework every thread wanna see the value of two and -pron- could do that through this strong reasoning thank to the mutex log ok wait a couple of quick question be why do -pron- see all the firework go well remember -pron- work up one of -pron- here and then that far work be not man work up the rest now do -pron- have any possible race condition here yes -pron- do so -pron- actually just talk about a version of this in the previous video that there be a small race condition small possibility that these two line of code here can i move that over or to keep throw box right when i change the value folk and then i call peter condition that could happen",
    "right inside there if that just that moment in time then what be go to happen -pron- have actually call precondition signal but no thread be yet sleep no thread be yet block inside condition wait ok so be to fix for that and the answer be to actually log on the same mutex here so if i call pete say mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread be acquire mutex or after the all the thread have call pizza hut or so at least at least a threat be currently get mutex will then call pre take additional weight",
    "the mutex and then -pron- get to run as well another thing this code be kind of highlight be that that -pron- can create thread but peter create do not wait for -pron- to actually start so this this code be an attempt to say ok let -pron- create all these thread and actually -pron- be go to make -pron- own barrier inside here so -pron- will not let anybody go until -pron- have actually create or five thread and also kind of start up so but this line of actually change the firework to one here could still actually technically occur before this five thread of actually start all -pron- have just simply say be to say ok create -pron- and at some point in the future please run alright so lot of interesting interleaving"
  ],
  "bfc28ac1-7f97-42f4-ae46-fb91930b68f6": [
    "ok so -pron- game be to determine be that deadlock here right so let -pron- sketch this out -pron- will start with some black just to put down -pron- process be so -pron- have get process one process to process three and this time a process four be well ok right process one get a then be right so -pron- get a an b lucky process one and -pron- can see that there be no more request for process once so in fact process one will be able to complete -pron- do not need to wait for anything else so i could keep those there but -pron- can agree that at some point those be go to disappear but right now -pron- have not actually formally say that -pron- have be release so -pron- will leave those there for now and then process to request see and then be right so purse two request see",
    "have see whoop -pron- hour away go back there -pron- go like -pron- go push this to -pron- get to see today but -pron- be not go to give -pron- be so let -pron- do that in a different color because that be already take so alright process two oh i want i want to read out just so -pron- can kind of keep track of there -pron- go here -pron- go process two -pron- be wait for that ok and now what about process three person three -pron- request be as well oh my goodness be or popular today wait so will draw that in right process three there -pron- go -pron- be wait for that as well and process for -pron- request see ok so -pron- want see k and -pron- will be request be in the future but",
    "right so be there deadlock well process one can continue as -pron- mention that before so at some point in the future process one can release those resource ok so what happen next so now process two -pron- set -pron- lock be go to be so the access to this be go to be fair and so process two -pron- ask first ok so the so now will swap that around and -pron- get to eat the chocolate ok there -pron- go alright so now process two have everything -pron- need ok so ok so now process two at some point can continue -pron- not wait for anything so now finally -pron- can see that process three will get be ok so that will be assign that way ok and finally that will end up and then finally"
  ],
  "c13af5c8-7804-4b6a-ab8f-1f0d32ac4c29": [
    "hi ok so let -pron- talk about critical section of function which be not necessarily thread safe in term of -pron- implementation so here be a little example base on some real code where -pron- want to be able to internally log error so -pron- do not want to display -pron- to the console now -pron- actually want to store -pron- on some file so let -pron- have a quick look to see how -pron- work so when -pron- call -pron- log error function -pron- take an error number some integer and an optional message which eventually -pron- be go to save to a file so -pron- will see down here -pron- call f printf -pron- be go to store -pron- in this file handle when -pron- have just get a string of the message and some error string as well and then finally let -pron- flush that as well so -pron- be actually definitely write out of the file ok now let -pron- look at some of the other detail first of all notice that -pron- lazily open the file handle so if -pron- -pron- file up here be null so if not file then that be when",
    "-pron- a file call error log dot text and i want to append so if there be any other content down there let -pron- zip to the end of the file first ok so if two thread be call this at the same time -pron- could imagine where an interleaving of instruction where both thread see value of null because -pron- have not open the file yet so both thread decide to call f open and then write that result into the single file handle the global variable there so that would not be great -pron- only want one thread to ever call ever open so that be certainly a critical section the time between actually test whether -pron- be null and change -pron- -pron- do not -pron- do not want to be interrupt during those time there be a second question in here as well however which be how do -pron- generate a character",
    "i wonder if this be safe to call for multiple thread at the same time and of course one of the reason that -pron- kind of suspicious about this be because -pron- take an inch return a character pointer and -pron- do not look like -pron- need to free that character pointer so i wonder if -pron- be go to internally use some static memory or something so warm way to find that out on a lennox machine be to go and check the thread safety of the function that -pron- actually use so i want to mac right now so i pull up the lyric version of stuart error and will see a couple surprising thing first of all there be a whole lot of additional version with under school be underneath and -pron- will may be useful to -pron- in the future but i right now i just want to kind of scroll down and -pron- will see something down here that talk about",
    "unsafe there -pron- go right so -pron- be not safe to be call by multiple threat at the same time right so how do -pron- fix this well one option of course be to use these other version to underscore art another be to use lock so for example -pron- could use -pron- mutex lock to lock a mutex at the beginning and unlock -pron- at the end so if -pron- want to make sure that i know of thread could also effort therefore flush at the same time to -pron- file then i would unlock afterwards so that would be one way to look at the beginning unlock one thing -pron- 'd be concern about though be that though i be sure to capture error"
  ],
  "c277c266-d1b9-4670-92b6-d06d4a8cee3f": [
    "ok great i welcome to like twenty eight so let -pron- get start -pron- be go to look a little bit more at -pron- file system representation and then dive into stat and how -pron- be go to have hard link and symbolic to -pron- file so just as a kind of quick warmup remember -pron- be play with the model of the e x two two file system and -pron- i node be the file i can not create a file in this -pron- have actually get i know entry and -pron- be go to have will say ten entry inside -pron- i know directly to the first ten disk block use by -pron- file so in otherwise i could hold forty kb there and then i also have inside the i node that this block which hold a table with a thousand twenty four entry and then another entry side the i node for -pron- double interact an another entry for the really large file which be actually go to be a triple indirect in those for the triple",
    "where the data be store but even for very large file the beginning of the file be always store in these direct block so that -pron- have nice fast access to those ok right so let -pron- kind of run through this remember that -pron- disk be when i format -pron- -pron- have format -pron- into a super block and i may have copy of that to the rest of the rest of the disk for backup purpose have a space set aside for i node and the rest of the space be go to be use for the actual file and any indirect block that -pron- need to store okie sue this will look at -pron- quick first question for x two with four kilobyte block at thirty two bit address watson maximum size be disk that -pron- can support well the idea for this question be not about the indirect and double in triple indirect -pron- be more the fact that if i want to say to the disk hey disc actually",
    "pass in a number which be bound by thirty two bit address scheme so -pron- have get two to thirty two possible dis block i could request and each one be four kb so if -pron- do the math here and i think i do -pron- in a previous lecture here that be remember the two to the thirty two how can i think about that well two to the ten be anybody know be about a thousand thousand and twenty four ok so two of the thirty two be actually two to the ten time two to the ten time two to ten time ten time two to the two ok so now -pron- can see that -pron- be go to change -pron- unit from kilobyte to megabyte to gigabyte to terabyte queso terabyte and then -pron- have just get this two of the two time the original four so in other word i can support up to sixteen terabyte",
    "ok so let -pron- have a look at the follow question then so if each -pron- 'd entry be fix size always a hundred and twenty eight byte and -pron- have when i format -pron- disk i say please put a size sixty four kb for the i node away in the word the space up here there -pron- go how many -pron- know can not actually store right so -pron- in other word -pron- need to do sixty four gigabyte sixty four kb divide by a hundred and twenty eight ok so the reason i do this one be just kind of point outlook -pron- should be able to these quick back of the envelope calculation so here be one way to do this let -pron- convert this into two to the n format right so what be sixty four kb well sixty four be write sixty four be two to the six and -pron- have get kilobyte in other word this this be two to the sixteen",
    "so subtract -pron- exponent and -pron- have get two to the nine in other word -pron- have get enough space to store five hundred and twelve i note ok what do that mean that mean that -pron- have only get enough space to store five hundred twelve file in -pron- disk ok that be probably mean that -pron- original choice only put aside sixty four kb for the inotes base be a little bit a little bit too small i only get to store five twelve file on this disk -pron- better be very very large file ok so probably want to reformat that and put aside more space also go to need inote as -pron- will see in a moment to actually represent directory be as well ok right so what be the last question -pron- want to work on here for xt two how large can of rb before triple indirect block be require ok so to answer this one -pron- mean -pron- be",
    "so -pron- indirect block -pron- be four kb but -pron- be use thirty two bit address so that mean each one of those entry here be go to be a number which take four byte for -pron- thirty two bit ok so for -pron- four kb block here that mean i can have a thousand and twenty four number in other word i can reference a thousand and twenty fourth datum block which mean that -pron- have get four kilobyte which mean for each block which mean -pron- have get four megabyte of datum here for -pron- direct for -pron- first indirect and then for double indirect each one of those thousand twenty four entry -pron- -pron- can actually talk to or describe so thousand and twenty four datum",
    "do do do do do -pron- to do right so this be go to be a four megabyte of datum for megabyte of datum etc etc ok so in total that be go to be four gigabyte of datum i get thousand twenty four -pron- in other word the large file i can store before i need to start use triple indirect addressing be go to be forty kb plus four megabyte plus four gigabyte an i could turn that into a an actual number of byte if i really want to ok so a quick comment be so far -pron- have be use lg k here for kilobyte mean that -pron- unit be be base on two to the ten another thousand twenty four this manufacturer however tend to would like to maximize the apparent number of byte that -pron- be sell -pron- so -pron- use a different",
    "in other word in multiple of a thousand so -pron- the correct way to write this today be to put a little small i after this for example like a kilobyte would mean one thousand byte or a megabyte so that would be a million byte as in one zero zero zero zero zero zero byte however -pron- do not be surprised if -pron- be the marketing material the disk manufacturer conveniently forget to write the small i hear also if -pron- be buy a modem -pron- want to talk about bit then if -pron- be talk about say megabit per second the small b be use to represent bit not byte so just watch out for those kind of little gotcha there and do not be surprised in the marketing material",
    "now here be a useful little command get cwd notice that be right -pron- tell -pron- the process be current working directory which be go to be useful if -pron- want to work with relative directory and in fact path in -pron- system of define to have a maximum length so -pron- can be confident that the string that -pron- can request can never be large than this constant here path max and -pron- add one just to ensure that there be enough space for the c stre zero bite at the end ok so if -pron- want to know how where -pron- currently on file system here be one way to do -pron- right so that be a limitation of function here so in fact if i type c w p w for present working directory that",
    "can either pass in some space or -pron- can pass in null and -pron- will allocate -pron- on on the heap in general then if -pron- want to work with kind of path then -pron- can use this constant which be actually part of the kernel but provide by the c library to assure that -pron- c string be always of sufficient size right so now let -pron- actually start work with directory -pron- would be great if for example -pron- could enumerate all file inside a directory and -pron- can here be the kind of big idea that a directory be actually just a file but there be a couple of thing special about -pron- first of all inside of file all -pron- all -pron- would find if -pron- actually open -pron-",
    "find a whole lot of entry do not look like this -pron- would find a name and and i know number and then another name and then another i know number so that be all the directory be comprise of just a set of name and map in each day matt too and i know number so normally -pron- do not actually open the directory as a binary file but -pron- could -pron- could actually look at these entry and if -pron- know exactly how this be store inside the file then -pron- could extract this datum -pron- but that be the big idea that be all the directory be of course most of the time -pron- do not actually print the i node number but -pron- could if -pron- really want to so let -pron- have a look to see how -pron- can do this in c in fact these see libra give a list of level of abstraction here and -pron- be very easy to use -pron- call open be that",
    "directory and then -pron- can keep call reader to read the next entry ok so when -pron- do that -pron- get a pointer back to this little directory entry structure and -pron- be a very simple structure in fact -pron- only have two entry -pron- have name and the i node number so if -pron- want to print out the i node number -pron- can say ok dp tell -pron- the i node number just i know so that be all -pron- can do and -pron- just put -pron- in a loop and -pron- can iterate through the directory and the name -pron- will not be the full path -pron- may just be for example say the short name like hey -pron- have get to something like program dot c for example so here be a little bit of code then that actually look",
    "why do -pron- crash ok alright bye -pron- right so just the pen -pron- be work good right so -pron- be just look to see if a particular file name exist inside the current directory and what -pron- turn what otherwise let -pron- return zero so what do -pron- think about this code can -pron- spot any mistake in -pron- ok so hopefully -pron- system program a alarm bell go off because the problem with this code be that there be a path of execution where -pron- forget to close the current directory so if -pron- do find the name that -pron- be look for -pron- return one -pron- never actually execute this",
    "security problem that -pron- may work once or twice or ten time but -pron- be leave a file descriptor open and eventually will run out of spare far descriptor for process and then open file or calling open be will not work in the future -pron- do not have any spare file descriptor leave ok the other thing that -pron- may comment on if -pron- be do a code review instead open a could fail so if this return null for example there be no current directory 's kind of a little bit bizarre but -pron- could imagine that happen for example someone be delete the current direct current directory then this open durcal would return null so -pron- be not actually check for that ok and by the way in case -pron- do not notice look -pron- be do this trick to hear to say ok i know that -pron- have finish read the current directory when this be call to read return null",
    "to fight but the big idea here be that -pron- do not clean up -pron- -pron- do not always release resource so always check -pron- code -pron- system programming code to make sure that in all code path particularly error code path -pron- have release resource as soon as -pron- finish use -pron- ok and this will correspond to file descriptor to memory to any other resource to tcp socket etc etc etc right ok so let -pron- have a look at this actually -pron- have get a demo somewhere here -pron- be right and in this demo -pron- be go to implement a version of ls that be go to read a directory and also not only print out the name but print out the i node number as well so i want to make -pron- code be somewhat cross platform as -pron- be just bring -pron- out -pron- be go to assume that this i know number be at least unsigned be no",
    "-pron- be just print out the number anyway so let -pron- just cast -pron- i would not claim that this be kind of completely portable be bus bulletproof code because maybe on some system and i know -pron- may be a have a large representation far than a simple long ok right so let -pron- compile this directory list ki so gcc directory list kate as well -pron- and -pron- have get little usage thing here so let -pron- see if -pron- give -pron- an argument or not and ok so let -pron- say alright -pron- 'd like to list a kind directory and where hey off -pron- go right so -pron- can see -pron- be happily print out directory name and i know number and",
    "number ok so -pron- have get now a program that be behave a little bit like ls when i type ele -pron- print out the name in fact i can say hey this please tell -pron- the unknown number i think -pron- be minus i and there -pron- go -pron- can see now the i node number associate with each file hopefully this be go to be the same as yet eight three four twenty for -pron- actual program here and if i wish i could say to ls ok please actually do -pron- in a format where -pron- be one per per per line the other thing -pron- may notice however be that in -pron- program -pron- print out two extra yeah so actually -pron- turn out that for every directory -pron- actually get to entry for free -pron- always get the current directory and -pron- always get the parent directory as well so -pron- be always",
    "file so let -pron- call -pron- dot secret and -pron- will just have a secret piece of information in here like banana ok i do ls -pron- will not see -pron- secret file but -pron- program or -pron- program will actually print out actually list so what else do by default be not print any file out which start with a dot -pron- can however say ok let -pron- tell -pron- everything right now i want also also so now i can see that ok there really be a file call dot secret and i can really see when -pron- be modify and who own -pron- and all that good stuff and i can see that what permission i have so i have read write permission the group have read everybody else have read and -pron- be a regular file versus these two entry be actually directly -pron-"
  ],
  "c4e34ebf-4fec-4220-80f0-55bff9d28117": [
    "hi so let -pron- have a look at some race condition and -pron- will check to see if -pron- can actually make these race condition occur and then maybe -pron- can figure out how to use -pron- mutex lock to fix -pron- right so here be a story so far -pron- have get -pron- little main method do not do much -pron- create irwan thread here for under one and another thread for two ok then -pron- run for five second then -pron- set a global flag code please stop ok and then inside -pron- main method i just wait for both to finish before return so that be -pron- main method nothing to -pron- there be go to have a look at these two little runner thread here ok so here -pron- go first of all let -pron- look at run a one do not do much -pron- be get -pron- own little account while this variable please stop be still zero -pron- cause a helpful function here call two text message look like -pron- be go to spam angry with a lot of message",
    "even illinois number one for some reason right and then -pron- will do something with the result so what do -pron- do with the result -pron- get back character and -pron- just print out so -pron- be go to print out a number that be just -pron- counter and then will print out that message alright so -pron- expect to see some message involve an grove and illinois meanwhile i have another thread that do not print anything all -pron- do -pron- just call two text message at the same time so let -pron- see if -pron- run into any problem here because -pron- look like this be a completely useless thread right -pron- do not actually do anything with the result -pron- just keep on call text message so -pron- question to this be problem be -pron- go to run into any kind of critical section here can -pron- find any race condition to answer that -pron- actually need to understand more about two",
    "-pron- never free so i that be appoint to some global memory or like a static variable or this be generate billion of million of bit of heap memory that -pron- never free so let -pron- go see look at -pron- implementation ok so -pron- go right so here be -pron- implementation of two text message and -pron- will notice that up above this -pron- have get a couple of global variable here -pron- have get one call message that take up to two hundred character and there be -pron- kind of please stop as well right so let -pron- have lot of all -pron- do ok take a two and a form and some value ok right so -pron- call s printf so s printf be like printf but what -pron- do be -pron- push the result into some memory so here be where -pron- be",
    "memory so remember that global memory be only one of -pron- exist for the entire time with -pron- process and so -pron- be go to write the following into that memory ok and -pron- look like -pron- be go to tell angry that -pron- be win a million dollar woo so that mean -pron- have two thread call this at the same time so let -pron- first of all see what happen when -pron- do that ok and remember that -pron- main program cause run a one after two second -pron- start runner two so off -pron- go right so let -pron- run this -pron- have compile -pron- with piv -pron- support and so -pron- start spamme angrave with a million dollar and oh hold on a moment what be this dinosaur business that should never appear remember -pron- second -pron- other thread do not actually do anything with the result instead",
    "see that these two thread be be interact in a way that -pron- do not want to happen right the string that -pron- be use down here have be corrupt by the other thread now hopefully this be probably obvious as to why this be happen that the two call to text message from other one another two both end up write into the same piece of memory so let -pron- just talk about how -pron- may try to fix -pron- so one possibility be -pron- may say well what if i make this static ok that be not go to help all -pron- have do be change the visibility of this variable be still only go to be one of -pron- be just that now only the code inside this dot c file this compilation unit will actually be able to refer to this particular variable so how about i move -pron- into the actual method so",
    "the stack and that be not valid memory to use after -pron- return so -pron- may appear to work but there be no guarantee that that memory be go to remain good after -pron- return from two text motor two text message so next time i try to say ok let -pron- try static here well ok so now what -pron- have do -pron- have just make a global variable again but this time -pron- be yes -pron- exist for the lifetime of the process but now the scope of -pron- the ability to refer to this particular variable be now just limited to any code that -pron- write inside this particular function right sort of static be say ok this be not go to live on the stack so if -pron- do that -pron- be still go to break -pron- be still go to see dinosaur win money so -pron- will just prove that so after two second oh -pron- see that -pron- be corrupt -pron- message so yes both",
    "what else could -pron- try well -pron- could change -pron- text message to actually return some memory so i could say get -pron- some some heap memory so i could say ok -pron- love -pron- some memory here that would work -pron- now have to update the rest of -pron- program to make sure -pron- free that memory the downside however be performance that if i i really care about this being as fast as possible always allocate more memory for a result may be fire in -pron- c plus plus program but if -pron- truly care about good performance call malloc every time -pron- want to do this be go to be slow right so what can -pron- do well one option be to declare that this use of this message be part of a critical section and",
    "be -pron- be not just -pron- be not just in here where -pron- right into the memory and return -pron- -pron- be all the time between when -pron- write into the memory and then -pron- actually use the content so if -pron- be to look at -pron- program that would actually be right here where -pron- get the result from to text message and then -pron- actually use -pron- so -pron- actually when print f run and take the sequence of byte at memory location right so that be the first part of -pron- critical section the other be when -pron- also want to overwrite -pron- so that will be inside here -pron- do not want these two piece of code run at the same time ok so how can -pron- do that and so a mutabal the music 's let -pron- get -pron- mutex to rescue this code all right and make sure that only angrave win a million dollar and jurassic park never see -pron- money ok",
    "so i can do that i can do that in -pron- main here right so -pron- will say pthread mutex initiate alright and i need to initialize -pron- mutex so -pron- will call -pron- a duck quack quack and i do not need anything special with -pron- doctor day ok what i need to do be make sure -pron- be initialize ok so that be one way to do -pron- now other way be if -pron- be -pron- remember be to say wait let -pron- have the type up here ok here be -pron- deck and case point -pron- and i can say pthread mutex initializer so that do the same thing initializer ok so if i do that then i get can actually skip there ok i need -pron- ok let -pron- just delete -pron- right ok so -pron- have",
    "to say ok -pron- can not come in right now and where should i put that well -pron- identify the critical section so the start an entity point of those point be go to be where -pron- want to lock the dark and unlock the duck literally like a gatekeeper so -pron- want to say peer mutex lock here be -pron- duck ok and ok so and then after that unlock -pron- wait and similarly with the other thread runner -pron- want to lock -pron- and then only allow other thread to modify that memory after -pron- finish use -pron- so after printf have return ok so let -pron- give that a whirl if -pron- got to type sweat queso will clear this compile -pron- all right -pron- have get ok -pron- need -pron- not include p thread yet yes -pron- have k what about do incompatible into pointer conversion",
    "ok so let -pron- give that a whirl anne now will see that -pron- have get to change -pron- type too the address of a duck ok ok right so now -pron- want after two second -pron- start create dinosaur message but -pron- can see -pron- no long impact -pron- text message so great -pron- have write -pron- first program use a mutex lock -pron- use -pron- after -pron- identify the critical section and when -pron- implement -pron- correctly -pron- can ensure that there be no more race condition in -pron- code alright one last question for -pron- what do -pron- think would happen if i say -pron-",
    "code now -pron- have get -pron- two runner switch have to potentially wait for each other as a contention for this lock that if i want to call two text message over here and two text message over there then one of -pron- will have to wait until the dot get unlocked again so -pron- be go to speed up -pron- code by by have say a duck and let -pron- have another mutex i will call this one a banana ok right and now when i want to -pron- dinah 's little text message to be create -pron- be go to use this other mutex lock ok so what do -pron- think about that before -pron- get up to see like two hundred thousand message so let -pron- run this now and oh"
  ],
  "c62f6568-fa2b-4be3-9e27-5e119359489e": [
    "hi so let -pron- look at the four condition of deadlock an as -pron- know these -pron- call the coffman condition ok right who originally identify -pron- and as -pron- know -pron- be necessary and sufficient -pron- need all fall to be true and exactly or for -pron- to be true and then -pron- know that -pron- have meet the condition for deadlock so what be -pron- let -pron- actually look at some definition here so here be the first wanna process be currently hold at least one resource and request additional resource which be be hold by other process ok so -pron- be hold and wait so that be a hold and wait condition ok if -pron- process be all thread only need to actually hold on to say just one mutex lock at a time that deadlock would be impossible ok so that be how hold and wait right there be a set of wait process be such that",
    "wait right p three and so on until -pron- get back to p r p one ok so this be -pron- circular wait or cycle in the wait for graph and the process or thread wait for graph also know as the resource allocation graph so let -pron- write that out carefully resource allocation graph ok right and the next one a resource can be release only voluntarily by the press be hold -pron- after that process be complete this task and in other word -pron- can not say hey little johnny pull down that those pencil put down that paper ok so this be no pre emption"
  ],
  "c6d33883-2388-4db3-8817-93586fd5f883": [
    "ok right so here be a big idea that the idea of say tell -pron- about the statistic of the information about a file basically -pron- be read the representation of the i node entry of a file be just that -pron- be not ask for the i node by node number instead -pron- be use a directory name and -pron- be the kernel task to figure out the corresponding i note number for the path that -pron- have give -pron- ok so this three variant of stat -pron- can just simply say ok here be a path to something -pron- could be a file -pron- could be a directory -pron- could be something else please fill out this strike for -pron- and there be also an equivalent version to say hey i guess what -pron- have already open a file or maybe a directory and please use that file descriptor again to fill out this truck for -pron-",
    "matter of convenience as to whether -pron- know the path or already have a file descriptor to an open file there be one other version be as well here which be go to leave a little bit but -pron- be go to find that useful when -pron- start talk about symbolic link so let -pron- have a look at the kind of information that -pron- can get back from stat ok right so the system give -pron- the following struct -pron- can use and big important idea and -pron- see this multiple time be that ok -pron- be go to give a pointer to struct so -pron- be go to write thing like ok here be a address of say some staff that some struct that -pron- have get on -pron- stack or somewhere else -pron- be only go to fill out memory structure force if stat return success so -pron- be very important to be able to check that -pron- return ok so",
    "that that memory structure be never touch in south the value inside that memory structure that be go to be arbitrary wait ok so let -pron- see what -pron- can find out about a file first of all great -pron- can actually find the i node number and notice that all of these field inside -pron- struct start with the sd which be just short for stat ok -pron- can find out some protection information about -pron- so the s d mode actually be -pron- use -pron- quite a bit because embed inside all of these bit inside sd mode there be two useful piece of information first of all -pron- can find out information about read write and execute for the owner of the group and everybody else secondly",
    "-pron- be something else like -pron- be symbolic link or name pipe or some other bizzle object that -pron- have get store in a file system ok -pron- can actually have multiple link to the same i know entry so -pron- will be see this number link later when -pron- actually start make hardlink so if -pron- get this big idea in -pron- head that hey the i node be the file then -pron- be quickly realize that hey maybe i could have multiple directory where different name correspond to the same i know number in other word -pron- actual file could appear in more than one place inside -pron- directory structure which be pretty cool so once -pron- get the idea that i node be the file then that open up some pretty cool idea ok then -pron- have get thing like ok the uid and gid so these be just number",
    "to the file system -pron- user id the user be just a number so -pron- do not actually store the username at all associate with a particular file so that tell -pron- who own -pron- and the group of the owner as well ok if -pron- be look on the same hardware device -pron- expect the device id to be ok so up here to be the same -pron- be go to look at the device id of a special file but do not worry about that instead this be how -pron- can find out the true size of a file in byte and rather than be just say an unsigned long or size today -pron- want to be able to work with extremely large file so this special type here there be off underscored t be design to be large enough that",
    "right so here be s t size so that be kind of useful but perhaps -pron- actually care about how many how much space be currently be use on the disk so the disk -pron- -pron- have talk about four kilobyte block but actually if -pron- look back in time r block size on old system be actually limited to just five hundred twelve twelve byte so so if -pron- want to know about the actual space use on -pron- disk -pron- can read this kind of blocksize here but realize that that if -pron- want to convert -pron- into bite -pron- need to get a need to multiply that by five hundred twelve ok this other block size up here tell -pron- today about the natural size of block for the particular file",
    "i probably want to make sure that the number of byte -pron- be request be some multiple of that or at least that site in order to make sure that -pron- be efficiently use -pron- file system so that give -pron- hint about that natural size of read invite to this current file system right the last thing be hey -pron- could find out some important some timing information so the c structure time t here be accurate to the lease give a precision of one second the actual way that something may be store on disk be not necessarily that accurate or -pron- may be more than more accurate than that for example some window file system be only accurate to within two second ok but now let -pron- see what -pron- have get -pron- have get when -pron- be last access when -pron- be last modify and to finally the time of the last status change ok what be the status"
  ],
  "c761dcf5-f751-4ac2-acb7-906f30ff83be": [
    "hi ok so let -pron- look at bad fit and k -pron- can this remind -pron- get three four and three right so well -pron- will do this at high speed initially a case so -pron- have p a and then pb and then p c k all in there right and ok so that be -pron- little pointer thing ok right so -pron- have do all three allocation accord to the scheduler buff cape and some free space at the end right what happen next next -pron- free up pb right so -pron- be pb and -pron- be now go to mark this space as available so that be easy will just to update that particular entry inside the link list to say this be no long some allocate space but -pron- be actually available now what right so now -pron- want to allocate another three kilobyte ok this be where",
    "where -pron- could allocate -pron- and with bad fit -pron- do the opposite of good fit -pron- try to find the large possible entry that of course be at least a minimum size that -pron- need but after that will take the one which be the large ok so in this case -pron- have get one space which be four and one space three so that be easy -pron- will actually use this large one here ok so let -pron- take that and kate this split that into two ok so i will i need a new color let -pron- go for as try that dark yellow ok so so -pron- will split this this be what -pron- be go to turn key and eventually -pron- be go to turn that for p d k and then",
    "-pron- free pa so so now the beginning of -pron- link list be available ok so let -pron- annotate this in a moment so what do -pron- get -pron- get some loop -pron- have get to get there -pron- go right there -pron- get the beginning this be not available so the story so far be that -pron- have get this space be use for pd i then -pron- have get a space and then -pron- have get some more memory be use for pc and then -pron- have get another space and some more byte available ok so the last allocation -pron- be go to do be be malik for one kilobyte right so if -pron- be do well at this point the answer would be obvious -pron- have get the perfect apartment for -pron- right there but instead bad fit be go to look for the maximal",
    "-pron- have get a tiebreaker here -pron- could take -pron- from the very beginning or from the very yet and -pron- have also tiebreaker be if there be a type break use the one which be low in memory have the low memory address so -pron- will actually assign p e to the base here ok and the up here be a two to kill about whole there be two kilobyte space right so what be -pron- conclude well -pron- can write down the actual memory replacement that memory placement of these different allocation and i want to know sis that -pron- be different ok so how thing get lay out in memory depend not only on the order the sequence of malloc cost and free -pron- that occur but also in -pron- choice of the strategy replacement strategy secondly -pron- fragmentation this time be not look so good -pron- have if i have to take this little bit -pron- use that space so -pron- have get free space let -pron- use a different color here just indicate whether free space be ok -pron- have",
    "be free -pron- have get some free space here and -pron- have get some free space here ok so of course -pron- will be the same total amount of free space as -pron- see in good fit but now -pron- be scatter all over the place and with a little bit of thought if -pron- could consider bad fit over a much great simulation -pron- can see how -pron- will -pron- will tend to reduce the large area because -pron- be always go to nibble away at the large turf free fragmente and so bad fit actually overtime will will tend to reducer large fragmenta -pron- will get end up with lot of medium size hole lot of medium sized fragment scatter throughout -pron- heap alright so bad fit and in the next video -pron- be go to see"
  ],
  "c8a95218-1f53-4559-b5f5-32b9385d7f90": [
    "hi , so if -pron- want to allocate some heap memory , how can -pron- do -pron- in c ? hopefully -pron- already know the answer to this one . if -pron- want a certain number of byte , -pron- be go to call malloc . and yes , -pron- may hard code a value in here , but at other time , -pron- may actually evaluate something . so for example , strlen of -pron- character pointer and then plus one because , of course , -pron- need at least one extra byte to hold the zero byte . ok that give -pron- back a pointer , what can -pron- do with that pointer ? answer almost anything -pron- want , provide -pron- promise but of course -pron- only use the number of button that -pron- request . -pron- do not want to accidentally start write memory location before that pointer or memory location after the end of -pron- . -pron- be go to corrupt the process memory . so if -pron- have get a pointer that malloc have give -pron- , \" there -pron- go . \" \" so hey malloc , please give -pron- some memory . \" \" \" then later , when -pron- finish use that memory ,",
    "\" by say , \" \" hey memory allocator , -pron- be now do with this \" piece of memory , so perhaps would be useful for some other malloc request in the future . the trick of course be that -pron- do not want to accidentally use that memory once -pron- have call free . so in c , -pron- have to think carefully about when -pron- allocate memory and when -pron- free memory . this be of course challenging , but hey , challenge be good for -pron- . plus if -pron- actually do this carefully , -pron- can make -pron- program run quite quickly if -pron- be aware of when memory allocation occur . memory be a very precious resource on system , and also allocate memory be a slow slow process . so this be one reason why many interpret language be quite slow , simply because of the number of allocation and deallocation that -pron- be do",
    "perhaps , if -pron- be write a game , maybe -pron- would be well to preallocate a lot of memory for the current scene and then only free -pron- after the current scene have finish . so let -pron- go back to -pron- program then , where -pron- be actually kind of think about do thing manually , where -pron- be actually allocate [ indistinct word ] . so what do -pron- think about this ? if -pron- free up some memory and then , for some deliberate or accidental reason , -pron- free -pron- up again . alright , be -pron- really a good idea ? no , of course not ! -pron- be go to crash . why ? because when -pron- implement free , as -pron- will in the future portion of this course , the thing that -pron- have to do in free , be to change -pron- link list structure . the heap allocator be go to keep a record of all the available piece of memory that be currently be use and all available piece of memory that be currently could be use in",
    "so by call free twice , -pron- memory allocator be just go to happily update those list . wait a moment , why do not free actually detect this ? so the short answer be performance . as -pron- have already mention , allocate and deallocate memory can be a very common occurrence . so , -pron- want -pron- memory allocator call to be as fast as possible and -pron- be up to -pron- , the programmer , to make sure that -pron- use -pron- correctly . so how can -pron- detect problem with use the heap . one picture of white -pron- have for -pron- be , after free , -pron- be a good convention to then take -pron- pointer that point that memory and change -pron- so that -pron- explicitly change -pron- to an invalid location . why do -pron- do this ? well , the idea be that if , then , later on in the program , someone accidentally use this pointer , then -pron- be go to cause the program to crash quickly .",
    "outside that piece of memory or crash at a much later point . -pron- would be much hard to debug and discover this error . so , by the way , this kind of bug where -pron- have free something twice be call a double free error , and yes , the example -pron- give below be obvious because -pron- have write -pron- twice , but sometimes -pron- can occur by accident , where the free be part of an indirect operation but bury inside some other code . one good news about set something to , set a pointer to null here be that if -pron- do ultimately call free on null , this be actually define to be a null operation . so call free with null do nothing , so that actually be a safe operation ."
  ],
  "ca407966-df2d-404e-98ad-238fa2551362": [
    "hi i want to talk about environment variable which -pron- have see before so hopefully -pron- can remember what these do if -pron- and -pron- c program -pron- say tell -pron- about the environment variable call home -pron- get -pron- user home directory this can be useful for kid perhaps -pron- want to say store some default parameter setting or default setting for next time -pron- run -pron- program -pron- know about path now so now -pron- can find out exactly where the system will look for executable -pron- can find out the current user that be run process what about people do -pron- think get -pron- of awesome will return well -pron- may say be define to always return cs two forty one but actually on most system today there be no awesome environment variable so this expression would return null until the day -pron- decide to set such an awesome environment variable in addition to ask about the particular value or particular variable -pron- can actually iterate through order -pron- and here be how to do that yes lady",
    "so immediately after a little pointer and what be -pron- point to ok -pron- be point to a character pointer so this be go to point to a string so somewhere inside memory there be a string that say a equals b so key value pair and -pron- could pass that and if -pron- want to implement getenv except of course there be more than one environment variable there be another one so just like argv argc there be a whole load of -pron- and the last point be here be null so that be the way to find out all the variable now big important point here be that if -pron- declare this environment variable -pron- be important to tell the compiler the follow be important to the environment the compiler that this environment environment variable be extern be -pron- meaning external to the currency program that -pron- be write if -pron- do not"
  ],
  "ca760730-bb8f-426f-8d87-931bf10baf4e": [
    "hi ok so quick question for -pron- -pron- pee thread program call pthread_create twice so how many stack do -pron- process have all right very do -pron- make an answer do -pron- guess if -pron- guess two guess again yes the correct answer be three why because when -pron- program start i get one thread for free the main thread and the main thread have -pron- own stack so in -pron- little program here i expect to actually have three thread i could approve this by at least i could have show this by for example show the address of the variable here so for example i could have say p thread so print f the address of td one be right and then print -pron- out so let -pron- take the address of -pron- variable here ok right so let -pron- run that a key and",
    "k so -pron- be a little strange to think about that i can have -pron- process memory sketch this out there -pron- go and -pron- have get multiple cpus use the code that i have write in here so down below here -pron- have get all of -pron- instruction for the function that -pron- have write and -pron- can be execute a different point because -pron- have get different pc register and each one know -pron- thread of execution because -pron- be get a stack so let -pron- have a stack here for the first thread stack",
    "ok and each of these stack be independent when a thread finish then this memory be not need anymore in practice -pron- may use -pron- again when a another thread be create right so anything else -pron- want to say about this yeah and realize that look i can have some heat memory in here i could call malloc from one thread i could have some global variable just beneath that and all of -pron- thread can refer to these thing that just memory address -pron- be up to -pron- how -pron- store these memory address where -pron- use -pron- so all of -pron- thread could see -pron- constant like hello tomato so let -pron- put tomorrow in here somewhere down here but near the code if -pron- have make some malloc memory i could have pass that address to -pron- thread all -pron- need adjust address"
  ],
  "ca90fc46-67a5-4381-9bae-274ec85fffbb": [
    "hi welcome to like twenty four -pron- be go to start with a quick code review let -pron- see look at this attempt wait a fix sized ring buffer and -pron- will see if -pron- can figure out how -pron- may go wrong ok so some of the thing that -pron- want to ask be be deadlock possible in other word could get stick so that be never able to continue be underflow possible in other word could -pron- be that -pron- attempt to write so attempt to read some datum that be not actually inside the ring buffer so will just be read back some garbage information or perhaps overflow as possible which mean that -pron- be able to put more datum into -pron- buffer then -pron- can actually hold so presumably -pron- be go to corrupt something possibly value that -pron- have not yet write out so what do -pron- get here -pron- have two counting semaphore and will see the s one be initialize to two hundred and fifty six so this smell to -pron- like"
  ],
  "cb9f0e61-d268-4cde-b498-ea76b68c9604": [
    "ok let -pron- do a code review on some attempt to write a temp to write a ring buffer and let -pron- see what -pron- can see about this ok well -pron- be so -pron- have get -pron- buffer of sixteen slot look like sixty void pointer so -pron- can use -pron- for any kind of pointer -pron- be go to keep track of an in and out a number of item and -pron- be use condition variable so -pron- first concern here be these thing every initialize ok let -pron- choose a darkish red ok so i better check that these thing be initialize if -pron- do not call patriot mutex initiate the very least -pron- need to use the magic constant p thread mutex initializer ok so let -pron- check that ok what else can -pron- see in -pron- little code review ok so -pron- be use a pizza at mutex lock but -pron- also have this infinite",
    "loop forever oh ok so that be not go to be great because will be go inside this loop forever -pron- have never unlock the mutex lock so that be mean that anytime this loop go forever -pron- have get -pron- have get an infinite loop here so this be go to lead to deadlock because one thread be go to hold onto that new tax law can never release -pron- oh dear right what about these variable i care global variable so there should be initialize to zero but what be the purpose here so i think -pron- well kind of rethink about this code and what -pron- be try to do ok here be another problem i see however be that this code use modular arithmetic so that be go to be great for about the first two billion item so in light testing in simple demo",
    "this code for a long period of time eventually -pron- little variable call in here be go to exceed what i can represent use use -pron- so once -pron- get above in max what happen when -pron- add one well technically the c standard say -pron- undefined behavior ok so at this point -pron- could get up and change -pron- grandmother 's facebook page but maybe perhaps more likely be on most system that rather than change -pron- grandmother 's page -pron- this be simply go to look around to a bit pattern that represent the most negative integer and unfortunately for code if -pron- take a negative integer and put -pron- into the modulo operator -pron- get back a negative number so this whole expression will be a negative number at some point somewhere between minus fifteen negative one oh dear right so now -pron- have do buffer underflow be actually write into memory that be no long part of -pron- buffer -pron- write into whatever variable happen to be store",
    "not good and -pron- be not go to even see this bug until -pron- have incremente in by two billion time so -pron- well fix this so i would not use if i if -pron- force -pron- to use modular i would also have an if condition to reset -pron- back to zero but why do not -pron- use bitmaske why do not -pron- say ok look i only care about the low fifteen bit ok right and also -pron- could change in and out to be unsigne as well so -pron- could say unsigne int for example ok if -pron- do not want to mess with negative number ok so this code be try to use condition variable to implement an q but -pron- right now -pron- be not even thread",
    "both of -pron- could see the same value of in so this code right here of where -pron- be change the buffer that be the part that actually need to be have a lock plus if -pron- be go to change variable like count again the plus plus -pron- be not thread safe so again that need to be protect by a lock ok so let -pron- move this peter mutex lock down ok will do that -pron- be very end also -pron- actually need to block -pron- actually need to pause if -pron- buffer be completely full so that seem to be the purpose of discount plus plus so -pron- logic here be not correct i want to go to sleep i want to wait if -pron- counter get be become equal to sixteen so let -pron- fix this look if -pron- have get sixteen item inside -pron- queue right now then let -pron- send this thread to sleep through -pron- call -pron- p thread",
    "if i be to make this code more performance i would consider use two one for the end q thread and one for the d q threat but anyway so will sleep in there and right now -pron- be call in broadcast every time that -pron- manage to enqueue something that be kind of overkill maybe -pron- only want -pron- want to call broadcast when -pron- see if -pron- know that there may be a thread sleep inside this condition variable but -pron- will leave that for now because -pron- have still get work to do on the d q as well so let -pron- get that sorted so what do -pron- get so far right so look back over nq yeah -pron- be good that -pron- use a p thread mutex lock -pron- like that so that only one thread at a time can be work in this code but",
    "item at which point -pron- call p three condition wait but -pron- do not just go to sleep on the condition variable remember -pron- have also get a pass in -pron- mutex lock as well so that will become unlocked while -pron- sleep in there when -pron- return from peace recondition weight will have to re lock that new talk then recall pizza kitchen broadcaster -pron- have wake up some thread -pron- be incremente the count by one and -pron- put the datum in and only at the very end -pron- release the mutex lock after -pron- finish modify all about datum so great and q event let -pron- have a look to see what -pron- can do about the d q k so on the d q side good -pron- want -pron- d q to lock a mutex the same utexas before because -pron- be go to be share this count variable so yes in this case -pron- do want to wait while count be",
    "three condition wait ok so thread please go to sleep inside this condition variable and please let go of the mutex whilst -pron- be block ok ok otherwise if -pron- continue -pron- know that the count be non zero so -pron- can at least get something out so great let -pron- pull something out of -pron- buffer again -pron- be go to modify this to be bit mask ok i just care about the low four bit there -pron- go and -pron- will call preset condition broadcast on the off chance as any thread which be sleep will call oh wait a moment -pron- do not want to hit any race condition around this count this well happen as part of -pron- critical section so before -pron- unlock the mutex let -pron- make sure -pron- decorate count so if -pron- do that make all these change congratulation -pron- have now get a working"
  ],
  "cbf2feb7-901b-481f-8dab-38bea64b966f": [
    "hi ok so let -pron- have a look at good fit right -pron- be go to walk through -pron- allocation so the first one be uh i need to find three kilobyte please three couple light be contiguous space ok so where do -pron- start right well right now i have a link list entry a single entry into time i link list which correspond to all of this free space so of course -pron- be go to use that so what do -pron- do let -pron- split -pron- up into two entry -pron- be go to now have an entry for the space that -pron- have -pron- be go to return and so this be now allocate right and eventually -pron- will return a pointer to the beginning of -pron- soapie will be look at this and -pron- second entry will be -pron- all of -pron- free space ironic unallocated space ok right there next malloc course i need four kb please right so let -pron- go through -pron- link list look for an entry that be sufficiently large and available ok so not the first one of course but the second one be great let -pron- take that so again will split this will mark",
    "and of course -pron- be go to turn a pointer to the beginning of this so this eventually be where pb be go to be a side and what about the remain space well -pron- have get a third link list entry now for all of the remaining free bite in -pron- heap then be call again with the three kilobyte to request case so again -pron- walk through -pron- link list structure and -pron- can ignore the one which correspond to allocate -pron- entrie but here be one which be a non allocate an sufficiently large so let -pron- take that and split -pron- again two or three kilobyte be go to be here for a pc -pron- be go to be return a pointer to pc will point to hear ok and finally -pron- have the an entry for the remain space ok right the next",
    "so free be go to be call on that point be right so -pron- be time to update -pron- link list case now be just wipe that away right this now this entry now actually correspond to some memory that -pron- can reuse in the future ok and then next -pron- have another malloc call say hey i need three kilobyte of course be malloc call could actually be a kellogg call but for the problem of just choose where to put this memory -pron- do not matter so -pron- have get a three kilobyte request ok where should -pron- put -pron- now remember -pron- be do good fit so with good fit let -pron- look at all of the entry which be available and sufficiently large and -pron- will choose the one which be the small ok but of course at least three kilobyte so -pron- have get a choice",
    "one at the top and of course the one at the top be there a good fit be actually be perfect fit so let -pron- return that be o p d be go to be point pd with -pron- turn -pron- caesar off ok goodbye scissor pd be go to be here so in fact -pron- could write this in here that pd be go to be equal to ten kb ok right and then after that -pron- free pa ok so -pron- can update -pron- link this structure to now say this memory be free but remember there be something else -pron- should do be that right now be link list structure do not realize that these two piece of memory that be next door to each other actually could be coalesce into one so let -pron- do that let -pron- update all link list structure so that rather than have two separate item -pron- be cut out these piece there -pron- go ok -pron- just have one giant entry for all of this between zero and the",
    "kilobyte of available memory now if -pron- do not do that then if -pron- request say come in for seven kb -pron- could actually assign that but accord to -pron- link list -pron- do not have enough space so -pron- be important to do block coalesce sing so that be link list structure accurately represent the fragment that -pron- have available ok so right so -pron- free up pa and the last thing to do be satisfied this request for a one kilobyte ok so -pron- have -pron- have only get kind of one area available so that be easy so now -pron- be go to split this into two -pron- will have the area that be go to be assign for pe answer p be go to be back in fact in the same piece of memory that be originally use for pa and now -pron- have get all of -pron- remain space in one nice big free chunk which"
  ],
  "cc2fa93f-a576-423d-b080-9da120a3796d": [
    "ok so let -pron- live with -pron- how -pron- can use a udp right so what be udp reminder that these be little hopeful telegram little packet that -pron- send out and -pron- hope -pron- arrive at the other side in practice -pron- can get lose in transit -pron- can even be duplicate in transit and of course -pron- can arrive out of order so this be very much expose -pron- to the vagary of the internet and the vagary of every router or router that stand between -pron- and -pron- target so udp tend to work best when -pron- packet be very small like hundred byte or so by the time -pron- get up to fifteen hundred byte -pron- may find that udp packet start to get drop between -pron- and a remote server on the internet somewhere and whilst -pron- be provisional support for massive packet like sixteen kilobyte -pron- be today those be unlikely to get from here to say halfway around",
    "the advantage of however be that -pron- be go to be able to send information at the fast possible way through the network with the understanding that -pron- may never get there and -pron- will never know whether what happen to -pron- poor little packet so let -pron- very quickly review how -pron- can use udp so in a sense there be no kind of client or server the well analogy here be the client -pron- can basically think of as a sender and another end to be the receiver so ok so but the same process can do both so how can -pron- actually send a udp packet well first of all -pron- actually need to make a socket that the right type and the right protocol and how can -pron- get the parameter correct first a socket answer hey get address info",
    "and one of the thing that will see that be different from before be that when -pron- set up the hint -pron- be go to say -pron- know what the kind of socket i would like today will be a socket d gram as oppose to a socket stream ok so -pron- have make -pron- socket and if -pron- just want to send something somewhere just simply call send too and that moment -pron- say here be -pron- fire descriptor here be the memory address that i want to start send byte from then on the number of byte and here be the address off -pron- go seal -pron- with a kiss and off off both at packet right and hope -pron- hopefully -pron- virus what about the receiver on the receiver -pron- need to bind -pron- to a particular port number on particular ethernet card so -pron- be go",
    "and -pron- call bind how do -pron- get what -pron- need for bind again -pron- can just get address info and then how do -pron- actually wait for something to arrive and the answer to that be -pron- can use receive from there -pron- go and when receive from return then great a packet have arrive datagram have arrive and as part of that information not only do -pron- get the datum -pron- actually get the source ip and the source port from which that packet claim form to be precise -pron- get the source ip in the source port that -pron- claim to come from there be quite possible that that information could be fake that always lie on be just the bike have be set inside the header there be no way for the internet to actually confirm",
    "by udp be kind of form a bona fide sender then -pron- 'd need to invent -pron- own mechanism for example perhaps -pron- have a cryptographic hash or some cryptographic signing mechanism the only -pron- and the other end of the connection other end the sender have a share secret so that -pron- can be sure that the information be truly form a bona fide client ok so that be the basic idea notice that instead of use connect right -pron- be use these special corps call send to and receive from ok so let -pron- actually go to play with this right so -pron- have get some program here -pron- have get a little program call receive form demo here and -pron- look just like",
    "connection except this time -pron- be go to be a datagram socket and -pron- be go to stop and listen for connection on that socket so i can now call receive from there and this be the moment where -pron- block but how do i find out who send -pron- that the datum well for that -pron- be go to pass in one of these socket address structure and in fact -pron- be go to use the large possible version of the kind that can represent ip for ip six or any other possible socket address and so i give the address of -pron- source here -pron- be cast to the base type and also i need to say how many byte -pron- be as well so i end up give that information as well so -pron- see from there will block until finally one day -pron- buffer be fill up because a packet have arrive ok so what be -pron- go to do at this point well -pron- little program be go to print",
    "bit of computation in fact all -pron- be go to do be flip the low bit of all of the byte of the message for any bite that look like -pron- be great than ascii value of sixty four great than equal to sixty four and then finally let -pron- send -pron- back to whoever send -pron- to -pron- which hey guess what -pron- can now use that source information as the target address so -pron- will send -pron- back to whoever claim to ascendas the information in the first place and let -pron- say here be the buffer and here be the number of byte that -pron- originally receive let -pron- use that as -pron- send information so that be -pron- i guess -pron- could call -pron- -pron- server in the sense that -pron- be wait for information at the beginning what about -pron- client -pron- client look similar to to -pron- tcp client except that yeah -pron- be go to change the kind of socket -pron- want -pron- want to suck -pron- d gram and",
    "want to send here be the ip address that i want to send -pron- to right so -pron- client however can also wait for packet to arrive so -pron- could wait for the result before print something out ok right that be enough talking let -pron- actually see this little demo so on -pron- local machine here i can call this little send two thing and -pron- be go to send a message to a remote lennox machine ok so so what be -pron- ip address over here right well i better run -pron- first of all ok so let -pron- let -pron- run i receive from ok and when -pron- need a ton use port address let -pron- go for seven six five four ok great -pron- be listen on that so now i need to connect to -pron- ok so will try",
    "be annoy dot edu and then import so -pron- say port seven six five four and then a message ok so -pron- will try hello right ok and great -pron- send a little datagram with six byte the actual datagram that get send of course be a little large because -pron- have get the overhead of the ip address in the front of -pron- and then -pron- wait for a response and here -pron- be now -pron- and i know that all -pron- little server group the other end be just flip the low bit ok and -pron- can see that -pron- be be process -pron- here so if -pron- actually send the same message back ok this time great because -pron- flip the bit on the letter -pron- can see that -pron- have also manage to flip",
    "if -pron- want to make -pron- doubly secure and that be a joke by the way so that be kind of a quick quick play with udp and -pron- can see -pron- be a very simple protocol and that be the basis of kind of dns system today so that be kind of quickly kind of a few here be the call that -pron- use this send to where -pron- say here be a buffered number of byte and i need to pass in a destination an simply with the receive from again here be a buffer there be go to be get the bite hopefully -pron- buffer that -pron- be pass -pron- will be large enough otherwise -pron- be go to be truncate but -pron- can also find out who center those bite and in -pron- little demo i do not pass in this particular struct instead i use a large possible struct because that be guarantee to work with ip four and ip six etc",
    "type if -pron- can think of that be like the base class if -pron- like but then -pron- have get version to work with ip four ip six or if -pron- just want to say -pron- be go to have a storage mechanism which be big enough for or possible socket address then there be this type dissipate type here right now -pron- be possible to if -pron- truly only want to send datum to one to one ip address and one port so call end point then -pron- be possible to use connect with datagram connection however -pron- be still the case that udp be what be know as a connectionless protocol",
    "there be no part of the protocol that say -pron- be go to first sense in packet backwards enforce -pron- truly be connectionless -pron- want to send a message -pron- send just another packet so when -pron- call connect -pron- be not really connect to the other side -pron- be simply actually just give a hint to -pron- machine that future call to use send will always use the same host and port number as as the destination so -pron- just make the future part of -pron- code just a little bit clean because now -pron- just need to file descriptor and the buffer that -pron- want to use to send those bite so that be big important idea that compare to tcp which be connection base udp be and always will be a connectionless protocol ok so that be the udp if -pron- have not have a quick play with -pron- have start start with the code -pron- have put in to",
    "to leave -pron- with this lecture be -pron- have get a little piece of code here which be base on the so - call underhanded c challenge and uh here be -pron- challenge to -pron- can see the code be actually quite short and what -pron- 'd like -pron- to be able to do be figure out how can -pron- give this code some argument such that -pron- actually end up print the following admin slash debug in other word do not allow to kind of change the code be write that would be too easy no here be the code and there be something -pron- can due to this code such that when -pron- run -pron- -pron- end up print out this follow follow and -pron- notice step there be no way to actually change these variable"
  ],
  "ce59bcf4-f76c-4a93-a4eb-d506559bd60d": [
    "hi welcome to lecture thirty two so let -pron- talk about scheduling and schedule algorithm as a warm up let -pron- think about why process may be place on the ready queue ok so the story so far be -pron- never have enough cpu 's and -pron- can imagine time when a process would like to run for example a thread be ready to go but -pron- do not have a cpu available so let -pron- talk about some enumerate some possible reason why that may occur and -pron- be go to talk about process but everything -pron- say about process be of course can be apply to individual threat as well but -pron- will ignore that kind of little computation complication for now right so why may a process be place on ready queue well -pron- could simply be that -pron- be a new process and there be no cpu core available right now -pron- be all busy work on other thing so -pron- be just wait to get -pron- start another could be be that -pron- process have be wait for something ok so what thing may be wait for so -pron- may",
    "kind of thing can -pron- wait for what a very common one be first some io event to complete right so some input output for example perhaps -pron- have call open perhaps -pron- have call read perhaps -pron- have call write and -pron- need to talk to an external device for in order to get the datum or put the datum sometimes these these call can complete to immediately if -pron- already have the datum inside ram but at other time -pron- have to wait for the datum to physically arrive ok so once that data be ready there in that system call can return an example of this may be -pron- have write a ui program complete with window and menu drop down and all that good stuff process those window event be just another piece of kind of io now -pron- be wait for event to occur from user input and so fundamentally",
    "what the user want -pron- to do and most of the time -pron- cost the user be not give -pron- event but occasionally the user go to type a key press the screen that kind of thing and then -pron- culture -pron- can return -pron- and -pron- code can continue ok what else may -pron- finish wait for think about something that -pron- have see and -pron- use inside this course well ok how about -pron- synchronization primitive so some synchronization event have happen that -pron- allow -pron- to continue so what do -pron- get -pron- have get thing like mutex lock -pron- be able to acquire the lock -pron- have get count semaphore somebody be return that piece of pizza into the counting semaphore so now -pron- get to pull -pron- out and continue and of course -pron- have see condition variable so now say broadcaster",
    "all the fed have turn up so now -pron- be go to wait this thread and let -pron- continue so excuse -pron- so there be lot of reason why a process or thread may be ready to continue need and be ready for a cpu there be another one as well which be that occasionally -pron- will take a process and take -pron- away from the cpu so on a standard scheduling system -pron- only get the cpu for a limited amount of time and typically -pron- be a one millisecond or ten millisecond without -pron- time why because the cpu be in high demand and if -pron- if -pron- allow -pron- to use the cpu for as much time as -pron- want then -pron- interactive system would not -pron- would not be interactive with press a key and nothing would happen because right now the cpu be be use by someone else so in practice -pron- have these little",
    "from -pron- but at some point again in the future will put the process back onto so -pron- will put -pron- back onto the ready queue and at some point -pron- will be the process be turn to run again right so -pron- could actually imagine that -pron- could draw a little state diagram for each thread or if -pron- be a single threaded process each process -pron- can imagine that -pron- have get different state -pron- have get thing like -pron- be know -pron- be ready -pron- be run and -pron- be finish -pron- be do and that overtime -pron- little thread can transfer and simply across but be more likely to be transition backwards and forwards so here be -pron- first example where -pron- go run back to ready but -pron- could also have a block state as well so that if -pron- thread or process be wait for",
    "only some point in the future when that event be satisfied can -pron- go back into the ready state in order to start run again ok right so that be kind of quick idea that -pron- process be stop and start -pron- get schedule -pron- put get put onto a cpu -pron- get take away from a cpu and even if -pron- be just wait in the innermost for loop -pron- may not be actually truly truly run that code a hundred percent at the type sometimes a cpu be give to another process instead ok right so let -pron- talk about some scheduling term the first one be the wait time if someone talk about the wait time what do -pron- think -pron- mean do -pron- think -pron- be talk about the total wait time or do the first waiting time before -pron- be between when -pron- be first schedule and when -pron- actually run ok make -pron- guest now and the correct answer be -pron- be the total",
    "would actually use the cpu but be unable to because -pron- be in the ready queue but -pron- be unable to actually use the cpu core cpu be -pron- be use by different process ok so ideally at the wait time of -pron- system would be zero for all of -pron- process maybe that could occur if i have more cpus than then the process be that actually want to run ok so so that be the wait time -pron- mean total wait time so -pron- can actually kind of write down a formula then base on a couple of basic idea one be the arrival time so this be when the process be be create when -pron- first arrive on the scene -pron- be ok -pron- 'd like to use a cpu time and also -pron- know how much time -pron- be go",
    "time so this be the actual wall clock time when -pron- finish ok so if -pron- think kind of if -pron- be to sketch out -pron- time period right so if this be when -pron- arrive then i could imagine that there be some time when nothing happen -pron- be just wait to start then -pron- may have all of the execution time all in one block but -pron- do not need to be and then -pron- complete so that be kind of one picture of what may happen so this be the kind of completion time so that be just one picture of course -pron- could have different picture like this -pron- be wait go on here and then some more waiting go on here and then some more waiting go on here etc so there be different way that in practice be person may run so the total wait time be the sum of all of these kind of little wait time here"
  ],
  "cf2878ea-cd88-4929-bd1c-146cdfb2d8ce": [
    "ok right now -pron- be time to start talk about some deep miller leave -pron- of system programming and in particular what happen when system call get interrupt ok so many system call a very fast for example if -pron- want to find -pron- pid that will return immediately but some thing may be slow for example if -pron- call right and -pron- be to something which may block like a network socket or a pipe then -pron- be possible that this write call may be interrupt before -pron- complete so posix have the idea of fast and slow device local disk be consider fast but for slow device possible than not little bite maybe actually be write so -pron- be important that -pron- find out what actually happen ok so -pron- be important that -pron- actually get store the result of write call and then check to see what happen ok so let -pron- just",
    "to the write call here -pron- be and -pron- will see that k -pron- have get -pron- standard right -pron- have get p right -pron- talk about a little bit which allow -pron- to include an offset there be even another version which allow -pron- to assemble right use different bit of memory so rather than require all of -pron- datum to be in one contiguous area -pron- can use this more complicated version to say ok take these bit over there and those bit over there but -pron- will not -pron- will not need that for cs two forty one instead let -pron- scroll down and will just 's notice a few thing so first of all light that -pron- see the right mac great right few bytes then request ok so -pron- have get to look at the return value and also if -pron- fail then if -pron- succeed then -pron- get the number of byte write or -pron- get a negative",
    "be talk about early to say what actually happen so what value of oh no may -pron- see ok and here -pron- be right so all of these be actually actually just constant define integer refer to the value of earner ok so -pron- fault -pron- give an invalid file descriptor negative number -pron- have get thing like ok -pron- give about a file descriptor which do not actually refer to any active fire scripture -pron- can use for writing and -pron- one that -pron- be go to talk about in a little bit more so here be the into after want to say alright that -pron- attempt to do some -pron- attempt to write but a signal interrupt",
    "really lazy if -pron- get interrupt by signal so for example suppose an alarm signal go off suppose a sigpipe happen suppose a child process finish then -pron- will just return do not actually do any write force ok what a lazy kernel that be so ok will keep scroll down and -pron- can see here there be more and more stuff there be other one as well for when -pron- start talk about asynchronous right so -pron- probably hear of node node js which be kind of take the server world by storm but -pron- can make javascript on the server that use asynchronous io and so -pron- use epoll to figure out which file descriptor ready and -pron- use thing like these e again and -pron- would block to figure out which file descriptor ready for more byte so as -pron- can see there be plenty and",
    "some point or gate right but -pron- be just go to think about this what this idea about oh i be interrupt key so if -pron- do not handle this then exciting thing may happen so perhaps -pron- have write code that use same weight right so same way be suppose to actually wait until there be a piece of pizza available in the pizza box for as to eat but -pron- just get interrupt and just return as -pron- off so i can be bother to wait anymore right and so then -pron- let -pron- code continue oh idea so -pron- have be oversimplify thing at this point -pron- have not be write high quality code instead what -pron- need to do be -pron- need to check the return value of some weight and read and",
    "worthy code because some weight may be say oh i fail and -pron- may fail simply because -pron- get into up to do to a signal so -pron- can check this and then -pron- can just re run -pron- again so typically -pron- will see the follow kind of code that -pron- can do thing like like -pron- 'd like to call sem_wait ok and -pron- be go to call sem_wait on a particular counting semaphore ok like ok here be a pointer to -pron- structure there but -pron- could be that that return a negative one mean -pron- fail ok so -pron- could store that inside a little variable here -pron- be but -pron- could also put this directly inside some kind of conditional test right so let -pron- put this inside",
    "let -pron- see if -pron- correspond to a failure in other word -pron- get to negative one right so if that be true should -pron- repeat this or not -pron- only want to repeat if -pron- actually see that -pron- just get interrupt so i can do this in one go i can say all right and if ever know k be equal to ok -pron- just interrupt then go round the loop again so here be -pron- trick that be all big expression for awhile and notice -pron- as a side effect of evaluate this while -pron- actually call sam wait ok so put all that inside there and drop a t t inside and for the actual body of the while loop do not do anything ok right so that would be more production quality code -pron- may as well log any other error as well so",
    "get zero value here then maybe -pron- actually want to exit or log -pron- somewhere so for example that would that would help -pron- catch if the county center be not properly initialize ok so this be a lot of annoying code to write each time and actually make -pron- hard for -pron- to generally read -pron- code so also people tend to kind of put this code inside a little function call so -pron- may want something call say same way reentrant or -pron- same weight which kind of do this error check as well and do this check for interrupt right that will send wait what about really right i guess a little bit more tricky and -pron- will so let -pron- do sleep and then -pron- will do read and write ok so with read and white -pron- be tricky because this can return    a incomplete set of byte so really so let -pron- do let -pron-",
    "interrupt -pron- just go to go round again right and retry -pron- may return negative one and some other error in which case let -pron- just kind of quit to say -pron- be sorry maybe someone pull out the usb or the network connection be close but -pron- need to handle that differently maybe the driver become corrupted or something like that or maybe -pron- do not have write access anymore what else may happen -pron- may have some number like oh i must have right to thirty seven byte but that be not enough so let -pron- keep account of the true number of byte that -pron- have actually send so far and then go round the loop to try to send the remainder obviously -pron- do not start from the beginning -pron- want to start from whatever offset that -pron- have count up so far or maybe -pron- have now get to the point where total byte",
    "say yeah -pron- send all the byte ok -pron- be do -pron- be do with this return so -pron- have actually get to write code that cope correctly with all four of these situation for read -pron- also have the possibility that -pron- would return zero which mean ok that be -pron- -pron- have read anything and there be no more bite come through this pipe be now closed for business i can tell -pron- no one be go to read anymore or this stream safe the terminal be not get any more bite or this file -pron- have reach the end of -pron- ok so again -pron- have to write sophisticated code to think about these possible different state right i finally be sleep so -pron- sleep -pron- say please sleep for so many second but -pron- be possible to be interrupt so let -pron- have a quick look at sleep this one be go to be a little bit easier so -pron- see -pron- probably want section two let -pron- try that section three ten",
    "value return because so zero if this sleep the require amount otherwise return the amount of une sleep ok so -pron- could keep track of that in fact this be a good way to start think about how -pron- may implement write as well so let -pron- sketch this out and that will be enough for this video ok so with sleep here be what -pron- could do in fact do i have that go ahead today ok so so -pron- interruptible sleep here ok so -pron- sleep ok -pron- be go to have the number of second that -pron- like to sleep so let -pron- keep track of the",
    "like be go to be an analogy for the number of byte that -pron- have manage to successfully send with -pron- right call as well ok so -pron- will have a like a do here that can be initially zero and now -pron- will just say ok sleep right so well ok so i need a after available in here like ok sleep and how many sleep do i how many second i want well this be total number of that -pron- want to have but -pron- have do so many second so far gay right k so will put that in there and will know that sleep return zero if the if -pron- be actually manage to sleep number of second otherwise for sleep -pron- will never"
  ],
  "cf992758-bf07-4e89-af7f-f47de3438f0d": [
    "ok so time stop talk about how -pron- can mount and unmount an entire file system so the reason -pron- be call mount and unmounting be for hark back to a time when file system be big and heavy -pron- may be contain on -pron- very large drum there may be a large piece of magnetic tape that -pron- actually have to put onto a machine so -pron- require some physical effort to mount the file system so that -pron- could read or write to -pron- so today of course be full system can be very light very tiny physically but -pron- still use these word to talk about when -pron- have a file system that -pron- can now access and when -pron- want to no long access -pron- -pron- can unmount -pron- ok right so in the beginning when -pron- machine start up -pron- be actually go to look for filesystem do describe in this side be special file etc / fstab so that can describe a whole load of additional file system like there may be a file system just for the user there may be a remote file system that be mount on a network drive somewhere -pron- can describe",
    "and that can include additional option like whether -pron- want to load the file system that be just read only or what to do if an error occur so let -pron- let -pron- start kind of play with especially today -pron- be go to mount a file system that i download from the internet -pron- be a complete working version of linux and will just explore will just to see what be inside -pron- right one thing -pron- be go to see be the idea of a loop back file system so the item -pron- have download from the internet of course be just a regular file and a regular file be not what -pron- need for a file system regular file have byte -pron- can navigate to -pron- -pron- can seek backwards and forwards etc that be not quite what -pron- need for a file system i want to be able to read",
    "have a way to say give that -pron- have get a file that i can navigate around and read or write individual byte now need to provide an interface where i can read or write random block or possibly block in a contiguous order so there be a virtual device that the kernel support a lot of physical device no but -pron- pretend device there be actually inside the kernel call a loop back file system which -pron- present a regular file and -pron- present to the kernel then this ability to read or write block in order for -pron- to then actually mount a file system and explore inside -pron- ok so -pron- be go to use that today as part of look at this file system -pron- be go to use a command call mount now i need to be root for this so -pron- could do be say on -pron- own virtual machine on -pron- laptop and mount take some",
    "about -pron- be read only or in -pron- case actually i need -pron- give -pron- an intermediate loop back device as well and then -pron- need to give two thing first of all where can -pron- actually find the file system so in -pron- case -pron- be go to do today be -pron- be go to look at the file that i download from the internet call be a dot iso file so there will be some file somewhere and second -pron- need to say where will -pron- appear inside -pron- main file system so for example -pron- may want to say -pron- know what i want -pron- to appear inside a anytime i look inside a directory call slash home or in -pron- case -pron- be go to make a special directory call say something like explore and then when -pron- look inside this directory rather than just look at -pron- regular file system",
    "file system then become a large hierarchy of other file system ok so the root of -pron- all -pron- have get a single slash and then on lenox -pron- have get thing like e t c home user be var all of these place -pron- -pron- could be different file system or -pron- could choose subdirectory within that so for example -pron- may have home extra like that could be -pron- own file system or -pron- may have say slash mount and -pron- usb device so inside that -pron- could have a file system so the point be that -pron- choose a path where -pron- want to load where -pron- want to mount the file system so enough talking let -pron- go and see some action let -pron- go see this right so i be get kind of annoyed with this long prompt so i change -pron- i say say ps one equal something so -pron- can for example say",
    "like that ok and now let -pron- see where -pron- be ok so -pron- will make a directory call say explore iso right and of course there be nothing inside explore iso right now ok so that be where -pron- 'd like to mount -pron- file system now unfortunately -pron- have forget the exact name of the iso file but let -pron- find -pron- pretty quickly and for that -pron- be go to use find so hey find start recursively search from the current directory and i care about all file which end with which match the follow pattern so that end with -pron- so so there -pron- be -pron- find this ok that be what -pron- be go to use so now i can say right hello melt if i just say mount without any option -pron- let -pron- -pron- all of the current file system which have be mount but let -pron- not worry about that right now let -pron- instead",
    "loop back device here be the iso file that -pron- download and let -pron- mount that say explore ice oh ok now -pron- give -pron- a hint that the file system -pron- be use be read only and in fact -pron- expect that with iso file because the iso format or more precisely the iso nine six six echo format worth design for cd rom which be a read only medium ok so this fast system type be great if -pron- do not intend to change anything right so right be not support inside this file system so anyway let -pron- go and have a look inside explore iso ansi what -pron- find ok holder stuff actually not that much stuff so let -pron- do find this and just to see how many file and -pron- see -pron- be not that many file at all however -pron- see some thing which do indeed look like the startup thing that",
    "complete bootable linux system and -pron- will see in a future lecture how -pron- can actually run this inside an emulator so -pron- have get a complete operating system now be not a very big one so if i say say disk usage see a summary -pron- see -pron- be about fifty thousand fifty thousand megabyte let -pron- check yeah fifty fifty megabyte so the whole thing be a tiny operating system just fifty meg right so -pron- have mount -pron- -pron- can have a look around when i finish i want to unmount this how do i do that ok so now i can say -pron- melt and -pron- will say explore i so ok and now explore iso be back to -pron- there be nothing inside there if there have be something inside there",
    "ok so of course there -pron- be be an empty file but -pron- exist when i mount then now -pron- be not -pron- be -pron- be over -pron- -pron- can not see -pron- right explore iso now immediately be be the mount file system so any file -pron- have inside that from -pron- old file system now invisible to -pron- -pron- can not see -pron- anymore right so time to unmount -pron- so -pron- do give the mountpoint there -pron- go and now -pron- be back so now -pron- can see -pron- little hello again ok so that be that be kind of quick introduction to"
  ],
  "cfb03b59-dbf5-447a-880e-0633fd40a533": [
    "ok so let -pron- have a look at some json and google protocol buffer an xml right so hey let -pron- do this in reverse order so here be google 's protocol buffer now one advantage of use google protocol buffer be that -pron- allow -pron- to write code in multiple language so rpc obviously jenn only work really fuck a c and c plus plus project versus google protocol buffer or implementation of this of course all major language today some of -pron- be third party but still this mean that i can write a client in a different language from the server for example -pron- server may be write in python ok so let -pron- see how -pron- work so here be the idea be that r i d l type file now look like message and in fact the basic idea be that -pron- message be the equivalent of the object that -pron- want to kind of use for",
    "a person for -pron- application a person have two require thing a name and id and the idea -pron- be a little into german specify how big an integer and -pron- may contain an email as well -pron- can also describe phone number inside this as well -pron- can have enumerate type and -pron- can include the sub sub object or sub message inside -pron- person in term of like a phone number for example and say that a person may have multiple phone number so great the beautiful thing about then this description be that -pron- give -pron- lot and lot of code boilerplate code for -pron- automatically -pron- will generate the code to marshall -pron- object and send -pron- in a binary efficient binary format",
    "etc now one of the great thing about google protocol buffer be that -pron- support versione so if -pron- be for example that the size of google -pron- do not actually get to update all of -pron- server and all of -pron- client all at the same time as just not practical so -pron- need to be able to weigh to support the idea that -pron- be go to have to be able to send information between client and server that be run slightly different version of -pron- -pron- software and tomorrow i may decide that a person have to have a say a new field so perhaps -pron- know whether -pron- like cheesecake or not for example so how can i do this i can not update all of -pron- client",
    "to see that so google protocol buffers allow -pron- to specify a default value for field which be miss in future version so i can have a client for example of that be not quite the same version that number as -pron- server and google protocols do something reasonable so that be kind of rather than just crash and burn and say hey -pron- binary format be different instead -pron- can define default behavior for field which only have be create in more recent version of -pron- adl of -pron- person object ok so that be kind of one big advantage the second like i say be that -pron- be support by many many different different programming language right so that be kind of the most complicated way of do thing this be actually go to look at some other way to transfer structured information over the network today the first one i want to talk about be jason objects case so jason actually look a lot like javascript",
    "kind of key value pair so cave just write a simple brace give -pron- a javascript object so for example i could say on -pron- javascript object here be a key as a string here and -pron- will give -pron- a value so for example i may have a key of say abc ok and i can separate more key value pair with a comma now unfortunately for that adjacent implementation do not allow -pron- to have just a trail comma at the end ok so that be not good jason syntax so which be annoying because -pron- be a common error when -pron- be construct json object by by hand so let -pron- have a look at this example json as -pron- can see -pron- be get nest thing that be because for a value inside this particular jason object",
    "of the nice thing about json be extremely readable and if i give -pron- a blob of json there be online tool to kind of nicely format nicely indent so json be of very loose format and be use today primarily for send back information request from a server and then -pron- will have some client side code to render this into some html for example so -pron- see a lot of json information be send today back to back to back to web page where -pron- then iterate over this in order to turn -pron- into something displayable for on the page ok so the downside of json be that there be no formal specification about which field will be there which",
    "so -pron- can think -pron- be go to very kind of loose format another alternative then to send information be xml and in fact today when -pron- talk about kind of html which -pron- use for web page so for example -pron- know the web page have thing like a body tag and then inside that i may have a paragraph for example right this be actually a variant of xml where i have these tag and these tag -pron- create thing call element so for example i get to tag here call -pron- be at each each one to say -pron- be start a head text inside there and then i need a closing tag there -pron- go right so great by now have an h one element and inside that",
    "open tag i can specify some attribute so for example -pron- paragraph on -pron- h one here i may specify say the ok so what happen if -pron- mouse over that event or -pron- body here wall no node one be a key i can say bg color and i can set the background color of -pron- web page today more than html have attribute to do with style sheet so i can say hey use the follow particular kind of style for say this h h one tag but let -pron- actually have a look at some more xml with regard to actual kind of datum that -pron- may want to set so in fact down here -pron- have get the very same -pron- be kind of very same piece of xml datum as before so same datum as before but this time instead of json -pron- have expect express",
    "-pron- be much long take small bite to send an xml message and json so one reason be because for every opening tag -pron- be go to have to find a closing tag as well so xml actually take more compute power to pause and more network bandwidth to send compare to json so why would anybody use xml today give these deficiency well one great thing about xml be that -pron- can define a dictionary -pron- can define a set of tag and the relationship between those tag that comprise a valid message so so for example i can say that i promise -pron- for this to be a valid message i will only be use a certain",
    "so for example may have an aggregation site that allow -pron- to book car and hotel and in talk to other server -pron- server may send an xml message in order to confirm that booking or in order to find out if an airplane have some some seat between two destination that be at a certain price point for example ok so xml be very kind of popular as interchange format for kind of finance and booking application now quick comment be that -pron- do not need to write -pron- own json parser -pron- xml pause today of course there be plenty of library code out there that will do this for -pron- some of -pron- will give -pron- event base on each time -pron- see a new tag other will read the whole thing into memory and create",
    "great if -pron- dom be huge and then -pron- can iterate through that by ask a dom to say find a particular child of a certain type one last thing be -pron- will notice that each element -pron- have here -pron- can actually have water cord attribute case so -pron- have talk about element which be the item -pron- actually find insight memory each element may have kind of attribute the difference between an element and a tag be the tag be the actual piece of string that -pron- have write here the actor go to bite sequence that -pron- need to actually describe the element ok so the tag be the actual thing with the open and close character to great than and less than character to actually describe the element type that -pron- be"
  ],
  "cfcca673-a18d-4f07-9473-13b87f7c5ef5": [
    "hi so -pron- be quite common to put aside a little bit of heat memory in order to define exactly what -pron- want -pron- thread to do so i want to give -pron- an example of that and then talk about how would set -pron- up right so here be the idea suppose i have an away and i want to be able to kind of process all the element in -pron- way and fortunately -pron- task be embarrassingly parallel some part of -pron- be mean that i can easily just spit up -pron- datum and say ok thread -pron- do this half and another thread ok -pron- do that half so right now what if i get so -pron- have get method then that i want or function that i want to speed up i want to make multithreade here -pron- be be -pron- little calc method here and -pron- be give a pointer to an integer ie the very first element of -pron- array and the number of item -pron- 'd like to process ok so if -pron- be go to speed thing up let -pron- just split",
    "thread to say work on all the even index item and another thread to work in the audience next item that would not be very great for cash there be a much well to split -pron- down the middle ok so will calculate the half of -pron- and then game plan then be to create a thread or two to do this so for example -pron- may do the following escorpi thread create -pron- be go to make a note of the thread id -pron- do not pass -pron- do not need pass any attribute today and then here be the actual image calculation method that -pron- be go to use here -pron- go there go to actually do the calculation i just need to when i call that actually kind of pass some hint about what -pron- should be do so let -pron- make a little task and put that on the heap so -pron- will have a little pointer here call say task one k which will represent what -pron- 'd like that thread to do ok so let -pron- set this up right so what kind of information",
    "would want to send the actual datum so in this case this be just a pointer to the datum so that can be datum and then i need to decide or define how i want to specify the range that i want to work in there so i for example i could i could specify that the datum always point to the begin of the way and then provide a start and an end just like -pron- do with the tile before alternatively i could say that because -pron- be just a simple contiguous array i could say that point go to pass into here be always the beginning of where i want -pron- calculation to start i just need to say the number of item so let -pron- put another squeeze in here another item in here so -pron- have get the number of item that i actually want to work on that case so this would be a size t and again -pron- will be numb item right",
    "so let -pron- create a couple of example of this so now when i create a task i go to create that today on the heap so let -pron- do that i can say right -pron- will have a task pointer ok i get t one and all this make -pron- wanna little bit nicer though t one equal now i need to get some memory sir let -pron- call malloc an as usual let -pron- make sure when -pron- slow down and check the number of byte that -pron- actually want so today want not there -pron- go so -pron- size of i do not want ask pointer that would only give -pron- eight byte or four byte i actually want enough byte to hold this little struct so there -pron- go task underscore t right so now -pron- have get that back good error checking would check to make sure that that be non null",
    "that malloc work right ok t one i want to set the number of item so this will be half the array ok right ann and the ok and the number of datum that -pron- want to work on ok so that can just be the ok the same as what -pron- be call all right so -pron- have set up and now -pron- can ok cool that as -pron- argument here ok now how this memory be free in fact -pron- can delegate that to -pron- image calculation so once that actually have complete -pron- can call free on this argument so -pron- be perfectly fine to create memory inside one thread will create heat memory inside one thread and release -pron- inside another just",
    "in the future all right so -pron- have create one and -pron- could do the same thing for another task as well so i will not bother to write all that down but i will sketch out one problem here which be be careful if -pron- item be an odd sized -pron- would end up write something like this -pron- would say right number of item that -pron- actually want should be -pron- parameter an item minus the half that the low half that the first thread be go to do for -pron- ok so that be take care of a potential off by one hour and in this case -pron- be go to pass in the datum ok now -pron- can use pointer arithmetic let -pron- make sure that -pron- be point to the right kind of thing -pron- just want to offset by half so -pron- could imagine write this in a loop as well so that -pron-",
    "create threat alright so what do i need to finish well obviously i need to put another p thread create here and then a whole order pizza join to make sure that -pron- do not continue until all of all of those thread have finish otherwise the caller will assume that the datum have be properly and manipulate and the output be ready ok so do not forget to do the join down here and in a sense what -pron- have create be a barrier that -pron- have start all these thread be go to let -pron- earn independently but then this thread do not continue until -pron- be certain that all those be the pet be finish ok one last comment here be that -pron- could actually implement this just use one additional thread",
    "so -pron- could directly call say image calc on -pron- here so -pron- could say ok image calc and here be t two and so that would reduce the overhead of create a second thread in this example do that save -pron- alot little tiny bit but create thread be pretty cheap and -pron- be try to create ten of thousand of -pron- so the much cheap than create a process so great now -pron- can actually walk into an internship and say right assume -pron- code i will speed -pron- up i will make -pron- run twice as fast except as mckenna discover -pron- never get quite as much at speed up as -pron- claim so -pron- can use marketing speak ceo will be up to twice as fast because -pron- be pretty confident that there be go to be some additional"
  ],
  "d134a7b4-0001-41ff-bfa4-8f4f15a30f69": [
    "oh i get a challenge for -pron- let -pron- go back and write flush for the case that -pron- actually implement the c library oh how can -pron- do this well this moment -pron- be time for -pron- to actually say to the system ok here be some bite so -pron- would want to say ok hey write and inside -pron- file i know the file descriptor so let -pron- grab that the buffer be that i think -pron- call -pron- just buffer and the number of byte that be not go to be the buffer capacity instead -pron- have -pron- call -pron- size ok so let -pron- send those bite and then let -pron- reset the amount of buffer that -pron- be use so ok will set size back to zero ok so that be not too bad there -pron- go uh right now if i want to possibly make this have a little"
  ],
  "d1de06d0-ffdb-44f8-9fcd-6df31432c967": [
    "hi welcome to lecture twenty four let -pron- start with the code review ok so -pron- be go to do -pron- be go to look at a fix sized ring buffer and look at an implementation and -pron- know the follow thing about -pron- so first of all -pron- use count semaphore and the first one s one be go to be initialize to two fifty six so this be kind of count the number of free space be or how much capacity be leave s two be initialize to zero so that be count the number of thing -pron- have actually get inside the buffer right now and then -pron- have get lot of thread produce thing and consume thing as well ok so here be some question that -pron- may want to ask in sort of code review first of all can -pron- find a way that deadlock can occur in other word when good -pron- actually get stuck and if so under what condition could -pron- be for example when -pron- get completely full or completely empty be underflow possible meaning that be -pron- possible for d q to return something even though -pron- do not actually have anything inside the buffer right now in other word -pron- will just return some multivalue that happen to be store inside the buffer",
    "be not any space leave so presumably -pron- have corrupt or overwrite some datum that -pron- actually do need like an early piece of the buffer ok so let -pron- actually take a look at the code now and see what -pron- can find right so the first thing i notice be that -pron- be actually call mutex lock really early on inside nq normally -pron- 'd only expect the lock and unlock to be around the actual call of where -pron- change the change the array here and the second thing i notice be ok good so -pron- buffer size be two fifty six and in fact -pron- be go to wrap around after -pron- get to two hundred fifty five so what -pron- have get then be kind of long hold of the mutex lock inside -pron- enqueue here so -pron- concern be with this",
    "those be produce an item want to queue -pron- up and -pron- call sem_wait but i do not have any space leave inside -pron- data structure here in other word what if s one be zero -pron- may have a problem here because now -pron- be go to sleep -pron- be block inside the sem_wait call but -pron- be still hold on to the mutex lock this be not a condition variable ok -pron- be just a simple counting semaphore oh dear so can -pron- have deadlock well let -pron- find out to what happen on the d q side so on the dq side -pron- be go to wait until at least one item ok that be true and then -pron- call sem_post and -pron- do this without require the mutex lock so here -pron- be lucky there if -pron- also hold onto the mutex lock early if -pron- mutex lock have be one of the first thing -pron- have do then yes -pron- would have encounter deadlock because the",
    "that that mutex lock that would have never be never be release definition of deadlock wait for an event that never happen so -pron- do not find deadlock just there there -pron- come awfully close right what else can -pron- find out about this code then ok so let -pron- see the same post happen early ok that -pron- be actually increase increase the count of the number of item in -pron- buffer before -pron- even change the buffer value ok so -pron- be basically go to add one discount here so if somebody be wait to extract value in other word if a thread have already call d cube but be wait here because the count of s two be zero -pron- be go to release -pron- from that early oh yeah so this line sound like a recipe for underflow that because -pron- say -pron- have incremente -pron- pizza box by one even though -pron- have actually put",
    "no because -pron- dequeue can not complete until the mutex lock be release because -pron- be require before actually touch the buffer if this code try to be a little bit more performance by give the nq in the dequeue different mutex lock then -pron- would have run into a problem because then -pron- would have allow a dq thread to try to read a value from the buffer before -pron- have even put the value in right so well code of course would actually only increment the counting semaphore after -pron- modify the buffer so so this line actually belong down here so do this later ok and -pron- can do -pron- after -pron- have release a mutex lock ok and the same weight as well -pron- should do early ok let -pron- just see what can happen on the d q side so",
    "which be great than the total number of item which be currently in the buffer so -pron- be not possible to underflow here -pron- do call however sem_post before -pron- have before -pron- have extract anything from the buffer so could this be a problem yes actually -pron- could and there be a very small opportunity but when bad thing can happen -pron- generally will so let -pron- see what the problem here be that let -pron- imagine that -pron- buffer be full now because -pron- consider the case where -pron- be be completely empty so now let -pron- go to the other extreme of say ok imagine -pron- be completely full in other word all two hundred fifty six item at all slot be be currently use so -pron- sem",
    "be zero i think be that -pron- run yeah so no that be yeah s one be the amount of space so that be currently zero ok so yes -pron- be able to continue through both these line and -pron- can start take thing out of this but imagine just this moment before -pron- call mutex lock a new enqueue event come in so just before -pron- big red arrow here just before call mutex lock if -pron- have get the case where -pron- have actually get two hundred and fifty six item inside the inside the buffer ok then -pron- sem_wait can can decrement that and -pron- sem",
    "moment an enqueue event happen then that can that can continue through and overwrite the very value that -pron- 'd like to see -pron- still need all that entry inside -pron- buffer but now because -pron- have post on s one then if an nq thread appear then -pron- can continue -pron- have not yet get the mutex lock so -pron- get the mutex lock and then -pron- call sem_wait on s one but -pron- have already incremented s one so -pron- get to continue and then post on sem_post which will never block and now -pron- overwrite -pron- buffer so -pron- be pretty big unhappy space here yes -pron- have see a problem here of overflow buffer overflow -pron- override a value that -pron- actually need -pron- actually manage to put too much stuff into the buffer now the chance of that happen be pretty small be this very small number of microsecond between -pron- call sem_post and then ask for the mutex lock but that be a non"
  ],
  "d20bd8cb-7714-4093-a0bd-850b11d62c39": [
    "hi ok so -pron- be go to look at a couple of fun animation in a little bit -pron- be go to look at how to build a mandelbrot picture but first do -pron- member see the matrix movie where neo be trap inside a virtual world ok so let -pron- think about how -pron- can produce this kind of effect and of course -pron- be go to use this to think about thread what will have be different thread be be responsible for different part of this rain so each kind of raindrop will have a state and will update those independently -pron- be use thread so that be kind of -pron- game plan that i think about how -pron- can do this cave so -pron- be go to spec out a simple program -pron- have get to have ten thread and here be -pron- global variable so all of these can be access from each each thread as agree one copy of these variable -pron- have get all of -pron- thread which be go to be the runner which actually do the display so actually calculate the position of the of the vein and then -pron- have get another threat who be go to be",
    "-pron- do see how -pron- do this ok -pron- have get little help function here to workout the height and width of -pron- display and now i want to represent that so with -pron- ascii graphic -pron- be go to have a character i want to display in each one of those position of -pron- little terminal window so -pron- have get height time width and i just want to initially to set all of those two a dot k so rather than may be in for loop let -pron- use -pron- more performant memset i want every bite to be this doc character so whatever ascii value that happen to be happen to be thirty three but no one need to know that and will do that for the say half million character or however many there be in -pron- display probably eighty time twenty four for example right so time to get start right so here be here be the plan then right i need the thread runner that be",
    "and as an argument will pass that heap memory and then -pron- have get all of -pron- runner which actually cause the rain on -pron- display so -pron- be go to run a little function call run and again i pass a pointer to -pron- heat then -pron- so -pron- may be concern that -pron- variable here image be actually a stack variable will remember -pron- be not actually go to that particular variable -pron- actually pass -pron- value what be this value be a pointer be look at the heap memory that -pron- -pron- allocate here ok so yes -pron- be use a heap stack variable here but that be fine because actually what get pass be the address of of heap memory of the mileage memory ok so anyway back to this -pron- be go to create all of those thread -pron- remember",
    "-pron- main thread in other word -pron- will never get to this line here so will never be return forty two at this point ok so that be all -pron- main thread what about other thread be go to look at that ok with that instead i want to scroll over -pron- keep so -pron- display be pretty simple i just want to print print out everything and for that -pron- be go to use right today remember how -pron- work be -pron- simply say here be a memory address start send the follow byte and as -pron- be send this to a terminal -pron- be go to see that as ascii value so -pron- have just get a very simple a piece of code here that go through this print out a width number of byte and a little bit of calculation here to workout where in that heap i should start from at the end of that do a new line have go to the next",
    "write use octal so that be three time eight plus three this be the magic sequence to tell the terminal to go back back up so that in a certain amount of time will go round this loop again and -pron- want to rewrite the whole display start from the top so -pron- be ask for ten millisecond delay and then around -pron- go again so that be -pron- display loop as -pron- can see -pron- do not actually do any calculation -pron- simply take what be in -pron- heap memory and display -pron- and send -pron- out to spell -pron- out -pron- stand up -pron- file descriptor one ok right and then what about -pron- -pron- rain effect while here be here be -pron- loop -pron- be go to run remember this little piece of code ten time ten different cpus",
    "this independently each one get -pron- own stack so each one have image pointer each one get -pron- own memory to hold -pron- own value of x which be go to be just some random number so -pron- be basically choose a random column and then -pron- change change a particular particular spot so in this version of the code -pron- be go to flip some bit so this be x or and -pron- be flip some bit here right and then i sleep for some random amount so depend on -pron- ex and again this be just kind of show -pron- the idea that -pron- be go to have all these different calculation run in parallel ok so that be the code let -pron- actually have -pron- run -pron- so i think -pron- have call -pron- matrix will just check that the azure code that -pron- be go to run look similar to that yeah -pron- be flip some",
    "ok and here be -pron- magic code to get the width and the height -pron- see -pron- be take pointer to -pron- to integer and then i update i right into those location ok so back in -pron- main method where be -pron- -pron- can say get terminal width and will pass in the address of two integer the last thing to do be change the colour so there be control code -pron- consent to change the background color in the foreground color in the terminal ok so great let -pron- run this right and -pron- see ok -pron- have get -pron- initial version of the matrix -pron- do not look quite as cool -pron- have get a few way to go before -pron- can win oscar yet but hey -pron- be a start so let -pron- let -pron- improve this and when i hit control",
    "but if -pron- type reset that send a whole order control control code so -pron- terminal be back to black and white so let -pron- just improve this a little bit i do not want just flip bit like this let -pron- choose a character as well so i could say choose choose to set set -pron- equal to some character which be randomly choose form from this set of sequence here cs two forty one box so -pron- be choose a random number modulo the length of the message use that to pull out one character and then -pron- be go right into -pron- image i could also make those letter go appear to drum tumble down bye bye clear out the last one so i could do something like this like y minus one equal nothing say the dot again alright what do -pron- think about that ok so once care",
    "-pron- be go to write into some arbitrary piece into the heap maybe not such a good idea let -pron- instead -pron- will after sleep for a certain amount of time -pron- will clear -pron- back to -pron- original dot again so let -pron- run that ok so will compile -pron- -pron- have get to make script and -pron- want to run metric ok so now -pron- have some letter fall but -pron- be hard to see because -pron- clear -pron- out straight away so -pron- even far away from an oscar by the way do -pron- know which language be actually win an oscar for technical achievement yes if -pron- guess see -pron- 'd be correct and maybe -pron- will talk about perlin",
    "-pron- see today need some kind of interesting noise -pron- do not want very high frequency noise -pron- do not want very low frequency noise and a guy call pearl in actually develop a noise function and write -pron- in c code and that be now a very common source of noise for graphical effect so -pron- look -pron- up perlin noise or like i say -pron- be the only a piece of code and -pron- be in c to win an oscar alright so there -pron- go that be -pron- first piece of graphical code use a whole bunch of thread to run and feel free to play with this and turn -pron- into something that look more like a matrix like the matrix movie i hear that the original coding of the matrix effect actually be base on character scan out of a chinese cookbook but that be why do not -pron- kind of invent -pron- own character"
  ],
  "d310b36e-5c21-4803-b0c6-78d62b73b532": [
    "ok so let -pron- check -pron- understanding first of all -pron- have see fork -pron- first question to -pron- there be this model there -pron- go right so -pron- use four quote do -pron- know that -pron- create a second process -pron- clone the exist one so other variable share and no that though -pron- use the parent as -pron- template -pron- now have two independent process -pron- pointer variable -pron- address location -pron- only make sense inside a particular process i just want to imagine for a moment that say -pron- be run gcc -pron- be run gcc inside those process there be lot of pointer go on go about whether -pron- be c code or c plus plus code those menu location be actually scope by virtual memory by that particular process so -pron- idea of what be the address ten thousand be completely different and independent of what i think be address ten thousand so there be a very kind of important idea",
    "lecture anyway but -pron- do and when do -pron- return -pron- usually exact do not return usually with exact -pron- provide a program on disk to load and that be the moment -pron- give -pron- poor little process ahead temp head transplant -pron- have completely throw away all of the heap memory order the stack no need to do free or all that memory have disappear to be replace by a brand new program -pron- be the same process and will have the same process id and the same number of open file but now -pron- be run a completely different program that be go to start from maine so hopefully -pron- can now see that a very very common pattern be to call fork and then inside the child process -pron- want to do something else -pron- do not keep execute the same code",
    "-pron- do not by call wait pay id and -pron- know the process id of -pron- child because that be what -pron- can get back from fork right so let -pron- just review again in now code as to how -pron- would use be go to wait pid so if -pron- go to the manual -pron- will look at these definition again and -pron- be go to call wait pid and pass in the address of -pron- little integer here and for option i do not need any option today there be option which -pron- may find useful in the future for example wnohang to say hey wait pid if -pron- child have not actually finish do not just block instead immediately return and i can detect whether weight pid successfully wait for childhood finish",
    "-pron- see last time -pron- explore and -pron- actually see -pron- implementation now let -pron- think about the more abstractly to say that these macro just extract bit based information out of -pron- integer but there be there be rule that -pron- need to be aware of first of all -pron- can only actually check the exit stat status those eight bit of the exit status provide -pron- first check this other macro provide the first thing that w if exit be non zero and similar -pron- can only actually of pull out which signal terminate -pron- process if -pron- first check if signal be true and in practice only one of these could be true -pron- do not make sense to say -pron- program exit normally and -pron- signal as well there be a couple of other reason why wait pid may return for example -pron- can actually pause"
  ],
  "d3378aac-9686-4a0a-874e-b599c3686e2d": [],
  "d4a2eab5-55da-4f12-ac50-fe32c6e4d99a": [
    "ok so some standard schedule algorithm so here be the plan be that i could imagine a little kind of fairground ride here so here be -pron- kind of little fairground ride maybe -pron- be a rollercoaster maybe -pron- be a big wheel ok but that be where -pron- thread and process be happy when actually on the cpu use the cpu but lead up to -pron- -pron- have get a ready queue ok so here be the kind of long the long line of process or thread that would actually like to use this -pron- be go to start this reduce -pron- to talk about process but -pron- be sure -pron- can see how -pron- can generalize this to thread for multithreaded program as well ok so for -pron- cpu right now -pron- have get to say process five have arrive be ready to run and -pron- have give at the cpu or any other process which want to use this cpu be in this long",
    "be how about a first come first serve queso p five arrive first and then -pron- have also get process six process seven process eight etc right so -pron- have get a whole line here right be that fair well like -pron- have be try to say before be that there be no simple definition of fairness -pron- depend upon -pron- objective and whether -pron- be a batch interactive or real time system so what do -pron- think about this kind of first come first serve idea ok so -pron- be fair in the sense that the early job will get access to the cpu and then once process five become block or finish then -pron- can everybody can move forward so yes eventually all process will get to play on -pron- fairground route well get to be on the cpu who right so another name for first come first serve",
    "which be a first in first out queue ok and and the priority of -pron- process be simply base upon when -pron- be ready to run ok right so that be -pron- first simple idea very very easy to implement -pron- just need to write a simple queue data structure and will just pop the next process off here and run that next on the cpu ok so let -pron- think about some other scheduler rich now a little bit more complicated so -pron- be go to next look sjf which be short job first ok so suppose -pron- be either clairvoyant mean that -pron- could actually go to analyze and workout -pron- exactly how long -pron- take a job",
    "so -pron- actually have an empirical result base on how long -pron- expect these job to run but -pron- could actually kind of prioritize -pron- job base on how much cpu time -pron- need and this by the way be the total cpu time -pron- need and in fact on a real system -pron- talk about the idea of the burst time so let -pron- go back to -pron- very first discussion about hey on real process be -pron- may not actually need one hundred second of cpu time in total because after one second of cpu time -pron- be ready to do some io again -pron- be ready to say read the next piece of datum or perhaps right out some kind of result so the time the cpu time that -pron- need right now in order to get to that point be call the first time so a real sjf system",
    "be the be the idea that hey some job only need or some process be only need a tiny well cpu time so let -pron- give -pron- the cpu first that way will get lot of thing do over the next minute or two because -pron- have maximize a number of process that can actually complete because each -pron- be go to give priority to the process which only need a small amount of cpu time right now there be another version of this which be call the preemptive short job first and so with preemption -pron- be allow to kick someone off the fairground right ok so let -pron- imagine right now that process five because -pron- only need one second",
    "a new process be create let -pron- call -pron- process ten and process ten only need point five of a second so what do -pron- do right so -pron- will take process five kick -pron- off the first real process ten now have priority because -pron- -pron- have a small burst time and process five will go back into -pron- q presumably process five still have the short burst time of all the other remaining process be so -pron- will be next ok so that be preemption where -pron- can walk up to a table and say get out of that chair -pron- be sit there -pron- can be rude with presumption -pron- can stop a process while sit in on the cpu so that be the big idea preemption that -pron- can stop a process that be currently assign to cpu because -pron- have decide to cpu be go to date someone else and sorry that process do not have a choice",
    "of a bully if -pron- like but the idea be that -pron- always want to give priority to the to the in this case the job which have the short good time right so here be another one which be kind of very famous horror i rewrite this dance for round robin ok so this be not about singe a hundred versus of a country and western song because -pron- be more fun than singe just fifty round robin be the idea that -pron- want to give the cpu to a process just for a limited amount of time so this be great for interactive system so what will do here be on -pron-",
    "process be happy on here -pron- be ok proof i if -pron- can have this i do not care now pre five how much time -pron- truly want but realize -pron- there be a queue behind -pron- -pron- be and at the end of a certain amount of time real fairground ride maybe -pron- be two minute but inside -pron- cpu 's -pron- have a little time be so here be a little hardware clock as well and after let -pron- say one millisecond -pron- little hardware clock make a little electrical signal to the cpu and -pron- run a tiny piece of code inside the kernel which be part of the scheduler to say hey time up for -pron- current process right so pre five i know -pron- want more time but -pron- be go to interrupt -pron- i know -pron- be deep inside that for loop right now but here be what be go to happen to process p five -pron- be go to put -pron- back at the back of the ready queue",
    "be in front of -pron- ok so in the mean time say -pron- create process ten -pron- be in front of -pron- process six -pron- be up next ok so this be a different idea of fairness the idea of a round robin be that -pron- still have some ordering but the process will get some cpu time eventually so the amount of time that -pron- allow a process to have be call the time quanta here -pron- be and -pron- could think about the extreme here suppose -pron- say that -pron- clock be go to go off every ten nanosecond right what do -pron- think about that ok so the problem about do -pron- be such a short period be that of cpus today do have order one instruction per nanosecond so -pron- poor little cpus be poor little",
    "of switch out from one process to another make -pron- system very sluggish -pron- performance have drop a significant amount now the -pron- barely have enough time to switch out one process and put a new process in the percentage of time that -pron- be spend inside the kernel scheduler code be now a lot more than say just a percent or two so -pron- have pay for this two daily so let -pron- go to the other extreme let -pron- imagine that -pron- say well i see what will swap out process after ten minute ok so now -pron- very rarely swap out process be so the overhead of run the kernel scheduler code be minimal but this be not so hot for interactive system now the time be go to take before process ten get any cpu time may be upwards of an hour more that be a long",
    "long time say ten minute most process will not even use up that full ten minute maybe -pron- will get stick in an io event or -pron- will call preferred mutex lock or something and now -pron- voluntarily give up the cpu so in this case be round robin have become like one of these other which one ok if -pron- say first come first serve then -pron- 'd be correct yeah now -pron- have an alarm clock but in practice -pron- never go off in practice or -pron- have -pron- have become like first come first serve so -pron- need to choose a time which be somewhere between these and the decision be actually base on human factor which be -pron- want to make sure",
    "-pron- want to make -pron- so that there be some interactivity so for thing which only need tiny amount of cpu time when -pron- press that letter -pron- generate an eye over event hopefully -pron- be go to see that letter arrive on -pron- terminal ok so what would be of reasonable time well human reaction time be slightly less in a second be of order ten millisecond or so so a reasonable time content may be ten millisecond in fact many old system have ten millisecond today however most linux system use a short time quantum of about a millisecond because there may be multiple active job inside here and and so if -pron- have a short quanta then then if -pron- be swap out multiple process in here then hopefully -pron- will get each process will get a cpu time within the reaction",
    "another quick comment on this be that if -pron- be work with audio then one millisecond ten millisecond may not be enough -pron- can actually easily detect for example the difference in timing between an audio signal arrive in one here and another so -pron- may not be satisfied with a round robin approach if -pron- have near real time need of processing audio so with audio -pron- would actually may consider kind of other high priority system scheduling be dead right so there be kind of the basic theory and operating system course can develop formula and talk about these kind of example model in detail in today 's real lennox world -pron- do not",
    "fair scheduler ok why because -pron- be completely fair ok so will just mention this briefly the completely fair scheduler be interesting because -pron- actually start life as a networking scheduler so again -pron- have get this problem of a limited resource which be the network bandwidth -pron- be go to send out assonet next network packet from -pron- network card and give that -pron- have get multiple person be try to send out multiple different kind of stream udp packet tcp packet at the end of the day -pron- have actually only get one physical electrical wire to send those bit out on so who get to send the next packet right so so -pron- can take an idea of hey let -pron- try to be fair in the sense that -pron- will allow different packet",
    "recently then -pron- be go to give -pron- a full allotment on the other hand if -pron- seem to be send lot and lot and lot of bite all the time then -pron- be just go to give -pron- a regular sized allotment of the network card -pron- be go to play the same game then with this cpu so the completely fair scheduler behave like round robin except let -pron- keep track of how much of the time quanta that each process use so the idea be that -pron- want to give kind of bursty behavior to some process be so for example let -pron- say that -pron- resize the window that may take up a lot of cpu time in order to do all of -pron- kind of layout and updating the data structure etc but -pron- 'd like that to be as interactive as possible so will give -pron- an extra piece of cpu time if -pron- have not be monopolize the cpu in the recent past so let -pron- keep track of whether -pron- use up the"
  ],
  "d4eaea6f-874c-4acc-a000-07cdfb9fa35b": [
    "ok so -pron- have kind of talk a little bit about this idea before so -pron- could i implement p thread mutex lock just by disable interrupt on on the cpu so the idea here be that if -pron- code be run on the cpu if i disable interrupt then i can not be stop become agent smith out of the matrix that now i own the cpu so no one else can can take -pron- for -pron- so one of the limitation of this first of all that yes -pron- can ensure that -pron- be the only one go into the critical section if one there be only one cpu ok so if i control the one and only cpu and i can not be interrupt then i get to do everything inside the critical section until i give up the cpu ok so provide",
    "-pron- data structure no one can stop -pron- because i disable into app ok the second be that i require an here be a big problem here be that actually require sufficient privilege to disable the interrupt and because this be such a powerful operation by default that be disabled for normal user program -pron- need interrupt in order to make a cpu stop run one thread and start run another in order to handle hardware interrupt -pron- too do to device iot device be ready to either take datum from the system or give datum from the system for example the network card may report that -pron- new package arrive and here be some datum or a disk or solid state disk may report hey -pron- have now finally get the datum -pron- can now read this into memory or gpu",
    "of reason why -pron- in over a normal complex system -pron- can not just disable disable interrupt ok so this be one solution to the critical section but like i say -pron- be not a generally useful solution to the critical section -pron- need to find a way to be able to kind of implement these correctly and will talk about some algorithmic concern about that in the future instead now be what -pron- have get a real challenge for -pron- which be i want to implement a barrier in fact -pron- be go to give -pron- all the code that -pron- need here -pron- be i just want to implement a barrier that will wait until five thread call this method call this function and -pron- have get to keep track of how many there -pron- go and all -pron- be go to give -pron- be the follow code which use a counting semaphore so -pron- get to choose how what -pron- would like to implement what -pron- 'd like to"
  ],
  "d51e1b38-6c01-4584-9e0b-69d42464cfa6": [
    "hi so let -pron- workout how -pron- can use real path to actually test something about -pron- directory structure and for example whether file be truly inside the directory that -pron- care about alright so first of all let -pron- have a quick play with -pron- directly so here be real path and will see that -pron- be go to pass in the follow relative directory so that be relative to the current path of -pron- program the current path associate with this process and -pron- be not go to give -pron- any memory to write the result into so real path internally be actually go to call malloc be go to get some heat memory for the result which be why at the very end -pron- be go to free -pron- so -pron- will notice i put a little bit of logic in here to see whether -pron- actually would turn valid path or not will be play with that in a moment so let -pron- get start however just as this and will compile -pron- ok so just so -pron- know where -pron- be -pron- process directory be here and",
    "-pron- a second so -pron- have go miss skin -pron- go all night to fix that ok right so what be -pron- down -pron- be give -pron- a path which be the absolute path but as -pron- can see -pron- be drop two directory as -pron- have drop slash code slash like twenty seven at the top which make probably say because -pron- go to the parent directory twice so what about this suppose -pron- go into some subdirectory quote someone sub two and then -pron- go back out of -pron- ok so let -pron- try that what do -pron- think be go to do so -pron- will compile -pron- ok run -pron- again and this time -pron- be no such path so real path be do more than just simple string manipulation be actually test to see whether each part that",
    "find that directory -pron- actually have to go and make those place -pron- have to make someone sub too so let -pron- do that -pron- can say make this one and then make do a sub one sub too if i want to do that in one go i could have actually say minus p and that would have make all of the child directory which do not exist for -pron- automatically so i could have do that even just one go but anyways so so now those exist so now when -pron- run -pron- -pron- give -pron- a non null path -pron- go into someone when -pron- be up two and then i say ok now i need to find a parent now -pron- find that so great be give -pron- canonical path let -pron- start talk about how -pron- can use this for something like a file server so which be part of a web server how can i make sure that i only serve content from -pron- web directory i do not want to start this happily send the content of arbitrary file ok",
    "-pron- be go to use ass printf and also straw compare but not destroy compare but stewart end compare so -pron- will see how these be useful so remember that if -pron- call sprint app and nothing be go to appear instead -pron- give -pron- some memory -pron- say ok here be some memory on the heap that -pron- have already meet locked and please write the string into -pron- so for example if i want to construct path like i may say ok look at percent air some center and this may be say the the root of where -pron- be store all -pron- file and the request from the user of to what particular resource -pron- want that be great but i well make sure that this string that construct be no big than the heap memory that i require perhaps i just want to be lazy and say hey predict can not -pron- just get some heap memory automatically for -pron-",
    "reserve some memory on the heap and return a pointer that ok so -pron- just have to put in a sprint f keep go down here here -pron- be -pron- will see that -pron- take up pointed with pointer so now with aspirin def -pron- actually say ok here be the result -pron- result variable and i want -pron- once address because -pron- be go to change -pron- so so i actually have a little build for example that and that be go to be change and then later do not forget to free -pron- as well so let -pron- be good zero so -pron- could check to see if -pron- really work if -pron- want to write really robust code ok so let -pron- say where be i go to store -pron- file let -pron- say that all the file i want to serve -pron- inside",
    "say -pron- be a picture of a cat ok there -pron- go g big ok so great -pron- now know understand the user request so this be the kind of file to serve ok let -pron- put that quickly refactor that ok so now let -pron- actually see what that look like as a canonical path great so i will put that in as -pron- actual real path ok so i do not want to free -pron- just there be free -pron- later ok so now i can actually calculate the actual canonical path that -pron- be go to send back or send to the user ok so and -pron- notice that -pron- have get two string now on the",
    "file sub one sub to cat dot jpeg and touch do two thing -pron- create a file if -pron- do not exist obviously with zero byte and also -pron- have just go to change the modification time to just now so touch even if the file exist be modify the metro information about when the i be last change when -pron- be last modified ok so let -pron- give this a shot let -pron- actually try this and see whether -pron- get a valid path so let -pron- clear this and -pron- compiler so -pron- want clang on realpath demo great -pron- be give -pron- back the actual path the actual canonical path of -pron- valid resource so if i want to double check that i truly be serve thing",
    "of the following in other word the canonical path should always start with the follow character that -pron- have highlight if there be a malicious user request resource for example -pron- may request dot dot slash dot dot slash dot dot slash dot dot slash etc let -pron- say message of the day or the password file or something more nefarious to do with -pron- web server now -pron- may claim oh i do not know how many parent direction to go up well -pron- do not take very long to try for and -pron- do not work try five then six and then seven and pretty soon -pron- be go to hit the original root directory so this be just a simple problem of enumerate these and typically -pron- be go to be less than ten ok so let -pron- try that so will want -pron-",
    "well i will try a couple more ok oops i want out ok look -pron- actually find -pron- password file so -pron- guess the number of time to go up and in fact in this case because of the symbolic link which -pron- have not talk about yet on this machine et see password -pron- be real canonical path be that follow private ttc password if that be the absolute directory so if -pron- be to check this result -pron- would quickly discover that -pron- do not look like a valid subdirectory of of -pron- web server so what i should do then be check that the first say thirty character also truly be look like the base directory of -pron- web content so what i",
    "ok let -pron- do this be that will say that the base path can be for the web server that be go to be all the content inside sub one in case and now -pron- have get two path and now i just want to see if -pron- be valid so for this i want to say ok let -pron- compare the first end character so let -pron- have a look at the path of what -pron- 'd like versus the base path and -pron- will see if -pron- start the same so those be the two string i want to compare but i do want to compare all of the letter and -pron- want to compare up to the length of the base path ok so if -pron- be the same then great i now know that -pron- be look inside that subdirectory so -pron- can ok will check that return zero if -pron- be then will agree",
    "this be correct -pron- can say look valid to maine right otherwise let -pron- not give the use of that file so let -pron- see if i get the number of parenthesis correct right ok oh wait i need to include store compare so i have not include string late yet ok fine let -pron- get string each k right ok let -pron- run -pron- and right now -pron- do not look like a valid file so -pron- do not serve -pron- so this change back to something more reasonable like two and the cat picture kay kay so off -pron- go run -pron- again and great so now the request the file that -pron- be go to serve over -pron- web server look like a valid resource ok sure -pron-",
    "over here where i eat take the base path and i look at different request by use the argument but that be just repeat of the demo -pron- have just give again where -pron- use as print f and -pron- use real path twice ok so that be kind of quick introduction to real path -pron- be very useful on on a mac -pron- actually have -pron- as a command so -pron- can say realpath look look at the current directory for example on the link -pron- be not build in but -pron- would be easy to actually make such a such thing because -pron- now know that there be a sequel call real path -pron- just need to take the argument the other kind of thing to note be that -pron- can emulate this by do cd to account directory server example sub one"
  ],
  "d5fa5a60-c6ea-4207-bb11-869c29ad96ff": [
    "ok so let -pron- talk start talk about how -pron- can store item on a disk and in particular how -pron- may actually represent the datum what feature -pron- may want in -pron- file system so -pron- be go to start by just a bit of a brainstorm exercise by say if money be no object if i can get -pron- the good software engineer what feature would -pron- like to add to -pron- file system so let -pron- not try to be too constrain by the limitation of the file system on -pron- laptop or what -pron- have see in a linux virtual machine so far let -pron- actually think about what -pron- need ok so this be kind of real let -pron- start with the white board and will start to write down some feature ok so what would make a great file system right so let -pron- come up with a few idea and then all kind of see how well -pron- do and compare -pron- to some other kind of brainstorm exercise -pron- have do in the past right so what would -pron- like first well maybe -pron- want some access control right so -pron- want the idea that",
    "and perhaps i want to make sure that some people can not read all of -pron- file or perhaps i want to make sure that some file be only read only or perhaps i want to make sure that only a limited set of file should be execute so if -pron- give -pron- a a file i can not just easily turn that turn around and say ok bash run this or ok cpu load this as a program so i want to define some sort of security about -pron- -pron- file maybe -pron- want to write a file system create a file system that even track who be access the file so maybe the sort of audit and log auditing and log perhaps if -pron- be go to get -pron- file system to the nsa i want to know which analyst have open which file so perhaps -pron- have get some kind of logging",
    "create each week probably want to keep track of the late file so there be some meta information that -pron- want as well so -pron- have get thing like when be the last file access when be the file open and who by how large be a file in term of byte or other information or if -pron- be a music file who be the artist or where be -pron- record so -pron- may want to have more than just lump sum byte if -pron- care about multiple version perhaps -pron- system should innately support that so for example if -pron- overwrite a file perhaps -pron- system be be compromise and -pron- be try to lock up all of -pron- file in order for -pron- to pay some bitcoin to get -pron- unlock -pron- would",
    "so i could go back in time and pull out the previous version all version before that so maybe -pron- want some versione as well ok now on a typical file system -pron- be not unusual for the same piece of datum to be find in multiple place there be certainly go to be true of course with versione but -pron- and i may have a same copy of a text file same copy of a c file so if i share some music with -pron- for example or video file and -pron- be store -pron- on the same disk -pron- seem a bit of a waste of space to actually store those byte multiple time on the disk surface so perhaps -pron- want -pron- file system to support deduplication right do i find deduplication right to find multiple copy of the same information may be the same file",
    "ok what else would -pron- like ok so far -pron- have be think about feature what about performance ok so -pron- like -pron- file system to be nice and fast -pron- want to have a good performance when -pron- be empty and as good performance as possible when -pron- be get near full as well so -pron- care about the performance of the two different way typically -pron- have random access so if i start ask for oh no -pron- -pron- list be go can i get -pron- back there -pron- go right random access spell that correctly random access so i want to jump around a particular file say -pron- represent a database of all thing and -pron- be get different record from that or maybe i care about sequential access so perhaps -pron- have write a web application call class transcribe and i know",
    "file as fast as possible out of this machine onto the network so -pron- want good sequence sequential access and of course -pron- want to do this -pron- use in the minimum over cpu time because i want to use -pron- cpu for other thing so what else may -pron- need here right k so if -pron- be store say text information that text could easily be compress so maybe -pron- file system should support compression as well so for some file for example suppose -pron- be store all of the linux kernel that be just a lot of c code and i could store that in a very much small space on -pron- disk and if i can decompress -pron- quickly i may even",
    "and actually get well performance from -pron- file system so -pron- want compression potential potentially for performance if i can decompose quickly but also of course i want to maximize the amount of thing i can store on -pron- file system right what else ok so -pron- could go through and keep talk about kind of more feature like this but i want to remind -pron- that so far -pron- have be think very much like software engineer -pron- have forget that real filesystem live on real device and so a big thing that -pron- have miss out here i have not think about be that -pron- want -pron- file system to be robust so perhaps there be go to be an error on the disk surface because the bit be never write correctly perhaps",
    "make all of -pron- file unreadable just because one bit be flip similarly if i drop -pron- hard disk -pron- physical spin hard disk -pron- 'd like to think there be a fair chance that have not suddenly lose all of -pron- file so there be robustness in term of what damage and how likely be -pron- that -pron- be unable to recover anything there be also there be also -pron- could talk about the kind of likelihood of non rec of recoverable file so can i recover anything but i also may care about how sure be i the data time get back be correct so what assurance do i have",
    "so be there any assurance the datum be get back be correct so maybe -pron- want to initially store some checksum for example or maybe if the datum on the disk be absolutely super critical for example be define how file be lay out on the disk -pron- may actually want to store some of that format information multiple time on the disk so if that particular sector of the disk that particular portion of -pron- be corrupt i have a backup copy of this elsewhere ok right anything else ok i just mention one other idea -pron- want efficient backup so typically i want to be able to do backup on a regular basis and with large disk these day -pron- be become quite inefficient and quite timely -pron- take a long period",
    "which one have change which one have be create -pron- would be great if -pron- file system could actually tell -pron- which file have be create or modify since the last backup so -pron- need some feature to support that how be -pron- go to do that right i kind of want to mention that one fun thing about all these feature be that -pron- be not require of course with all application but -pron- also be difficult to implement together for example compression may or may not hurt performance deduplication require ability to scan file and may take additional cpu time additional memory and so may actually actually affect negatively the performance of -pron- whole system the last thing will put on here which be kind of go",
    "ok -pron- be -pron- be write -pron- be kind of sympathetic with the kind of hardware constraint and feature so for example if -pron- be wait on a spin disc there be actual physical constraint about how quickly that can spin how often a particular sector be actually readable if -pron- be write to an ssd then portion of that electrical system can only be write a number of time before -pron- start to become likely that i will not be able to correctly read that bit again in the future so i want to make sure that how i represent -pron- file on -pron- disk and how -pron- implement these feature and how i talk to the hardware respect the kind of natural physical constraint and feature",
    "up with a kind of a good list not bad for a quick brainstorming session let -pron- have another look at another list i make see how close -pron- get so what do -pron- what do -pron- miss so here be -pron- another kind of incomplete list ok so in this list -pron- think about kind of hardware failure so that include not just cosmic ray and kind of dust on -pron- disc surface but thing like what happen if a prior write to -pron- disk do not complete maybe because there be a power loss how likely be -pron- that -pron- be able to detect that or recover from that in some way or have i just lose the entire disk have i just lose all of -pron- file or in the future what i read back a file and not even realize -pron- be incorrect here be some other feature -pron- do not think about be account and",
    "fill up the storage system or do i want to be able to limit the number of file on the amount of disk space that -pron- be write to -pron- do not talk about indexing and search so if tomorrow i want to find all file by a particular artist or if i want to be able to kind of find the moment in a video file that the word camel be speak then perhaps -pron- file system should support that in interesting way k so everything else -pron- kind of come pretty close -pron- do not talk about encryption which be an important security idea so encription can mean different thing -pron- can mean if someone get physical access to -pron- disk let -pron- say -pron- steal -pron- can -pron- do not read -pron- file or if someone be a user or if someone even be an administrator on machine be -pron- able to read -pron- file directly form",
    "the actual information and the meta information as well maybe -pron- be not just enough to store to encrypt the actual content of a file maybe -pron- even need to make sure that -pron- be not possible to see the name of the file or who own -pron- or when -pron- be modify even the meta information become sensitive information ok right so that be a pretty good listen i hope -pron- get to see why actually implement a file system be hard and many file system today be surprisingly old -pron- be actually some of the old code -pron- will find inside the kernel why because write code without bug to satisfy all of these kind of design idea and design goal be really really really hard and this",
    "do not want -pron- file system to suddenly start misbehave when -pron- disk become full for example -pron- want all file system to work with all sort of edge case for example when a particular sector on a disk go bad or if -pron- want to start shuffle information around in -pron- disk for well performance in the future these little use case be all tricky and take a long time to kind of get right both in term of correctness and performance be -pron- expectation of this part of the of this part of the kernel work robustly again and again and again even if -pron- be write large number of byte at ten to twelve or great number of byte be very very high so -pron- tend to find that this code be extremely old and mature and extremely well tested ok so that be kind of a fun little game perhaps -pron- 'd like to think about -pron- own feature if tomorrow -pron- decide to have a new startup to make a new file system -pron- will return to this little game in the future"
  ],
  "d66b6d30-efd2-4f1e-976b-f89adad7606b": [
    "ok so -pron- do not need a definition for deadlock and this idea that -pron- -pron- thread be freeze up maybe one thread be wait for a mutex lock that be never go to be unlocked maybe -pron- be wait for something from a data structure which be never go to be give to -pron- so here be a general definition for dead log key text door work ok great make -pron- that big right so dead log be when -pron- be wait for an event that well ok can i type so i put in some in there ok will never happen ok so stop try to make -pron- day to happen -pron- be never go to happen stop try to make this thread exit -pron- be never go to happen ok so -pron- poor poor little fair door process be wait some for an event maybe -pron- be go to signal that",
    "just never go to happen so -pron- do not get to complete -pron- do not get to kind of run -pron- activity or run the code and of course debug deadlock be tricky -pron- be often there as pair that i could a thread maybe -pron- be stick inside p threat condition wait and -pron- do not know why why that event do not have not have not fired have not occur ok so -pron- have get this general definition of deadlock now actually let -pron- see if -pron- can kind of construct some example where -pron- actually cause -pron- so let -pron- use team mutex lock and two thread to create an example of deadlock ok bye -pron- be go to actually do this in a text editor ok let -pron- go right do i have so if -pron- have get thread one imagine -pron- thread first red make the coda big right have call",
    "lock on this first mutex and then after -pron- have do that please lock on this other mutex right so -pron- will do some work ok do something and then after that -pron- want to at least ok so -pron- will call p thread unlock on both of these mutex be ok so for example maybe -pron- want to take some datum out of out of datum store one stick -pron- into datum structure to ok -pron- do not matter particular which order that -pron- release -pron- in just for symmetry -pron- be go to do -pron- this way but let -pron- let -pron- think about what happen if -pron- lock these in a different sequence inside another thread so -pron- be go to have now another thread that do the same sequence of operation accept ha -pron- have swap these around the case so",
    "like most of the time no most of the time -pron- thread be perfectly happy do what -pron- need to do until the follow happen until one unfortunate day thread one have call preferred mutex lock on get this choose a new color call prefix lock on the first one case be complete that at the same time -pron- other thread which be curiously call thread one so let -pron- fix that thread two right have just acquire the lock on mutex too so now -pron- be both able to do this but what happen",
    "let -pron- go for yes -pron- be kinda extreme pinky purple thing let -pron- try that ok right so now what happen thread one say -pron- 'd like to lock this mutex but of course what do this do -pron- block ok why because another thread have that new text between -pron- and -pron- -pron- know -pron- be thread two meanwhile thread two try to look -pron- take one and that of course block -pron- be not yet available another thread be currently quite that music lock ok so when will -pron- escape out of this and the answer be never ok -pron- can read the code and see that eventually -pron- be go to release these lock but -pron- be never go to get to that that piece of code that thread one be wait for thread two and thread two be wait for thread one so -pron- be kind of stuck for stick forever",
    "be in the same order -pron- would have be fine let -pron- just kind of quickly sketch that out to see that let -pron- imagine that i have -pron- first thread do mutex wear and then mute x two and then mutex wanna mutex two down here for thread two then if -pron- both try to acquire mutex in at the same time then -pron- can imagine that thread one would acquire the mutex lock here which would mean thread two will be force to block so -pron- do not get to go to step two which mean thread one can continue and then when -pron- be finish -pron- will release those lock so now thread two can finish so if -pron- 'd actually write -pron- code like this in the same order -pron- would have be impossible to get deadlock",
    "semaphore sure ok so let -pron- do something similar with count semaphore where thread one call say sam weights on count center four as well and at the end -pron- will will increase the count again ok so now -pron- will have another thread that do something similar or key and another thread do something similar ok so do -pron- see any problem right now nope -pron- could imagine that these counting semaphore 's -pron- kind except for have be initialize just account of one ok so same",
    "for every same weight call -pron- call assam post ok right so what if -pron- could have make -pron- a little bit more complicated though and -pron- say that same weight here be go to in order to continue -pron- be go to wait on this thread and then -pron- be go to post on some sample to an meanwhile thread two -pron- be go to wait on count semaphore two and then -pron- be go to post on count semaphore three ok and then some weight three -pron- be go to then post inseminate one ok if all -pron- county be force to start off with a value of zero -pron- can see that no one get to play that all of -pron- thread have get stick that -pron- first thread be block here wait for the value for sale want change well someone will change",
    "pizza slice and be able to get that piece of slice form -pron- be wait for sam post to be call by thread two but thread two be not go to give -pron- that pizza slice until -pron- get a piece of slice out of count semaphore s two and where will i get that only from thread one when thread one finally call stem post but that be not go to happen because thread what be still wait for the pizza slice from thread three so now -pron- see -pron- have get this love triangle here between -pron- three thread -pron- will never go to continue that always wait for an event that be never go to happen so that be all example of deadlock -pron- can construct lot of these vary bit of complexity usually -pron- do not artificial construct -pron- like this usually be scratch go ahead go why do -pron- system come"
  ],
  "d74d1bca-8940-47ce-bff5-6e04844cc7f7": [
    "right ok so let -pron- think about fall position when -pron- come to share file handle between a child and parent process and the big idea here be that there be kernel object so -pron- have already see a couple of kernel object in term of say a pipe and that pipe be share between the child and parent and -pron- be go to evaporate disappear once the parent and child close or far description or -pron- close all those place as well but the same be true for open file open file as well ok so when -pron- call say f open underneath -pron- know that actually be go to call open to give -pron- a little file descriptor and that far to script be share if -pron- call fork so let -pron- just draw a little model here that if -pron- have get -pron- parent process just here with file descriptor here -pron- be safe -pron- will skip to number three that be actually of course refer to an actual object inside the kernel that -pron- indirectly",
    "right so if i then call fork to make a child process then the same number child process over here the same integer number here -pron- go right refer to the same kernel object so here be the wonderful colonel up here with -pron- view on the world -pron- view of all the peripheral view on what -pron- need to send out of the network code to the disk etc etc so -pron- have get -pron- idea of a file over here the kernel -pron- have buffer and also -pron- will have a file position as well so for random access file ok there be some kind of positioned associate with this and -pron- can only discard this kernel object once",
    "i will play with this let -pron- try change the position inside of file inside one process and then see how that affect the other process as well ok so let -pron- get start right so first of all let -pron- make a little far great -pron- have open this let -pron- write something into -pron- like how about -pron- password be one two three four and i want to actually send that to the file ok so if -pron- call f flush will actually see that be write to the file straight away ok so that be a hint to the selye beta actually call right and to send any datum out there ok so first of all let -pron- just run this just to check this work right so clang what do -pron- call this seek demo i think",
    "datum dot csv and there -pron- be ok so -pron- have get -pron- god data be save inside there right so now let -pron- start to play with fc can all that good stuff so -pron- have talk a little bit about ftl let -pron- play without first so let -pron- look at the position in the file currently ok so please turn -pron- position of this current file let -pron- print -pron- out so print f right -pron- position be ok right and -pron- can -pron- need a long so will will guess what that may be let -pron- let -pron- deliberately get -pron- wrong see if -pron- warning will tell -pron- right so here be -pron- type k and will deliberately try to compile that case so if -pron- go compile that so yeah really -pron- want a long format ok so let -pron- use that correctly ok right so please put out the follow long variable",
    "see that the c library as far as -pron- be concern any read and write to that file now will be occuring at position ninety offset nineteen from the beginning so if i wish i could remember that or i could go backwards from that that kind of thing so what -pron- want to do to however today be play with multiple process work with the same kernel object so let -pron- have a parent child right now so ok let -pron- call fork right if -pron- be the child what should i do now posix say that before before fork if -pron- truly want see libra to behave -pron- read a flush any stream that -pron- care about so -pron- care about the the -pron- file handle and though possibly be overkill in this case because -pron- have only all -pron- have do between",
    "to fall in the standard extremely closely and disk or flash just to make sure that any update have be reflect back to the kernel object ok so if -pron- be child what should i do how about -pron- start by just do nothing ok so the child be simply go to close -pron- ok right and then can exit also of course i could turn from maine ok what about the parrot ok so the parent how about i actually try to do something with -pron- file let -pron- for example try to write some more datum ok so let -pron- print something else into this like five six seven eight go flush ok then will close -pron- now this last flush i just do i could type there -pron- go be technically unnecessary",
    "but i just want to give the idea that hey -pron- be go to write something and -pron- do not want to buffer this -pron- want to send -pron- immediately ok so let -pron- compile that right this look let -pron- clang seat demo ok -pron- get the position as well but what about -pron- pesky datafile what be -pron- look like and -pron- will see that -pron- still manage to successfully right five six seven eight to the end of -pron- file just because i close -pron- in the child do not mean that the parent be also closed ok so what -pron- do here be -pron- just reduce the reference count by one -pron- say ok the child no long care about this object but the kernel object -pron- will still continue to exist because there be a at least one other process that be refer to -pron- ok right so -pron- can close without any effect but what",
    "so let -pron- do that . let -pron- change the position here so -pron- be go to call ' fseek ( ) ' ... or how about -pron- just rewind ( --rewind(f)-- ) . ok so let -pron- rewind ... the current position in this . right and -pron- want to make sure that happen before -pron- parent print anything else so -pron- could call waitpid or -pron- could pretend -pron- do not know about waitpid and then just sleep for one second . ok right so ... mwa ha ha ha . synchronization , right . what be that ? ok so -pron- be go to rewind and then a second later -pron- \" will print out \" \" 5678 \" \" . ok so compile , run \" this . ok what do -pron- file look like now ? \" right so -pron- have \" \" 5678 \" \" but -pron- print \"",
    "........................................... ah ! let -pron- try flush . let -pron- try get the kernel to actually push that through to the ... ok . but that be clang -pron- want seekdemo.c ok . right , now let -pron- have a look at -pron- datum . so -pron- have to ' cat data.csv ' alright . there -pron- go . right , so after a brief moment -pron- be like \" \" \" what be go on ? \" \" ok , now -pron- will see that -pron- have change \" the position so",
    "\" be a hint to the c library to say , \" \" hey , -pron- know -pron- like \" to buffer everything . -pron- know that -pron- do not want to make system call unnecessarily . but , no really , now -pron- be time to actually tell the kernel that -pron- want to change the position . so -pron- change , conceptually , the position of where future read and write will occur here , but by default , the c library will kind of cache that internally . now if -pron- be to start write thing in here , again the c library may tell the kernel but -pron- be go to delay that for as long as possible . so by call flush here -pron- have ensure that the position be update at the kernel object . so -pron- do that and then one second \" later -pron- parent process print out \" \" 5678 \" \" \" and because -pron- change the file position in the kernel , now when the parent finally get around to write",
    "file . ok , so this stuff get tricky if -pron- truely be try to share file handle between a parent and a child . in practice -pron- be unlikely to actually do this . -pron- can not imagine a time when -pron- would want to be deliberately write and change position both in the child and in the parent , and have to worry about whether the c library have actually call the kernel object or not . so in practice , what be usually well behavior be to close unwanted file handle before fork or after fork so that -pron- do not unnecessarily share these object . ok , so big takeaway here be -pron- see that close a file handle or file descriptor inside the child do not affect the parent ( these thing be reference count ) and secondly that the kernel object -pron- maintain"
  ],
  "d80efb9d-96a2-4cc0-ad4f-a9049155313e": [
    "hi so if -pron- start read through the piece of documentation -pron- will come across something call peter cancel great -pron- say fantastic away from -pron- to gracefully shut down -pron- thread well yes and no -pron- advice be do not use -pron- unless -pron- really understand what be do there be often well way to do -pron- so p say cancel look like -pron- be go to say excuse -pron- thread i want -pron- to stop and yes that be true but there be no guarantee on how fast and when that be go to happen so -pron- may have a p thread that -pron- have assign to do along calculation and even if -pron- call peter cancel on that then the thread may continue to run deep inside some deeply nest for loop be do -pron- say invert a massive matrix or mine -pron- next bitcoin or something like that so there be well way to do this and one common way to do this",
    "that be cool -pron- say please stop right which be initially false and when -pron- want -pron- threat to finish then -pron- just change this to one and -pron- in -pron- other thread -pron- occasionally pull meaning -pron- occasionally check the value of this variable and if -pron- be be change to a true value then -pron- know -pron- be time for -pron- thread to exit at that point -pron- can do -pron- graceful thing like free up resource and then exit ok this may be a global variable but -pron- could also in more robust design put -pron- inside a struct and then pass out around as part of -pron- information that -pron- would pass to a thread that that be go so -pron- could also have individual thread control as well",
    "yes -pron- have difference between exit in p third exit ok so this stop the entire process and give the process at exit value pizza exit just stop this to one thread now be that thread happen to be the very last thread then then the process will finish uh ok so that give -pron- a reason sometimes for call p thread exit inside -pron- main method be a way to be lazy let -pron- let -pron- go have a look at this so if i have a program that start many many thread be case so imagine ok there -pron- go i start many many thread here i could write p thread join and wait for -pron- all to finish i could put that"
  ],
  "d8c34ce3-8698-443a-b044-40b8ce707888": [
    "ok hi right so let -pron- tell -pron- about this amazing currency -pron- be go to be huge -pron- be call -pron- angrave coin be the late in crypto technology and -pron- be base on bitcoin but -pron- be a lot well because so few people know about -pron- alright so here -pron- go here be the plan -pron- have get -pron- little mining idea here and eventually only thread of course to parallelize -pron- -pron- -pron- coin searching here and maybe later i will take the same idea and run -pron- on -pron- gpu and maybe later after that -pron- will design some hardware that do the same operation so let -pron- talk a little bit very quickly about kind of bit coin and related currency so the idea be that -pron- need a way to make -pron- hard for people",
    "last thing about cryptographic hash be that -pron- can start off with a message generate a hash for that but -pron- can not go easily in reverse so -pron- do not have enough compute cycle to say start from a hash and work out what the correspond original message be and in fact this be also a data reduction algorithm as well that -pron- message may be very large but i hash may be a fix length size so in -pron- case today be hash be always go to be two hundred fifty six bit or equivalently thirty two bite so i want to make -pron- find -pron- coin base on whether the hash of a message meet some kind of constraint",
    "take some kind of string here -pron- be and i can pass into this nice lock function call short fifty six and say here be the number of byte of -pron- message and that be go to give -pron- back a pointer to some memory and that memory represent the hash so all -pron- be go to do to declare whether -pron- be one of -pron- anger of coin be to say that the first three bite there be the first twenty four bit all zero if this be too easy to find then -pron- will increase -pron- twenty five bit -pron- get the idea right and so if that be true then let -pron- print out the actual original message that cause this course this coin to be a valid coin and also -pron- be go to just print out the first twenty",
    "ok so that be that be the basis of angrave coin i say -pron- be pretty easy to explain the last part be how do i actually search so for this -pron- can see that i get a big loop go to go from some start to end value in -pron- loop here -pron- be or print that out as well use long 's and then so for each value of -pron- -pron- construct just a simple c string here -pron- be -pron- be go to construct -pron- not not by print -pron- out but -pron- have get some memory here -pron- little message so let -pron- use aspirin f which be go to write the result into message and -pron- message be go to be angry with coin and some long value print out as a hexadecimal value so as i go around that loop change -pron- value of i from start to end then -pron- be go to write a new message in",
    "but the day that i find a message be a valid coin i can print -pron- out and then -pron- two at home because -pron- know -pron- algorithm can verify that be a valid coin -pron- just need to push -pron- into the shell two fifty six ok so great let -pron- run this right so what do -pron- get -pron- get the program call -pron- -pron- be single thread ok and if -pron- go so i call that search function where the start and end here and -pron- be busy think about -pron- ok -pron- look like -pron- be go to take -pron- along time to make any money from -pron- coin in fact -pron- even find any in that first rate there be -pron- first coin alright so i can tell the world look this particular set of ascii character if -pron- put that into the short",
    "-pron- be mint money now right oh wow ok so -pron- have a bit coin right but -pron- be not fast with this mining rate i think -pron- be time that -pron- bring some thread to the rescue so let -pron- have a think about how -pron- can make -pron- program go a little bit fast alright so what do -pron- get -pron- will notice that i be different search range here and so i could take these three line and run -pron- just with different different thread and pass in the start and end point as part of some information and -pron- be go to send to -pron- p thread so let -pron- have a look at that alright so here -pron- be -pron- i get to start now three thread be call -pron- pizza at exit and -pron- be ok and -pron- be go to pass in a void pointer",
    "on pc -pron- create that be give by people there ok what be runner oh -pron- be just a simple little wrapper around the original search function that -pron- see and -pron- can pull out the pointer in the next one so the first thread will take these first two value the second thread will take the next two ok there -pron- go the next thread will choose a different color there -pron- go will take next to value ok right and just for fun notice that -pron- be use along here because eventually i want to shift -pron- leave a large number of only use -pron- an integer then -pron- would have shift off the end of an integer",
    "have not change so i think -pron- be time to try -pron- little binder ok so will do minor attempt off -pron- go -pron- can see i get three thread now learn in parallel and -pron- should find all those same coin but of course -pron- should do -pron- much fast now because -pron- be search that space at the same time and yeah look at that -pron- seem to be work let -pron- give -pron- a second and civic can find a few more coin ok -pron- find two and how be -pron- do -pron- finding some coin be look good ok yep look great but be -pron- code correct let -pron- go back and have a look and see see if -pron- can spot any bug",
    "notice that the value here that -pron- get back from sha two fifty six well where do that memory come from be -pron- share between potentially different thread of off this call because if -pron- be then the hash value that i later check this point may have be generate by a call to shar two fifty six from a different threat so there be a very small but non zero window of opportunity between our calculating the message and then later use that memory down here so there be a small chance today another thread in that time may change the content of that hash",
    "today i do not generate any bad coin and i befit the reason for that be because -pron- machine be actually really busy right now so if i do top order by cpu will see that actually -pron- have get plenty of cp be use to actually record this lecture so compare to when i run this without record -pron- as less for chance of two cpus actually run because another cpu be busy capture the screen so unfortunately this demo do not actually work -pron- do not see any bad coin let -pron- just see if -pron- can modify -pron- to make -pron- much more likely to fail so this",
    "at coin which have the first let -pron- try the first first two bite and -pron- will see if -pron- can get -pron- to fail so i do not care about that third byte anymore ok right so now will compile -pron- ok make and if -pron- go minor attempt all right now be find a lot of coin there some ok -pron- find some which be not valid coin case so that be -pron- proof that -pron- be possible to generate race condition and actually see -pron- fail so the value that be print out for that hash be no long zero zero so between test -pron- ok between test to get here and then subsequently print -pron- out thing have change ok so what be the fix and why do this occur what the"
  ],
  "d8f53a34-3f12-4b3d-93bd-cafca4e23ae5": [
    "hi welcome to letter twenty four let -pron- start with the code review case so -pron- be go to do -pron- be go to look at a fix sized ring buffer and look at an implementation and -pron- know the follow thing about -pron- so first of all -pron- use count semaphore and the first one s one be go to be initialize to two fifty six so this be kind of count the number of free space be or how much capacity be leave s two be initialize to zero so that be count the number of thing -pron- have actually get inside the buffer right now and then -pron- have get lot of thread produce thing and consume thing as well ok so here be some question that -pron- may want to ask in sort of code review first of all can -pron- find a way that deadlock can occur in other word when good -pron- actually get stuck and if so under what condition could -pron- be for example when -pron- get completely full or completely empty be underflow possible meaning that be -pron- possible for d q to return something even though -pron- do not actually have anything inside the buffer right now in other word -pron- will just return some multivalue that happen to be store inside the buffer",
    "be not any space leave so presumably -pron- have corrupt or overwrite some datum that -pron- actually do need like an early piece of the buffer ok so this actually take a look at the code now and see what -pron- can find right so the first thing i notice be that -pron- be actually call mutex lock really early on inside nq normally -pron- 'd only expect the lock and unlock to be around the actual call of where -pron- change the change the array here and the second thing i notice be ok good so -pron- buffer size be two fifty six and in fact -pron- be go to wrap around after -pron- get to two hundred fifty five so what -pron- have get then be kind of long hold of the mutex lock inside -pron- enqueue here so -pron- concern be with this",
    "those be produce an item want to queue -pron- up and -pron- call some weight but i do not have any space leave inside -pron- data structure here in other word what if s one be zero -pron- may have a problem here because now -pron- be go to sleep -pron- be block inside the same weight call but -pron- be still hold on to the mutex lock this be not a condition variable ok -pron- be just a simple counting semaphore oh dear so can -pron- have deadlock well let -pron- find out to what happen on the d q side so on the dq side -pron- be go to wait until at least one item ok that be true and then -pron- call sam post and -pron- do this without require mutex lock so here -pron- be lucky there if -pron- also have onto the mutex lock early if -pron- music lock have be one of the first thing -pron- have do then yes -pron- would have encounter deadlock because the",
    "that that mutex lock that would have never be never be release definition of deadlock wait for an event that never happen so -pron- do not find deadlock just there there -pron- come awfully close right what else can -pron- find out about this code then ok so let -pron- see the same post happen early ok that -pron- be actually increase the count of the number of item in -pron- buffer before -pron- even change the buffer value ok so -pron- be basically go to add one to this counter here so if somebody be wait to extract value in other word if a thread have already call d cube but be wait here because the count of s two be zero -pron- be go to release -pron- from that early oh yeah so this land sound like a recipe for underflow that because -pron- say -pron- have incremente",
    "possible will actually in this particular implementation no because -pron- dick -pron- can not complete until the mutex lock be release because -pron- be require before actually touch the buffer if this code try to be a little bit more performance by give the nq in the dequeue different mutex lock then -pron- would have run into a problem because then -pron- would have allow a dq thread to try to read a value from the buffer before -pron- have even put the value in right so well code of course would actually only increment the counting semaphore after -pron- modify the buffer so so this line actually belong down here so do this later ok and -pron- can do -pron- after -pron- have release a mutex lock ok and the same weight as well -pron- should do early ok let -pron- just see what i can happen on the d q site so",
    "which be great than the total number of item which be currently in the buffer so -pron- be not possible to underflow here -pron- do call however sam post before -pron- have before -pron- have extract anything from the buffer so could this be a problem yes actually -pron- could and there be a very small opportunity but when bad thing can happen -pron- generally will so let -pron- see what the problem here be that let -pron- imagine that -pron- buffer be full now because -pron- consider the case where -pron- be be completely empty so now let -pron- go to the other extreme of say ok imagine -pron- be completely full in other word all two hundred fifty six item at all slot be be currently use so -pron- same",
    "be zero i think be that -pron- run yeah so no that be yeah s one be the amount of space so that be currently zero ok so yes -pron- be able to continue through both these line and -pron- can start take thing out of this but imagine just this moment before -pron- call mutex lock anew nq event come in so just before -pron- big red arrow here just before call mutex lock if -pron- have get the case where -pron- have actually get two hundred and fifty six item inside the inside the buffer ok then -pron- same weight can can decorate that and -pron- same",
    "moment and q event happen then that can that can continue through an override the very value that -pron- 'd like to see -pron- still need all that entry inside -pron- buffer but now because -pron- have post on s one then if an nq thread appear then -pron- can continue -pron- have not yet get the mutex lock so -pron- get the mutex lock and then -pron- call same way on s one but -pron- have already incremente -pron- be once -pron- get to continue and then post on some post which will never block and now -pron- overwrite -pron- buffer so -pron- be pretty big unhappy space here yes -pron- have see a problem here of overflow buffer overflow -pron- override a value that -pron- actually need -pron- actually manage to put too much stuff into the buffer now the chance of that happen be pretty small be this very small number of microsecond between us call sam post and then ask for the mutex lock but that be a non"
  ],
  "d8f6f268-02f8-4d31-a805-f951523e92a1": [
    "ok right so before -pron- dive into actually represent a file and let -pron- talk about some of the thing that posix give for -pron- and review how -pron- can talk about file inside different directory ok so first of all -pron- can get there -pron- go right -pron- have probably see these before so -pron- can talk about path and when -pron- talk about path to a file or directory -pron- actually have two kind a relative path which be relative to the current directory of a process so whether that process be bash -pron- shell or a process that be currently run like a web server that process have idea of the current work directory or the current directory and so if -pron- want to talk about that contradictory -pron- can just write -pron- as a single dot so -pron- have probably see example where -pron- be sit inside bash and -pron- say ok run the file dot slash a dot out in other word look inside the current directory for this particular",
    "reason that in order to run that program -pron- could not just write a dot out be because as -pron- remember the environment variable path where -pron- look for executable do not by default in unix include the current work directory and the reason for that be actually for security -pron- do not want -pron- to be too easy to replace thing like ls and make etc with an executable inside the current directory so if -pron- really want to do that -pron- could modify the path to be -pron- contradictory or -pron- can just specify -pron- executable relative to the kind of simple dot ok -pron- probably know this one as well ok dot dot right so what be dot dot this mean that parent directory so for example i can go up to the previous directory",
    "go to that parent directly key and then get into a different directory or open up file and perhaps i get to directory here call d two or practice be file if -pron- be a directory i can go into that i can talk about something else so -pron- be get -pron- own directory etc etc and if i want to i could go back into the parent directory again which cause -pron- know be call d two right so -pron- can construct these path use directory name and also these dot and dot - dot to talk about the current directory or the parent directory so if i really want to i could write a relative path that look like this dot slash dot dash etc -pron- be not sure why i want to do that other than maybe triadic kind of confuse novice student perhaps but this be all very long wind way of just talk about the current directory and finally -pron- be about three dot ok so if -pron- see this as a path actually -pron- do not mean anything actually that be just no valid filename so -pron- could if -pron- really really",
    "file begin with a dot then by default ls do not show -pron- so if -pron- have get a file say call dot secret dot secret dot text then just when i list file use ls by default -pron- hide or file name that begin with a dot -pron- be there however and -pron- can ask ls to actually list or possible file key so let -pron- get back to -pron- discussion about path can -pron- simplify the follow key right so let -pron- have a look a slash b and then -pron- go into the parent directory so -pron- be back into a and then -pron- go into see and then -pron- stay inside see so this be a path that be actually can be simplify to a slash c so both of these string actually represent the same directory -pron- be relative",
    "to a an inside that a directory call subdirectory call see wait so great relative pass a very useful but just occasionally -pron- want to talk about absolute path inside -pron- directory how would -pron- do that well past that start with a forward slash -pron- absolute so now -pron- can discard or ignore the current directory of the process and so if i wish i could for example talk about slash home and then the user directory like slash angrave for example so that be likely to be say -pron- home directory there may be other so for example configuration for the actual machine i would find expect to find mostly inside etc there be a whole load of executable",
    "be all start -pron- will notice with a forward slash so -pron- be talk about an absolute directory and of course -pron- can convert a relative path to an absolute path and vice versa and one of the way that -pron- be go to talk about do this be when i need the absolute canonical path ok so let -pron- first of all make a an absolute path which be not canonical ok so let -pron- start with the four slash so ok -pron- be go to go into say e t c and i may find thing like the host name of setting for -pron- web server and other thing inside there ok but then i want to go to parent directory and go somewhere",
    "-pron- will find a lot of log file for -pron- system so -pron- will agree that that be the same as another another absolute path -pron- could write which be just slash far and this one this seem kind of more reasonable as like the authority of the canonical version and the one that -pron- all agree be the one true way that -pron- should be talk about this particular directory ok so yes in fact this be call the absolute canonical path and if i give -pron- the first one where -pron- mess around go into wrecked directory and come back out etc would like a way to actually say no tell -pron- the canonical version of this and for that -pron- have get a late great little i think -pron- can call -pron- call real path where -pron- can actually ask for the absolute canonical path and this"
  ],
  "d984a52e-2c0a-4b29-992a-3b4e6bd8ab25": [
    "hi welcome to letter twenty four let -pron- start with the code review case so -pron- be go to do -pron- be go to look at a fix sized ring buffer and look at an implementation and -pron- know the follow thing about -pron- so first of all -pron- use count semaphore and the first one s one be go to be initialize to two fifty six so this be kind of count the number of free space be or how much capacity be leave s two be initialize to zero so that be count the number of thing -pron- have actually get inside the buffer right now and then -pron- have get lot of thread produce thing and consume thing as well ok so here be some question that -pron- may want to ask in sort of code review first of all can -pron- find a way that deadlock can occur in other word when good -pron- actually get stuck and if so under what condition could -pron- be for example when -pron- get completely full or completely empty be underflow possible meaning that be -pron- possible for d q to return something even though -pron- do not actually have anything inside the buffer right now in other word -pron- will just return some multivalue that happen to be store inside the buffer",
    "be not any space leave so presumably -pron- have corrupt or overwrite some datum that -pron- actually do need like an early piece of the buffer ok so this actually take a look at the code now and see what -pron- can find right so the first thing i notice be that -pron- be actually call mutex lock really early on inside nq normally -pron- 'd only expect the lock and unlock to be around the actual call of where -pron- change the change the array here and the second thing i notice be ok good so -pron- buffer size be two fifty six and in fact -pron- be go to wrap around after -pron- get to two hundred fifty five so what -pron- have get then be kind of long hold of the mutex lock inside -pron- enqueue here so -pron- concern be with this",
    "those be produce an item want to queue -pron- up and -pron- call some weight but i do not have any space leave inside -pron- data structure here in other word what if s one be zero -pron- may have a problem here because now -pron- be go to sleep -pron- be block inside the same weight call but -pron- be still hold on to the mutex lock this be not a condition variable ok -pron- be just a simple counting semaphore oh dear so can -pron- have deadlock well let -pron- find out to what happen on the d q side so on the dq side -pron- be go to wait until at least one item ok that be true and then -pron- call sam post and -pron- do this without require mutex lock so here -pron- be lucky there if -pron- also have onto the mutex lock early if -pron- music lock have be one of the first thing -pron- have do then yes -pron- would have encounter deadlock because the",
    "that that mutex lock that would have never be never be release definition of deadlock wait for an event that never happen so -pron- do not find deadlock just there there -pron- come awfully close right what else can -pron- find out about this code then ok so let -pron- see the same post happen early ok that -pron- be actually increase increase the count of the number of item in -pron- buffer before -pron- even change the buffer value ok so -pron- be basically go to add one discount here so if somebody be wait to extract value in other word if a thread have already call d cube but be wait here because the count of s two be zero -pron- be go to release -pron- from that early oh yeah so this land sound like a recipe for underflow that because -pron- say -pron- have incremente or pizza box by one even though -pron- have actually put",
    "no because -pron- dick -pron- can not complete until the mutex lock be release because -pron- be require before actually touch the buffer if this code try to be a little bit more performance by give the nq in the dequeue different mutex lock then -pron- would have run into a problem because then -pron- would have allow a dq thread to try to read a value from the buffer before -pron- have even put the value in right so well code of course would actually only increment the counting semaphore after -pron- modify the buffer so so this line actually belong down here so do this later ok and -pron- can do -pron- after -pron- have release a mutex lock ok and the same weight as well -pron- should do early ok let -pron- just see what i can happen on the d q site so",
    "which be great than the total number of item which be currently in the buffer so -pron- be not possible to underflow here -pron- do call however sam post before -pron- have before -pron- have extract anything from the buffer so could this be a problem yes actually -pron- could and there be a very small opportunity but when bad thing can happen -pron- generally will so let -pron- see what the problem here be that let -pron- imagine that -pron- buffer be full now because -pron- consider the case where -pron- be be completely empty so now let -pron- go to the other extreme of say ok imagine -pron- be completely full in other word all two hundred fifty six item at all slot be be currently use so -pron- same",
    "be zero i think be that -pron- run yeah so no that be yeah s one be the amount of space so that be currently zero ok so yes -pron- be able to continue through both these line and -pron- can start take thing out of this but imagine just this moment before -pron- call mutex lock anew nq event come in so just before -pron- big red arrow here just before call mutex lock if -pron- have get the case where -pron- have actually get two hundred and fifty six item inside the inside the buffer ok then -pron- same weight can can decorate that and -pron- same",
    "moment and q event happen then that can that can continue through an override the very value that -pron- 'd like to see -pron- still need all that entry inside -pron- buffer but now because -pron- have post on s one then if an nq thread appear then -pron- can continue -pron- have not yet get the mutex lock so -pron- get the mutex lock and then -pron- call same way on s one but -pron- have already incremente -pron- be once -pron- get to continue and then post on some post which will never block and now -pron- overwrite -pron- buffer so -pron- be pretty big unhappy space here yes -pron- have see a problem here of overflow buffer overflow -pron- override a value that -pron- actually need -pron- actually manage to put too much stuff into the buffer now the chance of that happen be pretty small be this very small number of microsecond between us call sam post and then ask for the mutex lock but that be a non"
  ],
  "da7958fa-52cd-4d05-93a6-42c5aaca70a7": [
    "ok hi right so let -pron- think about lock contention and also how this also relate to discover race condition ok so here be the scenario that -pron- be go to think about that -pron- have get a thread that most of the time be not inside the critical section and in fact if -pron- sketch this out -pron- will see that initially i just get one single thread and only for a short period of time just one millisecond -pron- be actually do something inside a critical section that -pron- have not yet protect with any mutex lock but for the other nine hundred and ninety nine millisecond be do something else so this thing run for one second and then -pron- be some random type there be one second ok some random sign inside that just for one day second -pron- go and visit a critical section may be update or read a particular data structure ok so now that be fine but now -pron- have two thread so here be another fit that also be go to run for the same second",
    "ok so will say that that have a one millisecond ok of time where be ashley inside the the critical section so as -pron- know everything will find -pron- program deterministic -pron- program or function as expect provide these two do not meet another word provide -pron- do not actually overlap right so could -pron- estimate this will sure -pron- could set up a full integral and think about how -pron- think about these two random time as a whole bunch of time where -pron- do not overlap and then there be time when -pron- start overlap fully overlap and then only overlap a little bit again and then other time when -pron- do not so -pron- could set -pron- up to set this up as a as a two dimensional integral but -pron- just want to estimate this today so -pron- be not go to worry about thing like edge effect where",
    "full or very visit critical section at the very end where -pron- be not possible to overlap afterwards so let -pron- not worry about that let -pron- just concentrate on the idea that ninety nine point nine percent of the time -pron- first date be not inside the critical section so -pron- be go to look at the majority case an ignore the edge case so right i think and play battleship with -pron- now so -pron- have think of one moment in time where -pron- be inside the critical section now -pron- get to think of a number where -pron- get to say ok right -pron- be go to choose -pron- second thread to be inside this critical section what be the chance that -pron- sink the battleship what be the chance that -pron- have overlap ok right so how can -pron- analyze this -pron- have get a one millisecond air slot here so there be actually a window of just two millisecond where -pron- choose a different color",
    "thread may overlap -pron- critical window ok so -pron- may be exactly the same or -pron- may be just afterwards ok so there be just a two millisecond window here alright so how likely be -pron- that -pron- will actually achieve this well remember -pron- say the timing be random so give that -pron- be choose these time all random -pron- have get a two millisecond out of one out of one second window in other word be roughly about one hundred thousand dollar -pron- want to be a little bit more accurate -pron- may say roughly say one out of five hundred so so i could say one out of five hundred or percentage wise that be a very small number so -pron- have",
    "bad depend on whether -pron- truly want to try to discover this problem or -pron- be hope that -pron- code work so even though -pron- know -pron- got to race condition even though -pron- know -pron- do not actually implement the lock -pron- have a problem here which be this two percent chance that all code will fail because two thread of enter the critical section at the same time right so if -pron- test -pron- code once twice three time ten time as be very strong chance that -pron- will not notice this effect -pron- have only go to see this one time out of five hundred approximately like i say -pron- do not do the exact integral but this mean that actually make race condition to occur can be quite hard now -pron- go for figure that say the race the critical section take one millisecond dirt to run if -pron- be critical section be much small",
    "at with the push in the pop or add another part that may only be order of say ten microsecond so now the chance of of of thread be inside the critical section be actually slim so discover problem just by testing be hard and that be why -pron- do thing like locate do not want -pron- with two thread but when -pron- with four thread now -pron- be much more likely to occur or test -pron- with a brute force loop try to go into the critical section as often as possible and now -pron- have increase the chance significantly this also apply to the idea of lock contention so lock contention be not a good thing -pron- mean that one thread be be force to wait for another now -pron- do this because -pron- want program to function correctly",
    "amount of time now -pron- be go to start to see an unwanted and unnecessary performance impact so right now -pron- see with a little rough back of the envelope calculation calculation there be only one point two percent chance of the two thread ask for the lock at the same time so in so one one of the thousand basically so -pron- do not expect the css significant performance impact because of two thread update this however if -pron- code be different if -pron- have thread which say want to update the datum structure ten millisecond out of one hundred million second so now there be a one in ten chance that the lock that -pron- ask for be be already in use like i say this be just rough back of the envelope calculation i just want to show -pron- the idea",
    "-pron- do not want lock contention but on the other hand -pron- want to be able to discover -pron- race condition as soon as possible in woman during -pron- testing before -pron- put -pron- into production before -pron- start rely on this code to save life or to move money or to give demos etc 's so race condition be tricky be the big takeaway message and -pron- could do back of the envelope calculation to see why -pron- be difficult to detect these ok right so with that in mind that mean that -pron- debugging skill understanding of how code can interleave can be important be believe to actually reason about -pron- code be just as important as be up to test test -pron- ok so here be here be the code -pron- have get -pron- 'd like -pron- to kind of look at this code and tell -pron- what do -pron- think -pron- be go to do right so -pron- have get -pron- have get a couple"
  ],
  "dbf720c2-82de-433d-a735-d7968905688e": [
    "ok so in the beginning the root file system be just a single slash here and beneath that that be where -pron- be go to find just everything so -pron- need a way to be able to say -pron- know i want some file system for -pron- local machine perhaps i get some remote filesystem and -pron- have get some file system which do not even physically exist as well so how can -pron- do this well the idea be that -pron- can actually set up what be call mount point so for example so i may have a mountpoint say call slash home slash let -pron- call -pron- coffee mug for example coffee and then i can say on this directory coffee here this i want to connect to a particular file system so maybe -pron- be go to get that particular file system from this mug by ask this piece of hardware to give",
    "-pron- will have a special piece of hardware that support the right api to say right stop tell -pron- about the root directory inside -pron- coffee mug ok or maybe i want a file system which be go to be serve all the file that i need for when the machine start to boot up so i may put -pron- say slash root or maybe i want a file system for just a single forward slash which be the default file system if none of these other filesystem apply or maybe i want a file system just for say home just for -pron- user 's directory maybe i want a file system say just for temp for example if -pron- have get lot of ram i may choose to unpack file and actually have a file system where the file -pron- be not store on disk but -pron- be actually just store in memory so when -pron- machine reboot anything inside slash temp obviously be destroy because -pron- never actually make",
    "pretend -pron- do whereas in fact -pron- be store in memory but how about some file system which actually do not exist how about some virtual file system ok so this be really fun stuff any moment of course -pron- have get the kernel run and i wonder how -pron- be do i wonder what -pron- be do how can i find out about what -pron- linux kernel or -pron- apple kernel be what -pron- be work on what -pron- be do with each process and would not -pron- be great if i could somehow talk to -pron- and that be how -pron- use virtual filesystem so think about all these file system -pron- have just define for example when -pron- say something like ok list all the file inside a certain directory for example tell -pron- all the file inside slash home slash angrave then"
  ],
  "dcde2695-ae8c-4032-aceb-2d001a2ec718": [
    "ok right . quick question for -pron- : why do -pron- think pwrite exist and when would -pron- use -pron- ? ok , so what be pwrite ? ok , so here -pron- be . -pron- behave a lot like write ( ) . -pron- give -pron- a file descriptor as usual , -pron- give -pron- a buffer as usual , and the number of byte -pron- want to write , but -pron- also give -pron- an offset . in other word , -pron- do not care about the current position in a file -pron- just want to explicitly say where to write these byte . and by the way , there be a similar call call pv ( ) as well . so where this become useful be where -pron- have , say , a whole load of thread which be generate output . suppose , for example , that -pron- run a competition against student from another university and all -pron- have to do be sort some number ... oh -pron- want a well color than that . there -pron- go ... and write as quickly as possible the output to a file . ok , so maybe -pron- know about thread . so great ! -pron- be",
    "each thread be responsible for the output of the total result and so -pron- need each thread to work independently . \" \" \" great ! \" \" -pron- say . \" \" -pron- remember cs241 . pwrite ( ) \" \" to the rescue . \" \" that now -pron- can tell -pron- first thread to \" explicitly write -pron- result into the first part of the file meanwhile the second thread over here be start to generate result as well and so -pron- can start write bit of datum over here , and -pron- can explicitly say where in the file -pron- want that to go . so yep , there be pwrite ( ) and there be also pread ( ) which do a similar thing that -pron- can read from a certain part of the file and directly specify an offset into the file . ok , so -pron- be very useful when -pron- want to do random access and random read into file .. but also later inside cs241 -pron- be go to learn how to ' memory map ' file directly into memory ; where",
    "can actually look at the file as if -pron- be actually part of -pron- address space . so that be come up later inside cs241 and -pron- be the most .. one of the most fun and most powerful feature of posix and system programming that -pron- will see in this course . ok , so uh .. what else ? oh yep ! -pron- will do .. what be \" a name pipe ? \" \" ok , how do -pron- make a name pipe ? ok , for this -pron- \" can actually make pipe \" on -pron- file system . -pron- can just say \" \" mkfifo \" \" because \" -pron- behave as a little ' first in first out ' queue . so let -pron- call -pron- say ' myq . ' ok , and now if -pron- look on the current directory -pron- will see there be something call ' myq . ' so here -pron- be . look a bit like a file right now but let -pron- find out some more information about -pron- . ok , and -pron- will see \" -pron- have get a magic letter over here that say \" \" actually -pron- be \" \" a queue \" \" so -pron- can put stuff into -pron- . let -pron- say \" \" echo hello \" \" , \" pipe that into -pron- queue ... umm",
    "wait to write those byte . -pron- be block ! why ? because no one be currently read from that . so to be able to read from this fifo -pron- better set up a new process that can read from this . so -pron- will start a new buffer . let -pron- get out of that because -pron- want the current directory . so let -pron- grab all that . ok , run -pron- again and now let -pron- start a new window and -pron- will cd into that directory . ok , so let -pron- make that text a bit big . ok , so now what can -pron- do from this pipe ? -pron- can start read from -pron- . ok great ! let -pron- start read byte from ' myq '    and there -pron- go ! -pron- get out a ' hello . ' and now finally -pron- attempt to echo output into ' myq ' have complete as well . so -pron- be useful for when -pron- want to set"
  ],
  "de67c1db-85ec-40ee-affa-68ebcf984028": [
    "ok right so before -pron- dive into actually represent a file and let -pron- talk about some of the thing that posix give for -pron- and review how -pron- can talk about file inside different directory ok so first of all -pron- can ok there -pron- go right -pron- have probably see these before so -pron- can talk about path and when -pron- talk about path to a file or directory -pron- actually have two kind a relative path which be relative to the current directory of a process so whether that process be bash or -pron- shell or a process that be currently run like a web server that process have idea of the current work directory or the current directory and so if -pron- want to talk about that kind of directory -pron- can just write -pron- as a single dot so -pron- have probably see example where -pron- be sit inside bash and -pron- say ok run the file dot slash a dot out in other word look inside the current directory for this particular",
    "reason that in order to run that program -pron- could not just write a dot out be because as -pron- remember the environment variable path where -pron- look for executable do not by default in unix include the current work directory and the reason for that be actually for security -pron- do not want -pron- to be too easy to replace thing like ls and make etc with an executable inside the current directory so if -pron- really want to do that -pron- could modify the path to be -pron- current directory or -pron- can just specify -pron- executable relative to the directory with a simple dot ok -pron- probably know this one as well ok dot dot right so what be dot dot this mean that parent directory so for example i can go up to the previous directory",
    "go to that parent directory and then get into a different directory or open up file and perhaps i get to directory here call d2 or perhaps -pron- a file if -pron- be a directory i can go into that i can talk about something else say -pron- be get -pron- 's own directory etc etc and if i want to i could go back into the parent directory again which of course -pron- know be call d2 right so -pron- can construct these path use directory name and also these dot or dot dot to talk about the current directory or the parent directory so if i really want to i could write a relative path that look like this dot slash dot dash etc -pron- be not sure why i want to do that other than maybe try to confuse novice student perhaps but this be all very long wind way of just talk about the current directory and finally what about three dot ok so if -pron- see this as a path actually -pron- do not mean anything actually that be",
    "begin with three dot by the way if -pron- do make file begin with a dot then by default ls do not show -pron- so if -pron- have get a file say call dot secret dot secret dot text then just when i list file use ls by default -pron- hide or file name that begin with a dot -pron- be there however and -pron- can ask ls to actually list all possible file ok so let -pron- get back to -pron- discussion about path can -pron- simplify the follow ok right so let -pron- have a look a slash b and then -pron- go into the parent directory so -pron- be back into a and then -pron- go into c and then -pron- stay inside c so this be a path that be actually can be simplify to a slash c so both of these string actually represent the same directory -pron- be relative",
    "a and inside that a subdirectory call c so great relative path be very useful but just occasionally -pron- want to talk about absolute path inside -pron- directory how would -pron- do that well path that start with a forward slash be absolute so now -pron- can discard or ignore the current directory of the process and so if i wish i could for example talk about slash home and then the user directory like slash angrave for example so that be likely to be say -pron- home directory there may be other so for example configuration for the actual machine i would find expect to find mostly inside /etc see there be a whole load of executable",
    "be all start -pron- will notice with a forward slash so -pron- be talk about an absolute directory and of course -pron- can convert a relative path to an absolute path and vice versa and one of the way that -pron- be go to talk about do this be when i need the absolute canonical path ok so let -pron- first of all make a an absolute path which be not canonical ok so let -pron- start with the a forward slash so ok -pron- be go to go into say /etc and i may find thing like the host name of setting for -pron- web server and other thing inside there ok but then i want to go to parent directory and go somewhere",
    "-pron- will find a lot of log file for -pron- system so -pron- will agree that that be the same as another another absolute path -pron- could write which be just slash var and this one this seem kind of more reasonable as like the authority of the canonical version and the one that -pron- all agree be the one true way that -pron- should be talk about this particular directory ok so yes in fact this be call the absolute canonical path and if i give -pron- the first one where -pron- mess around go into directory and come back out etc would like a way to actually say no tell -pron- the canonical version of this and for that -pron- have get a late great little thing -pron- can call here call real path where -pron- can actually ask for the absolute canonical path and this"
  ],
  "dfa2b80f-5fdc-4f8a-9f3f-bf26dde6603b": [
    "hi right great welcome to lecture thirty seven say let -pron- talk a little bit about rpc protocol buffer and will finish -pron- a little bit with some fun with mmap now if -pron- be take cs two forty one -pron- have already see rpc in the lab so -pron- vote today be just to kind of fill in some detail about some kind of basic term and then -pron- will look at another another obvious implementation by google and maybe compare that with what -pron- see in the lab use rpc jenn ok so great let -pron- get start first of all what be rpc right so -pron- know this stand for remote procedure call and so rather than think about the kind of low level hey let -pron- send byte let -pron- get -pron- ministrator there ok right procedure call rather than send think about cover network because -pron- be think about -pron- more abstract level that i can make what look like a function call but in fact that function call execute inside a different process possibly even on a different machine",
    "be to ensure that -pron- have good privilege separation to realize that one thing that process have give -pron- be a security model -pron- can say that a particular process run as an effective user id and have access all not to certain system resource so -pron- know for example if i be write a web server that the web server have to run as root in order to access support that be privileged like a port less than a thousand and twenty four ok so should all -pron- code however run as administrator vernor route maybe not maybe some of -pron- should for example if -pron- be go to work with the file system run in a much more constrained way perhaps i for example should run -pron- under a certain user that only have access to a certain set of directory simply with browser today a web browser -pron- have get different part which can have different different privilege require",
    "i get other part which may interact with the file system in order for -pron- to cash information and -pron- have get other part which for example -pron- implement -pron- javascript interpreter or hot spot compiler or something so why do not i run those with different process so that if a vulnerability be find hopefully -pron- can try to contain any malicious attempt and make -pron- hard for an attacker to escape out of all browser and do bad thing ok so that be one big advantage of remote procedure call in addition to be able to remote stuff be that -pron- can actually separate the privilege of -pron- program and into small world contain unit ok right so the next thing be let -pron- talk about the actual code that -pron- write -pron- see an example of this in the previous lecture where -pron- actually have to write some code that actually turn",
    "into some information that -pron- be go to send over the network the code that that perform this duty be call stub code and will see two version version of this the stub code by -pron- be usually refer to the code that -pron- write on the client so for example -pron- may have a method call say get name all right ok and internally inside that there be go to be a lot of code that -pron- need to write in order to talk to the remote server pass return a string or something the code that -pron- right here be very much want boiler code -pron- be very dull to fight and ideally would have a tool to actually generate generate that code for -pron- and in",
    "ok which will automatically generate all that c code forwards but typically what -pron- need to do be -pron- need to marshall all the information that -pron- be go to send down the wire across the network to the other side so if -pron- imagine for example a field marshall or marshall in term of army -pron- responsibility be to get thing in order to get -pron- well organized so that -pron- can send everything off in organize fashion so if for example -pron- have a whole load of parameter to send -pron- may have to decide which order to send those parameter or if -pron- have a whole lot of integer dissent -pron- may decide to say send the number of integer follow by -pron- value or if -pron- have a graph -pron- 'd have to find a way to turn that graph into some information to send down the wire so all of that idea of marshalling",
    "like some session information because -pron- have already authenticate with the other side right so all that happen inside the client stub code on the other side at the on the server -pron- also -pron- need to write some sub some stub code so for every function that -pron- want to implement for example this get name function -pron- need to receive the information from the other side and turn that back into the kind of necessary parameter to actually kind of implement -pron- so this task be call une marshaling which be where -pron- grapple information and turn -pron- back into the parameter ok so within within this let -pron- actually have a girl that be actually kind of right some some code to do this and of course -pron- will",
    "and today will see that -pron- have get some name to say -pron- have some kind of key or index to get a particular name ok and -pron- be go to say return a character pointer ok so what may r r code look like for this right so i need to be able to send this key down and i also need to send which function i want to run on the remote side so -pron- have get several choice here perhaps i actually i want to write to the far to script the actual name of the function that -pron- be try to call so i could say get name and i could case so let -pron- get name so that be go to be want to kind of seven character right",
    "so would send eight character and i also need to send -pron- parameter so that be easy right now -pron- have just get one parameter but i still need to choose exactly how if i want to send -pron- in a binary format i could send the bite at mikey here and of course the size of that data structure ok so that be pretty efficient -pron- be send hopefully only just kind of four byte or have a big -pron- integer be the downside of course be that -pron- have immediately declare -pron- protocol to be the same protocol as -pron- cpu representation of -pron- integer and so -pron- code be not very portable also -pron- depend upon not only just the cpu but also -pron- compiler setting as well as to how big -pron- have choose to use this",
    "so -pron- 'd have to send some kind of session key as well right so i send all this and then -pron- be go to get back some datum so for example after this let -pron- kind of read from the result so of course this block until -pron- be ready say the number of byte expect so let -pron- read into -pron- kind of quality kind of length and of course be to be size of then k that tell -pron- that the number of byte -pron- have get very case so then great i can read into some structure here right so i well call malloc get the right number of byte ok so will call this late result k and -pron- expect lend bite here and then finally return",
    "to call malloc haircare result i need some bite here ok and however many byte the other side tell -pron- right so what do -pron- think about this code be -pron- secure what problem may be run into well the first thing to notice be that hey where be the where be the error handling -pron- do not write any -pron- just assume all -pron- read call and write call will work what if the other side say never return here -pron- be go to block forever here what if the other side mouse -pron- server give -pron- an incomplete result for example -pron- tell -pron- hey -pron- be go to give -pron- a thousand byte but then do not give -pron- any so then -pron- do also block be that the desire behavior what if -pron- read call return negative one what if -pron- only return a partial amount of datum",
    "-pron- be go to get be a valid number of what if instead argue -pron- be go to actually give -pron- a length of sixteen say billion byte -pron- be likely to fail with -pron- malakal what if -pron- turn to say in negative number or zero value so all at all this be not this be far from this be very fragile implementation here and as usual -pron- have assume that the format of be integer be compatible with a type here and even that the format of -pron- -pron- string incompatible say that -pron- be go to be use ascii -pron- may be use a different kind of character set for example may be use unicode or utf eight etc etc etc so life be never as quite as"
  ],
  "dfe8f684-5acd-41bf-8ba0-276a3fc52ffb": [
    "ok right so let -pron- talk about -pron- iso image again so remember that if i give -pron- an iso image perhaps -pron- have download off the internet because -pron- want to install linux somewhere -pron- could actually look inside -pron- so the iso image -pron- be a single file and -pron- adhere to the following standard the so call nine six six oh standard which be a digital format to allow -pron- to use cd rom which of course -pron- design for audio information but to be able to store digital information on that so so so today of course -pron- barely see any cd rom around but -pron- still use that format because -pron- be sufficiently efficient to be able to distribute complete file system for example to install some new game or earn complete new operating system right so -pron- use mount in order to mount an ics file use a loop back file system -pron- do that before how can -pron- download thing from the command line may have mention this before",
    "file right cull expect http address so -pron- may say ok http something rather right and just like cat -pron- will by default spew all of -pron- content onto standard output so how can -pron- fix that where -pron- can either redirect -pron- to a file or -pron- can use this minus oh just to say hey figure out a reasonable filename base on the url that -pron- give -pron- here so curl be kind of tremendously useful tool -pron- can even with -pron- web browser get an equivalent curl command form a web browser request that be useful if -pron- need kind of session cookie or other authentication item or color well -pron- can specify additional header as well so -pron- be a very fantastic and swiss army knife tool there right so let -pron- imagine -pron- have use curl together i",
    "a way to actually take -pron- iso and say here -pron- go machine boot up use this now -pron- be not go to try to boot boot up -pron- mac laptop right here use that instead -pron- be go to boot -pron- up use a virtual machine so a virtual machine the idea be that let -pron- virtualize every single piece of real machine in other word maybe there be a cd rom ok so here -pron- be and a cd rom with an actual cd inside -pron- ok so when -pron- boot up -pron- will actually see the content of the thing -pron- just the download and in fact the ice image -pron- be go to play with be call damn small linux and -pron- be a fifty megabyte iso file which be a complete little lennox district ok so what else do -pron- need to emulate well -pron- need to emulate more than just a cd rom -pron- need to emulate a complete cpus so for this -pron- be go to use",
    "format of -pron- for example -pron- could ask -pron- to emulate an amd base cpu system or another kind of cpu but the system that -pron- be go to emulate today be go to be base on a sixty four bit intel architecture so the x eighty six be the kind of original intel format for the cpu and the command and -pron- be look at sixty four bit variant so a little fun fact be that this actually be really kind of co develop with amd as well so the other thing -pron- may say be i want a certain kind of keyboard like an english keyboard that -pron- could put other thing in here like i can specify an actual file to be use for -pron- disk as well so i can actually store thing but this little dsl be here do not actually need a drive to be able to store anything so let -pron- use this",
    "and right now -pron- be sit in front of -pron- mac so i need to ssh over to a remote machine uh remote linux machine to run this command on ok so i say a few thing up first of all -pron- have instal x quartz on -pron- mac here so that i can actually remotely view graphic which be generate on a remote machine secondly i have let -pron- see i i have modify -pron- s -pron- ssh to say yes please forward x so let -pron- take a look at that let -pron- look at say the last line should do -pron- of of -pron- home directory ok so till there be a way to for the shell to explain that to -pron- home directory so slash home slash angrave right door ssh to look at -pron- config so here -pron- be i can do the",
    "so if i ssh to vm zero one -pron- be lazy i do not have to keep type the full host name i want to use the follow identity file notice -pron- have ask say hey please forward x eleven which be a way to do kind of remote graphic so let -pron- do this great so here -pron- be -pron- be on this particular machine and -pron- can check the graphic and one way to do that with x be to say let -pron- just run one of the standard little fun thing like excise and what i can not open the display oh how annoying right let -pron- try again so let -pron- i want to remember the current work path that -pron- grab that ok so let -pron- exit and do i have so this should work now so ssh v m zero one ok ok and now cd there will need that in a moment and let -pron- try excise again ok so excise",
    "also allow -pron- to check somehow responsive -pron- be and whether -pron- can send mouse event back to the remote end as well ok so great let -pron- quit out of that great so now i actually want to run -pron- little qemu command ok so any better find that dsl so i remember -pron- be in a different directory so let -pron- go back to select thirty recursively search there that will find but i can say alright i care about the name in case insensitive minus i name something that end with i so so great that be what -pron- need right so of course i could actually have a symbolic link because i do not want to keep have to type that so let -pron- just make a symbolic link so l n minus s right and i can call this test dot iso alright",
    "i could have make a hard link as well if i wish wait so now -pron- be time to run -pron- qemu command so let -pron- just copy -pron- from here ok and -pron- will get start so off -pron- go could not open that be because -pron- do not call -pron- that -pron- call -pron- testi so alright so give a second i do not have fantastic wireless connectivity here so -pron- be go to take awhile for -pron- to update the display but there -pron- go -pron- be burn up oh i should be wear cut off glove at this point and declare -pron- a little hacker i think be really cool -pron- have get kind of a small linux run on a different linux virtual machine -pron- and -pron- be display on a mac and -pron- be record -pron- so -pron- can see -pron- right so off -pron- go i can do different thing for this i can press f two i think and -pron- will not get this try ranchi",
    "seem like the graphic of ok be finally get there right so i think -pron- be go to be hard to run this and see -pron- actually make -pron- a useful thing but amusingly this installation actually have a complete browser in -pron- as well so if i have a well connection i could even remotely browse the internet or be a kind of partly in slowly but i see that slowly slowly -pron- be boot up and -pron- could use this then because -pron- be a completely virtual environment be completely emulate this be great for do thing like test build of a complete lennox system perhaps -pron- want to modify the kernel patch -pron- want to add -pron- own little device driver all -pron- want to try change the hardware slightly or -pron- do not trust piece of software and -pron- want to",
    "but make -pron- hard for -pron- to escape out of that employment ok of course if -pron- be deal with a very sophisticated attacker -pron- could actually detect that -pron- be run inside an emulate environment and then not be malicious or -pron- may wait for two day before be a malicious example so the idea be that now -pron- be unlikely as a forensic expert to leave -pron- machine run for two day or -pron- may not have many file on -pron- may just look like a regular file so so there be always this i get a war go on between malicious attacker an forensic expert try to make -pron- so that so that -pron- can actually get understand how malware work alright so that be kind of accumulate as -pron- can see -pron- be finally boot up -pron- be kind of run and -pron- have a tiny little browser run ok so chemo",
    "and -pron- can configure -pron- to be less virtual so in this particular case -pron- be emulate the complete instruction set of the cpu and so that be expensive -pron- be go to take -pron- typically at least ten to one hundred real instruction per power instruction that -pron- actually emulate but -pron- know that that -pron- be actually run on the same cpu so the possibility exist to provide some hardware acceleration for that where -pron- can run ninety nine point nine percent of the instruction directly on a real cpu and so that will give -pron- a ten to one hundred fold speedup so -pron- just have to figure out the security implication of that and workout which instruction -pron- do not want to run on -pron- real cpu so now -pron- be enter thing"
  ],
  "dff47837-9853-4be6-9e60-8ab2c54b8272": [
    "ok so -pron- be go to start head towards networking and for that -pron- really do not need to understand how to work with error and how to print out error and how to discover when thing do not work so network be tricky because with thing do not work where -pron- actually want to understand what -pron- problem with the client or the server be there a problem in set up the connection and so deal with error become quite important area can be because of code area -pron- have make but -pron- also can be say because the client have finish the connection before the server have finish say everything -pron- want to say unvoice versa ok so let -pron- start talk about error that right so -pron- want to put out some error ok so here be first way -pron- have probably see thing like ok i can use p error to print an error to standard error and i can include piece of text here which get include along with",
    "a way to get just a simple string and this be -pron- -pron- can say store error and i can ask for a the string associate with a particular error number like one two three four five etc etc etc ok but perhaps -pron- want to know what be actually just go wrong with -pron- program and so if -pron- want to find out the air associate with a recent system call guess what there be something call ever know urdu there -pron- go so i could say please tell -pron- the these string associate with the most recent system ever ok so in fact -pron- could re implement pm so if -pron- need to write kind of piero -pron- -pron- may do something like the following -pron- may say ok so peer error i just want to print out to standard error cater to do and now will have",
    "ok and then another string ok and then -pron- will need whatever use say so -pron- little message there follow by stewart ever of ever so ever know be this little global variable that -pron- never know that -pron- have -pron- be be there all along -pron- be be inside -pron- c program -pron- will be inside -pron- python and -pron- node program ok be just a standard part of the process so something like that maybe -pron- will put in new line there as well but as -pron- implementation of pierre right so there be a one big surprising gotcher however with string ever and if the follow if -pron- actually",
    "ok so video surprise right here -pron- be use this low function inside here and -pron- think -pron- could do everything -pron- want inside -pron- thread -pron- be not thread safe key and if -pron- instead -pron- actually want to write code that be two s dave then ok -pron- actually should use something else which be stewart ever underscore r and then -pron- pass in some integer like eleanor ok so the reason for that be that stre air -pron- may return just a hardcode string literal safe error number one two three four five six etc but if -pron- pass an arbitrary large number -pron- actually construct the string -pron- and how -pron- may do that well -pron- could",
    "a pointer so instead internally have some static static memory that -pron- reuse from one call to the next ok so that be -pron- problem that if -pron- be go to use this in multiple thread i could have one call to store arribe be enter by another call to stuart error on a different thread an oh dear both of -pron- be now try to use the same piece of static memory so one hour be go to override the other one right so this kind of common with some of the early call inside posix that -pron- be not build with with thread in mind and so threat support the ability to work with multiple thread have kind of be reverse engineer back into some of these api call so stroit error -pron-",
    "the integer or no instead -pron- also pass in a pointer to -pron- memory that -pron- would like -pron- to use so here be some memory and typically as well -pron- impasse in how much many as well so -pron- could pull up a terminal window to see the exact order of these thing but what i want -pron- to learn yeah there be quite a few of these kind of underscore be variation or variant of exist course and -pron- be add later to posix in order to make -pron- more thread safe now the last thing -pron- may have be think about when i be talk about this be hold on a moment what about earner what be this other thing and win -pron- set ok so oh no be set by most system call that can fail",
    "go wrong so if -pron- call right and -pron- do not work then oh dear -pron- will return negative one but -pron- want to find out more about what go wrong so that information be encode inside this global variable but wait a moment if -pron- have get a multithreade program surely -pron- be go to be really hard to figure out which particular thread on which system call cause evernote change yes -pron- be correct and now -pron- be force to tell -pron- that actually ok that ever know actually for multithreade program be a very special variably behave like a global variable but actually -pron- be three use thread local storage which mean that each thread get -pron- own copy thread local storage each thread get -pron- own copy of error -pron- still behave like a global variable but the value"
  ],
  "e09a816e-d4d4-46c2-9a55-faaa21d5a1d4": [
    "ok let -pron- talk about some malicious attack against tcp first of all port hijacking so whatever now other malicious user could take over a port so -pron- think -pron- be connect to -pron- web server but in fact -pron- be connect to a malicious process list on the other end pretend to be a web server but in fact just steal -pron- password etc right so how can -pron- try to prevent this so there be two kind of common mechanism first of all the idea of privileged port so as to spell privileged correctly if something like this privileged port so -pron- know that -pron- need to have root or administrator privilege in order to be able to listen on a port number less than a thousand twenty four ok so -pron- have to have administrative privilege which mean that no mere mortal process can pretend to listen on those port -pron- already have to be bless by the administrator of that machine",
    "on a port that pause be not immediately available for reuse in fact there be a time out of about two minute where the -pron- can not simply start a new server listen on the same port ok so that be the default behavior for tcp under linux and other operating system -pron- can actually change -pron- behavior so that a new process can immediately listen on that port in fact -pron- can set an option on -pron- socket when -pron- first create to say hey i do not need the timeout behavior and the reason this time at behavior exist be simply because packet may arrive late -pron- could imagine that -pron- finish -pron- communication so now the server shutdown but for some reason packet be very slow arriving and -pron- arrive at that port long after the",
    "be capture by a different process ok so -pron- have privileged port -pron- have -pron- have packet timeout ok on the port information which -pron- can disable -pron- will see how will do that a little bit be this the end of the story when -pron- come to tcp attack absolutely not -pron- have get thing like denial of service to talk about -pron- have get thing like tcp session to talk about session hijacking ok so right let -pron- think about what to pack -pron- actually be tcp packet there be four basic piece of information plus one more that identify the two end of a packet so -pron- have get the source ip and the port number and then -pron- have get the destination ip",
    "so the sequence number hopefully will allow -pron- to first of all identify if a package have arrive too early in fact -pron- be wait for -pron- brother or be there an early packet be still alive but -pron- could also use the sequence number to discard malicious attempt to inject a fake packet so when -pron- talk about the tcp session -pron- be these first four piece of information which uniquely identify the the session in other word what -pron- can expect to push down -pron- client far descriptor that this four triple if -pron- like the combination of these four number which uniquely identify one particular communication",
    "know all of that -pron- would not be able to create fake packet and expect -pron- to be see by by one end or the other of exist session because -pron- have probably get a guest sequence number correct and that be tricky because the sequence number be four byte so or four octet in other word -pron- have get a two to the thirty two chance of get -pron- correct ok and if -pron- get -pron- incorrect then the end will just discard -pron- packet that be not the complete story but that be kind of good kind of rule of thumb to see why ok -pron- be not quite as easy as -pron- like if -pron- be in a malicious attacker to be able to start inject fake packet into a tcp session unless of course -pron- be able to actually listen to those packet look at the sequence number of previous packet and then -pron- 'd actually be able to predict a valid sequence number in the future so if -pron- be"
  ],
  "e0d9ea58-cf82-4b71-957b-9da72ccb2d90": [
    "hi welcome to lecture seven so -pron- be go to look at how to build a shell how to play with signal and how to review some system code so let -pron- start with that here be -pron- first little problem here be some c code and -pron- want to see if -pron- can spot any error in this so let -pron- go through this and see what -pron- see if -pron- can understand how -pron- work what be try to do and how -pron- may improve -pron- so what do -pron- see ok i get -pron- little pen go right so right i have a -pron- method here main method and -pron- be check to see if oxy be not equal to two in other word this little program that expect -pron- own name and some command file to run ok let -pron- find out what that mean in a moment and so the usage here be not correct what -pron- want be the first string argument so i could have write argv of zero there because remember argv -pron- point to a table of character pointer and then ok good -pron- do not continue",
    "zero value not that happy -pron- put all this on one line but -pron- be a good way to be able to show thing on just a single screen right now but in production code -pron- would put that on multiple line so what happen next -pron- sell capacity use this size underscore t so this be unsigned type the great thing about size loyalty be typically a lot large than just a regular see -pron- anyway -pron- be say i want to kiss -pron- two hundred and then i malloc that number of byte ok so if this be production code i would check to see if malloc fail so i would expect here to be some kind of test to see if buffalo be null then print something out and probably exit at that point all right so then -pron- have a sign version of this -pron- be go to use that -pron- be guess with get like let -pron- find out in a moment right what do -pron- do next ok now -pron- try to open a file and",
    "of variable if i want -pron- code with a bit more readable and then -pron- give a hint to the c library that -pron- only want to open this file for reading right ok good some error check so if not far in other word if i point two be point at nothing 's zero be null then -pron- use piero to print out a little message could not make file and that will also include some kind of error message and this time -pron- be return from maine which actually if -pron- return from maine have the same effect as call exit as well alright so -pron- go around here ok now this be actually kind of common in c code which be just use zero and one for false at time so zero false one for true -pron- could include static ball and use true if -pron- wish ok so get line then -pron- give -pron- the address of -pron- two variable to buffer the capacity and ask -pron- to start read from a file handle ok and then -pron- put a zero in byte",
    "that in a moment for now let -pron- just carry on ok so -pron- do put s which as -pron- know be start print out character until -pron- get to the end of c string character the null null byte and follow by a newline for -pron- and then -pron- say ok if stricken power so this be go to compare two string and -pron- pass in two point be the start of the two string -pron- want to compare and -pron- be go to keep compare one character at a time from each from the left hand side and the right hand side and either -pron- will be exactly the same in the same length or one of the more finish early so in this case store compare be go to tell -pron- if the buffer be equal to y n deep end and nothing else no more no less so that will return a zero value if those be equal ok so -pron- have find a little bug here that -pron- want to actually check to see if this be",
    "of the loop ok so well check in here would be to say look if that be equal to zero alternatively i could have just put an exclamation point in front of store compare this by the way be a common error with stroke compare because -pron- tend to think of -pron- just equal -pron- forget to actually negate the integer output format if the thing be different if -pron- do pass into different thing -pron- actually return a integer value which be representative of the ascii difference of where -pron- find the very first difference ok so what other condition for break out of this loop that bites be negative one ok where do -pron- get bite from ok bite be -pron- result from get light and as -pron- know get line return negative one if an error have occur with input or there be just no more of that far leave to read ok so will break out of the loop and at this point alarm should be go off because look what -pron- do back here",
    "byte minus one will say equal to zero and -pron- look like what the intent here be to try to truncate the string by one byte perhaps to make -pron- a little bit short oh yeah so this be go to be exciting if byte be equal to negative one because now -pron- have write into memory that be before the heap area that -pron- be actually use for this so -pron- be program crash maybe will -pron- crash immediately no maybe or crash later when -pron- do some other activity on the heap ok right let -pron- keep on go so what do -pron- do next so now -pron- look at the very first bite of the buffer and then -pron- flush standard in more about that in a little bit to why -pron- may want to do that and then -pron- call fork oh my so now -pron- have get two of these process run at the same time what be -pron- go to do ok now remember what do fork do folk say actually the current running process i now need to make a doppelganger",
    "so -pron- now have the exist the original parent and an exact copy of the child so both of these be go to return from fork so now -pron- have one piece of code but two process be run and now -pron- can make these two process start to do different thing -pron- have the same history -pron- look behind -pron- all -pron- variable be the same -pron- get the same open file but now -pron- ask each process to evaluate the following if not fork so remember usually if -pron- be the parent when -pron- fault return -pron- get the parent so the child id but if -pron- child -pron- just get zero as a result so this be where the pound and the child process be go to diverge go to do different thing if -pron- be the child then -pron- return value or fork be zero so this result be true and so the child do the follow maybe if -pron- write production code would actually document",
    "negative one to mean an error occur -pron- be sorry i could not make any could not clone -pron- i could not create hr process perhaps -pron- make too many zombie process that be lie around i just do not have any space right now to make another one but anyway let -pron- to see what let -pron- see what -pron- do for the child so the child call exec and particular version of held x lp which say look in the path and -pron- be just go to pass in some argument ok so what do -pron- think about these argument and what be go on so what -pron- like and what do not -pron- like well first of all -pron- be pass in the follow string buffer plus one why be -pron- pass in buffer plus one well if -pron- go back and actually with the read the instruction -pron- discover that the idea be that if the very first part of the line that -pron- have",
    "all right so -pron- be go to pass this to bash be this the right way to do -pron- be this be how -pron- tell bash to execute a line of code interpreter line of code for -pron- well not quite here be here be -pron- first mistake that i would like to change here be that remember -pron- have to specify the first thing twice this be the name of the file -pron- have like to find on the disk on the path somewhere please load that in and give this little child processor head transplant stop run -pron- code in one that instead and then -pron- well actually say what the process name be go to be and so typically that be the same thing so typically -pron- would write to bash here as well as -pron- fight -pron- a second time ok now bash may need some argument to tell -pron- to actually execute that so let -pron- come back to that a little bit and check that ok this be good -pron- be terminate argument be verbal argument with null pointer",
    "after this so why do i have the exit one here well remember -pron- could be that i can not actually call exec with bash perhaps bash be not instal on the same system so that could be a reason for exact to fail and at this point life get exciting because -pron- be use fork so now i have two process that will jump out of this little if statement and go back to -pron- while loop so go around again and attempt to read the next line from the file and what will those do well if -pron- call fork then -pron- both of -pron- will end up create more process and i would have four process if i go around again and then -pron- both manage to read another line each -pron- 'd now have a process and sixteen and thirty two and pretty much -pron- have agent smith in the matrix type try to take over the world ok unfortunately -pron- do not take over the world instead -pron- just pretend to bring -pron- poor machine to a grind halt unable",
    "of thing that -pron- skip over and figure out what -pron- should do with -pron- first of all why be this flush here so this be i i bone of contention between -pron- and jilib see right now so if -pron- wanna linux machine that use a relatively modern selye be -pron- need this line because the child and the processor go to share standard in and the way that -pron- -pron- can interact be not necessarily senseable when the child process exit in fact -pron- be bad than just have this line -pron- actually need to do flush on all of -pron- open file handle and so here be another one -pron- well actually call f flush on -pron- input here as well if -pron- have print some thing out and -pron- want",
    "-pron- could also use eh flush on any of -pron- output as well but this particular annoying fact right now for two thousand nineteen at least seem to be the good way to ensure that even though -pron- child be run that -pron- prove -pron- parent can successfully continue to read this command file ok so let -pron- get out of this and then -pron- will start kind of go through and light and run this -pron- have a nice little talk about that so i think yeah so i think the next thing will do be actually kind of have a look at the actual code ok so -pron- have get -pron- and should be the code -pron- just believe that be hard to read be not -pron- that be not do that today ok let -pron- use -pron- text nate and also let -pron- who",
    "-pron- want to change oh yeah this be exactly the same so i be sketch out a solution that say rv of zero which -pron- know be actually exactly the same as write argv plus zero and then dereference that that memory ok but -pron- do not need the plus zero so -pron- could be rather cheeky aspect there and the white hide more aspect here oh just to confuse everybody else be just drop into a sequence right but anyway so -pron- have get -pron- little usage thing -pron- have a little check down here and now let -pron- have a look at repeat get line so the first thing -pron- want to check be to see if bite be negative one and break out of the loop early before -pron- start modify anything this second thing be -pron- be actually get rid of that last line that last character",
    "but do not need to be true at the very very last line of text file so -pron- have get a test that bite now should be great than zero otherwise -pron- do not make sense to set -pron- to zero and secondly let -pron- check the bite that -pron- be try to overwrite be actually a new line ok so now will print -pron- out so -pron- can see what be go on here be -pron- chest test for stroke hump and finally -pron- let -pron- call bash on that the other thing that -pron- have get in -pron- final piece of code here be that -pron- have clean up the resource ok so this little demo be actually go to finish pretty quickly but in real production code which do not finish quickly -pron- be important to make sure that -pron- release everything that -pron- have ask for from the system so in this case -pron- want to free up the memory that -pron- call -pron- use for getline that will either be the original malloc -pron- call or some new",
    "file handle as well and if -pron- want to be good citizen -pron- could also change -pron- little file pointer here to be null just so no one could use -pron- after that ok like i say there be a kind of overengineered for this small amount of code but i hope -pron- understand the intent behind -pron- right so can -pron- run this ok let -pron- let -pron- set up some test example let -pron- see what -pron- have here let -pron- have a look at some little problem little example script -pron- have get here -pron- have get one which be call script one and -pron- can see -pron- -pron- call echo six one echo seem another second and then call echo again with hello let -pron- try -pron- with that one ok and let -pron- sorry -pron- be look at one thing i be look at command stop text ok there -pron- go right so this be the text file that -pron- be go to pass to that code so the very first line of this file",
    "so -pron- be just go to ignore that line and then -pron- have test where i deliberately give -pron- a file that do not exist and then -pron- have get -pron- dreve other executable to run and -pron- hope that all these run independently and -pron- will notice that -pron- last line by design do not have a new line on -pron- just because -pron- want to kind of make sure that -pron- can actually truly run that light so if -pron- work then -pron- should run -pron- little script three here ok and -pron- be a pretty cool ok so hopefully -pron- will get -pron- three new version of bash run independently and print these out and -pron- will almost work except that -pron- have get the wrong name in this so will edit that in a moment but first of all let -pron- just try -pron- let -pron- just compile -pron- so hello compiler have -pron- program -pron- be run the parallel solution now do -pron- do",
    "where be -pron- fork -pron- no ok so -pron- -pron- want to flush -pron- two input stream -pron- have get standard into flush and -pron- have get by file handle as well ok so let -pron- save that and right ok and now if i run -pron- -pron- will give -pron- a little usage ok -pron- test that now -pron- want to say here be -pron- here be -pron- command how ok this be look pretty good bash -pron- mention run bash but -pron- do not find the command that be because if -pron- look for everything in this directory this start with end with a sh -pron- actually just call script more script script free so i want to change that file let -pron- do -pron- with vim or by ok so actually i can say thing like oh i want to -pron- regular expression",
    "that to nothing and will have a g just in case -pron- appear more than once on the same line right do and right and quit ok so now let -pron- run this again and -pron- will give -pron- everything and see what happen alright so -pron- have get one program to print out some environment variable another which wait two second to print pretty cool and another one that say hello world so this be actually pretty cool -pron- have get the beginning of a scripting environment so -pron- have get something that -pron- can do multiple thing all at the same time so and this be kind of the beginning as well of how i can think about shell and -pron- have get process which i can start and run concurrently now i can write little c program which will actually say start multiple compiler at the same time ok so that be kind of put -pron- altogether -pron- have get the ability to read in bit of string manipulate string memory think about fork and exact and use all this together but of course what do -pron-"
  ],
  "e12861bf-8be8-4e4d-a2d8-c07e5d79f3dd": [
    "hi ok so let -pron- have a look at how -pron- can write some code which be non deterministic and then fix -pron- up in different way so here -pron- go let -pron- get start right -pron- have get a little main method down here and -pron- be go to create ten thread and each time i go to store the address inside -pron- little ray here of thread i ds and then i call pizza at exit so -pron- know that at that point the main thread be do ok but the rest of the process live on -pron- ten little fence live on ok what do -pron- do case so here be -pron- game plan let -pron- there be pass in the address of -pron- little iterate available so -pron- will find out -pron- address not as valuable 's address and then here be an expression to read that value how do this work ok so -pron- know when finally be assign a new cpu to start this function that -pron- be give address what do i want to do with that address well i know something",
    "be not be just so in fact i want to treat that address as an integer pointer great so now i have that integer pointer i actually want to read whatsapp -pron- content so let -pron- dereference -pron- with little ass trick there ok so -pron- have get the value now -pron- have be see how -pron- can create p thread i ds every time -pron- call pisode create but what if -pron- want to know -pron- own idea what if -pron- say what be -pron- id how would how would i determine that so there should be a way to do this and there be so -pron- say -pron- id be p thread -pron- so that be the other way of get a thread id if -pron- want to know who -pron- be something which represent a particular thread then -pron- call peter -pron- right less for fun print out which be not normal behaviour normally do not print out these i ds one way to do this -pron- will just treat -pron- as a pointer to some memory so let -pron- say that this id represent some integer type thing which be some address type thing or just print",
    "p to say right treat this do not address ok so will pick that up and if -pron- want -pron- could play the same trick down here -pron- put this out but print out the food idea -pron- get down there but let -pron- let -pron- just run this and see what -pron- get in term of the value -pron- be go to print ok so -pron- want to compile -pron- off -pron- go and when -pron- run -pron- ok alright so -pron- look like -pron- be kind of work but not as well as -pron- hope -pron- certainly get different thread idea appear and -pron- do look like address -pron- will give -pron- that but look at this -pron- have get very strange value over here and even the last value be ten and if i run -pron- again i get different value again if i run -pron- again i get different value again ok so i get in all sort of value here what be go on clearly -pron- have get a program which be not deterministic -pron- do not",
    "well hopefully -pron- can see that -pron- pass in the address of i and so actually what -pron- have here be call a race condition -pron- depend upon the exact interleaving in time of the instruction that be go to be execute -pron- have get one thread that immediately after call pete say quit go to create be go to increment the value of i and then test to see if i be less than ten i have not go around again so -pron- have get one thread do that as fast as -pron- as fast as -pron- can and i get another thread that as soon as -pron- start will gas that pointer to an end pointer and then try to read -pron- so the value that -pron- see depend upon the relative timing of these operation and that can change from one run to the next -pron- may be surprised -pron- even see the value of ten even though -pron- loop say be i lesson ten yes so that be why -pron- thread can start at some point in the future maybe few microsecond but maybe",
    "how do this this for loop so at that point the value of i will be equal to ten because that be -pron- exit condition but -pron- get bad than that because formally the value of this variable be not define outside of this loop and in fact when -pron- call pizza at exit -pron- do not even need the stack anymore for maine so the memory that -pron- may be read at that point be no long really hour to be look at so -pron- have get a pretty badly form program here right so how can -pron- fix -pron- -pron- need to address this race condition right will do -pron- in two different way first of all how about -pron- turn this into a task that -pron- give each one and -pron- task right now be just know the little integer so let -pron- have some memory for each thread so -pron- will call -pron- say start value and -pron- can see -pron- be use a global here right and -pron- will be let -pron- see -pron- will have ten am",
    "of this loop or i could do -pron- early ok so -pron- can be let -pron- say hundred plus be -pron- today just so -pron- can prove that -pron- be run this program ok and then i do not want to pass in the address if i instead i want to pass in -pron- pointer to one of these integer -pron- have just create so start value and i could say take the ice warren i want the address of that but -pron- know that -pron- can also write that be just ok here be the start of the array i want the offset of i please and will use integer arithmetic ok so -pron- have initialize array let -pron- give this ago and off -pron- go so will compile -pron- ok let -pron- just do there -pron- go right and run -pron- ok now great now -pron- actually do see the intend value from zero to nine hundred two hundred and nine ok and -pron- be deterministic and if -pron- run -pron- -pron- will always produce those value",
    "in the correct order -pron- be correct yeah so even though -pron- know deterministically that -pron- be go to get the value between a hundred and a hundred and nine those thread can run in an arbitrary order so the output be not guarantee to be in exactly the same app or ordering that -pron- actually define -pron- inside the code so let -pron- have a look at kind of one more alternative here to make a program completely deterministic here be what -pron- be go to do -pron- be go to say p thread join an -pron- want to join on not the address of thread id but the actual value -pron- and i do not care about the exit value so do not write that anywhere ok alright so what be go to happen now first of all let -pron- run -pron- and then -pron- can tell -pron- why ok so let -pron- clear this clear that be compile let -pron- run ok and this time -pron- be extremely confident -pron- be go to see the same same output",
    "so let -pron- have a look at the code -pron- vote -pron- create a thread and the main thread can return and carry on there be no requirement for -pron- to wait for that thread to get start but what do -pron- do -pron- immediately say ok now i want to block i want to wait until -pron- be able to join on the other thread so that mean before -pron- get to go around the loop before -pron- add two hundred dollar and go round the when opoly board again right before -pron- get to say i plus plus in -pron- eye lesson ten -pron- have to run and complete the code inside -pron- funk -pron- have to read the value -pron- print out -pron- get the thread id self -pron- print something out and return null and those step have to occur in order for pizza joint to letter out of jail so -pron- be extremely confident that i know for certain that"
  ],
  "e1cac33e-3bee-4e92-81db-c22e4418b623": [
    "hi so let -pron- workout with the follow piece of code do this be pretty obtuse stuff -pron- would not expect a programmer that have not see -pron- system programming to understand -pron- so let -pron- break -pron- down and see what be go on right now be actually base on kind of real bit of system code that -pron- have see ok alright so first thing be close one what be go on here right so -pron- know and i know that by default -pron- little process have three file descriptor little integer start with zero the allow -pron- to read and write and -pron- get by default three stdin stdout stderr < br > and -pron- have just close standard out and immediately -pron- call open so -pron- be ask for a new file descriptor and -pron- be give -pron- a filename log dot text now -pron- be give some hint about how -pron- want -pron- want to use this -pron- want to open this -pron- 'd invite if -pron- do not exist please create -pron- if -pron- do exist then append to the end",
    "can be read or write by this user and other people as well if -pron- forget to put this third argument in then open will use whatever value happen to be on the stack at the time and that could be zero meaning that hey in the future -pron- will have a hard time delete this file not open -pron- because -pron- will not have any permission but -pron- be go to use iruser and iwus be use meaning that the user have read in -pron- permission where can -pron- find out all of this stuff the answer be to look at these section two of the man page so -pron- would write man s two ok right so -pron- be do low level thing with file scripter but -pron- have jump back up into the c library where -pron- say put string in other word print out the follow to standard error and and also print out a new line ok hold on a moment do not -pron- just close down -pron- out yes",
    "descriptor one so do that mean that none of this be go to appear well almost here be a little cunning trick -pron- be go to call open and if that succeed the fast the colonel will use the small non negative integer file descriptor that be currently unused and i think -pron- can guess what -pron- be go to be this that be right -pron- be far descriptive one number one -pron- close out so -pron- know that be available so -pron- can reason that this particular open call will be give -pron- file descriptor one right so what do -pron- put inside there with the sea life be go to get captain log with a new line and then call chdir what do chdir do do as a read the man page chdir be be change current work directory of this process every",
    "-pron- want to change -pron- -pron- be go to change -pron- to slash bin so what be -pron- go to do with this and -pron- will see that -pron- be go to use -pron- in a moment when -pron- talk about the current directory here -pron- be go to call exec next to say please find the follow program -pron- have specify -pron- be full path call ls and -pron- can run -pron- under the process name of slash band slash ls and -pron- be just give -pron- an argument of dot mean the current directory so this be actually go to run and say please list all the file of the current directory and what do that count directory -pron- just change -pron- to slash bin if that fail where will print something out to standard error with perror but honestly -pron- do not expect these line to one so great let -pron- actually run this and see what -pron- get ok ok right so let -pron- and then this gcc captain log",
    "be actually all of the little c program which be compile and -pron- will find on -pron- system under the slash bin directory and so there be a favorite -pron- probably use -pron- before like cp to copy file share more to change some write by permission on file -pron- can find out -pron- host name -pron- can make directory these actually all just title c program which will slide in slide be so i could have do example s be and i would have see the same thing as well ok but wait a moment -pron- little log never actually have the captain log in fact if i look at the first few line so if i be to look at dog text there be nothing there",
    "captain log do not that do not go anywhere so though exec when -pron- start up and -pron- give -pron- little processor head transplant though that happy print out to standard out why do -pron- not see captain log ok and the answer to this riddle be because -pron- give -pron- a head transplant be because -pron- call -pron- exec an exact throw away all of the exist memory of -pron- process and inside that memory be the c librarie buffer for standard out -pron- be get ready to send out captain log -pron- be make a promise in the future to write -pron- out but -pron- never get around to -pron- and before -pron- have a chance to do so -pron- kill all that memory hold on a moment put -pron- i tell -pron- write a new line and",
    "all that out well -pron- 'd be correct normally if -pron- be write just to the terminal but the c library attempt to see what be -pron- send -pron- output too and in this case -pron- change to standard output before -pron- have write anything so that -pron- would be send to a file and so now the c library change to well performance mode that say -pron- will not try to buffer this for every time -pron- see in newline instead -pron- will only write thing out when the internal buffer be full or when -pron- be gracefully shut down the program and in this case neither of those two thing happen instead exec come bluster in and discard everything that the c library have get ready to print out to stand out so -pron- never have a chance so that be how this program work let -pron- just run -pron- one more time and will see now that if -pron- change -pron- program to actually",
    "ok where be -pron- right captain log now before call exec -pron- want to flush that output so let -pron- do flush standard out hey selye be make sure everything be go before -pron- call exec ok so now right -pron- compile this ok let -pron- remove -pron- log output k let -pron- now run -pron- ok and now i can look at the first few line this look at the first five line of -pron- log will see captain log there -pron- go and if i count the number of line on log dot text -pron- be thirty seven and if i run -pron- again let -pron- just check that -pron- really be append output so let -pron- check see how see how long -pron- be now and there -pron- go -pron- be now double in length to seventy four line ok right so that be a lot of fun put a whole load"
  ],
  "e1d6897e-2542-433c-804f-21a23a9bd0ee": [
    "ok so -pron- do not need a definition for deadlock and this idea that -pron- -pron- thread be freeze up maybe one thread be wait for a mutex lock that be never go to be unlocked maybe -pron- be wait for something from a data structure which be never go to be give to -pron- so here be a general definition for dead log key text door work ok great make -pron- that big right so dead log be when -pron- be wait for an event that well ok can i type so i put in some in there ok will never happen ok so stop try to make -pron- day to happen -pron- be never go to happen stop try to make this thread exit -pron- be never go to happen ok so -pron- poor poor little fair door process be wait some for an event maybe -pron- be go to signal that",
    "just never go to happen so -pron- do not get to complete -pron- do not get to kind of run -pron- activity or run the code and of course debug deadlock be tricky -pron- be often there as pair that i could a thread maybe -pron- be stick inside p threat condition wait and -pron- do not know why why that event do not have not have not fired have not occur ok so -pron- have get this general definition of deadlock now actually let -pron- see if -pron- can kind of construct some example where -pron- actually cause -pron- so let -pron- use team mutex lock and two thread to create an example of deadlock ok bye -pron- be go to actually do this in a text editor ok let -pron- go right do i have so if -pron- have get thread one imagine -pron- thread first red make the coda big right have call",
    "lock on this first mutex and then after -pron- have do that please lock on this other mutex right so -pron- will do some work ok do something and then after that -pron- want to at least ok so -pron- will call p thread unlock on both of these mutex be ok so for example maybe -pron- want to take some datum out of out of datum store one stick -pron- into datum structure to ok -pron- do not matter particular which order that -pron- release -pron- in just for symmetry -pron- be go to do -pron- this way but let -pron- let -pron- think about what happen if -pron- lock these in a different sequence inside another thread so -pron- be go to have now another thread that do the same sequence of operation accept ha -pron- have swap these around the case so",
    "like most of the time no most of the time -pron- thread be perfectly happy do what -pron- need to do until the follow happen until one unfortunate day thread one have call preferred mutex lock on get this choose a new color call prefix lock on the first one case be complete that at the same time -pron- other thread which be curiously call thread one so let -pron- fix that thread two right have just acquire the lock on mutex too so now -pron- be both able to do this but what happen",
    "let -pron- go for yes -pron- be kinda extreme pinky purple thing let -pron- try that ok right so now what happen thread one say -pron- 'd like to lock this mutex but of course what do this do -pron- block ok why because another thread have that new text between -pron- and -pron- -pron- know -pron- be thread two meanwhile thread two try to look -pron- take one and that of course block -pron- be not yet available another thread be currently quite that music lock ok so when will -pron- escape out of this and the answer be never ok -pron- can read the code and see that eventually -pron- be go to release these lock but -pron- be never go to get to that that piece of code that thread one be wait for thread two and thread two be wait for thread one so -pron- be kind of stuck for stick forever",
    "be in the same order -pron- would have be fine let -pron- just kind of quickly sketch that out to see that let -pron- imagine that i have -pron- first thread do mutex wear and then mute x two and then mutex wanna mutex two down here for thread two then if -pron- both try to acquire mutex in at the same time then -pron- can imagine that thread one would acquire the mutex lock here which would mean thread two will be force to block so -pron- do not get to go to step two which mean thread one can continue and then when -pron- be finish -pron- will release those lock so now thread two can finish so if -pron- 'd actually write -pron- code like this in the same order -pron- would have be impossible to get deadlock",
    "semaphore sure ok so let -pron- do something similar with count semaphore where thread one call say sam weights on count center four as well and at the end -pron- will will increase the count again ok so now -pron- will have another thread that do something similar or key and another thread do something similar ok so do -pron- see any problem right now nope -pron- could imagine that these counting semaphore 's -pron- kind except for have be initialize just account of one ok so same",
    "for every same weight call -pron- call assam post ok right so what if -pron- could have make -pron- a little bit more complicated though and -pron- say that same weight here be go to in order to continue -pron- be go to wait on this thread and then -pron- be go to post on some sample to an meanwhile thread two -pron- be go to wait on count semaphore two and then -pron- be go to post on count semaphore three ok and then some weight three -pron- be go to then post inseminate one ok if all -pron- county be force to start off with a value of zero -pron- can see that no one get to play that all of -pron- thread have get stick that -pron- first thread be block here wait for the value for sale want change well someone will change",
    "pizza slice and be able to get that piece of slice form -pron- be wait for sam post to be call by thread two but thread two be not go to give -pron- that pizza slice until -pron- get a piece of slice out of count semaphore s two and where will i get that only from thread one when thread one finally call stem post but that be not go to happen because thread what be still wait for the pizza slice from thread three so now -pron- see -pron- have get this love triangle here between -pron- three thread -pron- will never go to continue that always wait for an event that be never go to happen so that be all example of deadlock -pron- can construct lot of these vary bit of complexity usually -pron- do not artificial construct -pron- like this usually be scratch go ahead go why do -pron- system come"
  ],
  "e3b111b7-8038-4f0e-a112-7fb6b2538548": [
    "ok so let -pron- talk about why the nation part of the operating system here that be ass break now if -pron- be to look at the manpage of s break -pron- 'd read something like the follow s break increase the process be datum segment by end bite so when -pron- call s break -pron- can give -pron- a number and -pron- can say hey -pron- 'd like ten more byte please alright so what do that actually mean ok so between -pron- and -pron- as big be not actually use anymore instead -pron- be go to use some virtual memory trick of all the slide this do modern c library use some virtual memory trick that -pron- have not learn yet so s breaker be simply mechanism but -pron- will use -pron- for cs two forty one to implement a simple memory allocator ok so remember how i say that the bottom of the memory -pron- have get the text segment which be the program code and string literal and any other constant -pron- have put in here and above that -pron- have -pron- global variable which live forever alright so",
    "ok -pron- can put any datum -pron- like inside there and by default the total amount of memory allocate to this be g ask sufficient for what -pron- need ok but what about the day -pron- call malloc and say hey -pron- malloc i need another four thousand and ninety six byte please this point -pron- need need to go back to the operating system to the kernel and beg for some more van back for some more real address -pron- do not want to talk to the oblivion -pron- do not want to avoid -pron- actually need those memory address now to refer to some actual memory and that be the purpose of s break be to say yes i know -pron- have get -pron- heap possibly say zero"
  ],
  "e471cd5f-b9e7-4738-8b65-d975365f4c4c": [
    "ok so here be the big idea to make tcp client i actually only need two call i need a way to escape out of -pron- c code and actually start talk to the network card and for that i need a socket so this be the thing that be go to give -pron- a file descriptor and -pron- can pass some information into this be to say what kind of socket -pron- want do -pron- want a tcp or udp kind of socket in other word do -pron- want to stream base or packet base data ground base kind of socket here so -pron- will talk about how to fill these piece of information in airmont but i want -pron- to realize that the result of call socket be just a file descriptor so this if -pron- like be very similar to call open or very similar to call pipe now -pron- have actually get something that i can use great but no bite have actually leave -pron- machine yet know octet have be set that actually happen",
    "possibly to -pron- if i want to connect to one hundred and twenty seven point zero point zero point one if -pron- be use ip four ok and how do i connect then -pron- client use this thing call connect ok and -pron- just use this socket ok so notice that in both these case i careful to check the error value ok so this will be a non negative value if -pron- be a valid file descriptor if -pron- return negative one then -pron- know that -pron- attempt to create a socket fail perhaps i do not have privilege perhaps -pron- have create too many socket at anyways so let -pron- print out the string of every number and quit exit so network code have to check very carefully whether each system for work but once -pron- have get to suck -pron- now -pron- can call connect so again let -pron- check",
    "find out -pron- value of erno and print out a useful message and quit ok so what do -pron- do with this file descriptor well if -pron- make a tcp will not guess what -pron- can call read and write on -pron- so in this sense -pron- be a little different from a pipe in a sense that -pron- support two way communication that if i write to this file descriptor then the server will see the bite if i read from this file descriptor then -pron- be read bite from the server have send -pron- some thing to watch out for of course be that -pron- be do right can return negative one and due to a signal -pron- do not have to necessarily send all of the byte or -pron- read do not have to read all of the byte so i have to be able to be ready to only get partial amount of information and let -pron- see what else oh yeah so i can block so if i call reed and i have not get any light yet from the server then that recall be go to block forever",
    "block until -pron- be able to send those byte to a buffer when -pron- do return that do not mean that all those byte have actually respond to as far as the host at the other end be simply mean -pron- have be able to take -pron- buffer and copy those bite into say the network card buffer and at some point hopefully the next few millisecond those byte will start to leave -pron- machine eventually -pron- want to close this connection in fact there be two way two thing to know about this first of all there be shutdown which -pron- can use to say ok i do not want to send or receive any more bite on this particular file descriptor so -pron- be go to say ok here be -pron- socket fd and then i can shut down that socket for either reading or writing or both so i get a choice there and what this mean be after those bite that -pron- have already give -pron- have be send the very extend another packet to say ok no more bite for -pron- at this point",
    "-pron- anymore bite but be -pron- do not know -pron- should also call close just like -pron- have a file descriptor of the file be time to have free up these resource ok so remember to close -pron- as well ok so the these have two different effect the shutdown be a way to tell the other end that -pron- be do either receive or sending or both and close actually say write this file descriptor can now be use for other thing remember that -pron- only have a limited number of fire descriptor -pron- can actually use for each process right so with this in mind i think -pron- be time to fill in some code here but there be one thing -pron- have not talk about up here so i say that -pron- tcp server only need actually two network call which be true but in practice there be a third one that come in very very useful and -pron- be the follow be this get address"
  ],
  "e50d3496-12be-490f-aada-1211850d9275": [
    "ok so -pron- need a definition for deadlock and this idea that -pron- -pron- thread be freeze up maybe one thread be wait for a mutex lock that be never go to be unlocked maybe -pron- be wait for something from a data structure which be never go to be give to -pron- so here be a general definition for dead log key text door work ok great make -pron- that big right so dead log be when -pron- be wait for an event that well ok can i type so i put in some in there ok will never happen ok so stop try to make -pron- day to happen -pron- be never go to happen stop try to make this thread exit -pron- be never go to happen ok so -pron- poor poor little fair door process be wait some for an event maybe -pron- be go to signal that",
    "just never go to happen so -pron- do not get to complete -pron- do not get to kind of run -pron- activity or run the code and of course debug deadlock be tricky -pron- be often there as pair that i could a thread maybe -pron- be stick inside p threat condition wait and -pron- do not know why why that event do not have not have not fired have not occur ok so -pron- have get this general definition of deadlock now actually let -pron- see if -pron- can kind of construct some example where -pron- actually cause -pron- so let -pron- use team mutex lock and two thread to create an example of deadlock ok -pron- be go to actually do this in a text editor ok let -pron- go right do i have so if -pron- have get thread one imagine -pron- thread first red make the coda big right have call",
    "lock on this first mutex and then after -pron- have do that please lock on this other mutex right so -pron- will do some work ok do something and then after that -pron- want to at least ok so -pron- will call p thread unlock on both of these mutex be ok so for example maybe -pron- want to take some datum out of out of datum store one stick -pron- into datum structure to ok -pron- do not matter particular which order that -pron- release -pron- in just for symmetry -pron- be go to do -pron- this way but let -pron- let -pron- think about what happen if -pron- lock these in a different sequence inside another thread so -pron- be go to have now another thread that do the same sequence of operation accept ha -pron- have swap these around the case so",
    "like most of the time no most of the time -pron- thread be perfectly happy do what -pron- need to do until the follow happen until one unfortunate day thread one have call preferred mutex lock on get this choose a new color call prefix lock on the first one case be complete that at the same time -pron- other thread which be curiously call thread one so let -pron- fix that thread two right have just acquire the lock on mutex too so now -pron- be both able to do this but what happen",
    "let -pron- go for yes -pron- be kinda extreme pinky purple thing let -pron- try that ok right so now what happen thread one say -pron- 'd like to lock this mutex but of course what do this do -pron- block ok why because another thread have that new text between -pron- and -pron- -pron- know -pron- be thread two meanwhile thread two try to look -pron- take one and that of course block -pron- be not yet available another thread be currently quite that music lock ok so when will -pron- escape out of this and the answer be never ok -pron- can read the code and see that eventually -pron- be go to release these lock but -pron- be never go to get to that that piece of code that thread one be wait for thread two and thread two be wait for thread one so -pron- be kind of stuck for stick forever",
    "be in the same order -pron- would have be fine let -pron- just kind of quickly sketch that out to see that let -pron- imagine that i have -pron- first thread do mutex wear and then mute x two and then mutex wanna mutex two down here for thread two then if -pron- both try to acquire mutex in at the same time then -pron- can imagine that thread one would acquire the mutex lock here which would mean thread two will be force to block so -pron- do not get to go to step two which mean thread one can continue and then when -pron- be finish -pron- will release those lock so now thread two can finish so if -pron- 'd actually write -pron- code like this in the same order -pron- would have be impossible to get deadlock",
    "semaphore sure ok so let -pron- do something similar with count semaphore where thread one call say sam weights on count center four as well and at the end -pron- will will increase the count again ok so now -pron- will have another thread that do something similar or key and another thread do something similar ok so do -pron- see any problem right now nope -pron- could imagine that these counting semaphore 's -pron- kind except for have be initialize just account of one ok so same",
    "for every sem_wait call -pron- call assam post ok right so what if -pron- could have make -pron- a little bit more complicated though and -pron- say that same weight here be go to in order to continue -pron- be go to wait on this thread and then -pron- be go to post on some sample to an meanwhile thread two -pron- be go to wait on count semaphore two and then -pron- be go to post on count semaphore three ok and then some weight three -pron- be go to then post inseminate one ok if all -pron- county be force to start off with a value of zero -pron- can see that no one get to play that all of -pron- thread have get stick that -pron- first thread be block here wait for the value for sale want change well someone will change",
    "pizza slice and be able to get that piece of slice form -pron- be wait for sam post to be call by thread two but thread two be not go to give -pron- that pizza slice until -pron- get a piece of slice out of count semaphore s two and where will i get that only from thread one when thread one finally call stem post but that be not go to happen because thread what be still wait for the pizza slice from thread three so now -pron- see -pron- have get this love triangle here between -pron- three thread -pron- will never go to continue that always wait for an event that be never go to happen so that be all example of deadlock -pron- can construct lot of these vary bit of complexity usually -pron- do not artificial construct -pron- like this usually be scratch go -pron- head go why do -pron- system come"
  ],
  "e574f9c9-dc9b-4dd2-b746-c100de94ae3b": [
    "hi ok so let -pron- have a look at how -pron- can write some code which be non deterministic and then fix -pron- up in different way so here -pron- go let -pron- get start right -pron- have get a little main method down here and -pron- be go to create ten thread and each time i go to store the address inside -pron- little ray here of thread i ds and then i call pizza at exit so -pron- know that at that point the main thread be do ok but the rest of the process live on -pron- ten little fence live on ok what do -pron- do case so here be -pron- game plan let -pron- there be pass in the address of -pron- little iterate available so -pron- will find out -pron- address not as valuable 's address and then here be an expression to read that value how do this work ok so -pron- know when finally be assign a new cpu to start this function that -pron- be give address what do i want to do with that address well i know something",
    "be not be just so in fact i want to treat that address as an integer pointer great so now i have that integer pointer i actually want to read whatsapp -pron- content so let -pron- dereference -pron- with little ass trick there ok so -pron- have get the value now -pron- have be see how -pron- can create p thread i ds every time -pron- call pisode create but what if -pron- want to know -pron- own idea what if -pron- say what be -pron- id how would how would i determine that so there should be a way to do this and there be so -pron- say -pron- id be p thread -pron- so that be the other way of get a thread id if -pron- want to know who -pron- be something which represent a particular thread then -pron- call peter -pron- right less for fun print out which be not normal behaviour normally do not print out these i ds one way to do this -pron- will just treat -pron- as a pointer to some memory so let -pron- say that this id represent some integer type thing which be some address type thing or just print",
    "p to say right treat this do not address ok so will pick that up and if -pron- want -pron- could play the same trick down here -pron- put this out but print out the food idea -pron- get down there but let -pron- let -pron- just run this and see what -pron- get in term of the value -pron- be go to print ok so -pron- want to compile -pron- off -pron- go and when -pron- run -pron- ok alright so -pron- look like -pron- be kind of work but not as well as -pron- hope -pron- certainly get different thread idea appear and -pron- do look like address -pron- will give -pron- that but look at this -pron- have get very strange value over here and even the last value be ten and if i run -pron- again i get different value again if i run -pron- again i get different value again ok so i get in all sort of value here what be go on clearly -pron- have get a program which be not deterministic -pron- do not",
    "that -pron- pass in the address of i and so actually what -pron- have here be call a race condition -pron- depend upon the exact interleaving in time of the instruction that be go to be execute -pron- have get one thread that immediately after call pizza -pron- could create be go to increment the value by and then test to see if i be less than ten i have not go around again so -pron- have get one threat do that as fast as fast as i can and i get another thread that as soon as -pron- start will gas that pointer to an end pointer and then try to read -pron- so -pron- be a value that -pron- see depend upon the relative timing of these operation and that can change from one run to the next -pron- may be surprised -pron- even see the value of ten even though -pron- loop say be i lesson ten yes so that be why -pron- thread can start at some point in the future maybe few microsecond but maybe",
    "for loop so at that point the value of i will be equal to ten because that be -pron- exit condition but -pron- get bad than that because formally the value of this variable be not define outside of this loop and in fact when -pron- call pizza at exit -pron- do not even need the stack anymore for maine so the memory that -pron- may be read at that point be no long really hour to be look at so -pron- have get a pretty badly form program here right so how can -pron- fix -pron- -pron- need to address this race condition but will do -pron- in two different way first of all how about -pron- turn this into a task that -pron- give each one and -pron- task right now be just no little integer so let -pron- have some memory for each thread so -pron- will call -pron- say start value and -pron- can see -pron- be use a global here right and -pron- will be let -pron- see -pron- will have ten am",
    "ok so -pron- can be let -pron- say hundred plus i today just so -pron- can prove that -pron- be run this program ok and then i do not want to pass in the address if i instead i want to pass in -pron- pointer to one of these -pron- introduce -pron- have just create so start value and i could say take the ice warren i want the address of that but -pron- know that -pron- can also write that be just ok here be the start of the array i want the offset of ips and will use integer arithmetic ok so -pron- have initialize array let -pron- give this ago and off -pron- go so will compile -pron- ok let -pron- just do there -pron- go right and run -pron- ok now great now -pron- actually do see the intend value from zero to nine hundred two hundred and nine ok and -pron- be deterministic and if -pron- run -pron- -pron- will always produce those value",
    "in the correct order -pron- be correct yeah so even though -pron- know deterministically that -pron- be go to get the value between a hundred and a hundred and nine those thread can run in an arbitrary order so the output be not guarantee to be in exactly the same app or ordering that -pron- actually define -pron- inside the code so let -pron- have a look at kind of one more alternative here to make a program completely deterministic here be what -pron- be go to do -pron- be go to say p thread join an -pron- want to join on not the address of thread id but the actual value -pron- and i do not care about the exit value so do not write that anywhere ok alright so what be go to happen now first of all let -pron- run -pron- and then -pron- can tell -pron- why ok so let -pron- clear this clear that be compile let -pron- run ok and this time -pron- be extremely confident -pron- be go to see the same same output",
    "so let -pron- have a look at the code -pron- vote -pron- create a thread and the main thread can return and carry on there be no requirement for -pron- to wait for that thread to get start but what do -pron- do -pron- immediately say ok now i want to block i want to wait until -pron- be able to join on the other thread so that mean before -pron- get to go around the loop before -pron- add two hundred dollar and go round the when opoly board again right before -pron- get to say i plus plus in -pron- eye lesson ten -pron- have to run and complete the code inside -pron- funk -pron- have to read the value -pron- print out -pron- get the thread id self -pron- print something out and return null and those step have to occur in order for pizza joint to letter out of jail so -pron- be extremely confident that i know for certain that"
  ],
  "e61962ea-1b9a-41e3-8779-5e49bf8449a5": [
    "ok so -pron- have get a little surprise for -pron- so next time -pron- bump into a student take a data structure class in c++ why do not -pron- ask -pron- the following right so i get a little piece of code very easy what be -pron- go to print as -pron- can see -pron- initialize this little value here one two three four five and -pron- print -pron- out no new line and why do -pron- say that i give -pron- ten buck if -pron- can tell -pron- exactly what this be go to print ok so little do -pron- know that -pron- have take cs two forty one so let -pron- see what this program really will print ok so -pron- will compile -pron- and run -pron- surprise and of course -pron- correctly guess -pron- would print out five thousand three hundred forty nine right ok so why do -pron- print out that value not one two three four five here be why c and c plus plus compiler do something very special with number that start with zero ye with number would start with zero or octal number to win base eight ok so this",
    "may bite -pron- if -pron- do not know -pron- -pron- start add zero in front of number but -pron- come in useful when -pron- actually want to start make directory and change the mode bit so let -pron- do this now let -pron- actually have a look at some code key right where -pron- see -pron- be go to use this trick -pron- see to write -pron- octal because i want to make a whole lot of directory i get to make directory call d i one and i want -pron- permission to be re divide execute for -pron- and no access for any group or anybody else ok and simile as well for subdirectory as well then -pron- be go to make a second directory with these permission and a subdirectory",
    "of -pron- question to -pron- be right of the six directory which one do -pron- think will actually be successfully create and then after -pron- have answer that -pron- have get another question -pron- be make three more now symbolic link so with a symbolic link -pron- need to specify -pron- target in other word what kind of currently exist usually and -pron- be point to the subdirectory hopefully -pron- manage to make early and then the new path so this could actually be a subdirectory want but this be where the link be go to be create so -pron- be go to end up with three link call quick one quick two quick three right so pause for a moment and figure out which of the follow will be create ok -pron- be go to try to make three symlink and six subdirectory be can -pron- see any that -pron- think will fail",
    "-pron- right yes really do this ok wait -pron- be go to sleep or some video if -pron- have not do -pron- now because now -pron- be time to look at the answer right so how can -pron- analyze this notice that -pron- be make these outermost direction with different permission so this one have read write execute which be the normal permission -pron- have for a directory this one only have read and write and this one have four plus one so that be read and execute ok so -pron- prediction be that -pron- will be able to create this subdirectory in the first example in this second one i do not think so because the -pron- do not have execute permission of the outer directory so -pron- could not navigate into dir two to in order to create this little subdirectory and what about the last one dir three so in this example -pron- be miss",
    "so again do not expect to be able to create the subdirectory so that be -pron- prediction for the three sorry for the six directory call -pron- do by call make sure what about symlinks well -pron- prediction there be the all three be go to be create let -pron- go and actually have a play and run this now ok so -pron- have a program call make der link let -pron- compile this -pron- will say use clang today right output meter link ok now let -pron- run -pron- ok so -pron- do not print out any error but -pron- will not actually capture any of the return value of those call either so -pron- just simply run through ok what can -pron- see here let -pron- do -pron- like this first of all notice that yeah three file call quick one two and three have be create the different color will see why in",
    "a look at those so i want to say look at all file inside any directory that match the r star and -pron- will see that -pron- prediction be correct d -pron- one have a directory call sub der but the other two do not by the way what happen when i do this command the shell expand all match file so -pron- look inside the camp directory and say please find anything that start with d -pron- rs and so in this case the command -pron- actually run be lsd one d r two d i l three but i want to be lazy in type right so what about those symbolic link ok so -pron- symbolic link -pron- remember -pron- be in different color why be that ok let -pron- have a look at this a long form and -pron- will see that -pron- have make three symbolic link here -pron- be and this be -pron- content right this",
    "ok would actually get that content would actually cdi or sub and the first one be valid this sub directory exist however for the other two -pron- simple link that do not go anywhere -pron- be point to directory which just do not currently exist which -pron- can do with a symbolic link symbolic do not think do not care -pron- be only if -pron- try to use -pron- for example if -pron- try to go into quick to complain to say -pron- be sorry -pron- can not navigate into there because -pron- could not navigate into d a r two so even if i be to change that so let -pron- change fix the mission now to say seven hundred for dl two even if i try to do cdi quick two -pron- will complain to say -pron- be sorry i could not follow that link no such file or directory because the subdirectory do not exist right one last little",
    "here -pron- be actually create a couple of hard link as well so which one of these do -pron- think will work i attempt to make a hard link to a directory and i attempt to make a hard link to hello dot c right so what do -pron- think about that right well -pron- should remember that hard link to directory be impossible so there be no directory call hard link in here that do not exist what about the halo dot c so let -pron- go and have a look inside dl one yes there be no another do not see why do that fail ok so let -pron- go and have a have a look do -pron- get the thing to worry about right so do -pron- have hello dot c let -pron- check",
    "-pron- so c d i r ok do not see -pron- right i better go and investigate this because i expect that one to work right well let -pron- just try -pron- let -pron- try do hello dot c and -pron- be try to make a file new entry call say dir1 i one another ok operation not permit ok so what be special about hello dot see why could -pron- not create that so let -pron- have a look at hello dot c anything special about that file yes and the answer be -pron- be own by root so i can not create a copy of this i should have choose something which be own by -pron- so -pron- do not make sense that i can not make hard",
    "with that be that -pron- be make a new entry cite directory but the actual file -pron- be the very same file so let -pron- let -pron- redo this with a file that -pron- do own so how about say surprise dot cpp ok so let -pron- try that right so -pron- will go back to -pron- make link and go to line sixteen and -pron- will delete that word insert right so now finally if i compile this right so clang meet -pron- link cape i do not like that that be to do the right thing ok well that so now finally look inside i want and who be i",
    "a c plus plus program ok so realize that these same two file if i be to modify say the ownership of this file so for example if i say sudo another will change -pron- ownership to say route another dot c ok but now yes another dot c be own by root but if i go back out and have a look at the original program -pron- will see that -pron- surprise be also now own by root as well why because the ownership information be part of the i node similarly if i be to change the permission of this file for example suppose i say -pron- know everybody can say write to this file sound pretty dangerous to -pron- give -pron- be own by root but let -pron- imagine -pron-",
    "to be now five five five on surprise dot c ep ok then simply in -pron- directory one that another dot c also have the same permission as well that i do the ownership whoop let -pron- try that again i do not mean change ownership i mean change share more do i want to there -pron- go right i want to set permission to so that everybody could read and execute -pron- or say even bad everybody can read write and execute -pron- let -pron- let -pron- try that one ok so here -pron- go so now i get to file that anybody can write anybody can execute anybody could read and -pron- be own by this mysterious user code five five five ok alright",
    "to be own by -pron- k surprise dot c and i need ownership ok because why not because -pron- be a c p p file there -pron- go and finally let -pron- reset -pron- permission so chair mod will make -pron- so that i can edit -pron- but everybody else can only read -pron- right ok so finally -pron- have -pron- surprise file back to normal now -pron- be and of course because the file inside the io one be the very same i know -pron- have the same permission in the same ownership as -pron- c p p file why because -pron- be the same file at all the stuff -pron- have just be change be store inside the i node ok so that be the kind of a quick introduction to make link think about"
  ],
  "e86ac683-96f5-4bc0-b5c5-3a7f93c80b32": [
    "hi ok so let -pron- take a look at some code that i find on the internet that claim to solve -pron- dining philosopher and -pron- will analyze -pron- and see what -pron- think ok so here -pron- go -pron- use all the good stuff that -pron- now understand -pron- have get a little structure here call philosopher and -pron- can see -pron- be go to be type deft so that -pron- can just say philosopher later on inside that -pron- be go to have a pointer to the left fork and the right fork and of course a philosopher have a name and associate with -pron- ap thread and some output variable say whether -pron- fail or not ok -pron- have a global variable to see whether this program should keep run or not ok and let -pron- have a look see how thing get initialized ok so -pron- have get a new way of character pointer and that be just a name of five philosopher would like today -pron- be go to have five mutex lock -pron- be go to be -pron- fork and five philosopher ok so",
    "initiate or four five mutex lock here -pron- go and so -pron- just get five meter lock initialize great and then further down great let -pron- actually initialize -pron- philosopher so that be just a simple stack away -pron- be ok to do this on inside the main threat because -pron- will see all of -pron- thread which be go to run finish before -pron- exit make right so great let -pron- get -pron- a philosopher will get the i th one will initialize -pron- name will initialize -pron- leave hand and right hand fork to be one of -pron- five mutex lock look -pron- be use modulo arithmetic so that the fifth philosopher wrap around and get to zero for kid game right after set that all up let -pron- start off threat will call preferred create will",
    "run some multithreade code which will look at at the moment and then the rest of -pron- main thread do not do much -pron- sleep with forty second then change run and now just wait for those five thread to finish if something fail in other word if this will flag be set for eight five plus versus inside that struct will print something out that something do not work otherwise will exit ok so that be -pron- main threat now let -pron- let -pron- have a look at the code that -pron- get that be run by each philosopher oh yes and here be -pron- source ok so each philosopher be go to be give a pointer to -pron- little struct there ok so each plus be go to get -pron- own unique name etc right so -pron- also have some local stack variable which mirror what -pron- find inside the",
    "-pron- little thread go to do here so for forty second until that global variable be change the first thing that -pron- -pron- philosophy do be sleep in other word thank a bit so will print out -pron- name then will sleep for and amount of time so in this case let -pron- sleep for say some two one and eight second alright and then the philosopher go to pick up the two folk alright so let -pron- declare that the philosophy be hungry and then -pron- will try try to pick -pron- up ok now this look a little bit more complicated than -pron- may expect let -pron- look at this carefully ok so whilst uh whilst be still run and this be a do while loop which mean -pron- be only go to well feel i think -pron- should be not fail but let -pron- see all chill at the moment ok so -pron- be go",
    "after -pron- run through this code once i know notice -pron- be fray i apologize the logic as give incorrect let -pron- have a look see what -pron- do first of all philosopher waist to pick up the fork on the left ok so that be only go to proceed once -pron- get exclusive access to that particular fork alright and then -pron- be go to change this local variable fail to base on on what happen when -pron- try to pick up the the fork on the right so notice that initial value of try leave be too so actually -pron- be go to call this function call trilok which -pron- have not see before trilok never block instead rather than block if -pron- be unable to acquire this mutex -pron- just return an error number return a non zero value so the very first time that -pron- run this code with twice leave equal to two if -pron- catch acquire that",
    "fail -pron- immediately unlock the left hand thread great -pron- say this look a lot like -pron- be not go to implement holding wait -pron- be not hold onto the fork on the left -pron- be definitely release -pron- so then what do this code do well -pron- -pron- actually swap the meaning of the left and right fork so i like to think of this as the false for crosse -pron- arm or uncross -pron- arm because -pron- be go to go around this loop again but this time -pron- be go to grab the other one first ok so this idea of what be on the left be actually just be swap over by crosse arm and -pron- decrement try by one k so -pron- repeat this on the third try however -pron- do not use trilok instead -pron- call mutex lock so the only way to get out of this loop be when -pron- have truly manage to acquire the left and right mutex lock what do -pron-",
    "say want nine second want to eight point eight second and then -pron- release both look ok then -pron- go round the loop -pron- keep go until -pron- have hdr forty second be up so what do -pron- think about that be that code correct do -pron- correctly implement ok so with a little bit of thought -pron- could say actually no this do not prevent deadlock now -pron- may agree that deadlock be unlikely but -pron- could imagine a scenario where for the first two time all philosopher hit this trilok and fail because every philosopher be hold onto -pron- left fork and then when -pron- all try again there now hold onto the other folk but the trilok each time fail on the third time or philosopher first lock -pron-",
    "on the right in other word -pron- all get block so yes there be a chance that all -pron- possible will will deadlock because all wait for resource -pron- be never go to be release so oh dear this apparent code on the internet be not smart enough to solve this problem so yes lady and gentleman as a series two forty one student now smarter than the internet ok so -pron- can prove -pron- can show the circumstance in which deadlock be can occur this actually see if -pron- can actually see that occur if -pron- actually run this code in practice so here be here be the same code that i prepare early i want to get out of this and go to handout but code k there -pron- go right go to code but i need cs two forty one lecture code right",
    "p thread ok finally great let -pron- ok off -pron- go oh alright look at this -pron- have run into deadlock where all five be hungry at exactly the same time so in practice causing this be actually actually difficult let -pron- just run -pron- one more time will see if -pron- can generate -pron- so -pron- can see no expense spare on the graphic -pron- have get five philosopher go through the state of either hungry eating or sleep and yes -pron- run into deadlock again this actually kind of take a look at this code because i want to show -pron- that i actually have to work a little bit hard to make deadlock occur here so i want to reset -pron- group right and let -pron- pull",
    "ok so right right so i have to do thing like introduce an extra moment in time between when -pron- first do the first lock and when -pron- attempt to do the second lock so i implement thing like a slow pick up here in order to give great opportunity that all five thread word acquire the left hand lock that be interesting be that right now -pron- be record this so one of -pron- cpu core be busy capture the lecture content the video content so i be actually surprised that so quickly run into deadlock the other thing that i do to try to make -pron- more likely be -pron- be use micro sleep too actually sure that -pron- have an opportunity for deadlock",
    "or so over forty second window so opportunity for deadlock be be only handful of time order of ten time or so -pron- would like -pron- to be much high alright so yes i have i can run -pron- in slow motion let -pron- see how -pron- do that -pron- can see -pron- ok so set also certainly buffer so that -pron- do not have to wait for for a new line to print -pron- ok so i get slow motion if i do -pron- s k so be go to see and -pron- be in there ok right so let -pron- just run that ok and -pron- will say slow motion so now -pron- can see off -pron- go right ok so that be dine philosopher -pron- be relatively easy to write solution which appear to work but"
  ],
  "e8fc277c-1bd5-4c49-99df-f1b1b017da12": [
    "hello and welcome to lecture thirty ok so let -pron- start with a quick review with directory if -pron- have get the execute bit what do that imply ok so hopefully -pron- say -pron- mean that the directory be traversable or navigated wall mean that i actually peer inside -pron- and look at the file or access to file so in order to even read a file that be inside directory not only do i need -pron- need access to that file i actually need to be able to have the execute bit set on that directory so let -pron- play with that in a moment and the second thing be even though directory have read write and execute set for everybody only the owner can rename or delete a subdirectory ok so do -pron- describe here -pron- be describe this sticky bit all right so let -pron- go and actually have a play with the first one let -pron- go and see how -pron- can converse a",
    "a terminal here right so right now be -pron- east remember when play with symbolic link here so let -pron- get back out of here perhaps if -pron- want to know key tell -pron- off there -pron- go right so perhaps -pron- want to go to a particular directory like pet parent directory ok -pron- could also find out -pron- apps canonical path on mac but not on lennox i believe there be a version of real path which be actually just a a call -pron- can use ok from shell so let -pron- run that and say what be -pron- real path ok there -pron- be right that be the canonical path so let -pron- go to that so i can say alright cd to that i could even say thing like cd and then let -pron-",
    "of that ok so now -pron- be back in some way will spot so -pron- want to make a directory that -pron- could recurse into so let -pron- go into lecture thirty right what do -pron- have here right so -pron- will make -pron- a directory call say be call -pron- one and let -pron- put inside that some file so -pron- will how inside one a file course a secret ok and will say hello ok right so right now of course i can look at that file by default -pron- be read writable by -pron- and every else can read -pron- but let -pron- now start change the directory be so if i look at the directory right now the actual directory -pron- oops i do not wanna do that i want to look at the directory there -pron- be ok right executable mean -pron- can navigate inside -pron- so let -pron- change that let -pron- change the bit",
    "that on one ok so now -pron- little directory have change no one have execute bit right so now if i try to read this current directory sure i can see -pron- i know that directory exist but now let -pron- have a look inside -pron- and ha i can not list -pron- be content what about if i try to read the file secret inside -pron- do not work what if i try to cd into -pron- do not work ok so that be what the execute bit cub be the idea that -pron- can traverse into or navigate inside -pron- so -pron- can not -pron- know the directory exist but -pron- can not go into -pron- alright let -pron- fix -pron- change let -pron- go back so -pron- be go to"
  ],
  "e99e7c6d-cc07-4a0f-afd1-f6e775951990": [
    "hey actually i remember -pron- have gota little demo with epoll so let -pron- do that instead ok so first of all -pron- have actually get before -pron- look at epoll a little program that can make pipe and send datum so kind of here -pron- go -pron- be call pipe writer and -pron- may send down a pipe i the message ella island or noise ok so for this -pron- be go to use some name pipe so -pron- in -pron- file system -pron- be go to make pipe one and pipe two here -pron- be and let -pron- actually kind of make these pipe in now i actually want to actually start send datum to -pron- so for this -pron- be go to have two file descriptor here -pron- go ok so use this this be go to be -pron- test little test program where i can send datum to one pipe or the other pipe and then the other side will use epoll so all -pron- be go to do be -pron- press one or two and send the right message to the right pipe ok so that be just -pron- little pipe writer",
    "ipoh ok so y poll somewhat complicate to use more complicated than thing -pron- have see in the past but -pron- be not terrify -pron- be not the bad this let -pron- see how -pron- do this ok so -pron- will choose a bright color right so again here be -pron- little epoll demo -pron- be go to make some pipe on this side as well and -pron- be go to have two file scripter where -pron- be listen now on these pipe object but -pron- be today to make -pron- more interesting not only -pron- file descriptor be go to be read only -pron- be go to say please do not block ok so that mean that -pron- call to read and write will not stop instead -pron- will just simply return negative one and set errno if -pron- be unable to do anything useful for -pron- right now ok so remember that because instead -pron- be go to use",
    "also know as asynchronous -pron- can now make sure that just one thread of -pron- process can actually handle multiple connection multiple pipe right so let -pron- get start with people how do -pron- make an equal object easy call people create and -pron- think of some random number because some random positive number be require here in practice be no long use just by convention stick something positive -pron- ok now -pron- have get -pron- ipoh -pron- need to tell this particular people instance that -pron- want to listen to certain file descriptor so y pool -pron- have a file descriptor but -pron- be not something that -pron- be go to use like a file -pron- be just go to be a way for -pron- to identify particular set of file descriptor that -pron- care about now i can care about different event i can care about the fact that some datum have arrive i can care about the fact that there be some space available to send",
    "valid ok so i well give some hint to equal to the kind of event that i care about ok so here be what -pron- do -pron- can set up an equal event which will see again later when -pron- actually receive event back but right now -pron- be go to use -pron- as a filter and for this little demo because -pron- be not return from main i can just set this up on weight by stack here so here -pron- be just to say write the kind of event people that i care about be go to be when some datum have arrive windows datum into -pron- -pron- process here and i can set some datum upon this as well so let -pron- set up the file get to one and five script at two so -pron- be go to have two different event correspond to -pron- two different type ok so how do i then add that to -pron-",
    "-pron- go -pron- can say equal i want to change the set fire descriptor that -pron- be watch on this particular people set ok so this equal let -pron- want to control that equal set in what -pron- want to do be add some far descriptor so -pron- say here be the file script that -pron- care about and here be the event structure that -pron- want to use and so in this case -pron- be go to say that -pron- care about event where datum have arrive by the way this data over here that be for user datum for -pron- to be able to easily associate a particular event with a particular file descriptor but -pron- could also please set of pointer as well so -pron- set this up for both file script award five script two and now -pron- can start list right so i mention that equal",
    "here be what happen here be how -pron- do be how -pron- do that what be up to -pron- notice -pron- have not array -pron- way of these equal event -pron- be go to opportunity choose today to say i care about a maximum of one hundred event and so people will block potentially forever or -pron- could specify a time out so for for example i can specify a time out of a thousand millisecond here ok so if -pron- do return with some event be go to fill out that a way forward and tell -pron- the number of event that -pron- actually put into that away up to a maximum of one hundred ok so when -pron- return -pron- will see how many event and then will start process all of those event object now remember when -pron- set up equal initially -pron- hit",
    "this event happen i want to know about the file descriptor so let -pron- extract now the fire scripture from the event answer more event information still exactly what kind of equal event -pron- be and so -pron- can use that then too figure out what -pron- want to do cap so -pron- be go to slowly process one event at a time ok so now -pron- can actually use that event integer with some bitmask flag to decide what kind of event occur so like i say by default that could be any poll inori pour out so -pron- care about datum come into -pron- process so if that be set -pron- know that then that on that file script there be now datum ready to be read in other word this coulter read should succeed otherwise there be no point call -pron- if -pron- be not sure that there be no datum available in that file scripter",
    "print -pron- out so let -pron- check the number of byte -pron- get out of read be non zero and if -pron- be then great will show those display those byte on standard out now i mention a couple of other thing that can happen so for example -pron- can have equal hop meaning that connection have be lose similar with kind of read as well or maybe some other error associate with that file script have happen so -pron- need to handle that somehow or -pron- be go to do be to say hey equal -pron- know what -pron- have decide i do not care about that file a script anymore stop give -pron- event that far descriptor if i do not do that then potentially i can get the same event multiple time ok so that be -pron- little epoll demo let -pron- actually run -pron- ok so -pron- have get equal one",
    "equal weight be return no sorry i get no event for -pron- now i think -pron- be time to actually send some datum down there be two pipe down to far descriptor three and four so let -pron- do that ok right so if i press one over here -pron- will see that -pron- get an event yeah -pron- right that -pron- have a equal in event k and -pron- get some character now look at this -pron- kind of get two two two different return here i think -pron- be because i set up -pron- code to only grab -pron- say two character of time i forget exactly why ok so i could send some more align eye here -pron- go -pron- be go to keep read two character of time now let -pron- send some datum on the other file descriptor as well ok so -pron- should see some"
  ],
  "eb1a08a4-8b77-4361-a5d8-4e3b26439f27": [
    "hi so read be great as the low level way to get a stream of datum come in i can say ok give -pron- another hundred point give -pron- another half thousand byte or whatever and i could use that level but quite often i know that -pron- data be in some kind of format perhaps -pron- have get a csv file so value , a comma , another value perhaps -pron- have get raw text datum -pron- have download the entire twitter stream of today for example so how can i have process this kind of text or datum not have to write -pron- own routine to convert one two three into the number one hundred and twenty three and the answer to that be the c library come to rescue and -pron- have really useful little thing here -pron- have scanf which be a lot like printf so if -pron- have learn printf -pron- can now do the opposite -pron- can say i want to read from standard input and here be what i expect to see and -pron- take a format string just like printf do but",
    "please parse the input and i expect to see -pron- say a number and a comma and then a another say number integer number that be maybe another comma or not but let -pron- just deal with just two two number per line today right so that could be -pron- format now what happen to these number -pron- need to give some memory location of where to write -pron- and so because -pron- have give a hint to scanf after -pron- be expect integer -pron- be go to write four byte integer so let -pron- for example say here be the address of -pron- first integer k available here be the address of another integer variable ok there -pron- go right ok so scanf behave a lot like printf there be a little",
    "kind of compress -pron- into into one when -pron- be pause so if there be i say i expect to see a number whitespace in another number then what be read an input file if -pron- will say two or hundred space between the first and second number -pron- would say up fine i know how to parse that other other thing -pron- will notice inside the format which be not part of -pron- percent deez etc -pron- be give a hint to scanf as to what the pattern should to look like so in this case like i say -pron- be look for an integer comma and another integer this course be not a full introduction to scanf not go to test -pron- on scanf but this be great stuff for the day that -pron- actually want to read in a lot of \" datum quickly and -pron- want to use c",
    "so the format specifier include thing like hey i want to talk about simple decimal integer or maybe i want to talk about read and parse hexadecimal value or octal value maybe i care about float point and maybe -pron- be try to read a single character or multiple character ie a string if -pron- ask -pron- to read a string -pron- be actually go to tokenize the input look for white space so so do not act so unlike printf if -pron- say hey please give -pron- a whole line skype",
    "basically one word and the last thing down here be i want to point value ok like i say hey guess what google an man page be -pron- friend here just realize scanf should be in -pron- back pocket that day that -pron- actually want to read in text datum which have number float point number and text what be really really useful to know be scanf tell -pron- about the number of item that be successfully manage to parse so in -pron- example above kay and go away where i say i expect to be able to read two value on the current line -pron- would be great to know if i truly if scanf truly do manage to parse the current line as two value or perhaps -pron- only see one before be able to unable to continue perhaps for example there be a miss comma or press the second",
    "and check that truly matter to change be all the variable -pron- expect because here be the big story yes -pron- be give the address of -pron- variable but scanf be only go to write into -pron- variable if -pron- successfully pass the input line so if -pron- fail the value of -pron- variable will be whatever be there before so that would be very fragile code if -pron- just simply assume that those variable have be change alright so let -pron- get to -pron- if a little mark here ok so in -pron- next sorry i think i have little demo -pron- can do -pron- out here so let -pron- have a little play with scanf right so -pron- will do be scan if demo right",
    "ok so let -pron- have a go with this let -pron- have -pron- x and just for demonstration purpose will set the value of two item here and let -pron- try to read -pron- in so i want to use scan if and will say ok percent d percent d for the comet in between here be the address of x here be the address of why ok and will print out the value of x and y and then -pron- will go back and look to see what the return value of scanner be so will do so x be now d and why be now ok and will say here be a value of x and y so notice wizard",
    "the content of -pron- ok right and let -pron- return zero ok ok so now let -pron- run -pron- little program and if i type let -pron- say sixty seventy great let -pron- successfully read that from the input if i type to sixty in a comma -pron- be actually go to wait until i type more because -pron- be treat newline as space so let -pron- put seven hundred in here ok -pron- read that but perhaps that be not be correct intention and if i put say sixty and then something which -pron- do not expect or let -pron- put the semi colon ok -pron- will notice that x have be change but why do"
  ],
  "eb60661b-5d09-4877-bb19-11bf0d303584": [
    "ok so any scheduler to offer some kind of prioritization can suffer from starvation so that may be for example preventive short job first perhaps -pron- have -pron- have get a scheduler that be base on some kind of priority then the high priority job if -pron- keep on arrive will never allow low priority job to run by the way when i say job that be the classic operating system description of process and item which actually need cpu time but -pron- can -pron- be sure generalize to the idea of this apply to individual thread insider multithreade program ok so anything that have some kind of prioritization can suffer from starvation right which schedule be appropriate for batch job well the answer here be -pron- -pron- depend be typically fast job -pron- care about throughput so -pron- may decide to use short job first for example -pron- may decide",
    "output from all job -pron- depend very much upon the io use of -pron- job for example -pron- may be that if -pron- try to run all of -pron- job at the same time then -pron- stress -pron- io system and actually -pron- o throughput plummet because now -pron- disk drive be constantly seek to different part of the physical disk and so maybe -pron- be well to run a few number of job one after another so -pron- may choose for example a simple first come first serve or short job first right what about interactive job well -pron- have see that round robin be great because -pron- do not need to wait for other people process to finish and if -pron- select a time quanta which be sufficiently short but not too short then -pron- can appear to each person"
  ],
  "ebaa6b70-f89c-485c-b02b-5e82ca8c5a2c": [
    "ok right so i think this part one of the most exciting part of cs two forty one so here be the story so far -pron- have talk a little bit about page table and the idea that inside -pron- virtual address i can map to a particular piece of memory and i do this on a per page basis and then -pron- have discuss how actually -pron- can page out part of -pron- memory to disk ok so when i do not need something or if there be pressure to get more memory for another process or something else -pron- can take part of -pron- memory and say -pron- know well let -pron- just copy -pron- to disk or maybe -pron- already be on disk in which case if the dirty bit be not set then i know that i do not need to do much because -pron- have already get a copy of the datum on the disk somewhere right so -pron- have get all this wonderful machinery to page out and page in disk block back into ram",
    "be cool if i could have a file like alice perhaps -pron- have read alice through the looking glass so here be -pron- little file here would not -pron- be cool if the content of this file so here -pron- be let -pron- kind of sketch -pron- out as some holodisc block if -pron- could actually map those directly into some memory ok so let -pron- kind of copy -pron- in and then those piece of memory can be directly part of the address space of a process and that be what nmap be go to allow -pron- to do this idea that -pron- can kind of make as one the address space of -pron- process and thing on the disk -pron- allow -pron- to do a bit more than that but let -pron- kind of just start there ok alright so let -pron- see what -pron- can do with this so here be",
    "the most powerful one that -pron- be go to play with today that -pron- say i want to map some memory and i want to map -pron- to a file now -pron- do not give a file name instead -pron- just give a file descriptor so for example -pron- have -pron- have already open that by say open somewhere now some thing -pron- can do with this -pron- could specify a particular dress -pron- like or alternatively -pron- could just say -pron- know i do not care map -pron- find a good place in -pron- address base for this -pron- do not need to say how many byte that -pron- 'd like so this could be a fix number like hey i just want a thousand twenty four or maybe -pron- have already state the same file so for example if -pron- just want to load the whole file if -pron- want to map the whole file then maybe -pron- could say something",
    "be the space in -pron- virtual address space -pron- 'd like to use ok so the next two thing can cause a little bit of confusion -pron- do different thing here so remember when -pron- talk about -pron- virtual memory four piece of actual physical memory inside -pron- page table -pron- care about whether -pron- could read or write or execute -pron- and why do -pron- do this again for security so for example i may have page in -pron- stack which be read and writable but not executable or i may have page which be for the library or -pron- code which i want to be read an executable but not writable ok so -pron- get to choose -pron- get to say what page protection would like here so for example if i just want to read -pron- file then i only need read so there be other as well",
    "-pron- just or -pron- together and will see -pron- can see the manpage for these option here right so that be the first idea be what page protection do -pron- want and then the flag here tell -pron- a little bit about or give a hint to m map as to how -pron- want to use this resource resource and there be the flag allow -pron- to say thing like if -pron- make a change to the file ok so right now -pron- can not do that because -pron- say -pron- want to make say just read access but let -pron- suppose -pron- have ask for right let -pron- suppose -pron- would change some bite here then how private be that change for example should change be actually write directly back into the file at some point",
    "that sound really useful if -pron- want to communicate between two different process be less useful if -pron- just want to make quick change to the memory version of the file in order to make -pron- efficient so -pron- can kind of read thing etc so that allow -pron- to say how much sharing -pron- want in whether -pron- want to share -pron- change with any other process ok so the last thing in here maybe -pron- do not want to start -pron- mapping at the beginning of the file maybe -pron- want to specify an offset ok so let -pron- have sloppy look at a version of this and so before -pron- do that this kind of quickly review in order to use mmap then -pron- want to say what kind of memory protection do -pron- want do -pron- want to be able to make change will -pron- be back by a file or do -pron- just want"
  ],
  "ebe899fb-f9df-4e7d-b72b-afd15f5bdaf5": [
    "ok so -pron- have see two kind of link now symbolic link and hardlink let -pron- talk about some of -pron- difference ok so what be the kind of say what can -pron- do let -pron- not say about advantage here let -pron- say what can -pron- do with a hard link here so remember hardlink -pron- be increase that reference count ok so a hard link can only point to exist file so -pron- can only make a hard link to exist regular file -pron- can not make a hard link to a directory ok so to an exist file there -pron- go right the reason for that be that the file system have a strong assumption that the file directory structure be a tree and have no cycle if -pron- as a mere mortal user could make hard link from the deep part of the tree",
    "in fact even if -pron- be root -pron- can not make hard link to directory -pron- will refuse to do that ok so that be the first thing be -pron- have to be to an existing file -pron- can not make any hard link to a nonexistent file why because remember what -pron- be do be that -pron- be add a new entry into a directory and increase the reference count versus a symbolic link ok -pron- can actually make symbolic link add the o just up there symbolic link to nonexistent file so -pron- can say i can make a link to something which do not even exist yet so that be ok and also directory be ok the other thing which be not that surprising be that -pron- can cross file system boundary",
    "on a completely different file system for example maybe -pron- file exist on a usb stick and so -pron- symbolic link would just contain the text say for example slash wherever -pron- store lie mat or mount usb stick here ok and so i can talk about a symbolic link i can talk about so create a symbolic link to a file on a totally different file system and i could store this inside my say -pron- user directory right which one do -pron- think have well performance ok so there be a cost of symbolic link -pron- have to read that text file and then process the text in order to follow -pron- versus a hard link there be no performance",
    "so no performance penalty here between the original entry and the new entry -pron- both refer to the same inode ok so -pron- just so happen however that now -pron- have two different name possibly in two different directory that point to the same inode so one entry in one directory be just as fast as open the file as the other why because -pron- immediately tell -pron- about the inode number and remember the inode number be the actual file with symbolic link if -pron- really want -pron- can make a symbolic link that point to a symbolic link that point to symbolic link that point to symbolic link etc etc etc and then the poor kernel would have to follow all these link in order to try to find the actual real file the real directory that -pron- truly want to point to in practice there be a limit if -pron- create"
  ],
  "ec6fca4d-5cae-48dd-b541-e7bae7852408": [
    "ok hi welcome to lecture thirty nine the last record lecture ok so here -pron- go -pron- be go to cover some different thing today i want to tell -pron- some stuff about let -pron- see docker and container or go over maybe some idea about some of -pron- question and also will talk a little bit about the critical section problem ok right so let -pron- get start let -pron- have some fun first of all with container so off -pron- go let -pron- make this a little large here ok alright so here be the idea be that -pron- want to be able to have some kind of security model where i can want to run a process and this process can not see -pron- file -pron- can not even see what other process be run and -pron- can not find out much about anything about say the network card or anything else i have basically",
    "go to cheat rather than say emulate a complete cpu and a disk drive and have a virtual copy of every piece of hardware -pron- want here be how -pron- be go to cheat -pron- be go to put -pron- process inside a container and this container be essentially comprise of what be call namespace so imagine -pron- could only talk to people call smith or some variant of smith then -pron- world become a lot small imagine if -pron- look out the window and -pron- say tell -pron- about all the file just outside so i could kind of open and -pron- lie to -pron- -pron- say actually these be the only mount point that exist there not the real map point but -pron- do not know that so this poor -pron- be go to lie to this little process and so -pron- be go to behave as inside of virtual machine -pron- be not quite as secure as a real virtual machine but there be lot of advantage for example -pron- be",
    "if i create a virtual machine a virtual machine be go to take at least several second to start up secondly on a virtual machine take up a lot of ram a lot of memory and in fact that be the limit resource so next time -pron- ask -pron- friend for another virtual machine -pron- be go to check how much spare ram -pron- have before decide whether to say yes or no versus these small container be very lightweight there not much heavy than just create another process except as i say already -pron- lie to the process as to what else be available so -pron- run -pron- inside this container and today the most proper way to do that be to use a commercial open source package call docker and -pron- be go to here -pron- go little example -pron- be go to run in a moment so dark -pron- do several thing -pron- make -pron- easy for",
    "if -pron- think of -pron- as a bit like a github where i can create image and then post -pron- from other people post for people to use secondly what doctor do be -pron- have a special kind of set of file system where i can use what be call an overlay technique meaning that i may start say with unbuntu image complete image of a work copy of emblem two and then say well ok on top of that i want to delete this directory i want to add this other directory with these file and dark maintain a delta the difference between these so as -pron- can see -pron- be car be currently download various kind of file system image one of these will be a version of a bunch of that be build upon an in a moment when -pron- be finish -pron- go -pron- have get the complete set of image that create down -pron- little well say demo and the well site demo -pron- be basically kind of hello world that -pron- can get from docker and as -pron-",
    "process -pron- do not do much apart from print out this wonderful ascii diagram and if i say instead of boo i say cs two forty one here -pron- go -pron- run again and now the whale say something else so great -pron- just check that docker rut so docker kind of very powerful -pron- use -pron- for class transcribe so that -pron- do not matter whether -pron- be run on window or linux i can give -pron- a complete development environment ready to go -pron- can test -pron- code etc and -pron- be a weight as well to deploy everything so once -pron- have get class transcribed ready to run on a server -pron- can create a docker image and then i can give -pron- to someone else to run and i do not have to worry about then instal all of the dependency instead all the thing that -pron- depend on all the third party library -pron- need for the website can all be bundle up into this single image so -pron- make circle operation",
    "for this process to see the rest of -pron- system however be not perfect security unfortunately the kernel code that doctor use -pron- have a kernel module run with complete colonel privilege so if i can find a vulnerability inside that docker code or if i can find a vulnerability inside a standard kind of kernel module like say a file system driver then all bet be off now i can have complete access all of the memory of the real machine so -pron- be not perfect -pron- be not perfect security right stalker -pron- be sure that -pron- will come across -pron- in -pron- kind of future future work -pron- be kind of very popular tool today one last other thing -pron- be not go to mention but just point out and see if i can find doctor up here here -pron-",
    "in kubernetes be be a way to define how to create many many many work virtual machine or docker image and container and run many of -pron- at the same time so for example if i want to make -pron- website work with say five different five instance of node js and i want to scale -pron- up to have say ten back end database then i would use kubernetes to be able to define how to scale up and use all of those different container alright so cute like i say be also kind of great powerful tool if -pron- get into this stuff -pron- be very very easy to play with this stuff and docker have make -pron- very easy lot of great example so after cs two forty one final exam after -pron- finish say hi to -pron- friend and -pron- parent and etc and put away the semester why do not -pron- have a play with this -pron- be sure -pron- would be kind of useful skill"
  ],
  "ec98de0c-eb65-40d6-8b08-a77fdf9433ff": [
    "ok right so let -pron- run through some simulation of purpose obtain some resource case so what do -pron- have here right so first of all let -pron- not confuse deadlock with dreadlock ok both of those can get -pron- into trouble on the high sea so but -pron- be look at nazi code today but just a simulation of process be request obtain resource and release -pron- ok so what do -pron- get right ok so here be the here be the game that assume process require lock in the order specify and really source resource only when finish ok so -pron- be go to use what be call a resource allocation graph to determine if and when there be deadlock so -pron- could sketch out the order in which process or obtain these lock and there be a possible order maybe that will lead to deadlock ok so",
    "then and then -pron- will then -pron- will continue ok so i go to process wait for resource will quite an exclusive lock call resource as soon as no other process have text message block ok and will assume the lock affair so in the general case with the period mutex lock -pron- could set oarlock up to a give process with the high priority access to exclusive log but in general the sequence of which the lock be assign to up process be arbitrary right so -pron- be not the same kind of well define simply that -pron- will get -pron- at some point ok right so how do -pron- write these resource allocation graph well first of all let -pron- write down -pron- resource of different type so here -pron- go right -pron- have get different resource down",
    "imagine for example these be piece of hardware maybe -pron- be exclusive access to the screen i want to go and put -pron- computer into a kind of full screen mode so only i can actually kind of right to the screen or maybe -pron- be a piece of hardware maybe i want exclusive access to the firmware or to storage device or maybe -pron- be a database table and i now need to make sure that only i can access -pron- or maybe -pron- be some datum structure but whatever -pron- be -pron- have this idea that only one process or thread at a time can access -pron- now -pron- be go to use the word process that be kind of historical reference in the sense that -pron- think about these thing even with four thread exist but -pron- could imagine how -pron- could set up identical situation to multiple thread run inside just one process so -pron- be the concept be the theory which be the most important idea here",
    "process p one request and obtain resource a and then resource be ok so let -pron- set up process one here ok process one and in a little bit -pron- be go to need process too as well ok so -pron- request a so be anybody hold on to a right no so -pron- get to eat the chocolate right here be the chocolate here be that lovely resource that -pron- would like ok so let -pron- do an hour from the from the chocolate bar be high - quality of resource -pron- would like directly to process one and that also show be that this resource be be hold by process one so -pron- obtain that resource but -pron- be not do yet be also go to get exclusive access to be as well ok so how may this be implement well for example",
    "right -pron- do no so the next thing and in -pron- timeline here be process two request see ok so let -pron- choose a different color for a process to ok right so process two first request see ok so -pron- get see fine -pron- be hold on to that get screw have access to that resource but then -pron- would like be unfortunately -pron- can not right now be be currently be hold by process one so -pron- be go to look longingly be hand be outstretche want to touch be but no -pron- be stick on the outside look at this box can i really want this but -pron- be be force to wait because process one have exclusive access ok so that be the beginning of a resource allocation graph or rag right and -pron- can see the process to can not continue right now -pron- do not have everything -pron-",
    "resource be and the reason -pron- can not get -pron- be because process one be still run right so do -pron- have deadlock well no -pron- do not because -pron- can see that process one be not actually wait for any resource yeah sure -pron- be be a bit slow and finish up but there be no reason for -pron- to actually run forever so at some point -pron- be go to finish and when -pron- do so -pron- can release these resource ok so delete that line and -pron- delete that line so -pron- can now see that process too and no long need to be wait for the mystery source be and so -pron- could raise the at and turn that back into a line that be look at -pron- and say ok great now process to have everything -pron- need -pron- can continue so if -pron- be write code -pron- can imagine -pron- call to peter mutex lock have finally complete or access to the"
  ],
  "ecbcb30c-3c7e-4d14-b443-7fe6e775c690": [
    "hi ok so -pron- both through five different example of where -pron- seek deadlock or not no deadlock and fundamentally -pron- be the requ sequence that determine whether -pron- actually run into deadlock or not so what can -pron- do to prevent deadlock and one algorithm that -pron- system could use be something call the banker algorithm so if the operating system know in advance what resource particular process want so if -pron- know an example example for example the process one be go to need let -pron- say eight aa whatever azar and say three bee whatever bee be but no season die then the bank side -pron- banker algorithm can ensure that the bank never go into an overdraft right and never -pron- never allow -pron- process be to continue so",
    "type so for example if i have one hundred day and i know that -pron- process two and -pron- process three and so on only ever go to need just a couple of these ace ok this one need ten and this one need a twenty then -pron- and i can immediately see that -pron- do not matter what order process one two three or four ask for ace -pron- have get so many of these ad that -pron- be never go to deny or slow down a request that because i can see that this be never ever go to kind of cause -pron- an issue with deadlock however if i have far few let -pron- to say ten then the moment that p three come along and request",
    "-pron- resource of type a to process three then -pron- can immediately reason that any future request by these other process will will potentially get stuck and potentially -pron- can run into deadlock so the banker algorithm which -pron- be not go to go into a detail today be this idea that i can keep if i know in advance and that be the crux but if i know in advance the maximum number of request for each resource type then i can ensure that the sequence of that -pron- allow -pron- process be to be give exclusive access to -pron- resource type -pron- can ensure that will never go to have an overdraft and -pron- can never therefore go into a deadlock alright so this be an example of kind of deadlock avoidance and -pron- can read about banker algorithm on wikipedia etc but i instead i want to spend a little bit -pron- be talk about the linux and",
    "ok so first of all some theory and -pron- will ask -pron- to guess which guess which what lennox in windows use ok so here be an idea -pron- could actually think about -pron- process be in some kind of conceptual space so let -pron- just think about say two process about how -pron- advance through this space so -pron- process run through different state so for example -pron- may be that -pron- require a mutex one and then later -pron- acquire mutex too ok then -pron- do some thing and then -pron- release mutex server two and one ok so over here right but -pron- can see the idea that -pron- first process be go to slowly advance along -pron- access here and i could do the same thing for another process i could talk about the state of -pron- second process and -pron- be always go to be monotonically increase",
    "represent a little walk through this state of space where the actual walk depend upon the sequence in which -pron- process one or process to acquire the mutex lock or some other exclusive access to some other resource ok so look at this -pron- process one be acquire -pron- first mutex lock and then switch to support the state two and so on and so on and so for example -pron- may have a path like this ok so some path in this conceptual space correspond to deadlock and i could reason very carefully about which path -pron- look like so for example -pron- may look like where process one acquire a first lock but then process two acquire a second lock and now both of -pron- be be stick verse versus if process",
    "acquire both lock and then release at all -pron- could see that oh -pron- kind of skirt around the outskirt of this graph and in fact that would not be a deadlock so -pron- could actually think about the state that position in this state space of possible state -pron- two process which actually correspond to when thing get stick in other word when do -pron- correspond with circle cycle in -pron- weight for graph and what -pron- would discover be that -pron- all interior point on this particular graph right so if example process one do not do anything but process two acquire all of the resource and then release -pron- and then process want acquire all of the resource -pron- need and then release -pron- -pron- have go around the edge where say if i interleave -pron- two process process the two processor or thread operation then -pron- be try to take a more dangerous path through the",
    "get stuck at i can not continue ok so what do the lyric do do -pron- attempt to kind of look at what state in this state space correspond to deadlock and avoid -pron- by ensure that -pron- always go around the outside no so here be what linux and windows do let -pron- choose a new color of first of all -pron- need to ground and then i need creature color so ok i have no idea how to find brown on this thing so i guess -pron- will just head right towards brown so here be the lennox and the window operation i just need to do a couple of foot of furry body there -pron- go a long neck ok and finally -pron- have stick in the ground yes -pron- be call the ostrich",
    "stick -pron- head in the sand and do not look so the lyric of windows strategy for deadlock avoidance be call let -pron- just hope for the good which the ostrich algorithm be basically let -pron- pretend -pron- be not -pron- problem -pron- system be go to let -pron- write code that can cause deadlock -pron- be up to -pron- the system programmer to make sure that deadlock can not occur so the system do not prevent -pron- from cause deadlock so good luck -pron- be on -pron- own on this one and that be why -pron- be important to make sure that -pron- do not enter possible deadlock which bring -pron- to -pron- final little point which be how can -pron- possibly do this ok so here be the secret source here be the most important part of this lecture because now -pron- have show -pron- that -pron- can simulate deadlock -pron- could see -pron- occur inside the resource allocation graph but -pron- actually want to prevent -pron- here be the secret let -pron- make sure that -pron- all of -pron- thread or process",
    "look here be the thing which -pron- be say a quiet call peter mutex lock on abc and d -pron- just need -pron- to always acquire -pron- in agree apon order so for example if -pron- be go to acquire a lock in order to access a then get this lot first before get be and if -pron- go to acquire a lock be then acquire lock be before access see and then if -pron- get the idea so -pron- need to rank order or resource so another be give some kind of simple mapping to integer here ok so on and so on and so on and so on and if -pron- acquire something when exclusive access if -pron- always agree to acquire -pron- in small integer to large integer order then",
    "a formal proof but i want -pron- to see that if i have acquire something so here be -pron- first process and -pron- have get this first resource and -pron- have acquire this gay but now -pron- be wait for say see -pron- will see that because all of -pron- process be always acquire in the saint luke 's i want a different color ok let -pron- go for acquire in the same order i can never generate the case where -pron- have get a process to which have now acquire this but then also go backwards and create await condition on an early resource all of -pron- line which correspond to -pron- wait for resource must be to",
    "a bow tie where -pron- have end up with weight on resource which be both before and after in -pron- resource order so all of -pron- weight -pron- be go to be to the right and therefore be always possible for the early resource to be complete -pron- process be complete so therefore i can not set up a chain or between -pron- process be where i end up say with process three wait for process one and process one wait for process do ok so that be the secret source -pron- be always make sure that -pron- get resource in the same order so i want -pron- to think about how -pron- would implement that suppose for example -pron- have a set of integer say -pron- may be under a one of a link list and each one of those integer have a mutex lock so m one m two m three m four m five etc how can i make sure that if i need to lock let -pron- say two or three mutex lock"
  ],
  "ecc913a8-cf8a-4205-b23c-530df9ebc4eb": [
    "ok so let -pron- do a producer consumer again a very kind of standard exam question but also something that -pron- may expect inside an interview so first of all in an interview there say ok what be the producer consumer problem and the idea that -pron- have get one or more process be produce thing so for example that may be -pron- be read off the file system -pron- may be a server socket that be receive thing may be a pipe -pron- do not matter the point be -pron- have get a stream of stuff be send to -pron- and rather than have just a simple data structure where i just allow -pron- to grow to an infinite size which order real system be not that great instead i want to be able to connect this producer up to some consumer and these consumer there may be more of -pron- and i want to be able to make sure that i do not accidentally get the same what item to two different consumer and i want to make sure that -pron- producer block if there be no spare space right now as someone i want to make sure",
    "and finally let -pron- make sure that the way that -pron- implement this have -pron- have a fix size so that i do not waste unnecessary memory just -pron- hold everything that the that the producer want to give -pron- right now ok so this be all go to do let -pron- implement the producer consumer problem use a fix capacity multithreade producer consumer and this will have some admin remove method but -pron- want to make sure that -pron- do not allow more than one hundred item to be in the queue and similar -pron- do not want to be able to move thing from the queue the queue be empty so today -pron- be not actually go to write the code to remove thing will add thing that low level code -pron- can assume -pron- have already write inside cs two twenty five or for example in -pron- store inside a database so -pron- may store -pron- say inside of a message queue or whatever point be to be able to block the producer",
    "so for and mutex right so let -pron- have a mutex which represent let -pron- have a well colored mutex ok there -pron- go let -pron- have mutex that represent say the number of item and let -pron- have new text that represent the amount of space -pron- have leave ok right ok so when -pron- when a producer want to add something else to add a value if -pron- can continue -pron- be just go to call this ad war method with that value but -pron- only want to get that far if there be space so for this what a plan then be to go to -pron- pizza box -pron- space pizza box and remove a slice and -pron- know that be go to block",
    "ok so how do -pron- do that with accounting symbol for -pron- can call what ok so -pron- can call sam wait k on -pron- -pron- pizza box here so in space and that would normally just carry on straight away but if -pron- be down to zero pizza slice that will block at this point let -pron- now call add war here -pron- go right and pass -pron- value ok after that be complete -pron- can let the world know that there be now a new item available so let -pron- call sam post and do this on the count of the number of item ok right so great so that be -pron- code for the add far remove -pron- be go to be very similar but by symmetry",
    "code except that of course -pron- swap the use of these two counting semaphore around and -pron- be go to call add a remove roar method or something the last thing -pron- need to think about be how -pron- want to initialize these thing so the space -pron- want to initialize to one hundred and the number of item -pron- want to initialize to zero how do -pron- do that -pron- can use ammunition so for example for the space -pron- would be write seminar shit ok here be -pron- variable and -pron- do not need to use -pron- between process be so -pron- will just say p shade of zero and this can have an initial value of one hundred ok and similar for n item except will have initial value of zero right so be -pron- almost there yes except that -pron- code will not work if -pron- have get more than two two thread"
  ],
  "ed85781a-a46c-454f-99d6-e290835a6979": [
    "hi welcome to like twenty four -pron- be go to start with a quick code review let -pron- see look at this attempt wait a fix sized ring buffer and -pron- will see if -pron- can figure out how -pron- may go wrong ok so some of the thing that -pron- want to ask be be deadlock possible in other word could get stick so that be never able to continue be underflow possible in other word could -pron- be that -pron- attempt to write so attempt to read some datum that be not actually inside the ring buffer so will just be read back some garbage information or perhaps overflow as possible which mean that -pron- be able to put more datum into -pron- buffer then -pron- can actually hold so presumably -pron- be go to corrupt something possibly value that -pron- have not yet write out so what do -pron- get here -pron- have two counting semaphore and will see the s one be initialize to two hundred and fifty six so this smell to -pron- like"
  ],
  "ef681962-29d9-43da-bc9c-fdb2c8005093": [
    "ok hi so -pron- be go to start think about create task now perhaps -pron- ever see insider back of a kitchen where -pron- have get multiple short order cook prepare meal and there be a little circular wheel where the next cook run up and pull the next thing to cook off this second -pron- will the next order right and this be actually share between multiple thread that be eventually where -pron- 'd like to get to but for now let -pron- just think about individual task and -pron- have get an example here for amanda block problem but i want -pron- to think of this conceptually as apply to kind of other thing that -pron- want to use with multiple thread so i want to clear a little job a little thing that i want -pron- thread to do so so i care about -pron- start x and y position and end x there n d y in other word -pron- be go to declare that i want -pron- to work on this tiny little piece of the picture not just now a whole long row but just a small tile ok so that would be -pron- task",
    "the name i want to area that just typedef so -pron- be go to say typedef all of this in the future -pron- be just go to wait as task underscore t ok great so now let -pron- make sure i can make enough task for -pron- whole picture now in this easy problem -pron- can actually workout in advance exactly how many tile though be how many task -pron- be go to take to complete the whole picture if i divide up -pron- picture into little block of sixty four by sixty four pixel then the number of tile i need -pron- will need to round up so i can use the follow formula let -pron- kind of add sixty three to ever true height i have and similar to the width as well so that if -pron- give -pron- a height like sixty seven i know that i have to make at least two tile in that direction ok so with that in mind i can now make memory structure which will hold all of -pron- task -pron- have calculate how",
    "of -pron- task struct remember -pron- be not use task pointer here i actually want to hold an actual task inside that memory and will assign that to -pron- variable task ok wait so now i can start fill up that memory ok so off -pron- go here -pron- be here be -pron- code to now walkthrough fill up those memory i just have to be a little bit careful that the one at the very end may not be as large as the other so i have to make sure that i limit the end value of x and y so that -pron- do not actually go past the end of -pron- true image otherwise when i actually come to calculate this -pron- will be write into some invalid memory alright so that be not the purpose of of this limit here be to make sure that -pron- can deal correctly with width and height which be not some multiple of sixty four and each time around the loop these two loop",
    "right then so -pron- be write this code as two different function in the real code but -pron- have try to make -pron- short here -pron- see if -pron- can understand this so -pron- want to be able to run all these little tile here these little task -pron- make -pron- but -pron- do not try to make that many thread so let -pron- have a look at this second attempt to parallelize r code so great -pron- be call peter create an eye potentially get like ten thousand task here but -pron- be not just create ten thousand task all in one go so here be what -pron- will do be -pron- will store the thread id and -pron- be go to keep track of the total number of thread that -pron- have get run right now in each time -pron- be go to add one to -pron- thread count here and",
    "out a different entry that -pron- just create early and here be -pron- lookout three ok so how do i actually limit the number of thread run at anyone time ok so when this thread count reach a maximum let -pron- say sixty or whatever but when -pron- be equal to sixteen here -pron- be not go to create any more thread instead -pron- be go to run through the sixteen thread that -pron- have create so far use -pron- third idea be go to join on each one so -pron- be not go to be able to escape out of this for loop until all sixteen or however many thread have all finish if some finished early great be some finish late great -pron- will block until -pron- have finish but at some point finally all of those save sixteen thread will finish a which point will reset -pron- thread count back",
    "ok and after that let -pron- go around again and create a whole other threat alright so let -pron- run this and see what -pron- look like ok so -pron- let -pron- check to see where this be define inside -pron- make file if i do grip let -pron- look for mandible task inside -pron- make file and -pron- will see -pron- be call mandel mandel three so let -pron- run that key right like mandel three and only some number five and twelve let -pron- do say four thousand slow down a bit ok right so now -pron- can actually see those individual individual tile be creative -pron- look a little bit large than sixty four -pron- really sixty four let -pron- just check the actual code here right so -pron- have",
    "be one hundred and twenty eight ok that be why i look those tile look a little bit large the next bit ok so let -pron- change that down to sixty four and run -pron- again ok now -pron- start to see this be create right so what do -pron- think about that be that be that the fast manderbach program -pron- could create ok so -pron- be -pron- be a little bit more efficient sense -pron- be try to limit the number of thread now so now -pron- could say make the number of thread equal to the actual true number of cpu core that -pron- have but still some of those thread may still be run a little bit and complete a little bit fast than the other if -pron- tile ok if -pron- if -pron- tile have some pixel which complete",
    "to a point where -pron- have make the fast man aboard program what i do kind of want to mention however be that -pron- have now get a design where i could now start make movie from this i could now by underweight where be -pron- there -pron- go where i could now start define task involve with different part of the picture and i could even make animation where -pron- be display one frame and then as -pron- would choose to explore a different area of this i can in the background start already start create a picture perhaps i create a picture at a low resolution and watch -pron- look at that -pron- be already create a version of the report which be at a high resolution also -pron- be start to think away that be similar to gpu programming"
  ],
  "ef84d9c3-5b70-4f68-aa5f-bdd541a475e6": [
    "ok right so what be the next part lecture let -pron- do a several thing let -pron- start talk about what -pron- can store inside -pron- page table let -pron- go through a little bit of math some example and let -pron- start talk about page fill so fasten -pron- seatbelt and let -pron- go ok so let -pron- do a worked example for two level page table so remember that be where -pron- have take the page number and divide -pron- up into piece and so rather than have one big giant contiguous table will have a directory at the top so what do -pron- get here how much memory do a two level page table require assume the datum segment require two page and the stack require two page ok right so -pron- will pretend water thirty two bit system so -pron- have get -pron- four thousand ninety six byte for each page so the twelve bit here be -pron- page offset the upper twenty bit be go to be the page number ok so that be the page number and that be the part -pron- want to convert",
    "in other word -pron- be run a very small program here maybe -pron- be e m v or cat or something like that ok so very small about the stack very small amount of program and so if i should actually look at the amount of memory that -pron- program be actually use -pron- be just use two page down here ok and two page at the top here now in practice -pron- real example -pron- may be a little bit more complicated than that but let -pron- let -pron- work with this very very simple example and the point realize be that -pron- be go to need one page of memory to hold the top level page part -pron- page table so there -pron- be ok with -pron- be a thousand twenty four entry do -pron- do ok in other word the top level",
    "to use that but most of -pron- memory space be not -pron- use so in fact -pron- have only go to have two entry inside this which be even valid which will even kind of ever use this one down here which correspond to the area that i need in here for those two page and this one up here which be go to be -pron- stack space so let -pron- imagine will put that kind of just there ok so each of these point to another second level ok so -pron- can see that -pron- have now go to need three three piece of memory three page inside -pron- physical memory to hold all of this so that be the overhead of -pron- page table system so what do that mean right i just finish this guy off -pron- say that the stack have two so that will be two entry inside here",
    "down here for the data segment and if -pron- access any of these but -pron- have to do -pron- will tell -pron- where inside memory as the actual data where the actual program code be or where the actual stack be ok please go to memory over there right so let -pron- not worry about the actual memory use by -pron- program let -pron- just look at the overhead actually require virtual memory annual see now i need to find space inside -pron- actual physical ram for three page of memory in other word -pron- overhead be twelve megabyte ok -pron- 'd say -pron- have do pretty good at the begin of this lecture -pron- have a system that require multiple gigabyte and then -pron- go to a single level page table which require four megabyte wait a moment -pron- have get -pron- phone minute here and now",
    "oh -pron- have get twelve kb there -pron- go that be much well so the overhead now each process be potentially very very small right so the next thing i want to talk about be when thing go wrong and -pron- can make thing go wrong deliberately i want -pron- to imagine right now that the space behind -pron- maybe -pron- get a wall behind -pron- or something do not actually exist wait a moment let -pron- turn around and have a look as -pron- turn around and have a look will put to put -pron- or -pron- on pause and quickly fill -pron- in will quickly replace the wall will put -pron- back in so the process -pron- be none the wise so the trick -pron- have do here be that in -pron- page table look up ok let -pron- choose know color"
  ],
  "efd565c9-78d8-4cd0-8d76-4beb5b405651": [
    "ok so -pron- be go to choose a color here -pron- be go to model i simulate some different scheduler and -pron- have get the same process model that -pron- be go to run for each one -pron- will see -pron- have get four process be here and this be the wall clock time that that process be be ready to start ok so would like to run initially -pron- get three process which be available -pron- would all like a cpu unfortunately in this model -pron- have only get one cpu then -pron- have get -pron- burst time in other word the amount of cpu time -pron- actually need to complete here and -pron- have get a wait time that -pron- be go to calculate by see how much time -pron- spend inside the ready queue unable to continue ok so -pron- have get a couple of possibility of tie breaking so first of all if there be multiple job ready to run then will just schedule the early arrive job",
    "and see will see that process so that the other type rate will look at be when process for arrive at the same time to another process be finish and will assume that to be most fair that will put process for ahead on the ready queue so let -pron- see this so -pron- will get start and -pron- have get a round robin where that -pron- be content of ten millisecond every ten millisecond hardware time be go to go off and so first of all process one get to run ok and after ten millisecond -pron- say ok process one jump out of the hot seat out the cpu because -pron- be go to run a different process process four be also appear on the scene so -pron- ready queue would actually look",
    "look like a process three in the hot seat will be next so process four have arrive and process one be at very back in the ready queue wait ok so that would be -pron- queue wait to go right after ten minute second -pron- allow person three to one and after ten millisecond -pron- love process four two one ok at this point process four have finish so let -pron- actually calculate -pron- wait time -pron- will see that -pron- finish at forty millisecond in however -pron- be wait time be not thirty millisecond because -pron- only arrive ten minute after ten millisecond so -pron- be wait time with these two block here so -pron- be total wait time be twenty millisecond",
    "process one and similar -pron- do this round robin so -pron- keep go around right here be process to process two be now finish -pron- completion -pron- have make -pron- burst time requirement and so what be -pron- wait time well -pron- could actually visually look -pron- could say well -pron- wait here here here and here so forty millisecond but -pron- can also use that formula very beginning which say that -pron- know when -pron- finish -pron- know when -pron- first arrive so that be sixty millisecond difference and of course twenty millisecond be spend actually on the cp cpu compute so the difference of that then be forty millisecond ok and finally like purse three and process three have same idea but fifty millisecond worth -pron- wait",
    "one get to finish as well so what be -pron- wait time here will see fifty millisecond yep right so that be the way time for each one of -pron- process be so -pron- could actually calculate the total wait time of -pron- system so here be the early time that -pron- spend twiddle -pron- finger wait for -pron- different choice to finish an if -pron- add up all of these will see -pron- have get total wait time of one hundred millisecond hundred sixty millisecond which be an average of forty millisecond ok so this kind of just keep and over that will compare -pron- with some of -pron- other job here let -pron- do short job first ok so with short job first -pron- be go to not preempt any job but -pron- will each time -pron- come to",
    "time to evaluate which one so initially -pron- have get a choice of three process process one two or three ok process two and three have the shortest bless time so let -pron- choose process too and -pron- do not preempt there be no preemption go on in this model so process to -pron- run two through to completion which mean -pron- wait time be zero right now what happen ok so now in the schedule get to choose who be next and of course process four have since appear so process four -pron- come down and sit on the cpu right so process four or few go and now -pron- be do so process for only have to wait just one ten millisecond that right like process three in process once i process one -pron- -pron- have get too much of a good time so instead -pron- be go to give the cpu to",
    "long do process three have to wait -pron- have to wait thirty millisecond ok and finally process one month at the end ok and process warren have thirty fifty millisecond ok right so if -pron- look at this with the short job first then -pron- discover all wait time actually go down and hopefully this should not be a surprise because -pron- have put the total wait time now nineteen millisecond which be an average of twenty two and a half million second -pron- have nearly half the actual average wait time why because -pron- put all the short thing first if -pron- put process one",
    "have be add into all of -pron- other job by clear -pron- desk of the short thing first the total wait time with all -pron- process be be minimal ok could -pron- have do well than short job first yes in fact if -pron- use pre emptive short job first -pron- could potentially put an even short wait time ok right so just a quick comment be sometimes people think that short job first in term of scheduling choice mean short remaining time that be incorrect -pron- always use the actual burst time the total the burst time to decide which job to run next so -pron- do not keep track -pron- do not use how much time the cpu how much time job be use how much cpu time -pron- job be use so far -pron- decide which to run first would just simply look at the first time ok write an lastly welcome here first come first serve right first come first serve remember this be a slightly",
    "look like right so process one -pron- arrive first so -pron- get to go right and then process two -pron- come and then process three finally process for so if -pron- add all these up -pron- can calculate these post the wait time for process one be of these zero wait time for process two -pron- have to wait for process want to finish thirty k the process three have to wait see fifty millisecond and process four have to wait seventy millisecond",
    "ok do i get oh yeah i make a mistake right because the wait time for this one should have be sixty ok because -pron- do not appear until here ok so do some math again hundred and forty millisecond gay which give -pron- an average wait time of thirty five millisecond ok so not as good as -pron- short job first but not as bad as round robin ok and then -pron- operator short job first so what change here be that as soon as process two arrive so process four wise then -pron- give -pron- priority so at",
    "-pron- get the hot seat -pron- get the cpu right so -pron- make an assumption here that be interrupt job be place back at the front of the queue so process to -pron- get back this cpu and then process -pron- then process three and finally process one get finally -pron- cpu ok so what do this look like well in this case be average wait time be ninety millisecond again with an average of twenty two millisecond per process ok so no bad than the short job and finally here be another example of preemptive priority where this time -pron- can explicitly set some kind of priority and in fact with lennox -pron- can do this as well -pron- can actually use command call nice to change the priority of -pron- process right so if -pron- do this then will say",
    "so let -pron- choose process to first case so process two alright so ok princess two and then who be next process four then process one to do and then finally process three ok so and again -pron- can calculate the weight so the wait for process one be thirty millisecond the wait for process two be zero there wait for process three be sixty and wait for process four be just ten millisecond so now -pron- have a hundred millisecond or twenty five"
  ],
  "f0e1bf48-9541-4edc-b44d-924ad17a8ee2": [
    "ok sir in the beginning of the course -pron- have a very simple idea about what process -pron- just say hey let -pron- to start off with the program will load -pron- into memory will assign a cpu and off -pron- go and that memory be go to contain the code that -pron- have load from disk some space for the heap and the stack etc right now -pron- be always so model now be a lot more sophisticated let -pron- just quickly review all the thing that -pron- now understand that comprise a process first of all -pron- now know that the memory that -pron- be work with the process be actually virtual memory and the mapping from that use page table to the actual physical ram and that that mapping can change overtime so -pron- may need more memory but -pron- may also page out some of -pron- memory in order to reuse that ram for other process -pron- have also realize that hey -pron- process can have more than one cpu and more more than one thread of execution -pron- also realize there be a hierarchy of process so each process have -pron- own id and apparent as well",
    "of open file descriptor but these do not need to correspond to just file -pron- can refer to pipe and socket like network socket process have a limited number of these that more recently -pron- have talk about the fact that the process run as a user and in fact -pron- have two concept of the user the original user that be sit behind the keyboard the user id here just a number but then what can this program actually do when -pron- be run as a process that be govern by the effective user id and -pron- see how use thing like the sticky bit -pron- could actually run as a different user with different privilege -pron- process also contain a present working directory and -pron- be go to need this and use this anytime that -pron- be work with relative path because -pron- be relative to the current directory and -pron- know that -pron- can change this by use thing like chi hdr tudor",
    "the kernel be go to keep track of the total cpu time use by the process and also possibly the amount of cpu time that be use in more recently be perhaps the last kind of time segment also process may be run or not perhaps -pron- have temporarily pause -pron- for example -pron- run inside the debugger or -pron- send -pron- a signal to stop -pron- well -pron- finish so -pron- have a process a state diagram that -pron- can describe how the running status of all process change then -pron- get thing like constraint which be part of -pron- security model to make sure that one process can not take over all of the resource inside -pron- system and -pron- can often modify any of these constraint",
    "user or the amount of memory that -pron- process can have that kind of thing or even the number of file descriptor -pron- also have meta information about whether -pron- care a lot about a particular process or thread -pron- can give -pron- different priority so if -pron- have a thread whose goal be to keep the steering wheel point in the right direction that be probably a pretty high priority thread and -pron- should be give a cpu in priority compare to say something which be go to download an update off the internet and the last thing will have -pron- set up process which will talk about any future lecture be this concept of umask which be go to be use when -pron- create new thread sorry know file and new directory but more about new mask in the future ok so come back to school over here because a couple"
  ],
  "f11d312f-2dc3-4d38-893d-f28714ba089d": [
    "ok so let -pron- talk about modern web request so let -pron- think about how -pron- can make -pron- protocol much more efficient ok so here be some idea first of all let -pron- think about where -pron- experience slowdown so one be the problem of -pron- ask a waiter for a particular resource and off -pron- go and -pron- bring that back and then -pron- ask for another resource and off -pron- go and bring that back this be quite inefficient -pron- would be great if -pron- could just ask for multiple resource and then -pron- just arrive as soon as -pron- be ready so the first idea then be hey -pron- can have pipelining which mean that if i can spell -pron- that i can make multiple request and not have to wait for the response -pron- be like yes i want the web page so give -pron- the give",
    "from that i know that say i want a cat picture -pron- have get a whole lot of javascript library to load -pron- have get some css s to load i can make all these request and not have to wait for any of -pron- to finish so i can efficiently start these request as soon as possible ok then next thing -pron- talk about be that each request be quite heavy -pron- have a lot of header in inside the request so let -pron- have header compression let -pron- find way to actually reduce that the number of the byte overhead ok so -pron- can -pron- header compression and in fact -pron- be go to support binary a binary protocol so that -pron- can more efficiently use -pron- network bite -pron- network bandwidth make a little bit hard to debug but -pron- care today so much",
    "idea be -pron- have get this pipe and -pron- want to be able to use the bandwidth more efficiently without have to wait for a single resource to arrive so instead let -pron- think about -pron- abstract the way that -pron- have a single pipe and instead of multiplex -pron- across multiple request in other word if -pron- be the code that care about to say the cat jpeg -pron- should not need to care about whether the whole javascript have another libi have be finish load no -pron- just want to be able to stuff bite into -pron- tcp connection as fast as possible maybe -pron- may not even be complete resource so if",
    "and -pron- have get amazon worker on this side ok here -pron- go take box and package as quickly as possible stuff -pron- onto the conveyor belt and then the other side -pron- have get another little worker that as thing appear -pron- distribute -pron- into the right channel so oh look here be some more bite for the jpeg image here some more byte for one javascript library be some of the css s so -pron- be use this pipe as if -pron- can actually support multiple stream at the same time in other word -pron- have lift -pron- to a new level of abstraction as if there be multiple connection to the same server whereas in fact -pron- be all run over a single tcp connection but -pron- be hide that from the high part of the web",
    "when -pron- request the picture of so the website of -pron- favorite cat dot com -pron- the server already know the resource that -pron- be likely to want -pron- already know that -pron- be in the future as soon as -pron- decode this web page that -pron- be go to be ask for a cat say the react javascript library and maybe the custom css s so why do not the server actually say hey have these resource i know -pron- have not even ask for -pron- yet but i know that -pron- be go to want -pron- in the future so -pron- be a bit like the way to say hey have this have this soul all this bread or idea or all these being i know that -pron- have not even finish -pron- order yet but i have a sneak suspicion that -pron- be go to be happy that i already start for fill -pron- table and pull these thing on -pron- before -pron- even ask",
    "before -pron- have request -pron- so -pron- be kind of clairvoyant if -pron- like because -pron- be see other other similar request in the future so those be all kind of fun feature of modern web base the quest so web browsing so what be the tradeoff here the trade off be that -pron- have make -pron- protocol be much more complicated much more complex so -pron- have also therefore make -pron- client server much more complicated much more complex and therefore hard to get right and realize that -pron- be tricky because -pron- have multiple implementation of one protocol so -pron- have to be able to support buggy client and buggy server and make good of incomplete information or poorly implement protocol so that be why client server"
  ],
  "f11e4d89-fc04-4700-9bde-fecbb79a9ada": [
    "hi welcome to lecture twenty one so let -pron- get start with a bit of a code review suppose -pron- be give the following code and ask to review -pron- , ok what do -pron- think of the following so how can -pron- improve -pron- and what be -pron- purpose so -pron- be call acquire and for gravity to fit onto this slide -pron- have say pmt for p thread mutex if this truly be in the code i may say why -pron- do why do -pron- have this typedef let -pron- just stick with the regular type but anyway so -pron- get two pointer too mutex a and b alright so one thing i do like be that -pron- be use assert right so this check that the a pointer and b pointer be non null so -pron- be go to point hopefully to valid object and that -pron- be not equal alright so that be good -pron- be glad that -pron- be use assert i personally may have put these on separate line so that if -pron- do fail then -pron- would have actually dissert would have tell -pron- which line -pron- fail and therefore which actually which condition cause",
    "if -pron- take a zombie then lock hey there not be and then log a ok so what be this code try to do -pron- will give -pron- a few second to read this and see if -pron- can figure -pron- out -pron- ready go alright so let -pron- see what be -pron- do here right -pron- be say if a be less than be now these be pointer in other word be actually compare the address of these two object here and if a be small hello address then will lock that first then will not be and then if -pron- turn out that be be actually a small address then finally -pron- lock a so turn about code review well i personally would like to see some squiggly brace around here a little bit safe and maybe if -pron- could put on two separate",
    "eventually wheelock a and b but -pron- always look at any specific order -pron- always lock the mutex which have the small address first why why be that important if this purpose of this code be simply to end up lock too mutex lock why change -pron- order depend on -pron- address ok so hopefully some neuron be fire at this point and -pron- remember what -pron- talk about deadlock -pron- have those four necessary and sufficient condition to coffman condition and one of -pron- be that if -pron- have a cycle in the resource allocation graph then log be possible so this code be a step stone to make sure that -pron- can not get cycle why because -pron- be go to acquire mutex lock always in the same order in other word -pron- have give -pron- a rank ordering and -pron- ordering be base on the memory location of the actual object in memory so great so provide all of -pron- code"
  ],
  "f1bc3d55-8d23-4e2f-ad60-b79aa0d962ee": [
    "ok alright so that be here -pron- go let -pron- talk about select people have a case remember select come first and so one good reason for use select be when -pron- care about write something -pron- just cross platform in other word -pron- want to make -pron- work on say mac as well or bsd -pron- want to make -pron- work on window even then select be have be around the long and be the simple to use so if -pron- just want to write some very simple code where a single thread a single process can work with a few file descriptor then -pron- select and the amount of code -pron- need to write will be small and -pron- be much simple to use ok but if -pron- goal on linux be to write a high performance server then epoll should be -pron- answer ok so epoll be obviously like i say linux specific -pron- be also",
    "ok event base -pron- return or fill out a way for -pron- to tell -pron- which file descriptor be -pron- need to process ipoh also use a set of far descriptor so -pron- set up an object which be simply a simple set of integer which be the file descriptor say here go equal here be all the file descriptor that -pron- care about now please block until there be at least one event happen on these and then when -pron- return do not return just one event give -pron- an array of all event that -pron- should work through to process ok right the last thing i want to talk about with people be that -pron- actually have two different mode of operation and -pron- can think of -pron- be let -pron- say bath yes so -pron- be something",
    "the temperature in a room for example right so -pron- could think of say the bath -pron- try to fill sorry let -pron- do let -pron- do wear of a bath that -pron- level that someone else be go to fill up meaning that -pron- have put some bite into -pron- bath i fill up the level ok so -pron- be go to go from not interesting to -pron- to suddenly the some by survive and now -pron- batt be full of by -pron- be ready for -pron- to process ok so epoll can be use in two different method once call edge trigger another one call level trigger so -pron- both -pron- be both design to be use so that -pron- can say hey this be something interesting on this file descriptor so in this case yeah -pron- bad level have",
    "avoid for -pron- let -pron- pull -pron- out so presumably when i do that the ability for that particular file descriptor to give -pron- more bite -pron- be go to drop down to zero again mean -pron- be sorry there be no more bike available right now ok but the way to epoll can work then be to say either return that file descriptor provide the some activity that -pron- can perform on this so this be now a level detect to say hey there be here be -pron- level to say that yes this invite available to process or alternatively -pron- could say yes there be some space available for -pron- to send more byte right and with a level detection i could keep call epoll and -pron- would keep keep return an array with this",
    "bath be ready for -pron- -pron- can use -pron- ok so that be level detection just just check -pron- some current stat and include -pron- in this set of return event if -pron- be in the positive -pron- be byte be available to be read or the space available for -pron- to write more flight to back out to the client so that be -pron- level the other one be edge trigger ok let -pron- choose a new color here where -pron- just get notify one time that -pron- should actually do something with this file descriptor so the day that -pron- change from unintereste to -pron- to interesting then -pron- will call epoll and will get that notification just once -pron- be up to -pron- to actually then keep track of that because if -pron- just ignore -pron- if -pron- do not actually",
    "particular file descriptor be not go to include that in the result until the day that the bath be empty for some reason right -pron- go below go back down to the uninteresting case so this be call edge trigger meaning that -pron- be the change in state that -pron- be detect now how -pron- write -pron- code depend on on which version of these -pron- use there be a couple of advantage to kind of both approach arguably for level detection -pron- be a little bit simple code because -pron- be now -pron- can just simply say ok lyric thank -pron- for tell -pron- all the file descripter which need need processing and if for some strange reason i do not say to get to a particular one then -pron- do not matter because the",
    "life with edge to edge detection one advantage here be if -pron- actually get multiple thread then by be tell about this event only once then -pron- can ensure that a single thread that call epoll be assign that duty be assign the problem of work with that particular file descriptor because if other thread now call epoll -pron- be not go to be tell about -pron- -pron- be not go to be not decide this file descriptor a task because -pron- be kinda be use -pron- be common -pron- be be assign to a different file descriptor sort different thread ok so that be epoll for -pron- -pron- will look at this but realize like will see a demo this but realize like i say that there be actually two different way to use -pron- -pron- could say level detection or edge trigger meet only tell -pron- about the fire descriptor when -pron- state change from unintereste to interesting or ready ready"
  ],
  "f2346ed4-1e17-412e-91f1-e269250987e5": [
    "hi welcome to lecture fourteen so let -pron- dive in and have a look at some thread unlocked be -pron- ready ok so let -pron- get start right so take a look at this crazy code here and this work out what be go to happen on a sixty four bit machine and thirty two bit machine so -pron- first comment be how could this possibly compile hello be not an int ok so what do -pron- have here well of course -pron- have a string literal so this be go to behave as an array but can also decay into just a pointer point be the memory address of this first entry the age ok so that memory address could be treat as an int right which -pron- then store into this variable and then later -pron- say ok take that in value and pass -pron- so and change -pron- type back into a character pointer right so this give -pron- shiver down -pron- spine here will -pron- work one of the question be do -pron- feel lucky there",
    "-pron- be a little in a memory will be in a low address so there be a chance that -pron- could actually represent that use a c type int let -pron- think about this for a moment so -pron- could be on a thirty two bit machine where the integer for example may be thirty two bit and the pointer be thirty two bit in which case great everything be fine so there be a very strong chance -pron- work despite i be go oh that do not seem like compliant code yes so in practice -pron- would not want to write this but on a thirty two bit machine -pron- stand a high chance of work and in fact plenty of code use to be write like this where there be a spare spare parameter or a struct like a user parameter -pron- be just an in so people will just throw pointer in there ok that work for many year until the day that -pron- decide to try to compile this code onto a sixty",
    "when -pron- do this trick on a sixty four bit machine so now -pron- integer be only go to be thirty two bit still but -pron- point be can be much large -pron- have a much large space of number now address space now sixty four bit so in practice what be go to happen here -pron- be go to truncate the value only go to take the low thirty two bit the bit that actually can be represent by the end oh dear so be -pron- go to be lucky be -pron- go to be the upper thirty two bit be all zero well maybe maybe in this specific example because -pron- be test -pron- with a string literal and -pron- know that be likely to be in a low part of memory but in general if this be say appoint to malloc -pron- be unlikely to work once -pron- start have value great than what see about four gigabyte or so so so yes do not"
  ],
  "f4140b9d-47b6-45a5-b675-3e2e57dd9224": [
    "hi so let -pron- workout how -pron- can use real path to actually test something about -pron- directory structure and for example whether a file be truly inside the directory that -pron- care about alright so first of all let -pron- have a quick play with -pron- directly so here be real path and will see that -pron- be go to pass in the follow relative directory so that be relative to the current path of -pron- program the current path associate with this process and -pron- be not go to give -pron- any memory to write the result into so real path internally be actually go to call malloc be go to get some heap memory for the result which be why at the very end -pron- be go to free -pron- so -pron- will notice i put a little bit of logic in here to see whether -pron- actually would turn valid path or not will be play with that in a moment so let -pron- get start however just as this and will compile -pron- ok so just so -pron- know where -pron- be -pron- process directory be here and",
    "-pron- a second so -pron- have go miss semicolon so to fix that ok right so what be -pron- down -pron- be give -pron- a path which be the absolute path but as -pron- can see -pron- be drop two directory as -pron- have drop slash code slash lec27 at the top which make probably say because -pron- go to the parent directory twice so what about this suppose -pron- go into some subdirectory call -pron- sub one sub two and then -pron- go back out of -pron- ok so let -pron- try that what do -pron- think be go to do so -pron- will compile -pron- ok run -pron- again and this time -pron- be no such path so real path be do more than just simple string manipulation be actually test to see whether each part that",
    "find that directory -pron- actually have to go and make those place -pron- have to make sub one sub two so let -pron- do that -pron- can say make this one and then make do a sub one sub too if i want to do that in one go i could have actually say minus p and that would have make all of the child directory which do not exist for -pron- automatically so i could have do that even just one go but anyways so so now those exist so now when -pron- run -pron- -pron- give -pron- a non null path -pron- go into sub one go into sub two and then i say ok now i need to find a parent now -pron- find that so great be give -pron- canonical path let -pron- start talk about how -pron- can use this for something like a file server so which be part of a web server how can i make sure that i only serve content from -pron- web directory i do not want to start this happily send the content of arbitrary file ok",
    "but not only strcmp but strncmp so -pron- will see how these be useful so remember that if -pron- call sprintf nothing be go to appear instead -pron- give -pron- some memory -pron- say ok here be some memory on the heap that -pron- have already malloce and please write the string into -pron- so for example if i want to construct path like i may say ok look at percent s percent s and this may be say the the root of where -pron- be store all -pron- file and the request from the user of to what particular resource -pron- want that be great but i well make sure that this string that -pron- construct be no big than the heap memory that i require perhaps i just want to be lazy and say hey sprintf can not -pron- just get some heap memory automatically for -pron-",
    "that ok so -pron- just have to put in asprintf keep go down here here -pron- be -pron- will see that -pron- take a pointer to a pointer so now with asprintf -pron- actually say ok here be the result -pron- result variable and i want -pron- i want -pron- address because -pron- be go to change -pron- so so i actually have a little result for example that and that be go to be change and then later do not forget to free -pron- as well so let -pron- be good zero so -pron- could check to see if -pron- really work if -pron- want to write really robust code ok so let -pron- say where be i go to store -pron- file let -pron- say that all the file i want to serve -pron- inside",
    "say -pron- be a picture of a cat ok there -pron- go jpeg ok so great -pron- now know understand the user request so this be the kind of file to serve ok let -pron- put that quickly refactor that ok so now let -pron- actually see what that look like as a canonical path great so i will put that in as -pron- actual real path ok so i do not want to free -pron- just there be free -pron- later ok so now i can actually calculate the actual canonical path that -pron- be go to send back or send to the user ok so and -pron- notice that -pron- have get two string now on the",
    "file sub one sub to cat dot jpeg and touch do two thing -pron- create a file if -pron- do not exist obviously with zero byte and also -pron- have just go to change the modification time to just now so touch even if the file exist be modify the meta information about when the while be last change when -pron- be last modified ok so let -pron- give this a shot let -pron- actually try this and see whether -pron- get a valid path so let -pron- clear this    and run -pron- compiler so -pron- want clang on realpath demo great -pron- be give go back the actual path the actual canonical path of -pron- valid resource so if i want to double check that i truly be serve thing",
    "of the following in other word the canonical path should always start with the follow character that -pron- have highlight if there be a malicious user request resource for example -pron- may request dot dot slash dot dot slash dot dot slash dot dot slash etc let -pron- say message of the day or the password file or something more nefarious to do with -pron- web server now -pron- may claim oh i do not know how many parent directory to go up well -pron- do not take very long to try four and if that do not work try five and six and then seven and pretty soon -pron- be go to hit the original root directory so this be just a simple problem of enumerate these and typically -pron- be go to be less than ten ok so let -pron- try that so will",
    "reduce this well try will try a couple more ok oops i want a.out ok look -pron- actually find -pron- password file so -pron- guess the number of time to go up and in fact in this case because of the symbolic link which -pron- have not talk about yet on this machine etc / password -pron- be real canonical path be that follow private etc / password that be the absolute directory so if -pron- be to check this result -pron- would quickly discover that -pron- do not look like a valid subdirectory of of -pron- web server so what i should do then be check that the first say thirty character also truly be look like the base directory of -pron- web content so what i",
    "ok let -pron- do this be that will say that the base path can be for the web server that be go to be all the content inside sub one ok and now -pron- have get two path and now i just want to see if -pron- be valid so for this i want to say ok let -pron- compare the first n character so let -pron- have a look at the path of what -pron- 'd like versus the base path and -pron- will see if -pron- start the same so those be the two string i want to compare but i do want to compare all of the letter and -pron- want to compare up to the length of the base path ok so if -pron- be the same then great i now know that -pron- be look inside that subdirectory so -pron- can ok will check that return zero if -pron- be then will agree",
    "this be correct -pron- can say look valid to -pron- right otherwise let -pron- not give the user that file so let -pron- see if i get the number of parenthesis correct right ok oh wait i need to include strncmp so i have not include string.h    yet ok fine let -pron- get string.h each ok right ok let -pron- run -pron- and right now -pron- do not look like a valid file so -pron- do not serve -pron- so let change this back to something more reasonable like sub two and the cat picture ok so off -pron- go run -pron- again and great so now the request the file that -pron- be go to serve over -pron- web server look like a valid resource ok sure -pron-",
    "over here where i take the base path and i look at different request by use the argument but that be just repeat of the demo -pron- have just give again where -pron- use asprintf and -pron- use real path twice ok so that be kind of quick introduction to real path -pron- be very useful on on a mac -pron- actually have -pron- as a command so -pron- can say realpath look at the current directory for example on the linux -pron- be not build in but -pron- would be easy to actually make such a such thing because -pron- now know that there be a c call call real path -pron- just need to take the argument the other kind of thing to note be that -pron- can emulate this by do cd to current directory so for example sub one"
  ],
  "f4854068-5be5-4c56-b771-fcf375c9a2d2": [
    "hi ok so -pron- just start to see that -pron- can actually run thing in the background i can actually run multiple thing at the same time from the same shell so just a quick breakdown of what -pron- can do ok so let -pron- get start -pron- have see ampersand so this mean do not wait for the can not command to finish -pron- have get other thing to do ps give -pron- a list of process like ls extent stop instead of list from a directory be give -pron- process list and i can control that output i can see where the process be obvious i can see a even other process from other user now if i would care about all the job -pron- have be run in the background i can type job and then i can refer to specific job later by do thing like percent one percent two percent three to talk about -pron- other job run the background i can send job from the foreground to the background i can temporarily start and stop -pron- so for example if i send sigstop signal",
    "and by the way if -pron- press ctrl z then -pron- temporarily stop a program and -pron- can either then at that point -pron- start again send -pron- into the foreground by just type fg in bash or bg to send -pron- into the background and whatever -pron- want -pron- want something to keep run after -pron- log out then here be the way to do -pron- -pron- say no hub and then the program that will try to run and then let -pron- run -pron- in the background so now when -pron- quit out of ssh -pron- program do something can continue run and here be how this little program call no hub do not do much all -pron- do be just eat up another signal call c cup so that which which by default would kill -pron- process so -pron- can do lot of interesting thing with this but",
    "warm climate change and be the university resource that these be share resource do not try to -pron- coin on these -pron- will be discover -pron- will be find out and -pron- be not appropriate use so but let -pron- show -pron- a real example use of this be that now i recently -pron- need to do some analysis use python and i have a whole lot of different file to analyze so i quickly write the follow little script where -pron- can see i run all these different little program in parallel i do not need to wait for -pron- all and then afterwards i call weight in order to set ok before i continue i want for these process to finish so this be all under the idea of kind of job control very very easy to do and very powerful if -pron- want to start to kind of work on big problem the last thing -pron- have not talk about be redirection and pipe so",
    "so for example this look amount wc startup success ok find all the file that end with dot c in -pron- current directory and that of course go to standard out but i can save that output to a file so that be an example of redirection let -pron- do that ok so -pron- have get w c startup see what do wc do -pron- count up the number of character word and line in each program ok so now rather than send -pron- to stand out i can say please please go to say daily dot text but i can also do some other thing here i can take that output and for example i can print a little program"
  ],
  "f54b05e1-9f81-4fe4-a600-991b1977d3fc": [
    "hi welcome to lecture twenty so let -pron- have a code review where -pron- be go to talk about a little bit of code that use condition variable be -pron- ready ok so -pron- little application be very simple -pron- be just get two thread one thread some point be go to modify this value of x and then call signal another thread be wait for x d b positive so -pron- can think of this basically like a latch and only after -pron- be become positive do -pron- continue right so what do -pron- think about this code right so what do -pron- notice first of all that -pron- code over here on the right really do need a mutex lock before -pron- change value of x and -pron- signal ok let -pron- see why the problem occur be when -pron- call change at the same time that -pron- second thread be actually call in this wait for positive x let -pron- see where the problem could occur so -pron- have get this test here and then later maybe a few",
    "to block so here be the problem scenario what if -pron- have an interleaving of these operation such that change the value of x here happen after this test and call peter condition signal happen before the thread block and wait for signal ok so now what be happen -pron- second thread be go to deadlock -pron- be now wait for a signal that be never go to happen so right now yes -pron- have a small opportunity a chance that -pron- second thread will deadlock how do -pron- fix -pron- by lock on the same mutex because then the only way that -pron- can continue be after the threat have acquire the mutex so another thread will have to wait so now if -pron- do that -pron- become impossible to be execute these two line of code at the same time that these two line be be execute",
    "this if inside here so in practice this can bite -pron- in two different way first of all maybe in other application -pron- have multiple thread call this and -pron- really just want to ensure -pron- x really be positive before -pron- continue and other thing may change value x the second problem with this code be the actual deep condition wait be occasionally may suffer from what be call a spurious wake up -pron- never truly go to sleep ok right so why do that occur well let -pron- let -pron- go back and talk about the implication for how conditioned weight be actually implement right so -pron- have just see this problem of change in value of x and then signal too early before -pron- thread be actually block and wait for that signal to arrive so in practice what do this mean",
    "to behave as if -pron- be an a single atomic operation in other word there be no clock cycle no moment in time between between these two event otherwise the very same argument that -pron- just give here about these two operation happen just within that now window would apply to all of -pron- cause to p three condition wait ok so -pron- have to ensure that these behave can instantaneously together now in practice that may be impossible there could be a very narrow window between when -pron- unlock the window unlock the mutex and block so in practice if that may occur for example because i really do have multiple cpus run on different piece of silicon then what will happen be rather"
  ],
  "f6868da9-5be3-472a-ac74-0889cc0d698a": [
    "hi ! ok,&nbsp ; so imagine -pron- want to construct a string perhaps -pron- want to take some number and some other stuff and put -pron- all together before actually send out to disk or perhaps -pron- want to send -pron- to a pipe or perhaps -pron- want to send -pron- to a network but for some reason do -pron- actually want to construct the string while this be just send -pron- out so for that here be this kind of cool little function -pron- can use call asprintf and let -pron- change the laptop mode there -pron- go alright so let -pron- have a look at this -pron- look a lot like printf in a sense that -pron- be go to pass in a format string and then some variable that -pron- want to use with -pron- format string so inside that former string perhaps -pron- have percent s&nbsp ; percent d for an integer or percent something else four percent p for example for to print out pointer be a hexadecimal that all that good stuff ok but rather than actually send out to anywhere instead -pron- be go to pass in another variable here so let -pron- just kind of blindly guess to see what -pron- should do and will just make -pron- compile ok and then -pron- will find out how to actually do this correctly",
    "have a look at kind of question eight let -pron- see ok there -pron- go right i well fix this up question eight dot c so what do -pron- want to do inside -pron- little main method here i need a variable so -pron- know i know that a s printf take a variable have -pron- get -pron- in some kind of funky mode that ok right right case -pron- want to have available let -pron- call -pron- and will pass in pointer because i know that aspect take a pointer to a pointer to a car car so let -pron- just try that see what happen -pron- notice that for -pron- format specifier -pron- have get couple of string and an integer and indeed the remain variable be two string in an integer ok so let -pron- like this and compile -pron- gcc and -pron- great -pron- compile",
    "a case but when i run -pron- -pron- crash ok so what be go on here well first of all -pron- just blindly guest and change -pron- code and tell -pron- compile but instead maybe -pron- get well understand what -pron- sprint efron do and so if i still read the man page about this -pron- discover actually what as printf do be -pron- be go to allocate some memory forwards and that memory be on the heap and then change the variable that -pron- provide -pron- so actually the code that -pron- should have write be to have a pointer ok so a pointer to a character ok -pron- be point at one character but -pron- and i know that actually -pron- be go to point one memory address for the character but then the remain character then remain byte can be use for more character -pron- have whole c string and rather than just pass where that pointer point to -pron- very sneakily be",
    "i want -pron- variable to be change by asprintf so that be exactly what error be go to do be go to call malloc be go to construct the string in memory and then -pron- be go to change -pron- pointer to now point to that -pron- could prove this let -pron- have a look let -pron- initialize be point to be something like null and then after airs printf be run let -pron- print the value of -pron- pointer so pointer be now a more printer as a hexadecimal pointer value and k and at and at that location -pron- will use -pron- as a string ok so i want -pron- pointer and also i want -pron- pointer again ok there -pron- go alright and this time -pron- will",
    "ok and now let -pron- run -pron- ok and now -pron- see look -pron- point have be change to another address and the content of that location o x seven eight etc be now the kind of the follow output ok and then later vim when -pron- have finish use use that memory i can call free on that location ok i do not want to free -pron- address of -pron- variable i want to free the value of -pron- ptr variable in other word what -pron- be actually look at ok so let -pron- compile this free -pron- better include the right library light how can i discover what that library be let -pron- use the"
  ],
  "f7acd66f-6e2d-4d16-ad5b-83adf8627df9": [
    "hi , so let -pron- think about how -pron- can implement a version of strcat . in other word , -pron- want to concatenate one string onto another . so okay , do -pron- have a pointer , okay , great . so -pron- want to take two pointer here . -pron- be go to give a hint to the compiler that -pron- second pointer to a character be actually a pointer to constant character . in other word , -pron- promise the follow code will not actually change or modify those byte . so , as usual , -pron- read this backwards . src , source , be a pointer to a constant character . yes , -pron- be just point at a single character , but by offset , by either move that pointer or by use the array index or point arithmetic , -pron- can actually look at the byte after that address . ok , so let -pron- have a look at the code that be currently",
    "or two . right , so while asterisks pointer , in other word , follow that variable . let -pron- have a go and look at what be actually inside that memory . this be very common with pointer . what do -pron- want to do ? -pron- actually want to go and see what -pron- be point at . so this look like -pron- be try to check to see if there be a zero byte there , because if -pron- get to the zero byte , great ! -pron- know that -pron- have reach the end of this c string . [ indistinct word ] the reasonable request . ok , what be go on here ? inside this loop , destination equal source . wait a moment ! that be just copy the value inside these variable . in other word , -pron- be not reach out to that memory . instead , -pron- be just change d to be equal to the same value of src . in other word , great , now -pron- have get two pointer that both happen to be look at the original string . that be not what -pron- want to do at all ! -pron- want to be copy some byte . -pron- want to be actually copy one byte at a time from the source into the destination . so what be miss",
    "ok , how can -pron- do that ? well , what be miss here be dereference the pointer . that be actually go to look at the memory that the pointer be look at and similarly on the destination site . so -pron- should have throw in some more asterisk here . ok , so -pron- have copy a single byte . ok , and now what do -pron- do ? -pron- advance -pron- variable . ok , well now these variable be point at character , so by add one , -pron- be go to move just to the next character . in other word , -pron- and -pron- know that -pron- will move forward to look at the next byte in both case . ok , -pron- code be look a lot well . right . except -pron- have get a couple of problem here . first of all , -pron- be suppose to be implement strcat . the idea of strcat be to advance beyond the end of the exist string at destination . so how could -pron- do that ? how could -pron-",
    "of the string , but to actually move -pron- forward . so with that , let -pron- get -pron- a work environment here . right , get rid of those , delete those . ok so -pron- be go to need editor . let -pron- do vim today . so , what do -pron- call -pron- ? mystrcat ok . ok , great , so -pron- be implement , let -pron- see , ok , a void mystrcat , and -pron- take a destination and another pointer to source . right , so -pron- need a way to move destination to the end . ok , here be two way to do -pron- . -pron- could keep advance until -pron- get to the zero byte , because -pron- that zero byte -pron-",
    "-pron- could say dst plus plus . keep move the destination until -pron- get to the end . so that be one way or how about destination plus equal strlen of d . ok , so -pron- can decide which one -pron- think be more readable . -pron- may argue that the strlen version be likely to be fast , because -pron- know that strlen be likely to be implement use innate assembly instruction if possible . so -pron- be probably go to be fast than anything -pron- can write in just plain c. right , so -pron- have change dst to now move to the end , and now -pron- want to copy across those byte . well again , -pron- would probably , if -pron- care about performance , then just use the strcat",
    "to keep go until -pron- get to that zero byte of -pron- source , and -pron- be move byte across , so , hey destination ! \" please take the source byte . \" \" \" ok , and then -pron- be incremente -pron- . now -pron- actually want to move the pointer -pron- . -pron- do not want to change the value inside each of those memory location . -pron- be just move the pointer to look at different byte . ok , so what do -pron- think of that ? have -pron- get a reasonable implementation of strcat ? so -pron- will give -pron- a go . let -pron- see if -pron- can actually make -pron- work . ok , so let -pron- run a quick test here . and whilst -pron- be write this , why do not -pron- think about why and what bug -pron- have introduce here . so standard io dot h. -pron- want int main , argc argvalue . ok , so how about the follow ? -pron- have a destination and",
    "what should -pron- source be today . -pron- could be a b c. ok , and -pron- will try mystrcat for to the destination from the source , and then -pron- will try print -pron- out . ok , so today let -pron- use printf result be , and -pron- need to give -pron- a point , ok . and let -pron- add a new line , ok . and let -pron- finish . ok , so do -pron- decide what error be inside here ? and , hint , -pron- may have deliberately \" implement another error . ok , perhaps -pron- say , \" \" hold \" on a moment , -pron- be actually , on line four and six , -pron-",
    "\" at twice . \" \" yes , -pron- agree that be a bit silly . would -pron- actually \" cause a problem ? well no , because right now if -pron- have move to the end of the string , then strlen will immediately find that zero byte . so -pron- would actually just return zero . so -pron- would actually become just a zero operation if -pron- have actually implemented-- if -pron- do both of these operation . so let -pron- pick one , -pron- be have fun with pointer today , so let -pron- just comment out the strlen version . and \" ok , -pron- will put , \" \" work \" \" but -pron- be use the one above . \" \" ok , \" ok , so -pron- have get -pron- little while loop now to now copy the byte . right , and here be -pron- little test . so -pron- be go to try and test -pron- program here . -pron- have get two pointer : destination source , and let -pron- first of all try run this , but perhaps -pron- can guess what be go to happen . so ok , -pron- will quit this . let -pron- compile -pron- , mystrcat , and -pron- will",
    "right , so if -pron- be pay attention , -pron- may have notice that what be -pron- pass into -pron- little function here , mystrcat ? -pron- be pass in -pron- variable destination but do -pron- initialize -pron- ? no ! and -pron- be a stack variable , so -pron- value could be anything . -pron- be go to guess , between -pron- and -pron- , that -pron- be probably point at nothing just because -pron- be deal with a fresh process here , because -pron- stack be probably go to have some zero byte in that memory , but that be just purely by chance , purely just what happen to be in memory at the time . so -pron- should set -pron- equal to something . -pron- may try abc etc here , but -pron- have get a problem here . that be go to be read only memory . -pron- well actually get -pron- some memory that -pron- can change . how can -pron- do that ? well -pron- get a couple of option . -pron- could have some heap memory . so here -pron- go , let -pron- have a hundred",
    "want to have an array . so let -pron- have an array of , say , sixteen byte . here -pron- go , and -pron- will set the first byte to be , let -pron- say , a little x character , and -pron- better set -pron- little string to finish to be something else . ok so -pron- need a zero byte here . -pron- could also have just write \" zero , but -pron- be choose , instead , a way to say , \" \" ok as to zero , \" not a zero digit , but what be call something like \" the null byte at the end . \" \" great , so -pron- have get that set up , \" now let -pron- actually try run -pron- little code here . ok so will run -pron- , -pron- will compile -pron- , and -pron- will run -pron- . and oh look ! -pron- appear to work , but be -pron- code correct ? yes , -pron- certainly append abc , but do -pron- notice any problem ? ok so , the thing -pron- be hope -pron- 'd say be ....",
    "copy the zero byte at the end . so -pron- appear to work simply by luck . simply the fact that after the end of the x abc , there just happen to be a zero byte there . so -pron- sequence of byte happen , just by luck , to have a zero byte at the right place , just because that be what happen to be in the menu at the right time . so how can -pron- fix -pron- ? well -pron- need a way to actually assure that -pron- have copy that zero byte . a couple of way -pron- could do this : -pron- could use a do while loop , so that -pron- only quit after -pron- have copy all byte include the byte , or \" -pron- could just explicitly put in a , \" \" ok , destination , -pron- \" \" need a zero byte here . \" \" so again , -pron- could write this or \" \" let -pron- , just for fun , write -pron- the other way which be , \" \" hey , \" \" here be a little value zero . \" \" \" ok \" now , some of -pron- may be ask , \" \" can mystrcat know \" \" if -pron- exceed the sixteen byte that -pron- assign ? \" \" \"",
    "take -pron- on trust that byte that -pron- be go write into be of valid location . so that be why c programming can be exciting . -pron- have actually get to make sure that -pron- think carefully about -pron- memory location . -pron- be up to -pron- to wield this power and this fire correctly . so only set fire to thing which be suppose to be on fire . alright , so with that -pron- will commit this , and let -pron- go back to the little example here . ok , right , so -pron- can -pron- can actually consider , -pron- 'd actually kind of walk through and single step -pron- program , and let -pron- see . -pron- could actually think about how this , how this actually write byte a single line at a time , a single character at the time .",
    "yes , -pron- do ! ok , right so , -pron- can look back at -pron- code and imagine that if -pron- have pass in a source , the follow memory location and a destination at two thousand , -pron- could actually kind of evaluate what actually -pron- process do . so let -pron- set up a little example here where , in -pron- source , -pron- have get the following , and in other location , -pron- have get the follow . so now let -pron- actually look at -pron- code . where do -pron- go ? ok and -pron- will make -pron- a little bit small so -pron- can see both at the same time . ok right right so , -pron- want -pron- ...",
    "right , so initially source be ... wait a ... wait a ... right , ok , yeah , -pron- have get -pron- . source be look at the one thousand and -pron- destination be hold two thousand . right , so -pron- code on line four be go to keep read these byte until -pron- get to the zero byte . so -pron- read the two , ok , and -pron- increment , increment , increment , and -pron- be only when -pron- read the zero byte do -pron- escape that initial-- that initial line-- that initial while loop . right , so then with -pron- destination point at address two thousand and three , -pron- start copy in byte . so , -pron- be go to copy the exclamation point into"
  ],
  "f815b599-ae2e-4d57-9c3e-b1834f484942": [
    "ok so let -pron- get out of the weed for a moment and talk about signal kind of in real life first of all pathsss -pron- want to write a web server so very famous one be apache and apache like many other program have configuration file and like many other program -pron- want -pron- server to keep run so just because -pron- have change part of the configuration file be kind of annoying to have to disconnect user so instead the apache web server feature a little cute little feature which be if -pron- send this particular signal call sick sick hub -pron- will automatically re read the configuration file -pron- be not go to do anything to exist user -pron- will continue to satisfy -pron- request but all new request that web server will be use the new configuration that -pron- have just describe so that be kind of pretty cool also java next time -pron- have get java process maybe kind of out of control or stick",
    "what -pron- be hip be and also what the threat be do so this be kind of a cute little trick if -pron- be ever do an internship but for example a place -pron- use java -pron- can actually go in and see exactly what be happen and plus -pron- get to scare people on a production server when -pron- say oh do not worry -pron- be just go to send -pron- send sig quit to -pron- java process that be handle all of -pron- million of dollar so let -pron- see what happen ok so here be a little program that i make early ok and java ok so the bit i want to show -pron- be that -pron- job of program be multithreade -pron- be get a concept of thread and in java -pron- override the run method so all this be go to do be keep look at the day of a file in fact look",
    "so just to check to see if -pron- do not touch -pron- right so -pron- will find the date of when this file be last modify and if -pron- change -pron- will send -pron- a warning message out ok so -pron- be go to be busy keep go around inside this loop check the date as fast as -pron- possibly can right so that be the code -pron- know and also -pron- set the name of the thread to hal nine thousand hope -pron- know the movie reference and then let -pron- start that run through -pron- ok so i want to run this -pron- be go to say write java please run -pron- app and i go in the background now if i be run on lenox this would actually print out the process id why because here -pron- be open a special file call slash proc slash self and that be normally a symbolic link in lenox to the process number so",
    "-pron- be run on a mac so that do not tell -pron- the process name right so what be -pron- go to do about that well fortunately i could do several thing i can for example use ps and that would be a huge list of all process there be even a version with java however there be just print out to java process so there -pron- go -pron- find out -pron- process id of the currently run program so now great i can send a signal let -pron- do sig quit to eighteen seventy and -pron- will print out a whole load of stuff let -pron- see if -pron- can make -pron- a bit small and see what -pron- be do ok right so -pron- have get stuff about the heap how big -pron- be java sleep be a much more complicated model because -pron- -pron- try to try to put object be try to live for a short period of time versus a long period time in different part of memory -pron- can see all the different thread -pron- be get four thread just dedicated to be",
    "get another thread reference handler finalizer all look here be a signal dispatcher that i mention so somebody write the code to handle signal for that -pron- have get more compilation thread i get service date but finally here be that health read the code that -pron- write and -pron- will see that -pron- can see a stack trace so this be pretty cool next time -pron- java program deadlock so be just use a hundred percent cpu time -pron- can see where -pron- be at that last moment and -pron- can see -pron- be actually currently spend -pron- time inside the system here get that last modify time alright so so that be kind of a use of real real use of signal -pron- want to make sure that -pron- actually kill this thing so let -pron- now -pron- java process ok gotcha so java ps great",
    "in term of work with production system here be some advice on how to delete -pron- entire company so all -pron- need to do be have a have a variable like this perhaps -pron- write this inside a script or maybe -pron- download an installation script an inside that script or what -pron- type there be a typo ok so here -pron- go -pron- have get an extra be here so what be bash do hear -pron- try to expand this variable but this variable do not exist so this variable will instead expand nothing in other word this last line say o m minus rf so recursively and four so if -pron- find a",
    "just slash so all of this other stuff do not exist once -pron- have expand that variable in other word -pron- be just try to delete everything because -pron- have mount -pron- backup disk that be not only go to delete -pron- local file -pron- will delete -pron- backup file as well who a congratulation -pron- have just manage to delete -pron- entire company right now often today olympic will actually say be -pron- sure -pron- intend to remove everything and -pron- will not do that -pron- will refuse to operate until less -pron- put another option input no preserve root but still there be plenty of other story of people delete everything from -pron- home directory or count directory simply because of a small typo here or thing like a space inside a path so be warn be careful and check pass before -pron- start randomly delete thing right"
  ],
  "f84e2260-9145-46a3-bdce-409d6138324a": [
    "ok so let -pron- start talk about how -pron- can use -pron- man page and the idea that the man page be actually divide into separate section . right , so for example , -pron- happen to know that there be something call , a really useful function , call stat that will tell -pron- a lot more about a file . -pron- can find out , for example , who can access -pron- , who own -pron- , how big -pron- be , so let -pron- go find out about stat . right so let -pron- try this . and -pron- type man stat and , this time , -pron- actually do not get what -pron- be look for . actually , -pron- turn out there be not just function call stat that -pron- could use inside -pron- program . there be actually something that be part that -pron- can call for -pron- command line call [ stat?stats ? ] . so if -pron- get up off edit mode here , let quit that , right , so for example , if -pron- say stat on the command line , -pron- can find out some information about the current directory , and -pron- could have give -pron- another",
    "similarly if -pron- type kind of open , then -pron- would tell -pron- about the bsd opening manager -pron- could run from the command line . that be not what -pron- want . ok so let -pron- stop that and \" instead say , \" \" ok hey man , -pron- want -pron- to look inside a certain \" \" place . \" \" perhaps -pron- actually care about section two which \" be the system call and now -pron- have get , great , the actual information -pron- want to do with system call that -pron- can make call open . or -pron- want to know about the stat , and great , -pron- have get all the version of stat that -pron- can now use on -pron- apple system here . so section two be reserve for kind of system call . what about strlen ? so if -pron- ask for strlen , there be no manual entry for strlen inside section two . why not ? strlen not a system call . -pron- do not need to go back to the kernel",
    "\" to figure out how long -pron- c string be . \" \" -pron- do not need \" to invoke the whole operating system for that . -pron- can do that directly inside -pron- process 's memory . so for thing which be part of the c library , -pron- just need to go to section three . and so that be where -pron- will find strlen and other thing like strcmp to compare two string , or say strcat . so [ indistinct word ] up to specify the system area , sorry , the manpage area of the section be useful when there be multiple entry . there be one other entry that -pron- will see sometime in the future which be section seven , that be for long article . and -pron- will discover thing , like p thread and signal , actually have much long article which be part of section seven . so -pron- can make a note of this here , right . so let -pron- get -pron- little pen work here . right , so if -pron- want to talk about , if -pron- want to find out"
  ],
  "f8b87906-763d-4c78-8224-d88dd43fdd87": [
    "ok right so signal disposition be per process -pron- describe what -pron- should do with the signal do -pron- want to just ignore -pron- do -pron- want to terminate the process or do -pron- want to run special some special signal handler that -pron- that -pron- have instal ok so that be kind of basically -pron- option or some kind of handler and so the signal disposition be preserve when -pron- fork in other word if -pron- say hey i do not care about this alarm signal i do not care about the c child then or say sigpipe then that will also be true for -pron- child when -pron- exec -pron- also maintain some of the signal disposition except what do -pron- think have be reset yeah so when -pron- exact any handler that -pron- have define -pron- be go to need to disappear because that code for that handle no long exist -pron- have replace the entire process image so instead for these special",
    "district dormant maybe that be to terminate the process etc right so -pron- be six position be basically what be go to happen when a signal be deliver ok but -pron- want to be able to block signal so how do i do that ok well to block a signal -pron- can use signal mask mask so this be basically -pron- shield to say hey do not tell -pron- about singe right now and there be two variation of this if -pron- be write a multithreade program then use p thread sigma ask if -pron- be not ready go multithreade program then there be sig park mask but -pron- both work the same way which be that -pron- can turn on and off individual bit correspond to different signal so -pron- will be a bit associate with sigint for example right now what do -pron- think will happen then if -pron- be in a multithreaded",
    "press ctrl c be block on thread number say two and four out of -pron- four thread one two three and four what will happen now if someone really do press control c and generate a signet which thread will get that signal so -pron- block -pron- on two and four which mean -pron- may be deliver to thread number one or thread three -pron- do not get to say i guess -pron- be a bit late say -pron- have get a fortress -pron- have pull up most of the drawbridge maybe in most of the window be shuttered but -pron- leave open the window one and three so zombie attack can happen -pron- either of those window there zombie -pron- enter through window one or enter through window three now in this case cause -pron- be not talk about actual zombie",
    "and i run a signal handler like ok -pron- be go to process sigint that mean -pron- be temporarily go to steal the cpu away from whatever that thread be do perhaps -pron- be execute -pron- really important little for loop to calculate something well -pron- be sorry -pron- be go to steal those cpu cycle right now just a little moment to run that piece of code that signal handler code so this be why the signal mass can be very very useful i can say that -pron- know -pron- have get some thread which i do not want to actually process any signal so i can send a signal mass to say hey do not deliver the signal to this particular particular thread if -pron- have get more than one thread that have not set -pron- signal mask for a particular signal then which one that actually receive the signal be arbitrary and then when -pron- first create a thread -pron- will inherit the signal mask of of the create threat basically",
    "see multithreaded code first of all set the signal mask to say hey just block all signal i do not want to know about -pron- right now then create all the thread that need and then inside say one thread start change the signal mass to say ok this be the thread that i want to be interrupt in order to process in order to run the signal handler so that signal masseling -pron- be very very useful when -pron- want to write more complicated program ok so let -pron- go and have a little look at this cape right and so there be quite a few posit call -pron- can use to kind of work with work with single and before -pron- kind of jump in there with this kind of mention one last thing kind of pende signal remember these be the signal which have not yet be deliver",
    "-pron- child which be initially create by fork do not get a copy of the pende signal set so a child always have no pende signal ok but that be not true for exactly year so -pron- could set up an example where -pron- after fork -pron- inside the child -pron- create a pende signal so how may -pron- do that well -pron- would need to set up a signal mask at some point so that a signal can not be deliver so after do that -pron- can create a signal how do i create a signal i could call kill for example i may have some action or call alarm for example but anyway i have now make a pende signal maybe -pron- kill be go to to generate a kind of sigint signal",
    "receive that that signal and the moment that child change -pron- signal mask to allow signal to be deliver then that signal will be deliver on the child right so let -pron- review how -pron- can kind of send signal and catch signal ok so ok so first of all to send a signal -pron- several call that -pron- maybe -pron- see already so first of all here be one -pron- have probably see kill where -pron- could specify a process possibly -pron- by call get pid and the signal number and then -pron- have raise right what do raise do that call kill on -pron- so so raise be equivalent to call kill but with get pid so -pron- be",
    "ok then there be also a version where -pron- can send a signal use a specific thread as well so there be the peace roadkill variation which -pron- may want to use any multithreade program ok now what about actually catch signal there be ok this several interesting thing can kind of know about this first of all -pron- have see signal of which allow -pron- to install a signal handler ok so one downside of signal be that -pron- be exact behavior be not precisely specify and actually vary from operate system to auto operating system for example what should happen if -pron- be in the middle of a signal handler and in other signal be be deliver be allow to be deliver -pron- should -pron- remain pende different operating system have interpret signal in different way secondly a signal be not actually",
    "so a well way be to replace -pron- signal call -pron- have something call sig action which be old much more flexible and -pron- kind of interesting interface to use -pron- can do a lot more with the action ok right now so that allow -pron- to install an asynchronous signal handler in other word no matter what -pron- code be do when that signal be deliver these two call allow -pron- to run some code at that moment asynchronously there be some other way to work with signal however one be that if -pron- want to synchronously wait just to say ok now -pron- be go to wait till signal happen -pron- can call signal and specify a particular signal but -pron- be a more interesting way to do -pron- -pron- could actually get a file descriptor whose only job be to tell -pron- about signal which have be deliver so -pron- can set up -pron- own special thread just service deliver signal and the advantage of do this be that -pron-",
    "problem -pron- have with the code that -pron- write use signal handler with signal handler of this be tricky because -pron- be basically go to interrupt -pron- normal code at any moment -pron- may be deep inside malloch -pron- may be inside printf and with steal that cpu in order to do something else and most program most storied libra call for malloc to print jeff and not reentrant be not allow to in the same thread restart recall these thing because -pron- be inside a signal handler so instead signal fda allow -pron- to write a loop and pull when -pron- wish one signal at a time and just therefore treat -pron- like just any old another kind of another thread -pron- have reduce the complexity of -pron- program significantly ok right let -pron- see -pron-"
  ],
  "f8cd1533-dec2-4250-9e5f-bc34e9a3181a": [
    "hi ok so let -pron- take a look at some code that i find on the internet that claim to solve -pron- dining philosopher and -pron- will analyze -pron- and see what -pron- think ok so here -pron- go -pron- use all the good stuff that -pron- now understand -pron- have get a little structure here call philosopher and -pron- can see -pron- be go to be type deft so that -pron- can just say philosopher later on inside that -pron- be go to have a pointer to the left fork and the right fork and of course a philosopher have a name and associate with -pron- ap thread and some output variable say whether -pron- fail or not ok -pron- have a global variable to see whether this program should keep run or not ok and let -pron- have a look see how thing get initialized ok so -pron- have get a new way of character pointer and that be just a name of five philosopher would like today -pron- be go to have five mutex lock -pron- be go to be -pron- fork and five philosopher ok so",
    "initiate or four five mutex lock here -pron- go and so -pron- just get five meter lock initialize great and then further down great let -pron- actually initialize -pron- philosopher so that be just a simple stack away -pron- be ok to do this on inside the main threat because -pron- will see all of -pron- thread which be go to run finish before -pron- exit make right so great let -pron- get -pron- a philosopher will get the i th one will initialize -pron- name will initialize -pron- leave hand and right hand fork to be one of -pron- five mutex lock look -pron- be use modulo arithmetic so that the fifth philosopher wrap around and get to zero for kid game right after set that all up let -pron- start off threat will call preferred create will",
    "run some multithreade code which will look at in a moment i learn the rest of -pron- main thread do not do much -pron- sleep with forty second then change run and now just wait for those five threat to finish if something fail in other word if this will flag be set for eight five plus versus inside that struct will print something out that something do not work otherwise will exit ok so that be -pron- main threat now let -pron- let -pron- have a look at the code that -pron- get that be run by each philosopher oh yes and here be -pron- source ok so each philosopher be go to be give a pointer to -pron- little struct there ok so each plus be go to get -pron- own unique name etc right so -pron- also have some local stack variable which mirror what -pron- find inside the",
    "-pron- little thread go to do here so for forty second until that global variable be change the first thing that -pron- -pron- philosophy do be sleep in other word thank a bit so will print out -pron- name then will sleep for and amount of time so in this case let -pron- sleep for say some two one and eight second alright and then the philosopher go to pick up the two folk alright so let -pron- declare that the philosophy be hungry and then -pron- will try try to pick -pron- up ok now this look a little bit more complicated than -pron- may expect let -pron- look at this carefully ok so whilst whilst -pron- be still run and this be a do while loop which mean -pron- be only go to while feel i think i should be not fail but let -pron- see all chill at the moment ok so -pron- be go",
    "after -pron- run through this code once i know notice -pron- be fray i apologize the logic as give incorrect let -pron- have a look see what -pron- do first of all philosopher waist to pick up the fork on the left ok so that be only go to proceed once -pron- get exclusive access to that particular fork alright and then -pron- be go to change this local variable fail to base on on what happen when -pron- try to pick up the the fork on the right so notice that initial value of try leave be too so actually -pron- be go to call this function call trilok which -pron- have not see before trilok never block instead rather than block if -pron- be unable to acquire this mutex -pron- just return an error number return a non zero value so the very first time that -pron- run this code with twice leave equal to two if -pron- catch acquire that",
    "fail -pron- immediately unlock the left hand thread great -pron- say this look a lot like -pron- be not go to implement holding wait -pron- be not hold onto the fork on the left -pron- be definitely release -pron- so then what do this code do well -pron- -pron- actually swap the meaning of the left and right fork so i like to think of this as the false for crosse -pron- arm or uncross -pron- arm because -pron- be go to go around this loop again but this time -pron- be go to grab the other one first ok so this idea of what be on the left be actually just be swap over by crosse arm and -pron- decrement try by one k so -pron- repeat this on the third try however -pron- do not use trilok instead -pron- call mutex lock so the only way to get out of this loop be when -pron- have truly manage to acquire the left and right mutex lock what do -pron-",
    "say want nine second want to eight point eight second and then -pron- release both look ok then -pron- go round the loop -pron- keep go until -pron- have hdr forty second be up so what do -pron- think about that be that code correct do -pron- correctly implement ok so with a little bit of thought -pron- could say actually no this do not prevent deadlock now -pron- may agree that deadlock be unlikely but -pron- could imagine a scenario where for the first two time all philosopher hit this trilok and fail because every philosopher be hold onto -pron- left fork and then when -pron- all try again there now hold onto the other folk but the trilok each time fail on the third time or philosopher first lock -pron-",
    "on the right in other word -pron- all get block so yes there be a chance that all -pron- possible will will deadlock because all wait for resource -pron- be never go to be release so oh dear this apparent code on the internet be not smart enough to solve this problem so yes lady and gentleman as a series two forty one student now smarter than the internet ok so -pron- can prove -pron- can show the circumstance in which deadlock be can occur this actually see if -pron- can actually see that occur if -pron- actually run this code in practice so here be here be the same code that i prepare early i want to get out of this and go to handout but code k there -pron- go right go to code but i need cs two forty one lecture code right",
    "p thread ok finally great let -pron- ok off -pron- go oh alright look at this -pron- have run into deadlock where all five be hungry at exactly the same time so in practice causing this be actually actually difficult let -pron- just run -pron- one more time will see if -pron- can generate -pron- so -pron- can see no expense spare on the graphic -pron- have get five philosopher go through the state of either hungry eating or sleep and yes -pron- run into deadlock again this actually kind of take a look at this code because i want to show -pron- that i actually have to work a little bit hard to make deadlock occur here so i want to reset -pron- group right and let -pron- pull",
    "ok so right right so i have to do thing like introduce an extra moment in time between when -pron- first do the first lock and when -pron- attempt to do the second lock so i implement thing like a slow pick up here in order to give great opportunity that all five thread word acquire the left hand lock that be interesting be that right now -pron- be record this so one of -pron- cpu core be busy capture the lecture content the video content so i be actually surprised that so quickly run into deadlock the other thing that i do to try to make -pron- more likely be -pron- be use micro sleep too actually sure that -pron- have an opportunity for deadlock",
    "or so over forty second window so opportunity for deadlock be be only handful of time order of ten time or so -pron- would like -pron- to be much high alright so yes i have i can run -pron- in slow motion let -pron- see how -pron- do that -pron- can see -pron- ok so set also certainly buffer so that -pron- do not have to wait for for a new line to print -pron- ok so i get slow motion if i do -pron- s k so be go to see and -pron- be in there ok right so let -pron- just run that ok and -pron- will say slow motion so now -pron- can see off -pron- go right ok so that be dine philosopher -pron- be relatively easy to write solution which appear to work but"
  ],
  "f8ecc9da-31e3-4c40-bd72-4df6058e9d24": [
    "ok , good morning , and good afternoon , and good evening whenever -pron- be watch this video . so welcome to the second record video , that be lecture three of cs 241 let -pron- get start where today -pron- be go to look at a day at the c side , so if -pron- wish -pron- can look at the hand out and the code example or -pron- cs241 lecture repository . so -pron- first little puzzle for -pron- be the follow : what do -pron- think the result or the value of this expression will be ? and -pron- clue be that p be a character pointer and -pron- be initialize to point to the following . so , take five second to have a guess , and -pron- will tell -pron- the answer in a moment . ok , so p be hold the memory location of that string literal , that constant , and inside that memory , -pron- know that actually there be go to be four byte , the capital s , \" y , the s ,   and the zero byte to say , \" \" hey , no more byte please \" \" . \"",
    "go to evaluate to ? well , when -pron- pass a strlen in this memory location that be hold by p , strlen be go to walk along , read a byte at a time , until -pron- get to that zero byte , and then report to -pron- how far -pron- go , and in other word , how many character be actually in the string . so in this case , -pron- be go to read the s , y , the s , and then the zero byte , and -pron- be go \" to say , \" \" actually -pron- have to read three character . \" \" so strlen \"   be go to evaluate to three . so what be the result of call p of three ? well , in this case , that mean that -pron- be go to advance to that zero byte at the end . ok , so the result of that expression be zero !   and of course , this be go to be true for most string , provide -pron- pass strlen a valid memory location , so in other word , if p be a valid pointer",
    "to delete -pron- little mark , there -pron- go . right , so let -pron- think about how strlen may work in some different situation . if -pron- call strlen with an empty string , that be still go to be a valid memory location . -pron- be just that the very first bite be that zero . \" if -pron- call strlen with an \" \" at \" \" , then that , of course , \" \" will work , and -pron- say , \" \" -pron- be a string of length one , \" \" and \" actually that string of course as -pron- now know take two byte . but strlen be not always go to work . if -pron- pass -pron- an invalid memory location , and here be one that everybody know for example , null , which be implement as address zero , then -pron- program will crash . this be not a fault of strlen . if -pron- actually know about strlen , -pron- would know that -pron- be only guarantee to work if -pron- pass in a valid location . so strlen be not break , -pron- be -pron- incorrect use of strlen , and in this case , strlen attempt to \" read a byte , but -pron- processor say , \" \" hold on a moment , \"",
    "so how do -pron- find out more about the function that -pron- want to use inside -pron- function inside -pron- program ? for example strlen or something else , at which point \" -pron- say , \" \" ok to get the scoop on the actual specification \" \" of how thing be suppose to work , use the man page ! \" \" \" and -pron- can access -pron- from the command line on kind of any normal unix system . so for example , let -pron- go have a look at the man page of strlen . -pron- want to get rid of -pron- little mark . there -pron- go right so let -pron- go and have a look will type man of strlen . so go and find the man page of strlen and here -pron- be on -pron- mac system , so -pron- describe exactly what -pron- do , and also will will describe exactly return value . so"
  ],
  "f93d7eee-504a-401c-940d-9680e03614c3": [
    "ok sir let -pron- have a quick review of use kind of file metadata how can -pron- implement the follow so that -pron- can check to see if the abc at the current directory be a directory or not so of course -pron- be go to use the static or for that system call for that and here be a directory and -pron- want -pron- result to be put inside that struct the stat dot so the first thing -pron- may want to do be the follow why i want to say ok so clearly inside here -pron- want to say let -pron- have a look at the mode bit case so s t mode and see if the be directory bit have be set inside there and this little macro be just a simple little macro to put out one particular bit out of that integer",
    "good however -pron- have get one big problem which be that what if this stack call fail for example suppose there be no file call abc at all at which point the value of this mode here will be what ever happen to be in the stack at the time so -pron- should only trust that if the stack call succeed so two way to do this one be to check -pron- right so -pron- would check that k that ok be zero for example personally i would put the ok at the beginning as a test before dive in and check value or but -pron- will see a lot of system code do be actually take that stat and put -pron- directly inside the expression rather than assign -pron- to a local variable ok but if -pron- do that be then great this will work now",
    "to a directory where the code that -pron- have get right now will report that abc be a directory why because -pron- use just a regular kind of stat and that will follow symbolic link automatically if -pron- actually want to find something about the actual symbolic link then -pron- would do thing like else tap for example to actually look at the original link and then -pron- could also do thing like ass be what be -pron- physical -pron- look something like be lnk there -pron- go to check to see if -pron- be symbolic link but that will only work if -pron- have use elstat not stat otherwise -pron- have already follow the money and as usual -pron- be pull in the mode bit there so -pron- write s t underscore mode ok right so that be the metadata there what do -pron- got",
    "question right so yeah if i want to find out if -pron- be a symbolic link yet -pron- should use l stat and also let -pron- take all of that and stick -pron- in here so will check to see if that be equal to zero for succeeded and also will s link here -pron- actually want to check on the mode bit ok so great -pron- fix that one and -pron- last question of this letter ok so what do -pron- think will happen if -pron- keep call open there and never call close there what will -pron- run out of so that be the kind of question where in real code -pron- will see -pron- work in like testing but the moment -pron- put into production seem to work and then -pron- go home three o'clock in the morning -pron- suddenly start to fail what be -pron- problem here -pron- problem be that eventually -pron- will run out of file descriptor so feilde right be file"
  ],
  "f95595a2-cfee-4a7b-942b-a5818fd21a55": [
    "hi work to lecture seventeen so -pron- be go to look at use -pron- producer consumer and how -pron- can use county semaphore to implement this correctly and then -pron- be go to jump into condition variable just so that -pron- can start think about how to write good multithreaded code now of course the idea here can actually be generalize to multiple process or even multiple machine run on different network so anyway let -pron- jump in and see what -pron- have get all right so the story so far this do check -pron- be on laptop mode yet good write the story so far be that i could have fix sized ring buffer and so -pron- can see -pron- here that here be -pron- buffer take some value but i only care about the low four bit of -pron- little counter here and each time round this loop -pron- be go to put a new value into -pron- buffer but as -pron- be only use the sixteen low slot here i have to make sure that -pron- block be there be no space",
    "to keep track of where i should read the next value from an -pron- be go to loop around again by play this bit mask trip trick so that i use the low four bit ok so what do -pron- got to actually make sure that -pron- block well in the case that -pron- fix sized ring buffer be full i want -pron- call to send wait here to block in other word -pron- be go to use a counting semaphore for remember that be like a pizza box to actually keep track of how much space be leave right and every time -pron- call sam wait -pron- be steal a slice of pizza ok so this be go to represent the number of free slot or the number of space -pron- have leave inside -pron- datum structure so once that get down to zero -pron- know that that call will block",
    "and when do -pron- change that value when do -pron- actually increment -pron- where -pron- will look down here and -pron- will see oh look -pron- happen after here after -pron- after -pron- remove something -pron- be go to increment this this variable by one ok simile let -pron- have a look at the remove side -pron- want to remove to block if there be nothing in there so let -pron- have another counting semaphore another pizza box and this be go to represent then the number of item in -pron- data structure ok so if that be zero then some weight will block in other word to thread call that will go to sleep and the only time then that that value be go to be incremente will be down here where -pron- change the value after -pron- have put a value into the buffer so -pron-",
    "that -pron- have actually try to remove something when there be not anything there or overflow meaning that -pron- have use up more than sixteen slot and -pron- be actually now overwrite datum that -pron- want ok so -pron- better think about how -pron- want to initialize thing the number of space -pron- want ask this first one that should be initialize to say sixteen and what about s two that should be initialize to zero in other word very first call to remove will block ok so -pron- have do that -pron- have get well name to -pron- as well ok so what do -pron- think about this suppose as one be actually initialize not to sixteen but to seven would are fix size ring buffer still work",
    "before before try to add anymore be block so visually -pron- could imagine that would be a bit like a little train here let -pron- kind of sketch out -pron- circular memory here to do pdq right so -pron- be pudde value in and i can put in one two three four five six seven and at some point if i try to put more than that in ok -pron- be block at this point but at some point i start call remove so remove will read back that first value and change the out index to be point to the next one and of course add one to the pizza box so now if -pron- have get a thread wait to add new value -pron- can continue so -pron- have this little",
    "ok what about if -pron- set -pron- initial value to thirty two well now -pron- have a problem because -pron- be not stop the length of train from exceed the size of -pron- ring buffer so -pron- can imagine a be able to go round and actually overwrite entry which -pron- actually still need so later when i come to remove value yes i still build remove value but actually now -pron- be remove recently add value i can no long access the old value so thirty two will not work this actually large than the size of -pron- ring buffer ok right so can -pron- tell -pron- what be miss from this code and when would -pron- matter right hopefully be hopefully -pron- remember that last time -pron- do this code -pron- put some mutex lock in so what be the purpose of the mutex lock yes so there",
    "two value to occur at different point inside -pron- ring buffer in other word line three here represent a critical section case so let -pron- do that in red ok right so i can not have two thread run this line at the same time ok so if -pron- be go to have two thread try to add at the same time then i better make sure that one happen not asynchronously not concurrently but serialize in the word one after another ok the pizza box do not prevent two thread from try to insert thing at the same time -pron- be only purpose be to make sure that there be go to be at least enough space to add those so if i have two thread call out at the same time and there be two slice pizza leave inside -pron- number space both thread get to continue",
    "then one thread would win and the other thread would go hungry and therefore block wait for another slice to appear and so that would be ok -pron- can continue -pron- concern be though be when some weight do not block at all for either thread and both thread be try to insert at the same time so -pron- both for example may see the same value of in or this plus plus be not atomic so -pron- may not successfully increment the value correctly so -pron- need to make sure that only one third of the time run out and the perfect answer that -pron- be a mutex ok and similar over here i can not have two thread try to remove at the same time so if i care about performance may actually use two different mutex lock here so this be -pron- pthread mutex lock and simply over here i can use a different lock because these actually be go to occur different",
    "about here one be the size of -pron- buffer and -pron- be use the the counting semaphore for that and the other be a critical section and -pron- be use a mutex lock to protect that ok so -pron- have do that -pron- have do that right ok so -pron- have implement a version use counting semaphore what about condition variable suppose -pron- want to make this work on a mac as well could -pron- do -pron- with condition variable and the answer be yes so of course -pron- can so condition variable be more general purpose than count semaphore and -pron- would replace this same weight with the kind of code that -pron- see with -pron- cookie eat a code where -pron- check this value safe be equal to zero and if -pron- be -pron- would be call p three condition"
  ],
  "f98ba734-0314-4594-abb4-128d7495d297": [
    "ok so symbolic link what be -pron- and can i have one yes so -pron- can have -pron- -pron- be really easy and -pron- do a lot of work for -pron- ok so here be the idea what if i actually make a tiny little text file and inside this text file let -pron- call -pron- little text file say follow i actually just have a little piece of text and -pron- just look like a path the path -pron- may be a relative link or -pron- may be an absolute link so for example -pron- may say dot dot slash dot dot in which case this relative path be relative to the directory of the actual symbolic link or -pron- may put for example actually i care about say like medium slash hollywood and i can put all of -pron- favorite disney film inside here for example ok right so i can very easily talk about other directore on -pron- system and as -pron- see there be",
    "forever right so that be the idea of of a symbolic link how do the system know that -pron- should treat this piece of text as a symbolic link as oppose to just a regular text file and the answer to that be there be a mode bit there be a mode bit that say this file be actually a symbolic link so -pron- have see how -pron- make one so from the shell -pron- say ok -pron- want to make a link i want to make a symbolic link and -pron- start off with the target where -pron- should end up so for example if -pron- have a whole load of android sdk be -pron- may say for example alright so -pron- have get somewhere on -pron- machine say like an install directory and -pron- have get say an android sdk and i may have",
    "so now when i update to a new android sdk i can always create a new symbolic link call late and so -pron- be very easy for -pron- to talk about the late sdk that -pron- have get instal and when i start work on a project i could do thing like cd into late and i will actually be inside this directory some people create a lot of symbolic link inside -pron- home directory so that -pron- be very quick to navigate to different project even though the project -pron- may be bury deep inside deep other kind of nest directory structure ok so something -pron- can do which be -pron- know the symbolic link by default -pron- never see this trick right -pron- never notice that bury deep inside -pron- as a file -pron- never actually see -pron- be content unless -pron- use read link read link say do not follow the symbolic",
    "the fact that -pron- be a symbolic link and give -pron- -pron- content instead right so let -pron- have a look at this let -pron- make some other right so i can say see if i actually have any in this directory right now ok -pron- do not look like -pron- let -pron- make one let -pron- make a symbolic link to say -pron- be in a kind of dark forest or exit that say if -pron- go east -pron- end up in the same directory ok so not go to go anywhere so that be -pron- east ok let -pron- have another one let -pron- say if -pron- go north -pron- end up inside one right so ok so now when i look at all the file -pron- will notice that when i do ls with hey show -pron- everything that -pron- be",
    "call east here actually -pron- be take to the same spot if -pron- go north actually be take -pron- to one so of course if i do read link on say east -pron- be go to tell -pron- dot so let -pron- try this let -pron- go into say east alright and here i be in east that be -pron- present working directory and course what be there here guess what more file and -pron- happen to have a directory call east so i can go here as well east there -pron- go right and ok and of course i can keep go easter for as long as i want ok so -pron- current directory be change and each time i look inside the current directory i can see a bunch of file and one of -pron- happen to be a symbolic link ok so how can i detect symbolic link from c code clearly ls can do -pron- -pron- be give -pron- some hint about these different file so let -pron- do all again there -pron- go -pron- can see that",
    "side over here to say hey the mode bit be tell -pron- -pron- be a symbolic link ok so how can i detect that right let -pron- show -pron- how not to do -pron- -pron- remember that i say oh look here be the be link why -pron- have to skip the -pron- inside here why -pron- have to save one character -pron- will do not know but let -pron- let -pron- sketch out a solution to see why -pron- do not work -pron- may want -pron- may be tempt to say right ok let -pron- have a look at this file for example take a look at this thing call east and ok and -pron- will write the result into s assume that work so if this return zero -pron- know -pron- work ok i surely could say right tell -pron- be this a link",
    "the answer be no if i look at the mode bit of this -pron- would actually say nope this be a directory why because stat just like open follow the link in attempt to open this file or this directory the kernel automatically say oh i see -pron- be try to open a symbolic link -pron- be go to follow the money right so that be not very useful -pron- 'd actually like to know this time that no do not follow if this be a symbolic link and how do -pron- do that ok so with stat rather than use stat -pron- be important to call l stat and l stat work just like stat except when -pron- be actually look at a symbolic link if -pron- be a symbolic link then -pron- be actually go to tell -pron- the meta information the inode information about the symbolic link -pron- be go to find out when the symbolic link be create if -pron- use this"
  ],
  "fa389ce6-5fa6-4288-b2a2-949e66af677a": [
    "ok so -pron- have kind of talk a little bit about this idea before so -pron- could i implement p thread mutex lock just by disable interrupt on on the cpu so the idea here be that if -pron- code be run on the cpu if i disable interrupt then i can not be stop become agent smith out of the matrix that now i own the cpu so no one else can can take -pron- for -pron- so one of the limitation of this first of all that yes -pron- can ensure that -pron- be the only one go into the critical section if one there be only one cpu ok so if i control the one and only cpu and i can not be interrupt then i get to do everything inside the critical section until i give up the cpu ok so provide",
    "-pron- data structure no one can stop -pron- because i disable into app ok the second be that i require an here be a big problem here be that actually require sufficient privilege to disable the interrupt and because this be such a powerful operation by default that be disabled for normal user program -pron- need interrupt in order to make a cpu stop run one thread and start run another in order to handle hardware interrupt -pron- too do to device iot device be ready to either take datum from the system or give datum from the system for example the network card may report that -pron- new package arrive and here be some datum or a disk or solid state disk may report hey -pron- have now finally get the datum -pron- can now read this into memory or gpu",
    "of reason why -pron- in over a normal complex system -pron- can not just disable disable interrupt ok so this be one solution to the critical section but like i say -pron- be not a generally useful solution to the critical section -pron- need to find a way to be able to kind of implement these correctly and will talk about some algorithmic concern about that in the future instead now be what -pron- have get a real challenge for -pron- which be i want to implement a barrier in fact -pron- be go to give -pron- all the code that -pron- need here -pron- be i just want to implement a barrier that will wait until five thread call this method call this function and -pron- have get to keep track of how many there -pron- go and all -pron- be go to give -pron- be the follow code which use a counting semaphore so -pron- get to choose how what -pron- would like to implement what -pron- 'd like to"
  ],
  "fbf50bc7-ae3a-4768-be0b-502c42ec38cc": [
    "ok so let -pron- play with race condition and then fix with block right so what do -pron- think the following code be go to print here -pron- have a counter variable which be global as -pron- can see anybody can reach into -pron- and read -pron- or write -pron- and in fact like a little function here that be go to loop look like a million time and each time around the loop -pron- be go to implement that counter now the value of eye a stack variable which mean i can create a whole load of thread and each one be go to get -pron- own value of i but -pron- be all pick at this global variable this counter so -pron- be go to share access to that that variable right and then -pron- have get some code on here peter create peter create and then two p thread join so out of the two p thread join -pron- print out the value of counter right so what do -pron- think about this code what be -pron- go to print let -pron- give -pron- ago so i need to compile -pron- ok -pron- have compile -pron- off -pron- go right -pron- do not print out of course",
    "value each and every time so why do -pron- think that be a key so actually there be two reason the first one be because -pron- the value that -pron- get depend upon the actual interleaving of -pron- two thread to how -pron- do this increment so even though -pron- plus plus hear the big news flash be that this be not an atomic operation so what -pron- mean by atomic well -pron- enough uranium together no -pron- do not mean that what -pron- mean by atomic here be -pron- be that an atomic operation -pron- behave as if -pron- complete as one complete operation but that be not true not for plus plus here so instead what be go on -pron- be say ok read the value of counter add one to -pron- and then right back into memory so there be three distinct stage here",
    "need to read the following four byte please ok -pron- pull that into a cpu register then -pron- invoke the arithmetic logic unit to add one to -pron- register ok so -pron- have recalculate new value and then -pron- take that bit pattern and -pron- throw -pron- back towards memory here -pron- go memory have a new value the add one be extremely fast writing to main memory be extremely slow compare to what the cpu can do so of course practice -pron- have level of cash operating but let -pron- not worry about that model complexity today i just want to point out that be actually kind of three step read and add one and a right so even though -pron- be write this plus plus -pron- actually take three distinct step alright so that be the kind of first idea be that -pron- have get two chef two thread run as fast as possible really from memory add on write -pron- back",
    "go over and read the same value and then -pron- add one at about the same time and then -pron- write back -pron- new value so instead of increase the value by two -pron- have only increase -pron- by one -pron- can imagine more extreme variation where one thread be run a bit slow perhaps -pron- cpu keep on be interrupt because -pron- be be ask to transcode some video as as i as -pron- be talk to -pron- and so now the other thread be able to run forward a bit so imagine the follow one thread reach in grab the number i know -pron- be do the calculation or at least -pron- be go to get to the calculation soon meanwhile the other thread reach in grab the number add one send -pron- back breach in addison number as well and send -pron- back which anson do like like a million time then -pron- first red wake up again a few i get cpu again",
    "one right -pron- back so -pron- be just manage to write over all of those result take year back to a really low number so that be kind of the problem of just let -pron- thread run without any kind of proper synchronization so i mention there be two bug the other one actually be just an insidious copy paste bug do -pron- spot -pron- ok so -pron- call pthread create here or with the same id address here which mean that -pron- second thread id here be actually be never initialize so -pron- never actually truly go to wait for that second thread to actually complete case so so -pron- should fix that let -pron- make sure that -pron- be write into two different two different variable right so i promise -pron- start use p thread mutex lock so here -pron- go let -pron- figure out how -pron- can fix this program",
    "get -pron- self lock will make -pron- a global so all -pron- program can see -pron- if i do not use global -pron- 'd have to pass -pron- around or least pass a pointer around to -pron- right so p three edit music type -pron- be go to call -pron- a duck i want to imagine little duck quack quack that be very important little lock and today -pron- will use the the magic value piece red mutex initializer initial lie be ok wait so how can -pron- use this doctor to make -pron- program more deterministic ok some various way -pron- could do this let -pron- let -pron- first -pron- will come up with a new function here ok how do -pron- feel about this so before do any work in -pron- data structure -pron- be go to grab the duck here so how do i do that as a pthread mutex lock and here be the address of -pron- variable",
    "this compile run -pron- oh -pron- never finish can -pron- see why ok so -pron- problem be that -pron- acquire the lock but -pron- never let -pron- go so when the second thread start and call preferred mutex lock -pron- be go to be wait for a very long time an infinite amount of time -pron- never get that duck that duck have be steal by the first red and never return so as a result the second thread will never finish so as a result rp so join in maine will never complete so as a result will never put the counter ok i think -pron- well fix that let -pron- put in -pron- pthread mutex unlock there -pron- go after i finish in -pron- surgery",
    "at which point be this anybody else wait for the duck -pron- too can grab the duck and then carry on so now let -pron- run this ok and ha who have be yes guess gratulation 's -pron- have manage to make another finished lee complicate program to add up to two million by use now kind of three for thread the main thread which do not do much -pron- just delegate like a manager do not actually do any work and then two thread which be independently add up a million but -pron- do notice that actually -pron- do not actually do any of the work in parallel first a thread probably the probably thread one but who know actual add a million and then when -pron- be finish -pron- release the duck and so the other thread get to continue -pron- require a duck carry on add a million to -pron- and then unlock the duck ok so maybe -pron- should allow -pron- thread to work in small",
    "a version three right well now -pron- be go to only acquire -pron- doc for a very short period of time ok so now -pron- be go to rap each call navigate to before i change the counter -pron- be go to acquire -pron- mutex lock so now right -pron- will k von function three so for a million time -pron- acquire the lock -pron- have want to counter and then -pron- unlock the duck ok so let -pron- compile this run -pron- ok -pron- give -pron- a correct answer and will always give -pron- a correct answer but be now actually a little bit slow do -pron- know why well in this contrived example add one to a variable be an extremely fast operation compare to a typical",
    "datum structure this share datum structure occasionally so -pron- have just manage to modify -pron- original program which would just increment the counter to now access the mutex change the counter unlock the mutex so -pron- have actually add a lot more complexity in term of number of structure that have to be execute for each iteration vanderloop ok so that be not do not make a program any fast and in fact -pron- slow -pron- down a bit just because -pron- be use -pron- lock in such a fine grain manner but -pron- do not sure that be two thread could actually carry carry on now and finish -pron- about the same time so now -pron- have get an interleaving of -pron- two thread but -pron- have ensure that the actual change of the datum structure only happen in one thread or the other thread at a time",
    "-pron- have get two thread two cpus actually try to read a right to the same piece piece of memory what if that value be cache or the good news actually be deplete mutex lock take care of that as well for -pron- that if this cpu support some caching mechanism peter mutex lock will ensure that that value be flush out to main memory if any other cpu want to read these magnet so technically -pron- be call memory fence what memory barrier -pron- be not go to write code that do not explicitly instead -pron- be just kind of allow the factor period mutex lock make -pron- world say again make -pron- program be equal to all the process be -pron- have actually run at least that be what -pron- appear to be like"
  ],
  "fc0386f0-e3f8-43ca-97ae-dd0bead788b2": [
    "hi ok let -pron- get start and have a look at a little macro problem here so -pron- be go to macro after call -pron- max take two parameter and -pron- suppose to calculate the maximum value of a or be alright -pron- use the ternary operator as lesson be there -pron- turn a oh wait that be not right ok so let -pron- fix this -pron- can see that actually -pron- have get item over the long route so -pron- could for example swap this to be if be great be great than be then -pron- want a otherwise be great so -pron- define a macro now let -pron- use -pron- perhaps -pron- can tell -pron- what be go to go wrong with this code here i be use -pron- down here with a maximum of ten and five and after that add one so what be the problem here -pron- will give -pron- five second ready go ok so -pron- problem be that max be not really a function",
    "to see what this will be expand to woman be preprocesse run -pron- will expand this too be tend great than five if so use the value of ten otherwise user value five and then -pron- be almost do -pron- -pron- just get around to the plus one in the semi colon so whoop if -pron- run this -pron- can see the rather than print out of the maximum of ten and five and then add one -pron- be actually go to print out either value of ten or six will never actually get to add that one to the ten so rather than -pron- 'd expect -pron- valuable eleven in fact -pron- be go to print n so -pron- actually just run this let -pron- comment out -pron- explanation and try -pron- a case so -pron- will compile this macro max ok and run -pron- micromax k -pron- bring out ten not eleven yes so -pron- have a problem ok so why do -pron- have a problem the problem",
    "to prevent these kind of bind problem rap the whole thing in parenthesis and in fact -pron- could go far unwrap each potential parameter expansion with parenthesis just to make sure that -pron- do not access that the president be as -pron- expect to be but even that be not perfect because -pron- could imagine if i be pass in a variable the side effect for example suppose i say max a plus plus b if -pron- use this macro then then a plus plus potential evaluate twice in other word -pron- have add two now to a rather than just one ok so as a general rule of thumb do not do this if -pron- intend to function write a function and try to avoid this kind of sophisticated use of macros unless -pron- be absolutely necessary to"
  ],
  "fc1cbfed-4866-4545-9574-b49c350aa1aa": [
    "hi welcome to let -pron- twenty six ok so let -pron- get start today -pron- be go to look at tcp client and server and first of all let -pron- just have some fun with some inbuilt thing ok so if -pron- have get python three instal then -pron- already have an inbuilt web server ok so let -pron- to navigate to a certain directory and then -pron- be just go to start -pron- right so python off -pron- go let -pron- do python three and -pron- will say ok i want to load the module http dot server ok now right so office go off -pron- go -pron- be list as -pron- can see on port eight thousand so let -pron- connect to this little web server case so right so i will now go to firefox and connect there and do -pron- have a connection ok yes -pron- be alright -pron- be happily respond and finally",
    "suppose by default -pron- do this all the file and if i click on story dot text for example i can see the content of the file ok right so if -pron- do not have python three instal -pron- get python two then i think the similar module be something like sorry simple http server and in both these case -pron- can specify a port number so if -pron- want to comment that one up if -pron- want to specify a port then i could specify a different part number here so let -pron- choose for example if i try to do a low port number like poor eighty -pron- will not be very happy -pron- get permission deny because -pron- be not root right now on this system",
    "to be an administrative build to listen on those port so let -pron- not connect on let -pron- not listen on port eighty let -pron- list on say port eighty eighty ok great and off -pron- go again so now again i can make a connection use -pron- favorite web browser and off -pron- go and see the content again wait and -pron- will see this particular web browser also print out who be connect to -pron- and when and what resource -pron- be request so another useful tool be call netcat let -pron- have a look at that case so netcat be a swiss army tool be well worth -pron- instal for when -pron- be play and or debug with simple protocol use tcp and udp netcat can behave as client netcat can behave as a server so once -pron- have instal",
    "or mac port install on a lennox system -pron- may be do thing like a pt install -pron- just need to find a quick google look up will find -pron- anyway so let -pron- look at netcat so netcat behave a bit like cat except rather than concatenate from file -pron- can send stuff to and from a network connection and by default all -pron- need be a host name airport and after that -pron- can start to describe where -pron- want to make -pron- to listen on a port where -pron- want to use tcp or udp etc etc etc so let -pron- try this i will do netcat and -pron- will connect to -pron- localhost use ip four so right and -pron- be will talk to port eighty eighty -pron- case so great -pron- have connect i do not have the",
    "alright and -pron- will see that -pron- little web server over here in python do not like -pron- message here be be hey bad request and response to -pron- request -pron- send the follow -pron- say ok -pron- i do like -pron- -pron- be as an error code of four hundred and -pron- do and -pron- shut down the connection so let -pron- let -pron- let -pron- try again but this time -pron- will send a valid request ok so i happen to know a little bit of http and valid request look like this so -pron- have get and then what would -pron- like well how about -pron- could have the story dot text and the protocol that -pron- 'd like to use today be http",
    "have a blank line and there -pron- go ok so this be what the server reply be there be right yeah yes i have that resource for -pron- so -pron- be ok so status code two hundred tell -pron- a little bit about -pron- the date and the content -pron- be give back be just plain text that be a mime type and there be go to be twenty one byte case so after -pron- have as a complete after -pron- see this black line -pron- expect to have twenty one more light -pron- get twenty one byte -pron- know -pron- get the whole file so there -pron- be once upon a time or if i connect again and i just say ok give -pron- the homepage right so again i need to say what protocol k a new line -pron- will see that great -pron- be now give -pron- a content type of text leave html in other word a web page and the speaking",
    "nine byte and here -pron- be and if -pron- look inside that -pron- will actually see here be the list of file in the directory so now -pron- could actually kind of click on those link and load -pron- for example so great -pron- have get -pron- a web server use python and -pron- have get this swiss army knife call net cap -pron- can even use netcat to kind of transfer file as well right so right so what i mean by that be -pron- can set up netcat to listen on one end and use netcat on the other end to to send a file or vice versa sooo let -pron- get out of python -pron- do not need that anymore instead how about -pron- log in remotely to a different server so -pron- use to be a very useful command for this call telnet the only problem with telnet today be that -pron- send everything",
    "send someone else on the internet or someone else that be run a router or even possibly in the same subnet can sniff -pron- packet ok so that be a problem -pron- will be able to sniff -pron- password ok so telnet be barely use today there be a few case of embed hardware that may offer a very very simple telnet interface say just for debug purpose but today tell netizen not instal by default on most machine -pron- have to install -pron- -pron- let -pron- show -pron- one still fine example use of telnet and that be not follow that there be a telnet server run on the follow ip address so let -pron- try connect to -pron- ok right and off -pron- go and rather than give -pron- password prompt",
    "and those character include terminal control character to do thing like clear the screen and as -pron- can see -pron- actually play a movie and in fact -pron- play a complete ascii version of star war a new hope so -pron- will leave that go and -pron- will see where -pron- get to practice at the end of this video alright so let -pron- talk about telnet -pron- talk about netcat all great kind of debug tool especially when -pron- too will be write tcp client and server so remember these guy as as useful thing that be useful to debug and check client and server ok so let -pron- just be serious let -pron- review how -pron- make a tcp tcp client ok right so if i want to make a tcp client remember tcp be a transmission control protocol this dark color there -pron- go",
    "nice stream a data stream ok so how do -pron- set one up right so if -pron- be set up a client all i need to do be first of all -pron- be go to be lazy and call get address info this do a lot of heavy lifting for -pron- to actually figure out the correct parameter -pron- be go to send into -pron- next two call so technically this be not formally require but -pron- do make -pron- life a lot easy the two thing which be definitely require be of course idea a socket then a socket be there abstract object own by the kernel which allow -pron- code to talk to the outside world to be able to talk to other socket maybe on this machine but maybe not ok so once -pron- have make a socket and for a client all i need to do be ask -pron- to connect so let -pron-",
    "call the parameter i need for here be go to come from whatever get address info return now -pron- may see a little bit of traffic actual packet leave machine -pron- machine first of all when -pron- call get address info because -pron- be go to convert say a host name to an ip address and of course -pron- will see packet leave when -pron- call connect handshake be require between tcp client and server and so the moment -pron- could connect -pron- be go to send out a packet to that server to say hi please will -pron- connect -pron- let -pron- do a handshake let -pron- do -pron- tcp handshake right now one surprising thing about get address info be that -pron- can return zero one or more result and if -pron- remember that the result be this struct",
    "-pron- will see the last entry inside here let -pron- just move this out the way let -pron- do -pron- this way let -pron- move scroll this over here -pron- go the last entry be actually link list and tree have -pron- next pointer and that will be no so if -pron- be write kind of code very lazily or just want short simple demo code -pron- can ignore the fact that -pron- return multiple entry but if -pron- want to write robust code then realize that there may be more than one way to connect to the server for example perhaps the server upper offer an ip four address and an ip six address so -pron- may try both -pron- may try one after another all -pron- may create a whole lot of thread and do -pron- asynchronously and see which one actually kinda connect fast ok so let -pron- let -pron- just remind -pron- about what what the entry",
    "what kind of connection -pron- want do -pron- want ip four ip six or some mixture do -pron- want to do something else for -pron- -pron- have there dress family so that be do -pron- care about excuse -pron- i before versus ib six -pron- have the socket type which be do -pron- care about stream base socket or a datagram another packet light socket the protocol be usually leave zero -pron- do not know now -pron- have to worry about that right but what be go to give for -pron- in the result object be correctly set up socket address which be go to be great for call to either connect or blind however see do not allow -pron- to use inheritance so this strat here this socket address address be the simple kind of socket address and and for different kind for example ip six -pron- can actually",
    "why -pron- need also to pass in how big be socket address so that be why i will see all under cast to this very simple type of struct and also -pron- need to pass just how big be real struct be just as a kind of a way to verify that -pron- be read the reading and write byte correctly in a valid struct ok so let -pron- get back on track hit the skews -pron- get address info be a complicated beast -pron- be quite long but -pron- -pron- do not because -pron- call many other call include do -pron- dns look up to convert host name to an ip address -pron- actually have a special way of return error rather than return something",
    "value mean as to how -pron- fail ok there be something like gi a great address info store error and that give -pron- a string ok so -pron- will be see that in the actual code that -pron- write also realize that if -pron- return a non zero value then -pron- mean -pron- never actually find as a way to connect and so that result pointer probably have not be change so just assume that -pron- do not point to anything valid right ok some other thing -pron- need to know so i mention ip four or thirty two bit address scheme that today if -pron- be to pick up a random packet would discover -pron- be an ip for base packet but -pron- be try to transition over to a more flexible addressing scheme which be much large so today -pron- would like to use ip six but",
    "an invite that like this version six be that -pron- be address scheme use one hundred and twenty eight bit for address so that should be big enough for everybody to to one hundred and twenty eight be a lot well than just two to the thirty two which be all -pron- have for ip four ok so in code how do -pron- specify that -pron- 'd like an ip for ip six address answer just use this constant constant for the address family if -pron- truly want to just an ip four address then -pron- can just say underscore on -pron- for -pron- p -pron- before ok that be color out there because -pron- let -pron- try ip six right now speak if ip six address here be one which be very useful -pron- be -pron- home address ok say here be -pron- notice",
    "point zero point zero point one this be special ip six address that if -pron- send packet to this address -pron- be not leave -pron- machine be define to be -pron- local machine right so let -pron- put this together now let -pron- actually set up a tcp client case so -pron- be go to just quickly review how do -pron- get address info right and i want to k just fix this this be actually not go to be a client this be go to be a server right ok and just remind -pron- how -pron- do this so -pron- be go to set up -pron- hint object to say everything -pron- like about this connection but what be important be to remember that there be many field in that structure that -pron- be not go to touch so let -pron- initialize -pron- all to",
    "-pron- be and set multi zero like and how many byte would -pron- like to set to zero gay so if -pron- use the pointer here that would be incorrect -pron- actually want the size of the whole struct so i could write struct address info like that all i could just say size of hint so great -pron- have say all to zero now i can start initialize the field that -pron- actually care about right so -pron- want ip four so inside here -pron- can say address family inet by the way there be an inet any which mean so if any which mean -pron- will take ip for ip six i just want to serve i do not care about the exact mechanism of the ip address but today in this problem -pron- care about dinette four so let -pron- use that",
    "if i want to use datagram in other word kind of packet base connection then i would use socket d - gram here what but the choice joyful thing about to stream be i could just shovel plight -pron- down and know that -pron- will appear out the other end in the same order and i do not personally have to worry about miss packet and drop packet and duplicate packet and all that good stuff if a packet in the internet do get lose then there will be a momentary pause whilst the other end request that packet to be reset anyway so -pron- have set up request here now i need to go get address info so let -pron- do that right will call get address info and just confuse i only have two result here so -pron- will call this one",
    "what so what do -pron- need to hear well first of all -pron- need the ip address i can specify that a string either as an actual string like this or i can specify -pron- as a host name so for example like illinois dot edu ok if i do this then there be probably go to be a packet leaving -pron- machine in the next moment to say hey -pron- need to figure out the ip address of this host name can -pron- help -pron- please right and then -pron- need a port number so the port can actually be specify symbolically so i can say well i care about the default port connect that be use for this protocol this secure https all i can specify precisely so i can say ok i happen to know that be four",
    "develop some example and -pron- laptop and -pron- be run an encrypted https service web server on some unusual port late for example eight four four three ok and -pron- choose that number because -pron- be great than one thousand twenty four be not a privilege port so anyway let -pron- pick a number right now -pron- need the hint so here be the address of -pron- hint and finally -pron- need here be the address of that pointer please change this please and -pron- will do so if -pron- successfully manage be to take the information -pron- give and figure out a way to connect to that server ok so what would -pron- do for each entry here ok so for each entry i would call that i want to suck -pron- and then -pron- be go to try to connect and i would use the result inside each of these result object to that list to",
    "be one other thing -pron- can occasionally do with a client but -pron- be not normally necessary -pron- can use and now -pron- be go to see bind when -pron- get to talk about set up server but realize that normally -pron- do not care about the port number that be use locally and -pron- do not care about specify exactly which network card -pron- should use -pron- 'd like -pron- machine to figure that out automatically for example suppose -pron- have a machine where one network call talk to -pron- corporate internet and the other network cut talk to the internet and other network card may be connect to say a fiber line that run under the atlantic ocean -pron- may want to explicitly specify which network card to use rather than let"
  ],
  "fccd9ec6-d393-407f-823e-632afca9a1c3": [
    "ok so deca solution possibly the most famous because -pron- be actually discover fairly early so whereas peterson solution from the eighty this be from about the early nineteen sixty ok so let -pron- have a look at this and the first thing -pron- need to notice that -pron- be more complicated but the second thing be that -pron- be kind of similar that -pron- be go to each each of -pron- will have a little flag to say whether -pron- actually want to be inside the critical section so this be the moment where -pron- actually go to start modify datum structure etc when -pron- better be assure that -pron- be the only further process inside that piece of code and so all of -pron- logic to make sure that occur occur up here and then notice -pron- have get this shared turn base variable again which will act as -pron- tiebreaker decide who win now i like to think of the deck a solution",
    "-pron- move the flag up and down and quite a bit and -pron- say look first of all -pron- be go to express -pron- intent to be inside the critical section but if i see that -pron- flag be also raise then one of -pron- be go to have to be a gentleman and if this turn base variable be currently set to -pron- id then -pron- be go to defer to -pron- ok so let -pron- learn -pron- flag and will wait while -pron- be do -pron- stuff and wait until -pron- have change the turn turn variable to to be -pron- id instead ok so -pron- be go to keep wait eventually -pron- will leave the critical section and then -pron- will raise -pron- flag to say ok i really want to be inside this critical section ok so next time around the loop however even",
    "term base variable have be set to -pron- so great i can be inside the critical section after i finish -pron- be go to change this term base variable to point to -pron- mean that if there be a tie breaker then -pron- get to go forward an i get to wait so do -pron- see how -pron- have satisfied mutual exclusion meaning that only one of -pron- can actually be inside the critical section to the time -pron- have get bound weight meaning that i do not have to wait for -pron- a fix number of time before -pron- be allow to be inside the critical section so basically after -pron- have be inside a critical session -pron- become the gentleman -pron- allow the other thread to go first and finally -pron- have progress mean that if -pron- be the only one around that want",
    "i can go straight in this previous one be important in case where say -pron- have get one thread or process that need to be inside the critical section a lot so -pron- may come through this code many many time hundred or thousand of time and will never see the other process between though these all of these update so -pron- have to be able to spin through this quickly and get into the critical section without have to wait for the other process to be to want to be inside the critical section so that be decker solution -pron- do not need to remember the exact solution -pron- should be able to recognize -pron- however -pron- do not need to necessary drive -pron- for cs two forty one but -pron- should be able to in an interview situation kind of be able to argue about the purpose and why this exist and how -pron- evaluate these different solution the last thing i want to talk about be that though i mention that software implementation"
  ],
  "fe9fc313-44a9-4bd8-9b72-c6ae61dd1f87": [
    "ok right so let -pron- analyze this challenge ok so -pron- have get a global variable call firework here and inside -pron- main method -pron- be go to do -pron- be go to create a whole load of pizza -pron- be ok and make a note of -pron- thread i ds pass in the firework function ok and then after -pron- have do that -pron- will set firework equal to one and then will call precondition signal so -pron- know that be go to wake up one thread now -pron- want to wait for all thread to finish here so i could write a for loop to call p thread join on all of -pron- thread i ds but i could also be lazy in to say ok pthread less exit the main thread so that -pron- never return from maine so i could call p thread exit here key right so great -pron- have implement that now actually let -pron- have to think about how -pron- can implement the firework right so what do r firework do k right well",
    "for for sure have so -pron- have get -pron- have get the mutex lock and all thread that run this code again to acquire the same lock and then -pron- say well while firework be zero corporate recognition weight in other word if -pron- firework thread start up here and -pron- start up early then -pron- be just go to block -pron- for but -pron- be go to ask -pron- to release the mutex lock and lock inside here so go back to the kind of first code remember -pron- create all of the thread initially back when be firework variable with zero -pron- be only after -pron- have create all five well -pron- say ok now -pron- be time for the firework ok so let -pron- get down here ok right so what do -pron- do after this point ok when -pron- escape out of here where a scaping",
    "zero and the very first thing -pron- do be call p three condition broadcast in other word re that fire bell wake everybody up in this may be sleep inside this condition variable ok so now all five of -pron- thread definitely work up ok so i implement increment the value of firework i print out oh and that value and then i decrement -pron- ok so what be go to be the large value this code will print one two three four five six what do -pron- think so just as a reminder -pron- have get five thread run this and the only way -pron- can escape out of this code be after firework be no long zero so what be the maximum possible value that -pron- may see from this first to run this hundred or thousand to a million time what be the large integer that would expect here ok so think about that pause this video and make -pron-",
    "think about this for five second and then -pron- will review the answer ok wait time up so let -pron- let -pron- have a look at the key key detail here the key detail be a mutex lock -pron- mutex lock allow -pron- to reason strongly about the number of thread which be actually run in this code because -pron- have acquire mutex lock mean that any other thread that want to run have to also require -pron- so all of these line of code can only be run by one thread at a time if the thread have go to sleep inside p thread condition wait there only allow to escape out of that after -pron- reacquire the mutex log so that be the key idea that only one third of the time can be run this piece of code and -pron- allow -pron- to actually reason about",
    "first thread will see of firework value of one because -pron- change -pron- upstairs in the main method so -pron- implement so -pron- increment -pron- to two case of wig the first escape out of here will will print out too and then -pron- decrement -pron- down to one again and then -pron- unlock the mutex ok so the next step that come out of here will only escape out of p three condition wait after -pron- have unlock the mutex so -pron- will also see a value of firework of one -pron- also do a big forecast wake everybody up and most be too and so -pron- will print out the value of two etc right and so on the next thread will come out check the condition for the while loop ok that be no longer true so -pron- come to an do the same thing increment -pron- from one to two and then two to one and then unlock the mutex which allow the next set to escape -pron- check the value and so on",
    "to kind of prove -pron- right so -pron- have ok compile -pron- eh why be -pron- machine slow ok there -pron- go -pron- get out all right and -pron- see every firework every thread wanna see the value of two and -pron- could do that through this strong reasoning thank to the mutex log ok wait a couple of quick question be why do -pron- see all the firework go well remember -pron- work up one of -pron- here and then that far work be not man work up the rest now do -pron- have any possible race condition here yes -pron- do so -pron- actually just talk about a version of this in the previous video that there be a small race condition small possibility that these two line of code here can i move that over or to keep throw box right when i change the value folk and then i call peter condition that could happen",
    "right inside there if that just that moment in time then what be go to happen -pron- have actually call precondition signal but no thread be yet sleep no thread be yet block inside condition wait ok so be to fix for that and the answer be to actually log on the same mutex here so if i call pete say mutex lock here and then unlock afterwards i can be sure that that will can only occur either before another thread be acquire mutex or after the all the thread have call pizza hut or so at least at least a threat be currently get mutex will then call pre take additional weight",
    "the mutex and then -pron- get to run as well another thing this code be kind of highlight be that that -pron- can create thread but peter create do not wait for -pron- to actually start so this this code be an attempt to say ok let -pron- create all these thread and actually -pron- be go to make -pron- own barrier inside here so -pron- will not let anybody go until -pron- have actually create or five thread and also kind of start up so but this line of actually change the firework to one here could still actually technically occur before this five thread of actually start all -pron- have just simply say be to say ok create -pron- and at some point in the future please run alright so lot of interesting interleaving"
  ],
  "ff918b22-18b3-4e5f-96f5-e6eb462fbefd": [
    "ok right so this be a fun little challenge what do -pron- think these two line do ok what be the difference here so -pron- be copy file and -pron- be use shell globbing to say ok shell go into the parent directory find -pron- all file that match anything provide -pron- end with kind of dot c o k the difference between these two line be the first one create include a little at the end so as -pron- know a little bit by -pron- just mean the current directory so what do this code do -pron- copy all of the source code from the parent to -pron- current directory great what about this one ok so what do this do this -pron- have just get two file for example this may expand to dot dot file one dot c and dot dot file",
    "be careful this little get sure have be people in the past and -pron- will bite people again in the future right but with that let -pron- change tax actually have a look at a new version of something fun -pron- can do with mmap which be guess what -pron- can use mmap without even have a file to write into so -pron- be kind of see this here -pron- be right so here be -pron- kind of main method today instead of use with mmap to say hey here be -pron- file descriptor please map this into memory -pron- be go to say actually i want anonymous mapping meaning that -pron- do not actually map to any file at all so why may i do this because i can create some shared memory between",
    "this be go to be the number of byte -pron- want let -pron- decide how -pron- want to use these bite so -pron- do not need to execute any code here but -pron- do want to be able to read and write to this page of memory and lastly because -pron- be go to fork -pron- do care about change that i make inside this file to be see by -pron- child process as well so let -pron- ask nmap for shared memory as well ok so first thing will do with steel quick error check if this return negative -pron- know -pron- do not have any byte there now -pron- can actually use this to communicate between the parent and the child so here -pron- go let -pron- call -pron- two two piece of code here -pron- have get child and parent and see how that work and i can directly right into this memory from the child",
    "in this case -pron- be go to consume each message so all -pron- be go to do be just after i read from if there be a valid string there that be non there be more than one character then let -pron- print -pron- up and otherwise let -pron- put the termination character right at the very beginning so that i go around this loop 's pass fast as possible every second and soon as i see a message -pron- be go to print -pron- out so as -pron- can see remote procedure call i could could be base on top of this mapping if i wish as a way to share share information between a child and a process and also i hope -pron- can see that use nmap i could implement"
  ]
}